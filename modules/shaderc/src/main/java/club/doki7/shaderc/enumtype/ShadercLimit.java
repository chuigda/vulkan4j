package club.doki7.shaderc.enumtype;

import club.doki7.ffm.annotation.*;

public final class ShadercLimit {
    public static final int AX_LIGHTS = 0x0;
    public static final int AX_CLIP_PLANES = 0x1;
    public static final int AX_TEXTURE_UNITS = 0x2;
    public static final int AX_TEXTURE_COORDS = 0x3;
    public static final int AX_VERTEX_ATTRIBS = 0x4;
    public static final int AX_VERTEX_UNIFORM_COMPONENTS = 0x5;
    public static final int AX_VARYING_FLOATS = 0x6;
    public static final int AX_VERTEX_TEXTURE_IMAGE_UNITS = 0x7;
    public static final int AX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8;
    public static final int AX_TEXTURE_IMAGE_UNITS = 0x9;
    public static final int AX_FRAGMENT_UNIFORM_COMPONENTS = 0xa;
    public static final int AX_DRAW_BUFFERS = 0xb;
    public static final int AX_VERTEX_UNIFORM_VECTORS = 0xc;
    public static final int AX_VARYING_VECTORS = 0xd;
    public static final int AX_FRAGMENT_UNIFORM_VECTORS = 0xe;
    public static final int AX_VERTEX_OUTPUT_VECTORS = 0xf;
    public static final int AX_FRAGMENT_INPUT_VECTORS = 0x10;
    public static final int IN_PROGRAM_TEXEL_OFFSET = 0x11;
    public static final int AX_PROGRAM_TEXEL_OFFSET = 0x12;
    public static final int AX_CLIP_DISTANCES = 0x13;
    public static final int AX_COMPUTE_WORK_GROUP_COUNT_X = 0x14;
    public static final int AX_COMPUTE_WORK_GROUP_COUNT_Y = 0x15;
    public static final int AX_COMPUTE_WORK_GROUP_COUNT_Z = 0x16;
    public static final int AX_COMPUTE_WORK_GROUP_SIZE_X = 0x17;
    public static final int AX_COMPUTE_WORK_GROUP_SIZE_Y = 0x18;
    public static final int AX_COMPUTE_WORK_GROUP_SIZE_Z = 0x19;
    public static final int AX_COMPUTE_UNIFORM_COMPONENTS = 0x1a;
    public static final int AX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x1b;
    public static final int AX_COMPUTE_IMAGE_UNIFORMS = 0x1c;
    public static final int AX_COMPUTE_ATOMIC_COUNTERS = 0x1d;
    public static final int AX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x1e;
    public static final int AX_VARYING_COMPONENTS = 0x1f;
    public static final int AX_VERTEX_OUTPUT_COMPONENTS = 0x20;
    public static final int AX_GEOMETRY_INPUT_COMPONENTS = 0x21;
    public static final int AX_GEOMETRY_OUTPUT_COMPONENTS = 0x22;
    public static final int AX_FRAGMENT_INPUT_COMPONENTS = 0x23;
    public static final int AX_IMAGE_UNITS = 0x24;
    public static final int AX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x25;
    public static final int AX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x26;
    public static final int AX_IMAGE_SAMPLES = 0x27;
    public static final int AX_VERTEX_IMAGE_UNIFORMS = 0x28;
    public static final int AX_TESS_CONTROL_IMAGE_UNIFORMS = 0x29;
    public static final int AX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x2a;
    public static final int AX_GEOMETRY_IMAGE_UNIFORMS = 0x2b;
    public static final int AX_FRAGMENT_IMAGE_UNIFORMS = 0x2c;
    public static final int AX_COMBINED_IMAGE_UNIFORMS = 0x2d;
    public static final int AX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x2e;
    public static final int AX_GEOMETRY_OUTPUT_VERTICES = 0x2f;
    public static final int AX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x30;
    public static final int AX_GEOMETRY_UNIFORM_COMPONENTS = 0x31;
    public static final int AX_GEOMETRY_VARYING_COMPONENTS = 0x32;
    public static final int AX_TESS_CONTROL_INPUT_COMPONENTS = 0x33;
    public static final int AX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x34;
    public static final int AX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x35;
    public static final int AX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x36;
    public static final int AX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x37;
    public static final int AX_TESS_EVALUATION_INPUT_COMPONENTS = 0x38;
    public static final int AX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x39;
    public static final int AX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x3a;
    public static final int AX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x3b;
    public static final int AX_TESS_PATCH_COMPONENTS = 0x3c;
    public static final int AX_PATCH_VERTICES = 0x3d;
    public static final int AX_TESS_GEN_LEVEL = 0x3e;
    public static final int AX_VIEWPORTS = 0x3f;
    public static final int AX_VERTEX_ATOMIC_COUNTERS = 0x40;
    public static final int AX_TESS_CONTROL_ATOMIC_COUNTERS = 0x41;
    public static final int AX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x42;
    public static final int AX_GEOMETRY_ATOMIC_COUNTERS = 0x43;
    public static final int AX_FRAGMENT_ATOMIC_COUNTERS = 0x44;
    public static final int AX_COMBINED_ATOMIC_COUNTERS = 0x45;
    public static final int AX_ATOMIC_COUNTER_BINDINGS = 0x46;
    public static final int AX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x47;
    public static final int AX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x48;
    public static final int AX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x49;
    public static final int AX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x4a;
    public static final int AX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x4b;
    public static final int AX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x4c;
    public static final int AX_ATOMIC_COUNTER_BUFFER_SIZE = 0x4d;
    public static final int AX_TRANSFORM_FEEDBACK_BUFFERS = 0x4e;
    public static final int AX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x4f;
    public static final int AX_CULL_DISTANCES = 0x50;
    public static final int AX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x51;
    public static final int AX_SAMPLES = 0x52;
    public static final int AX_MESH_OUTPUT_VERTICES_NV = 0x53;
    public static final int AX_MESH_OUTPUT_PRIMITIVES_NV = 0x54;
    public static final int AX_MESH_WORK_GROUP_SIZE_X_NV = 0x55;
    public static final int AX_MESH_WORK_GROUP_SIZE_Y_NV = 0x56;
    public static final int AX_MESH_WORK_GROUP_SIZE_Z_NV = 0x57;
    public static final int AX_TASK_WORK_GROUP_SIZE_X_NV = 0x58;
    public static final int AX_TASK_WORK_GROUP_SIZE_Y_NV = 0x59;
    public static final int AX_TASK_WORK_GROUP_SIZE_Z_NV = 0x5a;
    public static final int AX_MESH_VIEW_COUNT_NV = 0x5b;
    public static final int AX_MESH_OUTPUT_VERTICES_EXT = 0x5c;
    public static final int AX_MESH_OUTPUT_PRIMITIVES_EXT = 0x5d;
    public static final int AX_MESH_WORK_GROUP_SIZE_X_EXT = 0x5e;
    public static final int AX_MESH_WORK_GROUP_SIZE_Y_EXT = 0x5f;
    public static final int AX_MESH_WORK_GROUP_SIZE_Z_EXT = 0x60;
    public static final int AX_TASK_WORK_GROUP_SIZE_X_EXT = 0x61;
    public static final int AX_TASK_WORK_GROUP_SIZE_Y_EXT = 0x62;
    public static final int AX_TASK_WORK_GROUP_SIZE_Z_EXT = 0x63;
    public static final int AX_MESH_VIEW_COUNT_EXT = 0x64;
    public static final int AX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x65;

    public static String explain(@EnumType(ShadercLimit.class) int value) {
        return switch (value) {
            case ShadercLimit.AX_ATOMIC_COUNTER_BINDINGS -> "shaderc_limit_max_atomic_counter_bindings";
            case ShadercLimit.AX_ATOMIC_COUNTER_BUFFER_SIZE -> "shaderc_limit_max_atomic_counter_buffer_size";
            case ShadercLimit.AX_CLIP_DISTANCES -> "shaderc_limit_max_clip_distances";
            case ShadercLimit.AX_CLIP_PLANES -> "shaderc_limit_max_clip_planes";
            case ShadercLimit.AX_COMBINED_ATOMIC_COUNTER_BUFFERS -> "shaderc_limit_max_combined_atomic_counter_buffers";
            case ShadercLimit.AX_COMBINED_ATOMIC_COUNTERS -> "shaderc_limit_max_combined_atomic_counters";
            case ShadercLimit.AX_COMBINED_CLIP_AND_CULL_DISTANCES -> "shaderc_limit_max_combined_clip_and_cull_distances";
            case ShadercLimit.AX_COMBINED_IMAGE_UNIFORMS -> "shaderc_limit_max_combined_image_uniforms";
            case ShadercLimit.AX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS -> "shaderc_limit_max_combined_image_units_and_fragment_outputs";
            case ShadercLimit.AX_COMBINED_SHADER_OUTPUT_RESOURCES -> "shaderc_limit_max_combined_shader_output_resources";
            case ShadercLimit.AX_COMBINED_TEXTURE_IMAGE_UNITS -> "shaderc_limit_max_combined_texture_image_units";
            case ShadercLimit.AX_COMPUTE_ATOMIC_COUNTER_BUFFERS -> "shaderc_limit_max_compute_atomic_counter_buffers";
            case ShadercLimit.AX_COMPUTE_ATOMIC_COUNTERS -> "shaderc_limit_max_compute_atomic_counters";
            case ShadercLimit.AX_COMPUTE_IMAGE_UNIFORMS -> "shaderc_limit_max_compute_image_uniforms";
            case ShadercLimit.AX_COMPUTE_TEXTURE_IMAGE_UNITS -> "shaderc_limit_max_compute_texture_image_units";
            case ShadercLimit.AX_COMPUTE_UNIFORM_COMPONENTS -> "shaderc_limit_max_compute_uniform_components";
            case ShadercLimit.AX_COMPUTE_WORK_GROUP_COUNT_X -> "shaderc_limit_max_compute_work_group_count_x";
            case ShadercLimit.AX_COMPUTE_WORK_GROUP_COUNT_Y -> "shaderc_limit_max_compute_work_group_count_y";
            case ShadercLimit.AX_COMPUTE_WORK_GROUP_COUNT_Z -> "shaderc_limit_max_compute_work_group_count_z";
            case ShadercLimit.AX_COMPUTE_WORK_GROUP_SIZE_X -> "shaderc_limit_max_compute_work_group_size_x";
            case ShadercLimit.AX_COMPUTE_WORK_GROUP_SIZE_Y -> "shaderc_limit_max_compute_work_group_size_y";
            case ShadercLimit.AX_COMPUTE_WORK_GROUP_SIZE_Z -> "shaderc_limit_max_compute_work_group_size_z";
            case ShadercLimit.AX_CULL_DISTANCES -> "shaderc_limit_max_cull_distances";
            case ShadercLimit.AX_DRAW_BUFFERS -> "shaderc_limit_max_draw_buffers";
            case ShadercLimit.AX_DUAL_SOURCE_DRAW_BUFFERS_EXT -> "shaderc_limit_max_dual_source_draw_buffers_ext";
            case ShadercLimit.AX_FRAGMENT_ATOMIC_COUNTER_BUFFERS -> "shaderc_limit_max_fragment_atomic_counter_buffers";
            case ShadercLimit.AX_FRAGMENT_ATOMIC_COUNTERS -> "shaderc_limit_max_fragment_atomic_counters";
            case ShadercLimit.AX_FRAGMENT_IMAGE_UNIFORMS -> "shaderc_limit_max_fragment_image_uniforms";
            case ShadercLimit.AX_FRAGMENT_INPUT_COMPONENTS -> "shaderc_limit_max_fragment_input_components";
            case ShadercLimit.AX_FRAGMENT_INPUT_VECTORS -> "shaderc_limit_max_fragment_input_vectors";
            case ShadercLimit.AX_FRAGMENT_UNIFORM_COMPONENTS -> "shaderc_limit_max_fragment_uniform_components";
            case ShadercLimit.AX_FRAGMENT_UNIFORM_VECTORS -> "shaderc_limit_max_fragment_uniform_vectors";
            case ShadercLimit.AX_GEOMETRY_ATOMIC_COUNTER_BUFFERS -> "shaderc_limit_max_geometry_atomic_counter_buffers";
            case ShadercLimit.AX_GEOMETRY_ATOMIC_COUNTERS -> "shaderc_limit_max_geometry_atomic_counters";
            case ShadercLimit.AX_GEOMETRY_IMAGE_UNIFORMS -> "shaderc_limit_max_geometry_image_uniforms";
            case ShadercLimit.AX_GEOMETRY_INPUT_COMPONENTS -> "shaderc_limit_max_geometry_input_components";
            case ShadercLimit.AX_GEOMETRY_OUTPUT_COMPONENTS -> "shaderc_limit_max_geometry_output_components";
            case ShadercLimit.AX_GEOMETRY_OUTPUT_VERTICES -> "shaderc_limit_max_geometry_output_vertices";
            case ShadercLimit.AX_GEOMETRY_TEXTURE_IMAGE_UNITS -> "shaderc_limit_max_geometry_texture_image_units";
            case ShadercLimit.AX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS -> "shaderc_limit_max_geometry_total_output_components";
            case ShadercLimit.AX_GEOMETRY_UNIFORM_COMPONENTS -> "shaderc_limit_max_geometry_uniform_components";
            case ShadercLimit.AX_GEOMETRY_VARYING_COMPONENTS -> "shaderc_limit_max_geometry_varying_components";
            case ShadercLimit.AX_IMAGE_SAMPLES -> "shaderc_limit_max_image_samples";
            case ShadercLimit.AX_IMAGE_UNITS -> "shaderc_limit_max_image_units";
            case ShadercLimit.AX_LIGHTS -> "shaderc_limit_max_lights";
            case ShadercLimit.AX_MESH_OUTPUT_PRIMITIVES_EXT -> "shaderc_limit_max_mesh_output_primitives_ext";
            case ShadercLimit.AX_MESH_OUTPUT_PRIMITIVES_NV -> "shaderc_limit_max_mesh_output_primitives_nv";
            case ShadercLimit.AX_MESH_OUTPUT_VERTICES_EXT -> "shaderc_limit_max_mesh_output_vertices_ext";
            case ShadercLimit.AX_MESH_OUTPUT_VERTICES_NV -> "shaderc_limit_max_mesh_output_vertices_nv";
            case ShadercLimit.AX_MESH_VIEW_COUNT_EXT -> "shaderc_limit_max_mesh_view_count_ext";
            case ShadercLimit.AX_MESH_VIEW_COUNT_NV -> "shaderc_limit_max_mesh_view_count_nv";
            case ShadercLimit.AX_MESH_WORK_GROUP_SIZE_X_EXT -> "shaderc_limit_max_mesh_work_group_size_x_ext";
            case ShadercLimit.AX_MESH_WORK_GROUP_SIZE_X_NV -> "shaderc_limit_max_mesh_work_group_size_x_nv";
            case ShadercLimit.AX_MESH_WORK_GROUP_SIZE_Y_EXT -> "shaderc_limit_max_mesh_work_group_size_y_ext";
            case ShadercLimit.AX_MESH_WORK_GROUP_SIZE_Y_NV -> "shaderc_limit_max_mesh_work_group_size_y_nv";
            case ShadercLimit.AX_MESH_WORK_GROUP_SIZE_Z_EXT -> "shaderc_limit_max_mesh_work_group_size_z_ext";
            case ShadercLimit.AX_MESH_WORK_GROUP_SIZE_Z_NV -> "shaderc_limit_max_mesh_work_group_size_z_nv";
            case ShadercLimit.AX_PATCH_VERTICES -> "shaderc_limit_max_patch_vertices";
            case ShadercLimit.AX_PROGRAM_TEXEL_OFFSET -> "shaderc_limit_max_program_texel_offset";
            case ShadercLimit.AX_SAMPLES -> "shaderc_limit_max_samples";
            case ShadercLimit.AX_TASK_WORK_GROUP_SIZE_X_EXT -> "shaderc_limit_max_task_work_group_size_x_ext";
            case ShadercLimit.AX_TASK_WORK_GROUP_SIZE_X_NV -> "shaderc_limit_max_task_work_group_size_x_nv";
            case ShadercLimit.AX_TASK_WORK_GROUP_SIZE_Y_EXT -> "shaderc_limit_max_task_work_group_size_y_ext";
            case ShadercLimit.AX_TASK_WORK_GROUP_SIZE_Y_NV -> "shaderc_limit_max_task_work_group_size_y_nv";
            case ShadercLimit.AX_TASK_WORK_GROUP_SIZE_Z_EXT -> "shaderc_limit_max_task_work_group_size_z_ext";
            case ShadercLimit.AX_TASK_WORK_GROUP_SIZE_Z_NV -> "shaderc_limit_max_task_work_group_size_z_nv";
            case ShadercLimit.AX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS -> "shaderc_limit_max_tess_control_atomic_counter_buffers";
            case ShadercLimit.AX_TESS_CONTROL_ATOMIC_COUNTERS -> "shaderc_limit_max_tess_control_atomic_counters";
            case ShadercLimit.AX_TESS_CONTROL_IMAGE_UNIFORMS -> "shaderc_limit_max_tess_control_image_uniforms";
            case ShadercLimit.AX_TESS_CONTROL_INPUT_COMPONENTS -> "shaderc_limit_max_tess_control_input_components";
            case ShadercLimit.AX_TESS_CONTROL_OUTPUT_COMPONENTS -> "shaderc_limit_max_tess_control_output_components";
            case ShadercLimit.AX_TESS_CONTROL_TEXTURE_IMAGE_UNITS -> "shaderc_limit_max_tess_control_texture_image_units";
            case ShadercLimit.AX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS -> "shaderc_limit_max_tess_control_total_output_components";
            case ShadercLimit.AX_TESS_CONTROL_UNIFORM_COMPONENTS -> "shaderc_limit_max_tess_control_uniform_components";
            case ShadercLimit.AX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS -> "shaderc_limit_max_tess_evaluation_atomic_counter_buffers";
            case ShadercLimit.AX_TESS_EVALUATION_ATOMIC_COUNTERS -> "shaderc_limit_max_tess_evaluation_atomic_counters";
            case ShadercLimit.AX_TESS_EVALUATION_IMAGE_UNIFORMS -> "shaderc_limit_max_tess_evaluation_image_uniforms";
            case ShadercLimit.AX_TESS_EVALUATION_INPUT_COMPONENTS -> "shaderc_limit_max_tess_evaluation_input_components";
            case ShadercLimit.AX_TESS_EVALUATION_OUTPUT_COMPONENTS -> "shaderc_limit_max_tess_evaluation_output_components";
            case ShadercLimit.AX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS -> "shaderc_limit_max_tess_evaluation_texture_image_units";
            case ShadercLimit.AX_TESS_EVALUATION_UNIFORM_COMPONENTS -> "shaderc_limit_max_tess_evaluation_uniform_components";
            case ShadercLimit.AX_TESS_GEN_LEVEL -> "shaderc_limit_max_tess_gen_level";
            case ShadercLimit.AX_TESS_PATCH_COMPONENTS -> "shaderc_limit_max_tess_patch_components";
            case ShadercLimit.AX_TEXTURE_COORDS -> "shaderc_limit_max_texture_coords";
            case ShadercLimit.AX_TEXTURE_IMAGE_UNITS -> "shaderc_limit_max_texture_image_units";
            case ShadercLimit.AX_TEXTURE_UNITS -> "shaderc_limit_max_texture_units";
            case ShadercLimit.AX_TRANSFORM_FEEDBACK_BUFFERS -> "shaderc_limit_max_transform_feedback_buffers";
            case ShadercLimit.AX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS -> "shaderc_limit_max_transform_feedback_interleaved_components";
            case ShadercLimit.AX_VARYING_COMPONENTS -> "shaderc_limit_max_varying_components";
            case ShadercLimit.AX_VARYING_FLOATS -> "shaderc_limit_max_varying_floats";
            case ShadercLimit.AX_VARYING_VECTORS -> "shaderc_limit_max_varying_vectors";
            case ShadercLimit.AX_VERTEX_ATOMIC_COUNTER_BUFFERS -> "shaderc_limit_max_vertex_atomic_counter_buffers";
            case ShadercLimit.AX_VERTEX_ATOMIC_COUNTERS -> "shaderc_limit_max_vertex_atomic_counters";
            case ShadercLimit.AX_VERTEX_ATTRIBS -> "shaderc_limit_max_vertex_attribs";
            case ShadercLimit.AX_VERTEX_IMAGE_UNIFORMS -> "shaderc_limit_max_vertex_image_uniforms";
            case ShadercLimit.AX_VERTEX_OUTPUT_COMPONENTS -> "shaderc_limit_max_vertex_output_components";
            case ShadercLimit.AX_VERTEX_OUTPUT_VECTORS -> "shaderc_limit_max_vertex_output_vectors";
            case ShadercLimit.AX_VERTEX_TEXTURE_IMAGE_UNITS -> "shaderc_limit_max_vertex_texture_image_units";
            case ShadercLimit.AX_VERTEX_UNIFORM_COMPONENTS -> "shaderc_limit_max_vertex_uniform_components";
            case ShadercLimit.AX_VERTEX_UNIFORM_VECTORS -> "shaderc_limit_max_vertex_uniform_vectors";
            case ShadercLimit.AX_VIEWPORTS -> "shaderc_limit_max_viewports";
            case ShadercLimit.IN_PROGRAM_TEXEL_OFFSET -> "shaderc_limit_min_program_texel_offset";
            default -> "UNKNOWN(" + value + ")";
        };
    }

    /// Constructing this class is nonsense so the constructor is made private.
    private ShadercLimit() {}
}
