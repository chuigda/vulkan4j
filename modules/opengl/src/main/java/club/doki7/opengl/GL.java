package club.doki7.opengl;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.util.Objects;

import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import club.doki7.ffm.NativeLayout;
import club.doki7.ffm.RawFunctionLoader;
import club.doki7.ffm.annotation.*;
import club.doki7.ffm.ptr.*;
import club.doki7.opengl.handle.*;

public sealed class GL implements GLConstants permits GLCompatibility {
    public GL(RawFunctionLoader loader) {
        SEGMENT$glActiveProgramEXT = loader.apply("glActiveProgramEXT");
        HANDLE$glActiveProgramEXT = RawFunctionLoader.link(SEGMENT$glActiveProgramEXT, Descriptors.DESCRIPTOR$glActiveProgramEXT);
        SEGMENT$glActiveShaderProgram = loader.apply("glActiveShaderProgram");
        HANDLE$glActiveShaderProgram = RawFunctionLoader.link(SEGMENT$glActiveShaderProgram, Descriptors.DESCRIPTOR$glActiveShaderProgram);
        SEGMENT$glActiveShaderProgramEXT = loader.apply("glActiveShaderProgramEXT");
        HANDLE$glActiveShaderProgramEXT = RawFunctionLoader.link(SEGMENT$glActiveShaderProgramEXT, Descriptors.DESCRIPTOR$glActiveShaderProgramEXT);
        SEGMENT$glActiveTexture = loader.apply("glActiveTexture");
        HANDLE$glActiveTexture = RawFunctionLoader.link(SEGMENT$glActiveTexture, Descriptors.DESCRIPTOR$glActiveTexture);
        SEGMENT$glApplyFramebufferAttachmentCMAAINTEL = loader.apply("glApplyFramebufferAttachmentCMAAINTEL");
        HANDLE$glApplyFramebufferAttachmentCMAAINTEL = RawFunctionLoader.link(SEGMENT$glApplyFramebufferAttachmentCMAAINTEL, Descriptors.DESCRIPTOR$glApplyFramebufferAttachmentCMAAINTEL);
        SEGMENT$glAttachShader = loader.apply("glAttachShader");
        HANDLE$glAttachShader = RawFunctionLoader.link(SEGMENT$glAttachShader, Descriptors.DESCRIPTOR$glAttachShader);
        SEGMENT$glBeginConditionalRender = loader.apply("glBeginConditionalRender");
        HANDLE$glBeginConditionalRender = RawFunctionLoader.link(SEGMENT$glBeginConditionalRender, Descriptors.DESCRIPTOR$glBeginConditionalRender);
        SEGMENT$glBeginConditionalRenderNV = loader.apply("glBeginConditionalRenderNV");
        HANDLE$glBeginConditionalRenderNV = RawFunctionLoader.link(SEGMENT$glBeginConditionalRenderNV, Descriptors.DESCRIPTOR$glBeginConditionalRenderNV);
        SEGMENT$glBeginPerfMonitorAMD = loader.apply("glBeginPerfMonitorAMD");
        HANDLE$glBeginPerfMonitorAMD = RawFunctionLoader.link(SEGMENT$glBeginPerfMonitorAMD, Descriptors.DESCRIPTOR$glBeginPerfMonitorAMD);
        SEGMENT$glBeginPerfQueryINTEL = loader.apply("glBeginPerfQueryINTEL");
        HANDLE$glBeginPerfQueryINTEL = RawFunctionLoader.link(SEGMENT$glBeginPerfQueryINTEL, Descriptors.DESCRIPTOR$glBeginPerfQueryINTEL);
        SEGMENT$glBeginQuery = loader.apply("glBeginQuery");
        HANDLE$glBeginQuery = RawFunctionLoader.link(SEGMENT$glBeginQuery, Descriptors.DESCRIPTOR$glBeginQuery);
        SEGMENT$glBeginQueryIndexed = loader.apply("glBeginQueryIndexed");
        HANDLE$glBeginQueryIndexed = RawFunctionLoader.link(SEGMENT$glBeginQueryIndexed, Descriptors.DESCRIPTOR$glBeginQueryIndexed);
        SEGMENT$glBeginTransformFeedback = loader.apply("glBeginTransformFeedback");
        HANDLE$glBeginTransformFeedback = RawFunctionLoader.link(SEGMENT$glBeginTransformFeedback, Descriptors.DESCRIPTOR$glBeginTransformFeedback);
        SEGMENT$glBindAttribLocation = loader.apply("glBindAttribLocation");
        HANDLE$glBindAttribLocation = RawFunctionLoader.link(SEGMENT$glBindAttribLocation, Descriptors.DESCRIPTOR$glBindAttribLocation);
        SEGMENT$glBindBuffer = loader.apply("glBindBuffer");
        HANDLE$glBindBuffer = RawFunctionLoader.link(SEGMENT$glBindBuffer, Descriptors.DESCRIPTOR$glBindBuffer);
        SEGMENT$glBindBufferBase = loader.apply("glBindBufferBase");
        HANDLE$glBindBufferBase = RawFunctionLoader.link(SEGMENT$glBindBufferBase, Descriptors.DESCRIPTOR$glBindBufferBase);
        SEGMENT$glBindBufferRange = loader.apply("glBindBufferRange");
        HANDLE$glBindBufferRange = RawFunctionLoader.link(SEGMENT$glBindBufferRange, Descriptors.DESCRIPTOR$glBindBufferRange);
        SEGMENT$glBindBuffersBase = loader.apply("glBindBuffersBase");
        HANDLE$glBindBuffersBase = RawFunctionLoader.link(SEGMENT$glBindBuffersBase, Descriptors.DESCRIPTOR$glBindBuffersBase);
        SEGMENT$glBindBuffersRange = loader.apply("glBindBuffersRange");
        HANDLE$glBindBuffersRange = RawFunctionLoader.link(SEGMENT$glBindBuffersRange, Descriptors.DESCRIPTOR$glBindBuffersRange);
        SEGMENT$glBindFragDataLocation = loader.apply("glBindFragDataLocation");
        HANDLE$glBindFragDataLocation = RawFunctionLoader.link(SEGMENT$glBindFragDataLocation, Descriptors.DESCRIPTOR$glBindFragDataLocation);
        SEGMENT$glBindFragDataLocationIndexed = loader.apply("glBindFragDataLocationIndexed");
        HANDLE$glBindFragDataLocationIndexed = RawFunctionLoader.link(SEGMENT$glBindFragDataLocationIndexed, Descriptors.DESCRIPTOR$glBindFragDataLocationIndexed);
        SEGMENT$glBindFramebuffer = loader.apply("glBindFramebuffer");
        HANDLE$glBindFramebuffer = RawFunctionLoader.link(SEGMENT$glBindFramebuffer, Descriptors.DESCRIPTOR$glBindFramebuffer);
        SEGMENT$glBindImageTexture = loader.apply("glBindImageTexture");
        HANDLE$glBindImageTexture = RawFunctionLoader.link(SEGMENT$glBindImageTexture, Descriptors.DESCRIPTOR$glBindImageTexture);
        SEGMENT$glBindImageTextures = loader.apply("glBindImageTextures");
        HANDLE$glBindImageTextures = RawFunctionLoader.link(SEGMENT$glBindImageTextures, Descriptors.DESCRIPTOR$glBindImageTextures);
        SEGMENT$glBindMultiTextureEXT = loader.apply("glBindMultiTextureEXT");
        HANDLE$glBindMultiTextureEXT = RawFunctionLoader.link(SEGMENT$glBindMultiTextureEXT, Descriptors.DESCRIPTOR$glBindMultiTextureEXT);
        SEGMENT$glBindProgramPipeline = loader.apply("glBindProgramPipeline");
        HANDLE$glBindProgramPipeline = RawFunctionLoader.link(SEGMENT$glBindProgramPipeline, Descriptors.DESCRIPTOR$glBindProgramPipeline);
        SEGMENT$glBindProgramPipelineEXT = loader.apply("glBindProgramPipelineEXT");
        HANDLE$glBindProgramPipelineEXT = RawFunctionLoader.link(SEGMENT$glBindProgramPipelineEXT, Descriptors.DESCRIPTOR$glBindProgramPipelineEXT);
        SEGMENT$glBindRenderbuffer = loader.apply("glBindRenderbuffer");
        HANDLE$glBindRenderbuffer = RawFunctionLoader.link(SEGMENT$glBindRenderbuffer, Descriptors.DESCRIPTOR$glBindRenderbuffer);
        SEGMENT$glBindSampler = loader.apply("glBindSampler");
        HANDLE$glBindSampler = RawFunctionLoader.link(SEGMENT$glBindSampler, Descriptors.DESCRIPTOR$glBindSampler);
        SEGMENT$glBindSamplers = loader.apply("glBindSamplers");
        HANDLE$glBindSamplers = RawFunctionLoader.link(SEGMENT$glBindSamplers, Descriptors.DESCRIPTOR$glBindSamplers);
        SEGMENT$glBindShadingRateImageNV = loader.apply("glBindShadingRateImageNV");
        HANDLE$glBindShadingRateImageNV = RawFunctionLoader.link(SEGMENT$glBindShadingRateImageNV, Descriptors.DESCRIPTOR$glBindShadingRateImageNV);
        SEGMENT$glBindTexture = loader.apply("glBindTexture");
        HANDLE$glBindTexture = RawFunctionLoader.link(SEGMENT$glBindTexture, Descriptors.DESCRIPTOR$glBindTexture);
        SEGMENT$glBindTextureUnit = loader.apply("glBindTextureUnit");
        HANDLE$glBindTextureUnit = RawFunctionLoader.link(SEGMENT$glBindTextureUnit, Descriptors.DESCRIPTOR$glBindTextureUnit);
        SEGMENT$glBindTextures = loader.apply("glBindTextures");
        HANDLE$glBindTextures = RawFunctionLoader.link(SEGMENT$glBindTextures, Descriptors.DESCRIPTOR$glBindTextures);
        SEGMENT$glBindTransformFeedback = loader.apply("glBindTransformFeedback");
        HANDLE$glBindTransformFeedback = RawFunctionLoader.link(SEGMENT$glBindTransformFeedback, Descriptors.DESCRIPTOR$glBindTransformFeedback);
        SEGMENT$glBindVertexArray = loader.apply("glBindVertexArray");
        HANDLE$glBindVertexArray = RawFunctionLoader.link(SEGMENT$glBindVertexArray, Descriptors.DESCRIPTOR$glBindVertexArray);
        SEGMENT$glBindVertexBuffer = loader.apply("glBindVertexBuffer");
        HANDLE$glBindVertexBuffer = RawFunctionLoader.link(SEGMENT$glBindVertexBuffer, Descriptors.DESCRIPTOR$glBindVertexBuffer);
        SEGMENT$glBindVertexBuffers = loader.apply("glBindVertexBuffers");
        HANDLE$glBindVertexBuffers = RawFunctionLoader.link(SEGMENT$glBindVertexBuffers, Descriptors.DESCRIPTOR$glBindVertexBuffers);
        SEGMENT$glBlendBarrierKHR = loader.apply("glBlendBarrierKHR");
        HANDLE$glBlendBarrierKHR = RawFunctionLoader.link(SEGMENT$glBlendBarrierKHR, Descriptors.DESCRIPTOR$glBlendBarrierKHR);
        SEGMENT$glBlendBarrierNV = loader.apply("glBlendBarrierNV");
        HANDLE$glBlendBarrierNV = RawFunctionLoader.link(SEGMENT$glBlendBarrierNV, Descriptors.DESCRIPTOR$glBlendBarrierNV);
        SEGMENT$glBlendColor = loader.apply("glBlendColor");
        HANDLE$glBlendColor = RawFunctionLoader.link(SEGMENT$glBlendColor, Descriptors.DESCRIPTOR$glBlendColor);
        SEGMENT$glBlendEquation = loader.apply("glBlendEquation");
        HANDLE$glBlendEquation = RawFunctionLoader.link(SEGMENT$glBlendEquation, Descriptors.DESCRIPTOR$glBlendEquation);
        SEGMENT$glBlendEquationSeparate = loader.apply("glBlendEquationSeparate");
        HANDLE$glBlendEquationSeparate = RawFunctionLoader.link(SEGMENT$glBlendEquationSeparate, Descriptors.DESCRIPTOR$glBlendEquationSeparate);
        SEGMENT$glBlendEquationSeparatei = loader.apply("glBlendEquationSeparatei");
        HANDLE$glBlendEquationSeparatei = RawFunctionLoader.link(SEGMENT$glBlendEquationSeparatei, Descriptors.DESCRIPTOR$glBlendEquationSeparatei);
        SEGMENT$glBlendEquationSeparateiARB = loader.apply("glBlendEquationSeparateiARB");
        HANDLE$glBlendEquationSeparateiARB = RawFunctionLoader.link(SEGMENT$glBlendEquationSeparateiARB, Descriptors.DESCRIPTOR$glBlendEquationSeparateiARB);
        SEGMENT$glBlendEquationi = loader.apply("glBlendEquationi");
        HANDLE$glBlendEquationi = RawFunctionLoader.link(SEGMENT$glBlendEquationi, Descriptors.DESCRIPTOR$glBlendEquationi);
        SEGMENT$glBlendEquationiARB = loader.apply("glBlendEquationiARB");
        HANDLE$glBlendEquationiARB = RawFunctionLoader.link(SEGMENT$glBlendEquationiARB, Descriptors.DESCRIPTOR$glBlendEquationiARB);
        SEGMENT$glBlendFunc = loader.apply("glBlendFunc");
        HANDLE$glBlendFunc = RawFunctionLoader.link(SEGMENT$glBlendFunc, Descriptors.DESCRIPTOR$glBlendFunc);
        SEGMENT$glBlendFuncSeparate = loader.apply("glBlendFuncSeparate");
        HANDLE$glBlendFuncSeparate = RawFunctionLoader.link(SEGMENT$glBlendFuncSeparate, Descriptors.DESCRIPTOR$glBlendFuncSeparate);
        SEGMENT$glBlendFuncSeparatei = loader.apply("glBlendFuncSeparatei");
        HANDLE$glBlendFuncSeparatei = RawFunctionLoader.link(SEGMENT$glBlendFuncSeparatei, Descriptors.DESCRIPTOR$glBlendFuncSeparatei);
        SEGMENT$glBlendFuncSeparateiARB = loader.apply("glBlendFuncSeparateiARB");
        HANDLE$glBlendFuncSeparateiARB = RawFunctionLoader.link(SEGMENT$glBlendFuncSeparateiARB, Descriptors.DESCRIPTOR$glBlendFuncSeparateiARB);
        SEGMENT$glBlendFunci = loader.apply("glBlendFunci");
        HANDLE$glBlendFunci = RawFunctionLoader.link(SEGMENT$glBlendFunci, Descriptors.DESCRIPTOR$glBlendFunci);
        SEGMENT$glBlendFunciARB = loader.apply("glBlendFunciARB");
        HANDLE$glBlendFunciARB = RawFunctionLoader.link(SEGMENT$glBlendFunciARB, Descriptors.DESCRIPTOR$glBlendFunciARB);
        SEGMENT$glBlendParameteriNV = loader.apply("glBlendParameteriNV");
        HANDLE$glBlendParameteriNV = RawFunctionLoader.link(SEGMENT$glBlendParameteriNV, Descriptors.DESCRIPTOR$glBlendParameteriNV);
        SEGMENT$glBlitFramebuffer = loader.apply("glBlitFramebuffer");
        HANDLE$glBlitFramebuffer = RawFunctionLoader.link(SEGMENT$glBlitFramebuffer, Descriptors.DESCRIPTOR$glBlitFramebuffer);
        SEGMENT$glBlitNamedFramebuffer = loader.apply("glBlitNamedFramebuffer");
        HANDLE$glBlitNamedFramebuffer = RawFunctionLoader.link(SEGMENT$glBlitNamedFramebuffer, Descriptors.DESCRIPTOR$glBlitNamedFramebuffer);
        SEGMENT$glBufferAddressRangeNV = loader.apply("glBufferAddressRangeNV");
        HANDLE$glBufferAddressRangeNV = RawFunctionLoader.link(SEGMENT$glBufferAddressRangeNV, Descriptors.DESCRIPTOR$glBufferAddressRangeNV);
        SEGMENT$glBufferAttachMemoryNV = loader.apply("glBufferAttachMemoryNV");
        HANDLE$glBufferAttachMemoryNV = RawFunctionLoader.link(SEGMENT$glBufferAttachMemoryNV, Descriptors.DESCRIPTOR$glBufferAttachMemoryNV);
        SEGMENT$glBufferData = loader.apply("glBufferData");
        HANDLE$glBufferData = RawFunctionLoader.link(SEGMENT$glBufferData, Descriptors.DESCRIPTOR$glBufferData);
        SEGMENT$glBufferPageCommitmentARB = loader.apply("glBufferPageCommitmentARB");
        HANDLE$glBufferPageCommitmentARB = RawFunctionLoader.link(SEGMENT$glBufferPageCommitmentARB, Descriptors.DESCRIPTOR$glBufferPageCommitmentARB);
        SEGMENT$glBufferPageCommitmentMemNV = loader.apply("glBufferPageCommitmentMemNV");
        HANDLE$glBufferPageCommitmentMemNV = RawFunctionLoader.link(SEGMENT$glBufferPageCommitmentMemNV, Descriptors.DESCRIPTOR$glBufferPageCommitmentMemNV);
        SEGMENT$glBufferStorage = loader.apply("glBufferStorage");
        HANDLE$glBufferStorage = RawFunctionLoader.link(SEGMENT$glBufferStorage, Descriptors.DESCRIPTOR$glBufferStorage);
        SEGMENT$glBufferSubData = loader.apply("glBufferSubData");
        HANDLE$glBufferSubData = RawFunctionLoader.link(SEGMENT$glBufferSubData, Descriptors.DESCRIPTOR$glBufferSubData);
        SEGMENT$glCallCommandListNV = loader.apply("glCallCommandListNV");
        HANDLE$glCallCommandListNV = RawFunctionLoader.link(SEGMENT$glCallCommandListNV, Descriptors.DESCRIPTOR$glCallCommandListNV);
        SEGMENT$glCheckFramebufferStatus = loader.apply("glCheckFramebufferStatus");
        HANDLE$glCheckFramebufferStatus = RawFunctionLoader.link(SEGMENT$glCheckFramebufferStatus, Descriptors.DESCRIPTOR$glCheckFramebufferStatus);
        SEGMENT$glCheckNamedFramebufferStatus = loader.apply("glCheckNamedFramebufferStatus");
        HANDLE$glCheckNamedFramebufferStatus = RawFunctionLoader.link(SEGMENT$glCheckNamedFramebufferStatus, Descriptors.DESCRIPTOR$glCheckNamedFramebufferStatus);
        SEGMENT$glCheckNamedFramebufferStatusEXT = loader.apply("glCheckNamedFramebufferStatusEXT");
        HANDLE$glCheckNamedFramebufferStatusEXT = RawFunctionLoader.link(SEGMENT$glCheckNamedFramebufferStatusEXT, Descriptors.DESCRIPTOR$glCheckNamedFramebufferStatusEXT);
        SEGMENT$glClampColor = loader.apply("glClampColor");
        HANDLE$glClampColor = RawFunctionLoader.link(SEGMENT$glClampColor, Descriptors.DESCRIPTOR$glClampColor);
        SEGMENT$glClear = loader.apply("glClear");
        HANDLE$glClear = RawFunctionLoader.link(SEGMENT$glClear, Descriptors.DESCRIPTOR$glClear);
        SEGMENT$glClearBufferData = loader.apply("glClearBufferData");
        HANDLE$glClearBufferData = RawFunctionLoader.link(SEGMENT$glClearBufferData, Descriptors.DESCRIPTOR$glClearBufferData);
        SEGMENT$glClearBufferSubData = loader.apply("glClearBufferSubData");
        HANDLE$glClearBufferSubData = RawFunctionLoader.link(SEGMENT$glClearBufferSubData, Descriptors.DESCRIPTOR$glClearBufferSubData);
        SEGMENT$glClearBufferfi = loader.apply("glClearBufferfi");
        HANDLE$glClearBufferfi = RawFunctionLoader.link(SEGMENT$glClearBufferfi, Descriptors.DESCRIPTOR$glClearBufferfi);
        SEGMENT$glClearBufferfv = loader.apply("glClearBufferfv");
        HANDLE$glClearBufferfv = RawFunctionLoader.link(SEGMENT$glClearBufferfv, Descriptors.DESCRIPTOR$glClearBufferfv);
        SEGMENT$glClearBufferiv = loader.apply("glClearBufferiv");
        HANDLE$glClearBufferiv = RawFunctionLoader.link(SEGMENT$glClearBufferiv, Descriptors.DESCRIPTOR$glClearBufferiv);
        SEGMENT$glClearBufferuiv = loader.apply("glClearBufferuiv");
        HANDLE$glClearBufferuiv = RawFunctionLoader.link(SEGMENT$glClearBufferuiv, Descriptors.DESCRIPTOR$glClearBufferuiv);
        SEGMENT$glClearColor = loader.apply("glClearColor");
        HANDLE$glClearColor = RawFunctionLoader.link(SEGMENT$glClearColor, Descriptors.DESCRIPTOR$glClearColor);
        SEGMENT$glClearDepth = loader.apply("glClearDepth");
        HANDLE$glClearDepth = RawFunctionLoader.link(SEGMENT$glClearDepth, Descriptors.DESCRIPTOR$glClearDepth);
        SEGMENT$glClearDepthdNV = loader.apply("glClearDepthdNV");
        HANDLE$glClearDepthdNV = RawFunctionLoader.link(SEGMENT$glClearDepthdNV, Descriptors.DESCRIPTOR$glClearDepthdNV);
        SEGMENT$glClearDepthf = loader.apply("glClearDepthf");
        HANDLE$glClearDepthf = RawFunctionLoader.link(SEGMENT$glClearDepthf, Descriptors.DESCRIPTOR$glClearDepthf);
        SEGMENT$glClearNamedBufferData = loader.apply("glClearNamedBufferData");
        HANDLE$glClearNamedBufferData = RawFunctionLoader.link(SEGMENT$glClearNamedBufferData, Descriptors.DESCRIPTOR$glClearNamedBufferData);
        SEGMENT$glClearNamedBufferDataEXT = loader.apply("glClearNamedBufferDataEXT");
        HANDLE$glClearNamedBufferDataEXT = RawFunctionLoader.link(SEGMENT$glClearNamedBufferDataEXT, Descriptors.DESCRIPTOR$glClearNamedBufferDataEXT);
        SEGMENT$glClearNamedBufferSubData = loader.apply("glClearNamedBufferSubData");
        HANDLE$glClearNamedBufferSubData = RawFunctionLoader.link(SEGMENT$glClearNamedBufferSubData, Descriptors.DESCRIPTOR$glClearNamedBufferSubData);
        SEGMENT$glClearNamedBufferSubDataEXT = loader.apply("glClearNamedBufferSubDataEXT");
        HANDLE$glClearNamedBufferSubDataEXT = RawFunctionLoader.link(SEGMENT$glClearNamedBufferSubDataEXT, Descriptors.DESCRIPTOR$glClearNamedBufferSubDataEXT);
        SEGMENT$glClearNamedFramebufferfi = loader.apply("glClearNamedFramebufferfi");
        HANDLE$glClearNamedFramebufferfi = RawFunctionLoader.link(SEGMENT$glClearNamedFramebufferfi, Descriptors.DESCRIPTOR$glClearNamedFramebufferfi);
        SEGMENT$glClearNamedFramebufferfv = loader.apply("glClearNamedFramebufferfv");
        HANDLE$glClearNamedFramebufferfv = RawFunctionLoader.link(SEGMENT$glClearNamedFramebufferfv, Descriptors.DESCRIPTOR$glClearNamedFramebufferfv);
        SEGMENT$glClearNamedFramebufferiv = loader.apply("glClearNamedFramebufferiv");
        HANDLE$glClearNamedFramebufferiv = RawFunctionLoader.link(SEGMENT$glClearNamedFramebufferiv, Descriptors.DESCRIPTOR$glClearNamedFramebufferiv);
        SEGMENT$glClearNamedFramebufferuiv = loader.apply("glClearNamedFramebufferuiv");
        HANDLE$glClearNamedFramebufferuiv = RawFunctionLoader.link(SEGMENT$glClearNamedFramebufferuiv, Descriptors.DESCRIPTOR$glClearNamedFramebufferuiv);
        SEGMENT$glClearStencil = loader.apply("glClearStencil");
        HANDLE$glClearStencil = RawFunctionLoader.link(SEGMENT$glClearStencil, Descriptors.DESCRIPTOR$glClearStencil);
        SEGMENT$glClearTexImage = loader.apply("glClearTexImage");
        HANDLE$glClearTexImage = RawFunctionLoader.link(SEGMENT$glClearTexImage, Descriptors.DESCRIPTOR$glClearTexImage);
        SEGMENT$glClearTexSubImage = loader.apply("glClearTexSubImage");
        HANDLE$glClearTexSubImage = RawFunctionLoader.link(SEGMENT$glClearTexSubImage, Descriptors.DESCRIPTOR$glClearTexSubImage);
        SEGMENT$glClientAttribDefaultEXT = loader.apply("glClientAttribDefaultEXT");
        HANDLE$glClientAttribDefaultEXT = RawFunctionLoader.link(SEGMENT$glClientAttribDefaultEXT, Descriptors.DESCRIPTOR$glClientAttribDefaultEXT);
        SEGMENT$glClientWaitSync = loader.apply("glClientWaitSync");
        HANDLE$glClientWaitSync = RawFunctionLoader.link(SEGMENT$glClientWaitSync, Descriptors.DESCRIPTOR$glClientWaitSync);
        SEGMENT$glClipControl = loader.apply("glClipControl");
        HANDLE$glClipControl = RawFunctionLoader.link(SEGMENT$glClipControl, Descriptors.DESCRIPTOR$glClipControl);
        SEGMENT$glColorFormatNV = loader.apply("glColorFormatNV");
        HANDLE$glColorFormatNV = RawFunctionLoader.link(SEGMENT$glColorFormatNV, Descriptors.DESCRIPTOR$glColorFormatNV);
        SEGMENT$glColorMask = loader.apply("glColorMask");
        HANDLE$glColorMask = RawFunctionLoader.link(SEGMENT$glColorMask, Descriptors.DESCRIPTOR$glColorMask);
        SEGMENT$glColorMaski = loader.apply("glColorMaski");
        HANDLE$glColorMaski = RawFunctionLoader.link(SEGMENT$glColorMaski, Descriptors.DESCRIPTOR$glColorMaski);
        SEGMENT$glCommandListSegmentsNV = loader.apply("glCommandListSegmentsNV");
        HANDLE$glCommandListSegmentsNV = RawFunctionLoader.link(SEGMENT$glCommandListSegmentsNV, Descriptors.DESCRIPTOR$glCommandListSegmentsNV);
        SEGMENT$glCompileCommandListNV = loader.apply("glCompileCommandListNV");
        HANDLE$glCompileCommandListNV = RawFunctionLoader.link(SEGMENT$glCompileCommandListNV, Descriptors.DESCRIPTOR$glCompileCommandListNV);
        SEGMENT$glCompileShader = loader.apply("glCompileShader");
        HANDLE$glCompileShader = RawFunctionLoader.link(SEGMENT$glCompileShader, Descriptors.DESCRIPTOR$glCompileShader);
        SEGMENT$glCompileShaderIncludeARB = loader.apply("glCompileShaderIncludeARB");
        HANDLE$glCompileShaderIncludeARB = RawFunctionLoader.link(SEGMENT$glCompileShaderIncludeARB, Descriptors.DESCRIPTOR$glCompileShaderIncludeARB);
        SEGMENT$glCompressedMultiTexImage1DEXT = loader.apply("glCompressedMultiTexImage1DEXT");
        HANDLE$glCompressedMultiTexImage1DEXT = RawFunctionLoader.link(SEGMENT$glCompressedMultiTexImage1DEXT, Descriptors.DESCRIPTOR$glCompressedMultiTexImage1DEXT);
        SEGMENT$glCompressedMultiTexImage2DEXT = loader.apply("glCompressedMultiTexImage2DEXT");
        HANDLE$glCompressedMultiTexImage2DEXT = RawFunctionLoader.link(SEGMENT$glCompressedMultiTexImage2DEXT, Descriptors.DESCRIPTOR$glCompressedMultiTexImage2DEXT);
        SEGMENT$glCompressedMultiTexImage3DEXT = loader.apply("glCompressedMultiTexImage3DEXT");
        HANDLE$glCompressedMultiTexImage3DEXT = RawFunctionLoader.link(SEGMENT$glCompressedMultiTexImage3DEXT, Descriptors.DESCRIPTOR$glCompressedMultiTexImage3DEXT);
        SEGMENT$glCompressedMultiTexSubImage1DEXT = loader.apply("glCompressedMultiTexSubImage1DEXT");
        HANDLE$glCompressedMultiTexSubImage1DEXT = RawFunctionLoader.link(SEGMENT$glCompressedMultiTexSubImage1DEXT, Descriptors.DESCRIPTOR$glCompressedMultiTexSubImage1DEXT);
        SEGMENT$glCompressedMultiTexSubImage2DEXT = loader.apply("glCompressedMultiTexSubImage2DEXT");
        HANDLE$glCompressedMultiTexSubImage2DEXT = RawFunctionLoader.link(SEGMENT$glCompressedMultiTexSubImage2DEXT, Descriptors.DESCRIPTOR$glCompressedMultiTexSubImage2DEXT);
        SEGMENT$glCompressedMultiTexSubImage3DEXT = loader.apply("glCompressedMultiTexSubImage3DEXT");
        HANDLE$glCompressedMultiTexSubImage3DEXT = RawFunctionLoader.link(SEGMENT$glCompressedMultiTexSubImage3DEXT, Descriptors.DESCRIPTOR$glCompressedMultiTexSubImage3DEXT);
        SEGMENT$glCompressedTexImage1D = loader.apply("glCompressedTexImage1D");
        HANDLE$glCompressedTexImage1D = RawFunctionLoader.link(SEGMENT$glCompressedTexImage1D, Descriptors.DESCRIPTOR$glCompressedTexImage1D);
        SEGMENT$glCompressedTexImage2D = loader.apply("glCompressedTexImage2D");
        HANDLE$glCompressedTexImage2D = RawFunctionLoader.link(SEGMENT$glCompressedTexImage2D, Descriptors.DESCRIPTOR$glCompressedTexImage2D);
        SEGMENT$glCompressedTexImage3D = loader.apply("glCompressedTexImage3D");
        HANDLE$glCompressedTexImage3D = RawFunctionLoader.link(SEGMENT$glCompressedTexImage3D, Descriptors.DESCRIPTOR$glCompressedTexImage3D);
        SEGMENT$glCompressedTexSubImage1D = loader.apply("glCompressedTexSubImage1D");
        HANDLE$glCompressedTexSubImage1D = RawFunctionLoader.link(SEGMENT$glCompressedTexSubImage1D, Descriptors.DESCRIPTOR$glCompressedTexSubImage1D);
        SEGMENT$glCompressedTexSubImage2D = loader.apply("glCompressedTexSubImage2D");
        HANDLE$glCompressedTexSubImage2D = RawFunctionLoader.link(SEGMENT$glCompressedTexSubImage2D, Descriptors.DESCRIPTOR$glCompressedTexSubImage2D);
        SEGMENT$glCompressedTexSubImage3D = loader.apply("glCompressedTexSubImage3D");
        HANDLE$glCompressedTexSubImage3D = RawFunctionLoader.link(SEGMENT$glCompressedTexSubImage3D, Descriptors.DESCRIPTOR$glCompressedTexSubImage3D);
        SEGMENT$glCompressedTextureImage1DEXT = loader.apply("glCompressedTextureImage1DEXT");
        HANDLE$glCompressedTextureImage1DEXT = RawFunctionLoader.link(SEGMENT$glCompressedTextureImage1DEXT, Descriptors.DESCRIPTOR$glCompressedTextureImage1DEXT);
        SEGMENT$glCompressedTextureImage2DEXT = loader.apply("glCompressedTextureImage2DEXT");
        HANDLE$glCompressedTextureImage2DEXT = RawFunctionLoader.link(SEGMENT$glCompressedTextureImage2DEXT, Descriptors.DESCRIPTOR$glCompressedTextureImage2DEXT);
        SEGMENT$glCompressedTextureImage3DEXT = loader.apply("glCompressedTextureImage3DEXT");
        HANDLE$glCompressedTextureImage3DEXT = RawFunctionLoader.link(SEGMENT$glCompressedTextureImage3DEXT, Descriptors.DESCRIPTOR$glCompressedTextureImage3DEXT);
        SEGMENT$glCompressedTextureSubImage1D = loader.apply("glCompressedTextureSubImage1D");
        HANDLE$glCompressedTextureSubImage1D = RawFunctionLoader.link(SEGMENT$glCompressedTextureSubImage1D, Descriptors.DESCRIPTOR$glCompressedTextureSubImage1D);
        SEGMENT$glCompressedTextureSubImage1DEXT = loader.apply("glCompressedTextureSubImage1DEXT");
        HANDLE$glCompressedTextureSubImage1DEXT = RawFunctionLoader.link(SEGMENT$glCompressedTextureSubImage1DEXT, Descriptors.DESCRIPTOR$glCompressedTextureSubImage1DEXT);
        SEGMENT$glCompressedTextureSubImage2D = loader.apply("glCompressedTextureSubImage2D");
        HANDLE$glCompressedTextureSubImage2D = RawFunctionLoader.link(SEGMENT$glCompressedTextureSubImage2D, Descriptors.DESCRIPTOR$glCompressedTextureSubImage2D);
        SEGMENT$glCompressedTextureSubImage2DEXT = loader.apply("glCompressedTextureSubImage2DEXT");
        HANDLE$glCompressedTextureSubImage2DEXT = RawFunctionLoader.link(SEGMENT$glCompressedTextureSubImage2DEXT, Descriptors.DESCRIPTOR$glCompressedTextureSubImage2DEXT);
        SEGMENT$glCompressedTextureSubImage3D = loader.apply("glCompressedTextureSubImage3D");
        HANDLE$glCompressedTextureSubImage3D = RawFunctionLoader.link(SEGMENT$glCompressedTextureSubImage3D, Descriptors.DESCRIPTOR$glCompressedTextureSubImage3D);
        SEGMENT$glCompressedTextureSubImage3DEXT = loader.apply("glCompressedTextureSubImage3DEXT");
        HANDLE$glCompressedTextureSubImage3DEXT = RawFunctionLoader.link(SEGMENT$glCompressedTextureSubImage3DEXT, Descriptors.DESCRIPTOR$glCompressedTextureSubImage3DEXT);
        SEGMENT$glConservativeRasterParameterfNV = loader.apply("glConservativeRasterParameterfNV");
        HANDLE$glConservativeRasterParameterfNV = RawFunctionLoader.link(SEGMENT$glConservativeRasterParameterfNV, Descriptors.DESCRIPTOR$glConservativeRasterParameterfNV);
        SEGMENT$glConservativeRasterParameteriNV = loader.apply("glConservativeRasterParameteriNV");
        HANDLE$glConservativeRasterParameteriNV = RawFunctionLoader.link(SEGMENT$glConservativeRasterParameteriNV, Descriptors.DESCRIPTOR$glConservativeRasterParameteriNV);
        SEGMENT$glCopyBufferSubData = loader.apply("glCopyBufferSubData");
        HANDLE$glCopyBufferSubData = RawFunctionLoader.link(SEGMENT$glCopyBufferSubData, Descriptors.DESCRIPTOR$glCopyBufferSubData);
        SEGMENT$glCopyImageSubData = loader.apply("glCopyImageSubData");
        HANDLE$glCopyImageSubData = RawFunctionLoader.link(SEGMENT$glCopyImageSubData, Descriptors.DESCRIPTOR$glCopyImageSubData);
        SEGMENT$glCopyMultiTexImage1DEXT = loader.apply("glCopyMultiTexImage1DEXT");
        HANDLE$glCopyMultiTexImage1DEXT = RawFunctionLoader.link(SEGMENT$glCopyMultiTexImage1DEXT, Descriptors.DESCRIPTOR$glCopyMultiTexImage1DEXT);
        SEGMENT$glCopyMultiTexImage2DEXT = loader.apply("glCopyMultiTexImage2DEXT");
        HANDLE$glCopyMultiTexImage2DEXT = RawFunctionLoader.link(SEGMENT$glCopyMultiTexImage2DEXT, Descriptors.DESCRIPTOR$glCopyMultiTexImage2DEXT);
        SEGMENT$glCopyMultiTexSubImage1DEXT = loader.apply("glCopyMultiTexSubImage1DEXT");
        HANDLE$glCopyMultiTexSubImage1DEXT = RawFunctionLoader.link(SEGMENT$glCopyMultiTexSubImage1DEXT, Descriptors.DESCRIPTOR$glCopyMultiTexSubImage1DEXT);
        SEGMENT$glCopyMultiTexSubImage2DEXT = loader.apply("glCopyMultiTexSubImage2DEXT");
        HANDLE$glCopyMultiTexSubImage2DEXT = RawFunctionLoader.link(SEGMENT$glCopyMultiTexSubImage2DEXT, Descriptors.DESCRIPTOR$glCopyMultiTexSubImage2DEXT);
        SEGMENT$glCopyMultiTexSubImage3DEXT = loader.apply("glCopyMultiTexSubImage3DEXT");
        HANDLE$glCopyMultiTexSubImage3DEXT = RawFunctionLoader.link(SEGMENT$glCopyMultiTexSubImage3DEXT, Descriptors.DESCRIPTOR$glCopyMultiTexSubImage3DEXT);
        SEGMENT$glCopyNamedBufferSubData = loader.apply("glCopyNamedBufferSubData");
        HANDLE$glCopyNamedBufferSubData = RawFunctionLoader.link(SEGMENT$glCopyNamedBufferSubData, Descriptors.DESCRIPTOR$glCopyNamedBufferSubData);
        SEGMENT$glCopyPathNV = loader.apply("glCopyPathNV");
        HANDLE$glCopyPathNV = RawFunctionLoader.link(SEGMENT$glCopyPathNV, Descriptors.DESCRIPTOR$glCopyPathNV);
        SEGMENT$glCopyTexImage1D = loader.apply("glCopyTexImage1D");
        HANDLE$glCopyTexImage1D = RawFunctionLoader.link(SEGMENT$glCopyTexImage1D, Descriptors.DESCRIPTOR$glCopyTexImage1D);
        SEGMENT$glCopyTexImage2D = loader.apply("glCopyTexImage2D");
        HANDLE$glCopyTexImage2D = RawFunctionLoader.link(SEGMENT$glCopyTexImage2D, Descriptors.DESCRIPTOR$glCopyTexImage2D);
        SEGMENT$glCopyTexSubImage1D = loader.apply("glCopyTexSubImage1D");
        HANDLE$glCopyTexSubImage1D = RawFunctionLoader.link(SEGMENT$glCopyTexSubImage1D, Descriptors.DESCRIPTOR$glCopyTexSubImage1D);
        SEGMENT$glCopyTexSubImage2D = loader.apply("glCopyTexSubImage2D");
        HANDLE$glCopyTexSubImage2D = RawFunctionLoader.link(SEGMENT$glCopyTexSubImage2D, Descriptors.DESCRIPTOR$glCopyTexSubImage2D);
        SEGMENT$glCopyTexSubImage3D = loader.apply("glCopyTexSubImage3D");
        HANDLE$glCopyTexSubImage3D = RawFunctionLoader.link(SEGMENT$glCopyTexSubImage3D, Descriptors.DESCRIPTOR$glCopyTexSubImage3D);
        SEGMENT$glCopyTextureImage1DEXT = loader.apply("glCopyTextureImage1DEXT");
        HANDLE$glCopyTextureImage1DEXT = RawFunctionLoader.link(SEGMENT$glCopyTextureImage1DEXT, Descriptors.DESCRIPTOR$glCopyTextureImage1DEXT);
        SEGMENT$glCopyTextureImage2DEXT = loader.apply("glCopyTextureImage2DEXT");
        HANDLE$glCopyTextureImage2DEXT = RawFunctionLoader.link(SEGMENT$glCopyTextureImage2DEXT, Descriptors.DESCRIPTOR$glCopyTextureImage2DEXT);
        SEGMENT$glCopyTextureSubImage1D = loader.apply("glCopyTextureSubImage1D");
        HANDLE$glCopyTextureSubImage1D = RawFunctionLoader.link(SEGMENT$glCopyTextureSubImage1D, Descriptors.DESCRIPTOR$glCopyTextureSubImage1D);
        SEGMENT$glCopyTextureSubImage1DEXT = loader.apply("glCopyTextureSubImage1DEXT");
        HANDLE$glCopyTextureSubImage1DEXT = RawFunctionLoader.link(SEGMENT$glCopyTextureSubImage1DEXT, Descriptors.DESCRIPTOR$glCopyTextureSubImage1DEXT);
        SEGMENT$glCopyTextureSubImage2D = loader.apply("glCopyTextureSubImage2D");
        HANDLE$glCopyTextureSubImage2D = RawFunctionLoader.link(SEGMENT$glCopyTextureSubImage2D, Descriptors.DESCRIPTOR$glCopyTextureSubImage2D);
        SEGMENT$glCopyTextureSubImage2DEXT = loader.apply("glCopyTextureSubImage2DEXT");
        HANDLE$glCopyTextureSubImage2DEXT = RawFunctionLoader.link(SEGMENT$glCopyTextureSubImage2DEXT, Descriptors.DESCRIPTOR$glCopyTextureSubImage2DEXT);
        SEGMENT$glCopyTextureSubImage3D = loader.apply("glCopyTextureSubImage3D");
        HANDLE$glCopyTextureSubImage3D = RawFunctionLoader.link(SEGMENT$glCopyTextureSubImage3D, Descriptors.DESCRIPTOR$glCopyTextureSubImage3D);
        SEGMENT$glCopyTextureSubImage3DEXT = loader.apply("glCopyTextureSubImage3DEXT");
        HANDLE$glCopyTextureSubImage3DEXT = RawFunctionLoader.link(SEGMENT$glCopyTextureSubImage3DEXT, Descriptors.DESCRIPTOR$glCopyTextureSubImage3DEXT);
        SEGMENT$glCoverFillPathInstancedNV = loader.apply("glCoverFillPathInstancedNV");
        HANDLE$glCoverFillPathInstancedNV = RawFunctionLoader.link(SEGMENT$glCoverFillPathInstancedNV, Descriptors.DESCRIPTOR$glCoverFillPathInstancedNV);
        SEGMENT$glCoverFillPathNV = loader.apply("glCoverFillPathNV");
        HANDLE$glCoverFillPathNV = RawFunctionLoader.link(SEGMENT$glCoverFillPathNV, Descriptors.DESCRIPTOR$glCoverFillPathNV);
        SEGMENT$glCoverStrokePathInstancedNV = loader.apply("glCoverStrokePathInstancedNV");
        HANDLE$glCoverStrokePathInstancedNV = RawFunctionLoader.link(SEGMENT$glCoverStrokePathInstancedNV, Descriptors.DESCRIPTOR$glCoverStrokePathInstancedNV);
        SEGMENT$glCoverStrokePathNV = loader.apply("glCoverStrokePathNV");
        HANDLE$glCoverStrokePathNV = RawFunctionLoader.link(SEGMENT$glCoverStrokePathNV, Descriptors.DESCRIPTOR$glCoverStrokePathNV);
        SEGMENT$glCoverageModulationNV = loader.apply("glCoverageModulationNV");
        HANDLE$glCoverageModulationNV = RawFunctionLoader.link(SEGMENT$glCoverageModulationNV, Descriptors.DESCRIPTOR$glCoverageModulationNV);
        SEGMENT$glCoverageModulationTableNV = loader.apply("glCoverageModulationTableNV");
        HANDLE$glCoverageModulationTableNV = RawFunctionLoader.link(SEGMENT$glCoverageModulationTableNV, Descriptors.DESCRIPTOR$glCoverageModulationTableNV);
        SEGMENT$glCreateBuffers = loader.apply("glCreateBuffers");
        HANDLE$glCreateBuffers = RawFunctionLoader.link(SEGMENT$glCreateBuffers, Descriptors.DESCRIPTOR$glCreateBuffers);
        SEGMENT$glCreateCommandListsNV = loader.apply("glCreateCommandListsNV");
        HANDLE$glCreateCommandListsNV = RawFunctionLoader.link(SEGMENT$glCreateCommandListsNV, Descriptors.DESCRIPTOR$glCreateCommandListsNV);
        SEGMENT$glCreateFramebuffers = loader.apply("glCreateFramebuffers");
        HANDLE$glCreateFramebuffers = RawFunctionLoader.link(SEGMENT$glCreateFramebuffers, Descriptors.DESCRIPTOR$glCreateFramebuffers);
        SEGMENT$glCreatePerfQueryINTEL = loader.apply("glCreatePerfQueryINTEL");
        HANDLE$glCreatePerfQueryINTEL = RawFunctionLoader.link(SEGMENT$glCreatePerfQueryINTEL, Descriptors.DESCRIPTOR$glCreatePerfQueryINTEL);
        SEGMENT$glCreateProgram = loader.apply("glCreateProgram");
        HANDLE$glCreateProgram = RawFunctionLoader.link(SEGMENT$glCreateProgram, Descriptors.DESCRIPTOR$glCreateProgram);
        SEGMENT$glCreateProgramPipelines = loader.apply("glCreateProgramPipelines");
        HANDLE$glCreateProgramPipelines = RawFunctionLoader.link(SEGMENT$glCreateProgramPipelines, Descriptors.DESCRIPTOR$glCreateProgramPipelines);
        SEGMENT$glCreateQueries = loader.apply("glCreateQueries");
        HANDLE$glCreateQueries = RawFunctionLoader.link(SEGMENT$glCreateQueries, Descriptors.DESCRIPTOR$glCreateQueries);
        SEGMENT$glCreateRenderbuffers = loader.apply("glCreateRenderbuffers");
        HANDLE$glCreateRenderbuffers = RawFunctionLoader.link(SEGMENT$glCreateRenderbuffers, Descriptors.DESCRIPTOR$glCreateRenderbuffers);
        SEGMENT$glCreateSamplers = loader.apply("glCreateSamplers");
        HANDLE$glCreateSamplers = RawFunctionLoader.link(SEGMENT$glCreateSamplers, Descriptors.DESCRIPTOR$glCreateSamplers);
        SEGMENT$glCreateShader = loader.apply("glCreateShader");
        HANDLE$glCreateShader = RawFunctionLoader.link(SEGMENT$glCreateShader, Descriptors.DESCRIPTOR$glCreateShader);
        SEGMENT$glCreateShaderProgramEXT = loader.apply("glCreateShaderProgramEXT");
        HANDLE$glCreateShaderProgramEXT = RawFunctionLoader.link(SEGMENT$glCreateShaderProgramEXT, Descriptors.DESCRIPTOR$glCreateShaderProgramEXT);
        SEGMENT$glCreateShaderProgramv = loader.apply("glCreateShaderProgramv");
        HANDLE$glCreateShaderProgramv = RawFunctionLoader.link(SEGMENT$glCreateShaderProgramv, Descriptors.DESCRIPTOR$glCreateShaderProgramv);
        SEGMENT$glCreateShaderProgramvEXT = loader.apply("glCreateShaderProgramvEXT");
        HANDLE$glCreateShaderProgramvEXT = RawFunctionLoader.link(SEGMENT$glCreateShaderProgramvEXT, Descriptors.DESCRIPTOR$glCreateShaderProgramvEXT);
        SEGMENT$glCreateStatesNV = loader.apply("glCreateStatesNV");
        HANDLE$glCreateStatesNV = RawFunctionLoader.link(SEGMENT$glCreateStatesNV, Descriptors.DESCRIPTOR$glCreateStatesNV);
        SEGMENT$glCreateSyncFromCLeventARB = loader.apply("glCreateSyncFromCLeventARB");
        HANDLE$glCreateSyncFromCLeventARB = RawFunctionLoader.link(SEGMENT$glCreateSyncFromCLeventARB, Descriptors.DESCRIPTOR$glCreateSyncFromCLeventARB);
        SEGMENT$glCreateTextures = loader.apply("glCreateTextures");
        HANDLE$glCreateTextures = RawFunctionLoader.link(SEGMENT$glCreateTextures, Descriptors.DESCRIPTOR$glCreateTextures);
        SEGMENT$glCreateTransformFeedbacks = loader.apply("glCreateTransformFeedbacks");
        HANDLE$glCreateTransformFeedbacks = RawFunctionLoader.link(SEGMENT$glCreateTransformFeedbacks, Descriptors.DESCRIPTOR$glCreateTransformFeedbacks);
        SEGMENT$glCreateVertexArrays = loader.apply("glCreateVertexArrays");
        HANDLE$glCreateVertexArrays = RawFunctionLoader.link(SEGMENT$glCreateVertexArrays, Descriptors.DESCRIPTOR$glCreateVertexArrays);
        SEGMENT$glCullFace = loader.apply("glCullFace");
        HANDLE$glCullFace = RawFunctionLoader.link(SEGMENT$glCullFace, Descriptors.DESCRIPTOR$glCullFace);
        SEGMENT$glDebugMessageCallback = loader.apply("glDebugMessageCallback");
        HANDLE$glDebugMessageCallback = RawFunctionLoader.link(SEGMENT$glDebugMessageCallback, Descriptors.DESCRIPTOR$glDebugMessageCallback);
        SEGMENT$glDebugMessageCallbackARB = loader.apply("glDebugMessageCallbackARB");
        HANDLE$glDebugMessageCallbackARB = RawFunctionLoader.link(SEGMENT$glDebugMessageCallbackARB, Descriptors.DESCRIPTOR$glDebugMessageCallbackARB);
        SEGMENT$glDebugMessageCallbackKHR = loader.apply("glDebugMessageCallbackKHR");
        HANDLE$glDebugMessageCallbackKHR = RawFunctionLoader.link(SEGMENT$glDebugMessageCallbackKHR, Descriptors.DESCRIPTOR$glDebugMessageCallbackKHR);
        SEGMENT$glDebugMessageControl = loader.apply("glDebugMessageControl");
        HANDLE$glDebugMessageControl = RawFunctionLoader.link(SEGMENT$glDebugMessageControl, Descriptors.DESCRIPTOR$glDebugMessageControl);
        SEGMENT$glDebugMessageControlARB = loader.apply("glDebugMessageControlARB");
        HANDLE$glDebugMessageControlARB = RawFunctionLoader.link(SEGMENT$glDebugMessageControlARB, Descriptors.DESCRIPTOR$glDebugMessageControlARB);
        SEGMENT$glDebugMessageControlKHR = loader.apply("glDebugMessageControlKHR");
        HANDLE$glDebugMessageControlKHR = RawFunctionLoader.link(SEGMENT$glDebugMessageControlKHR, Descriptors.DESCRIPTOR$glDebugMessageControlKHR);
        SEGMENT$glDebugMessageInsert = loader.apply("glDebugMessageInsert");
        HANDLE$glDebugMessageInsert = RawFunctionLoader.link(SEGMENT$glDebugMessageInsert, Descriptors.DESCRIPTOR$glDebugMessageInsert);
        SEGMENT$glDebugMessageInsertARB = loader.apply("glDebugMessageInsertARB");
        HANDLE$glDebugMessageInsertARB = RawFunctionLoader.link(SEGMENT$glDebugMessageInsertARB, Descriptors.DESCRIPTOR$glDebugMessageInsertARB);
        SEGMENT$glDebugMessageInsertKHR = loader.apply("glDebugMessageInsertKHR");
        HANDLE$glDebugMessageInsertKHR = RawFunctionLoader.link(SEGMENT$glDebugMessageInsertKHR, Descriptors.DESCRIPTOR$glDebugMessageInsertKHR);
        SEGMENT$glDeleteBuffers = loader.apply("glDeleteBuffers");
        HANDLE$glDeleteBuffers = RawFunctionLoader.link(SEGMENT$glDeleteBuffers, Descriptors.DESCRIPTOR$glDeleteBuffers);
        SEGMENT$glDeleteCommandListsNV = loader.apply("glDeleteCommandListsNV");
        HANDLE$glDeleteCommandListsNV = RawFunctionLoader.link(SEGMENT$glDeleteCommandListsNV, Descriptors.DESCRIPTOR$glDeleteCommandListsNV);
        SEGMENT$glDeleteFramebuffers = loader.apply("glDeleteFramebuffers");
        HANDLE$glDeleteFramebuffers = RawFunctionLoader.link(SEGMENT$glDeleteFramebuffers, Descriptors.DESCRIPTOR$glDeleteFramebuffers);
        SEGMENT$glDeleteNamedStringARB = loader.apply("glDeleteNamedStringARB");
        HANDLE$glDeleteNamedStringARB = RawFunctionLoader.link(SEGMENT$glDeleteNamedStringARB, Descriptors.DESCRIPTOR$glDeleteNamedStringARB);
        SEGMENT$glDeletePathsNV = loader.apply("glDeletePathsNV");
        HANDLE$glDeletePathsNV = RawFunctionLoader.link(SEGMENT$glDeletePathsNV, Descriptors.DESCRIPTOR$glDeletePathsNV);
        SEGMENT$glDeletePerfMonitorsAMD = loader.apply("glDeletePerfMonitorsAMD");
        HANDLE$glDeletePerfMonitorsAMD = RawFunctionLoader.link(SEGMENT$glDeletePerfMonitorsAMD, Descriptors.DESCRIPTOR$glDeletePerfMonitorsAMD);
        SEGMENT$glDeletePerfQueryINTEL = loader.apply("glDeletePerfQueryINTEL");
        HANDLE$glDeletePerfQueryINTEL = RawFunctionLoader.link(SEGMENT$glDeletePerfQueryINTEL, Descriptors.DESCRIPTOR$glDeletePerfQueryINTEL);
        SEGMENT$glDeleteProgram = loader.apply("glDeleteProgram");
        HANDLE$glDeleteProgram = RawFunctionLoader.link(SEGMENT$glDeleteProgram, Descriptors.DESCRIPTOR$glDeleteProgram);
        SEGMENT$glDeleteProgramPipelines = loader.apply("glDeleteProgramPipelines");
        HANDLE$glDeleteProgramPipelines = RawFunctionLoader.link(SEGMENT$glDeleteProgramPipelines, Descriptors.DESCRIPTOR$glDeleteProgramPipelines);
        SEGMENT$glDeleteProgramPipelinesEXT = loader.apply("glDeleteProgramPipelinesEXT");
        HANDLE$glDeleteProgramPipelinesEXT = RawFunctionLoader.link(SEGMENT$glDeleteProgramPipelinesEXT, Descriptors.DESCRIPTOR$glDeleteProgramPipelinesEXT);
        SEGMENT$glDeleteQueries = loader.apply("glDeleteQueries");
        HANDLE$glDeleteQueries = RawFunctionLoader.link(SEGMENT$glDeleteQueries, Descriptors.DESCRIPTOR$glDeleteQueries);
        SEGMENT$glDeleteRenderbuffers = loader.apply("glDeleteRenderbuffers");
        HANDLE$glDeleteRenderbuffers = RawFunctionLoader.link(SEGMENT$glDeleteRenderbuffers, Descriptors.DESCRIPTOR$glDeleteRenderbuffers);
        SEGMENT$glDeleteSamplers = loader.apply("glDeleteSamplers");
        HANDLE$glDeleteSamplers = RawFunctionLoader.link(SEGMENT$glDeleteSamplers, Descriptors.DESCRIPTOR$glDeleteSamplers);
        SEGMENT$glDeleteShader = loader.apply("glDeleteShader");
        HANDLE$glDeleteShader = RawFunctionLoader.link(SEGMENT$glDeleteShader, Descriptors.DESCRIPTOR$glDeleteShader);
        SEGMENT$glDeleteStatesNV = loader.apply("glDeleteStatesNV");
        HANDLE$glDeleteStatesNV = RawFunctionLoader.link(SEGMENT$glDeleteStatesNV, Descriptors.DESCRIPTOR$glDeleteStatesNV);
        SEGMENT$glDeleteSync = loader.apply("glDeleteSync");
        HANDLE$glDeleteSync = RawFunctionLoader.link(SEGMENT$glDeleteSync, Descriptors.DESCRIPTOR$glDeleteSync);
        SEGMENT$glDeleteTextures = loader.apply("glDeleteTextures");
        HANDLE$glDeleteTextures = RawFunctionLoader.link(SEGMENT$glDeleteTextures, Descriptors.DESCRIPTOR$glDeleteTextures);
        SEGMENT$glDeleteTransformFeedbacks = loader.apply("glDeleteTransformFeedbacks");
        HANDLE$glDeleteTransformFeedbacks = RawFunctionLoader.link(SEGMENT$glDeleteTransformFeedbacks, Descriptors.DESCRIPTOR$glDeleteTransformFeedbacks);
        SEGMENT$glDeleteVertexArrays = loader.apply("glDeleteVertexArrays");
        HANDLE$glDeleteVertexArrays = RawFunctionLoader.link(SEGMENT$glDeleteVertexArrays, Descriptors.DESCRIPTOR$glDeleteVertexArrays);
        SEGMENT$glDepthBoundsdNV = loader.apply("glDepthBoundsdNV");
        HANDLE$glDepthBoundsdNV = RawFunctionLoader.link(SEGMENT$glDepthBoundsdNV, Descriptors.DESCRIPTOR$glDepthBoundsdNV);
        SEGMENT$glDepthFunc = loader.apply("glDepthFunc");
        HANDLE$glDepthFunc = RawFunctionLoader.link(SEGMENT$glDepthFunc, Descriptors.DESCRIPTOR$glDepthFunc);
        SEGMENT$glDepthMask = loader.apply("glDepthMask");
        HANDLE$glDepthMask = RawFunctionLoader.link(SEGMENT$glDepthMask, Descriptors.DESCRIPTOR$glDepthMask);
        SEGMENT$glDepthRange = loader.apply("glDepthRange");
        HANDLE$glDepthRange = RawFunctionLoader.link(SEGMENT$glDepthRange, Descriptors.DESCRIPTOR$glDepthRange);
        SEGMENT$glDepthRangeArraydvNV = loader.apply("glDepthRangeArraydvNV");
        HANDLE$glDepthRangeArraydvNV = RawFunctionLoader.link(SEGMENT$glDepthRangeArraydvNV, Descriptors.DESCRIPTOR$glDepthRangeArraydvNV);
        SEGMENT$glDepthRangeArrayv = loader.apply("glDepthRangeArrayv");
        HANDLE$glDepthRangeArrayv = RawFunctionLoader.link(SEGMENT$glDepthRangeArrayv, Descriptors.DESCRIPTOR$glDepthRangeArrayv);
        SEGMENT$glDepthRangeIndexed = loader.apply("glDepthRangeIndexed");
        HANDLE$glDepthRangeIndexed = RawFunctionLoader.link(SEGMENT$glDepthRangeIndexed, Descriptors.DESCRIPTOR$glDepthRangeIndexed);
        SEGMENT$glDepthRangeIndexeddNV = loader.apply("glDepthRangeIndexeddNV");
        HANDLE$glDepthRangeIndexeddNV = RawFunctionLoader.link(SEGMENT$glDepthRangeIndexeddNV, Descriptors.DESCRIPTOR$glDepthRangeIndexeddNV);
        SEGMENT$glDepthRangedNV = loader.apply("glDepthRangedNV");
        HANDLE$glDepthRangedNV = RawFunctionLoader.link(SEGMENT$glDepthRangedNV, Descriptors.DESCRIPTOR$glDepthRangedNV);
        SEGMENT$glDepthRangef = loader.apply("glDepthRangef");
        HANDLE$glDepthRangef = RawFunctionLoader.link(SEGMENT$glDepthRangef, Descriptors.DESCRIPTOR$glDepthRangef);
        SEGMENT$glDetachShader = loader.apply("glDetachShader");
        HANDLE$glDetachShader = RawFunctionLoader.link(SEGMENT$glDetachShader, Descriptors.DESCRIPTOR$glDetachShader);
        SEGMENT$glDisable = loader.apply("glDisable");
        HANDLE$glDisable = RawFunctionLoader.link(SEGMENT$glDisable, Descriptors.DESCRIPTOR$glDisable);
        SEGMENT$glDisableClientStateIndexedEXT = loader.apply("glDisableClientStateIndexedEXT");
        HANDLE$glDisableClientStateIndexedEXT = RawFunctionLoader.link(SEGMENT$glDisableClientStateIndexedEXT, Descriptors.DESCRIPTOR$glDisableClientStateIndexedEXT);
        SEGMENT$glDisableClientStateiEXT = loader.apply("glDisableClientStateiEXT");
        HANDLE$glDisableClientStateiEXT = RawFunctionLoader.link(SEGMENT$glDisableClientStateiEXT, Descriptors.DESCRIPTOR$glDisableClientStateiEXT);
        SEGMENT$glDisableIndexedEXT = loader.apply("glDisableIndexedEXT");
        HANDLE$glDisableIndexedEXT = RawFunctionLoader.link(SEGMENT$glDisableIndexedEXT, Descriptors.DESCRIPTOR$glDisableIndexedEXT);
        SEGMENT$glDisableVertexArrayAttrib = loader.apply("glDisableVertexArrayAttrib");
        HANDLE$glDisableVertexArrayAttrib = RawFunctionLoader.link(SEGMENT$glDisableVertexArrayAttrib, Descriptors.DESCRIPTOR$glDisableVertexArrayAttrib);
        SEGMENT$glDisableVertexArrayAttribEXT = loader.apply("glDisableVertexArrayAttribEXT");
        HANDLE$glDisableVertexArrayAttribEXT = RawFunctionLoader.link(SEGMENT$glDisableVertexArrayAttribEXT, Descriptors.DESCRIPTOR$glDisableVertexArrayAttribEXT);
        SEGMENT$glDisableVertexArrayEXT = loader.apply("glDisableVertexArrayEXT");
        HANDLE$glDisableVertexArrayEXT = RawFunctionLoader.link(SEGMENT$glDisableVertexArrayEXT, Descriptors.DESCRIPTOR$glDisableVertexArrayEXT);
        SEGMENT$glDisableVertexAttribArray = loader.apply("glDisableVertexAttribArray");
        HANDLE$glDisableVertexAttribArray = RawFunctionLoader.link(SEGMENT$glDisableVertexAttribArray, Descriptors.DESCRIPTOR$glDisableVertexAttribArray);
        SEGMENT$glDisablei = loader.apply("glDisablei");
        HANDLE$glDisablei = RawFunctionLoader.link(SEGMENT$glDisablei, Descriptors.DESCRIPTOR$glDisablei);
        SEGMENT$glDispatchCompute = loader.apply("glDispatchCompute");
        HANDLE$glDispatchCompute = RawFunctionLoader.link(SEGMENT$glDispatchCompute, Descriptors.DESCRIPTOR$glDispatchCompute);
        SEGMENT$glDispatchComputeGroupSizeARB = loader.apply("glDispatchComputeGroupSizeARB");
        HANDLE$glDispatchComputeGroupSizeARB = RawFunctionLoader.link(SEGMENT$glDispatchComputeGroupSizeARB, Descriptors.DESCRIPTOR$glDispatchComputeGroupSizeARB);
        SEGMENT$glDispatchComputeIndirect = loader.apply("glDispatchComputeIndirect");
        HANDLE$glDispatchComputeIndirect = RawFunctionLoader.link(SEGMENT$glDispatchComputeIndirect, Descriptors.DESCRIPTOR$glDispatchComputeIndirect);
        SEGMENT$glDrawArrays = loader.apply("glDrawArrays");
        HANDLE$glDrawArrays = RawFunctionLoader.link(SEGMENT$glDrawArrays, Descriptors.DESCRIPTOR$glDrawArrays);
        SEGMENT$glDrawArraysIndirect = loader.apply("glDrawArraysIndirect");
        HANDLE$glDrawArraysIndirect = RawFunctionLoader.link(SEGMENT$glDrawArraysIndirect, Descriptors.DESCRIPTOR$glDrawArraysIndirect);
        SEGMENT$glDrawArraysInstanced = loader.apply("glDrawArraysInstanced");
        HANDLE$glDrawArraysInstanced = RawFunctionLoader.link(SEGMENT$glDrawArraysInstanced, Descriptors.DESCRIPTOR$glDrawArraysInstanced);
        SEGMENT$glDrawArraysInstancedARB = loader.apply("glDrawArraysInstancedARB");
        HANDLE$glDrawArraysInstancedARB = RawFunctionLoader.link(SEGMENT$glDrawArraysInstancedARB, Descriptors.DESCRIPTOR$glDrawArraysInstancedARB);
        SEGMENT$glDrawArraysInstancedBaseInstance = loader.apply("glDrawArraysInstancedBaseInstance");
        HANDLE$glDrawArraysInstancedBaseInstance = RawFunctionLoader.link(SEGMENT$glDrawArraysInstancedBaseInstance, Descriptors.DESCRIPTOR$glDrawArraysInstancedBaseInstance);
        SEGMENT$glDrawArraysInstancedEXT = loader.apply("glDrawArraysInstancedEXT");
        HANDLE$glDrawArraysInstancedEXT = RawFunctionLoader.link(SEGMENT$glDrawArraysInstancedEXT, Descriptors.DESCRIPTOR$glDrawArraysInstancedEXT);
        SEGMENT$glDrawBuffer = loader.apply("glDrawBuffer");
        HANDLE$glDrawBuffer = RawFunctionLoader.link(SEGMENT$glDrawBuffer, Descriptors.DESCRIPTOR$glDrawBuffer);
        SEGMENT$glDrawBuffers = loader.apply("glDrawBuffers");
        HANDLE$glDrawBuffers = RawFunctionLoader.link(SEGMENT$glDrawBuffers, Descriptors.DESCRIPTOR$glDrawBuffers);
        SEGMENT$glDrawCommandsAddressNV = loader.apply("glDrawCommandsAddressNV");
        HANDLE$glDrawCommandsAddressNV = RawFunctionLoader.link(SEGMENT$glDrawCommandsAddressNV, Descriptors.DESCRIPTOR$glDrawCommandsAddressNV);
        SEGMENT$glDrawCommandsNV = loader.apply("glDrawCommandsNV");
        HANDLE$glDrawCommandsNV = RawFunctionLoader.link(SEGMENT$glDrawCommandsNV, Descriptors.DESCRIPTOR$glDrawCommandsNV);
        SEGMENT$glDrawCommandsStatesAddressNV = loader.apply("glDrawCommandsStatesAddressNV");
        HANDLE$glDrawCommandsStatesAddressNV = RawFunctionLoader.link(SEGMENT$glDrawCommandsStatesAddressNV, Descriptors.DESCRIPTOR$glDrawCommandsStatesAddressNV);
        SEGMENT$glDrawCommandsStatesNV = loader.apply("glDrawCommandsStatesNV");
        HANDLE$glDrawCommandsStatesNV = RawFunctionLoader.link(SEGMENT$glDrawCommandsStatesNV, Descriptors.DESCRIPTOR$glDrawCommandsStatesNV);
        SEGMENT$glDrawElements = loader.apply("glDrawElements");
        HANDLE$glDrawElements = RawFunctionLoader.link(SEGMENT$glDrawElements, Descriptors.DESCRIPTOR$glDrawElements);
        SEGMENT$glDrawElementsBaseVertex = loader.apply("glDrawElementsBaseVertex");
        HANDLE$glDrawElementsBaseVertex = RawFunctionLoader.link(SEGMENT$glDrawElementsBaseVertex, Descriptors.DESCRIPTOR$glDrawElementsBaseVertex);
        SEGMENT$glDrawElementsIndirect = loader.apply("glDrawElementsIndirect");
        HANDLE$glDrawElementsIndirect = RawFunctionLoader.link(SEGMENT$glDrawElementsIndirect, Descriptors.DESCRIPTOR$glDrawElementsIndirect);
        SEGMENT$glDrawElementsInstanced = loader.apply("glDrawElementsInstanced");
        HANDLE$glDrawElementsInstanced = RawFunctionLoader.link(SEGMENT$glDrawElementsInstanced, Descriptors.DESCRIPTOR$glDrawElementsInstanced);
        SEGMENT$glDrawElementsInstancedARB = loader.apply("glDrawElementsInstancedARB");
        HANDLE$glDrawElementsInstancedARB = RawFunctionLoader.link(SEGMENT$glDrawElementsInstancedARB, Descriptors.DESCRIPTOR$glDrawElementsInstancedARB);
        SEGMENT$glDrawElementsInstancedBaseInstance = loader.apply("glDrawElementsInstancedBaseInstance");
        HANDLE$glDrawElementsInstancedBaseInstance = RawFunctionLoader.link(SEGMENT$glDrawElementsInstancedBaseInstance, Descriptors.DESCRIPTOR$glDrawElementsInstancedBaseInstance);
        SEGMENT$glDrawElementsInstancedBaseVertex = loader.apply("glDrawElementsInstancedBaseVertex");
        HANDLE$glDrawElementsInstancedBaseVertex = RawFunctionLoader.link(SEGMENT$glDrawElementsInstancedBaseVertex, Descriptors.DESCRIPTOR$glDrawElementsInstancedBaseVertex);
        SEGMENT$glDrawElementsInstancedBaseVertexBaseInstance = loader.apply("glDrawElementsInstancedBaseVertexBaseInstance");
        HANDLE$glDrawElementsInstancedBaseVertexBaseInstance = RawFunctionLoader.link(SEGMENT$glDrawElementsInstancedBaseVertexBaseInstance, Descriptors.DESCRIPTOR$glDrawElementsInstancedBaseVertexBaseInstance);
        SEGMENT$glDrawElementsInstancedEXT = loader.apply("glDrawElementsInstancedEXT");
        HANDLE$glDrawElementsInstancedEXT = RawFunctionLoader.link(SEGMENT$glDrawElementsInstancedEXT, Descriptors.DESCRIPTOR$glDrawElementsInstancedEXT);
        SEGMENT$glDrawMeshTasksIndirectNV = loader.apply("glDrawMeshTasksIndirectNV");
        HANDLE$glDrawMeshTasksIndirectNV = RawFunctionLoader.link(SEGMENT$glDrawMeshTasksIndirectNV, Descriptors.DESCRIPTOR$glDrawMeshTasksIndirectNV);
        SEGMENT$glDrawMeshTasksNV = loader.apply("glDrawMeshTasksNV");
        HANDLE$glDrawMeshTasksNV = RawFunctionLoader.link(SEGMENT$glDrawMeshTasksNV, Descriptors.DESCRIPTOR$glDrawMeshTasksNV);
        SEGMENT$glDrawRangeElements = loader.apply("glDrawRangeElements");
        HANDLE$glDrawRangeElements = RawFunctionLoader.link(SEGMENT$glDrawRangeElements, Descriptors.DESCRIPTOR$glDrawRangeElements);
        SEGMENT$glDrawRangeElementsBaseVertex = loader.apply("glDrawRangeElementsBaseVertex");
        HANDLE$glDrawRangeElementsBaseVertex = RawFunctionLoader.link(SEGMENT$glDrawRangeElementsBaseVertex, Descriptors.DESCRIPTOR$glDrawRangeElementsBaseVertex);
        SEGMENT$glDrawTransformFeedback = loader.apply("glDrawTransformFeedback");
        HANDLE$glDrawTransformFeedback = RawFunctionLoader.link(SEGMENT$glDrawTransformFeedback, Descriptors.DESCRIPTOR$glDrawTransformFeedback);
        SEGMENT$glDrawTransformFeedbackInstanced = loader.apply("glDrawTransformFeedbackInstanced");
        HANDLE$glDrawTransformFeedbackInstanced = RawFunctionLoader.link(SEGMENT$glDrawTransformFeedbackInstanced, Descriptors.DESCRIPTOR$glDrawTransformFeedbackInstanced);
        SEGMENT$glDrawTransformFeedbackStream = loader.apply("glDrawTransformFeedbackStream");
        HANDLE$glDrawTransformFeedbackStream = RawFunctionLoader.link(SEGMENT$glDrawTransformFeedbackStream, Descriptors.DESCRIPTOR$glDrawTransformFeedbackStream);
        SEGMENT$glDrawTransformFeedbackStreamInstanced = loader.apply("glDrawTransformFeedbackStreamInstanced");
        HANDLE$glDrawTransformFeedbackStreamInstanced = RawFunctionLoader.link(SEGMENT$glDrawTransformFeedbackStreamInstanced, Descriptors.DESCRIPTOR$glDrawTransformFeedbackStreamInstanced);
        SEGMENT$glDrawVkImageNV = loader.apply("glDrawVkImageNV");
        HANDLE$glDrawVkImageNV = RawFunctionLoader.link(SEGMENT$glDrawVkImageNV, Descriptors.DESCRIPTOR$glDrawVkImageNV);
        SEGMENT$glEGLImageTargetTexStorageEXT = loader.apply("glEGLImageTargetTexStorageEXT");
        HANDLE$glEGLImageTargetTexStorageEXT = RawFunctionLoader.link(SEGMENT$glEGLImageTargetTexStorageEXT, Descriptors.DESCRIPTOR$glEGLImageTargetTexStorageEXT);
        SEGMENT$glEGLImageTargetTextureStorageEXT = loader.apply("glEGLImageTargetTextureStorageEXT");
        HANDLE$glEGLImageTargetTextureStorageEXT = RawFunctionLoader.link(SEGMENT$glEGLImageTargetTextureStorageEXT, Descriptors.DESCRIPTOR$glEGLImageTargetTextureStorageEXT);
        SEGMENT$glEdgeFlagFormatNV = loader.apply("glEdgeFlagFormatNV");
        HANDLE$glEdgeFlagFormatNV = RawFunctionLoader.link(SEGMENT$glEdgeFlagFormatNV, Descriptors.DESCRIPTOR$glEdgeFlagFormatNV);
        SEGMENT$glEnable = loader.apply("glEnable");
        HANDLE$glEnable = RawFunctionLoader.link(SEGMENT$glEnable, Descriptors.DESCRIPTOR$glEnable);
        SEGMENT$glEnableClientStateIndexedEXT = loader.apply("glEnableClientStateIndexedEXT");
        HANDLE$glEnableClientStateIndexedEXT = RawFunctionLoader.link(SEGMENT$glEnableClientStateIndexedEXT, Descriptors.DESCRIPTOR$glEnableClientStateIndexedEXT);
        SEGMENT$glEnableClientStateiEXT = loader.apply("glEnableClientStateiEXT");
        HANDLE$glEnableClientStateiEXT = RawFunctionLoader.link(SEGMENT$glEnableClientStateiEXT, Descriptors.DESCRIPTOR$glEnableClientStateiEXT);
        SEGMENT$glEnableIndexedEXT = loader.apply("glEnableIndexedEXT");
        HANDLE$glEnableIndexedEXT = RawFunctionLoader.link(SEGMENT$glEnableIndexedEXT, Descriptors.DESCRIPTOR$glEnableIndexedEXT);
        SEGMENT$glEnableVertexArrayAttrib = loader.apply("glEnableVertexArrayAttrib");
        HANDLE$glEnableVertexArrayAttrib = RawFunctionLoader.link(SEGMENT$glEnableVertexArrayAttrib, Descriptors.DESCRIPTOR$glEnableVertexArrayAttrib);
        SEGMENT$glEnableVertexArrayAttribEXT = loader.apply("glEnableVertexArrayAttribEXT");
        HANDLE$glEnableVertexArrayAttribEXT = RawFunctionLoader.link(SEGMENT$glEnableVertexArrayAttribEXT, Descriptors.DESCRIPTOR$glEnableVertexArrayAttribEXT);
        SEGMENT$glEnableVertexArrayEXT = loader.apply("glEnableVertexArrayEXT");
        HANDLE$glEnableVertexArrayEXT = RawFunctionLoader.link(SEGMENT$glEnableVertexArrayEXT, Descriptors.DESCRIPTOR$glEnableVertexArrayEXT);
        SEGMENT$glEnableVertexAttribArray = loader.apply("glEnableVertexAttribArray");
        HANDLE$glEnableVertexAttribArray = RawFunctionLoader.link(SEGMENT$glEnableVertexAttribArray, Descriptors.DESCRIPTOR$glEnableVertexAttribArray);
        SEGMENT$glEnablei = loader.apply("glEnablei");
        HANDLE$glEnablei = RawFunctionLoader.link(SEGMENT$glEnablei, Descriptors.DESCRIPTOR$glEnablei);
        SEGMENT$glEndConditionalRender = loader.apply("glEndConditionalRender");
        HANDLE$glEndConditionalRender = RawFunctionLoader.link(SEGMENT$glEndConditionalRender, Descriptors.DESCRIPTOR$glEndConditionalRender);
        SEGMENT$glEndConditionalRenderNV = loader.apply("glEndConditionalRenderNV");
        HANDLE$glEndConditionalRenderNV = RawFunctionLoader.link(SEGMENT$glEndConditionalRenderNV, Descriptors.DESCRIPTOR$glEndConditionalRenderNV);
        SEGMENT$glEndPerfMonitorAMD = loader.apply("glEndPerfMonitorAMD");
        HANDLE$glEndPerfMonitorAMD = RawFunctionLoader.link(SEGMENT$glEndPerfMonitorAMD, Descriptors.DESCRIPTOR$glEndPerfMonitorAMD);
        SEGMENT$glEndPerfQueryINTEL = loader.apply("glEndPerfQueryINTEL");
        HANDLE$glEndPerfQueryINTEL = RawFunctionLoader.link(SEGMENT$glEndPerfQueryINTEL, Descriptors.DESCRIPTOR$glEndPerfQueryINTEL);
        SEGMENT$glEndQuery = loader.apply("glEndQuery");
        HANDLE$glEndQuery = RawFunctionLoader.link(SEGMENT$glEndQuery, Descriptors.DESCRIPTOR$glEndQuery);
        SEGMENT$glEndQueryIndexed = loader.apply("glEndQueryIndexed");
        HANDLE$glEndQueryIndexed = RawFunctionLoader.link(SEGMENT$glEndQueryIndexed, Descriptors.DESCRIPTOR$glEndQueryIndexed);
        SEGMENT$glEndTransformFeedback = loader.apply("glEndTransformFeedback");
        HANDLE$glEndTransformFeedback = RawFunctionLoader.link(SEGMENT$glEndTransformFeedback, Descriptors.DESCRIPTOR$glEndTransformFeedback);
        SEGMENT$glEvaluateDepthValuesARB = loader.apply("glEvaluateDepthValuesARB");
        HANDLE$glEvaluateDepthValuesARB = RawFunctionLoader.link(SEGMENT$glEvaluateDepthValuesARB, Descriptors.DESCRIPTOR$glEvaluateDepthValuesARB);
        SEGMENT$glFenceSync = loader.apply("glFenceSync");
        HANDLE$glFenceSync = RawFunctionLoader.link(SEGMENT$glFenceSync, Descriptors.DESCRIPTOR$glFenceSync);
        SEGMENT$glFinish = loader.apply("glFinish");
        HANDLE$glFinish = RawFunctionLoader.link(SEGMENT$glFinish, Descriptors.DESCRIPTOR$glFinish);
        SEGMENT$glFlush = loader.apply("glFlush");
        HANDLE$glFlush = RawFunctionLoader.link(SEGMENT$glFlush, Descriptors.DESCRIPTOR$glFlush);
        SEGMENT$glFlushMappedBufferRange = loader.apply("glFlushMappedBufferRange");
        HANDLE$glFlushMappedBufferRange = RawFunctionLoader.link(SEGMENT$glFlushMappedBufferRange, Descriptors.DESCRIPTOR$glFlushMappedBufferRange);
        SEGMENT$glFlushMappedNamedBufferRange = loader.apply("glFlushMappedNamedBufferRange");
        HANDLE$glFlushMappedNamedBufferRange = RawFunctionLoader.link(SEGMENT$glFlushMappedNamedBufferRange, Descriptors.DESCRIPTOR$glFlushMappedNamedBufferRange);
        SEGMENT$glFlushMappedNamedBufferRangeEXT = loader.apply("glFlushMappedNamedBufferRangeEXT");
        HANDLE$glFlushMappedNamedBufferRangeEXT = RawFunctionLoader.link(SEGMENT$glFlushMappedNamedBufferRangeEXT, Descriptors.DESCRIPTOR$glFlushMappedNamedBufferRangeEXT);
        SEGMENT$glFogCoordFormatNV = loader.apply("glFogCoordFormatNV");
        HANDLE$glFogCoordFormatNV = RawFunctionLoader.link(SEGMENT$glFogCoordFormatNV, Descriptors.DESCRIPTOR$glFogCoordFormatNV);
        SEGMENT$glFragmentCoverageColorNV = loader.apply("glFragmentCoverageColorNV");
        HANDLE$glFragmentCoverageColorNV = RawFunctionLoader.link(SEGMENT$glFragmentCoverageColorNV, Descriptors.DESCRIPTOR$glFragmentCoverageColorNV);
        SEGMENT$glFramebufferDrawBufferEXT = loader.apply("glFramebufferDrawBufferEXT");
        HANDLE$glFramebufferDrawBufferEXT = RawFunctionLoader.link(SEGMENT$glFramebufferDrawBufferEXT, Descriptors.DESCRIPTOR$glFramebufferDrawBufferEXT);
        SEGMENT$glFramebufferDrawBuffersEXT = loader.apply("glFramebufferDrawBuffersEXT");
        HANDLE$glFramebufferDrawBuffersEXT = RawFunctionLoader.link(SEGMENT$glFramebufferDrawBuffersEXT, Descriptors.DESCRIPTOR$glFramebufferDrawBuffersEXT);
        SEGMENT$glFramebufferParameteri = loader.apply("glFramebufferParameteri");
        HANDLE$glFramebufferParameteri = RawFunctionLoader.link(SEGMENT$glFramebufferParameteri, Descriptors.DESCRIPTOR$glFramebufferParameteri);
        SEGMENT$glFramebufferParameteriMESA = loader.apply("glFramebufferParameteriMESA");
        HANDLE$glFramebufferParameteriMESA = RawFunctionLoader.link(SEGMENT$glFramebufferParameteriMESA, Descriptors.DESCRIPTOR$glFramebufferParameteriMESA);
        SEGMENT$glFramebufferReadBufferEXT = loader.apply("glFramebufferReadBufferEXT");
        HANDLE$glFramebufferReadBufferEXT = RawFunctionLoader.link(SEGMENT$glFramebufferReadBufferEXT, Descriptors.DESCRIPTOR$glFramebufferReadBufferEXT);
        SEGMENT$glFramebufferRenderbuffer = loader.apply("glFramebufferRenderbuffer");
        HANDLE$glFramebufferRenderbuffer = RawFunctionLoader.link(SEGMENT$glFramebufferRenderbuffer, Descriptors.DESCRIPTOR$glFramebufferRenderbuffer);
        SEGMENT$glFramebufferSampleLocationsfvARB = loader.apply("glFramebufferSampleLocationsfvARB");
        HANDLE$glFramebufferSampleLocationsfvARB = RawFunctionLoader.link(SEGMENT$glFramebufferSampleLocationsfvARB, Descriptors.DESCRIPTOR$glFramebufferSampleLocationsfvARB);
        SEGMENT$glFramebufferSampleLocationsfvNV = loader.apply("glFramebufferSampleLocationsfvNV");
        HANDLE$glFramebufferSampleLocationsfvNV = RawFunctionLoader.link(SEGMENT$glFramebufferSampleLocationsfvNV, Descriptors.DESCRIPTOR$glFramebufferSampleLocationsfvNV);
        SEGMENT$glFramebufferTexture = loader.apply("glFramebufferTexture");
        HANDLE$glFramebufferTexture = RawFunctionLoader.link(SEGMENT$glFramebufferTexture, Descriptors.DESCRIPTOR$glFramebufferTexture);
        SEGMENT$glFramebufferTexture1D = loader.apply("glFramebufferTexture1D");
        HANDLE$glFramebufferTexture1D = RawFunctionLoader.link(SEGMENT$glFramebufferTexture1D, Descriptors.DESCRIPTOR$glFramebufferTexture1D);
        SEGMENT$glFramebufferTexture2D = loader.apply("glFramebufferTexture2D");
        HANDLE$glFramebufferTexture2D = RawFunctionLoader.link(SEGMENT$glFramebufferTexture2D, Descriptors.DESCRIPTOR$glFramebufferTexture2D);
        SEGMENT$glFramebufferTexture3D = loader.apply("glFramebufferTexture3D");
        HANDLE$glFramebufferTexture3D = RawFunctionLoader.link(SEGMENT$glFramebufferTexture3D, Descriptors.DESCRIPTOR$glFramebufferTexture3D);
        SEGMENT$glFramebufferTextureARB = loader.apply("glFramebufferTextureARB");
        HANDLE$glFramebufferTextureARB = RawFunctionLoader.link(SEGMENT$glFramebufferTextureARB, Descriptors.DESCRIPTOR$glFramebufferTextureARB);
        SEGMENT$glFramebufferTextureFaceARB = loader.apply("glFramebufferTextureFaceARB");
        HANDLE$glFramebufferTextureFaceARB = RawFunctionLoader.link(SEGMENT$glFramebufferTextureFaceARB, Descriptors.DESCRIPTOR$glFramebufferTextureFaceARB);
        SEGMENT$glFramebufferTextureLayer = loader.apply("glFramebufferTextureLayer");
        HANDLE$glFramebufferTextureLayer = RawFunctionLoader.link(SEGMENT$glFramebufferTextureLayer, Descriptors.DESCRIPTOR$glFramebufferTextureLayer);
        SEGMENT$glFramebufferTextureLayerARB = loader.apply("glFramebufferTextureLayerARB");
        HANDLE$glFramebufferTextureLayerARB = RawFunctionLoader.link(SEGMENT$glFramebufferTextureLayerARB, Descriptors.DESCRIPTOR$glFramebufferTextureLayerARB);
        SEGMENT$glFramebufferTextureMultiviewOVR = loader.apply("glFramebufferTextureMultiviewOVR");
        HANDLE$glFramebufferTextureMultiviewOVR = RawFunctionLoader.link(SEGMENT$glFramebufferTextureMultiviewOVR, Descriptors.DESCRIPTOR$glFramebufferTextureMultiviewOVR);
        SEGMENT$glFrontFace = loader.apply("glFrontFace");
        HANDLE$glFrontFace = RawFunctionLoader.link(SEGMENT$glFrontFace, Descriptors.DESCRIPTOR$glFrontFace);
        SEGMENT$glGenBuffers = loader.apply("glGenBuffers");
        HANDLE$glGenBuffers = RawFunctionLoader.link(SEGMENT$glGenBuffers, Descriptors.DESCRIPTOR$glGenBuffers);
        SEGMENT$glGenFramebuffers = loader.apply("glGenFramebuffers");
        HANDLE$glGenFramebuffers = RawFunctionLoader.link(SEGMENT$glGenFramebuffers, Descriptors.DESCRIPTOR$glGenFramebuffers);
        SEGMENT$glGenPathsNV = loader.apply("glGenPathsNV");
        HANDLE$glGenPathsNV = RawFunctionLoader.link(SEGMENT$glGenPathsNV, Descriptors.DESCRIPTOR$glGenPathsNV);
        SEGMENT$glGenPerfMonitorsAMD = loader.apply("glGenPerfMonitorsAMD");
        HANDLE$glGenPerfMonitorsAMD = RawFunctionLoader.link(SEGMENT$glGenPerfMonitorsAMD, Descriptors.DESCRIPTOR$glGenPerfMonitorsAMD);
        SEGMENT$glGenProgramPipelines = loader.apply("glGenProgramPipelines");
        HANDLE$glGenProgramPipelines = RawFunctionLoader.link(SEGMENT$glGenProgramPipelines, Descriptors.DESCRIPTOR$glGenProgramPipelines);
        SEGMENT$glGenProgramPipelinesEXT = loader.apply("glGenProgramPipelinesEXT");
        HANDLE$glGenProgramPipelinesEXT = RawFunctionLoader.link(SEGMENT$glGenProgramPipelinesEXT, Descriptors.DESCRIPTOR$glGenProgramPipelinesEXT);
        SEGMENT$glGenQueries = loader.apply("glGenQueries");
        HANDLE$glGenQueries = RawFunctionLoader.link(SEGMENT$glGenQueries, Descriptors.DESCRIPTOR$glGenQueries);
        SEGMENT$glGenRenderbuffers = loader.apply("glGenRenderbuffers");
        HANDLE$glGenRenderbuffers = RawFunctionLoader.link(SEGMENT$glGenRenderbuffers, Descriptors.DESCRIPTOR$glGenRenderbuffers);
        SEGMENT$glGenSamplers = loader.apply("glGenSamplers");
        HANDLE$glGenSamplers = RawFunctionLoader.link(SEGMENT$glGenSamplers, Descriptors.DESCRIPTOR$glGenSamplers);
        SEGMENT$glGenTextures = loader.apply("glGenTextures");
        HANDLE$glGenTextures = RawFunctionLoader.link(SEGMENT$glGenTextures, Descriptors.DESCRIPTOR$glGenTextures);
        SEGMENT$glGenTransformFeedbacks = loader.apply("glGenTransformFeedbacks");
        HANDLE$glGenTransformFeedbacks = RawFunctionLoader.link(SEGMENT$glGenTransformFeedbacks, Descriptors.DESCRIPTOR$glGenTransformFeedbacks);
        SEGMENT$glGenVertexArrays = loader.apply("glGenVertexArrays");
        HANDLE$glGenVertexArrays = RawFunctionLoader.link(SEGMENT$glGenVertexArrays, Descriptors.DESCRIPTOR$glGenVertexArrays);
        SEGMENT$glGenerateMipmap = loader.apply("glGenerateMipmap");
        HANDLE$glGenerateMipmap = RawFunctionLoader.link(SEGMENT$glGenerateMipmap, Descriptors.DESCRIPTOR$glGenerateMipmap);
        SEGMENT$glGenerateMultiTexMipmapEXT = loader.apply("glGenerateMultiTexMipmapEXT");
        HANDLE$glGenerateMultiTexMipmapEXT = RawFunctionLoader.link(SEGMENT$glGenerateMultiTexMipmapEXT, Descriptors.DESCRIPTOR$glGenerateMultiTexMipmapEXT);
        SEGMENT$glGenerateTextureMipmap = loader.apply("glGenerateTextureMipmap");
        HANDLE$glGenerateTextureMipmap = RawFunctionLoader.link(SEGMENT$glGenerateTextureMipmap, Descriptors.DESCRIPTOR$glGenerateTextureMipmap);
        SEGMENT$glGenerateTextureMipmapEXT = loader.apply("glGenerateTextureMipmapEXT");
        HANDLE$glGenerateTextureMipmapEXT = RawFunctionLoader.link(SEGMENT$glGenerateTextureMipmapEXT, Descriptors.DESCRIPTOR$glGenerateTextureMipmapEXT);
        SEGMENT$glGetActiveAtomicCounterBufferiv = loader.apply("glGetActiveAtomicCounterBufferiv");
        HANDLE$glGetActiveAtomicCounterBufferiv = RawFunctionLoader.link(SEGMENT$glGetActiveAtomicCounterBufferiv, Descriptors.DESCRIPTOR$glGetActiveAtomicCounterBufferiv);
        SEGMENT$glGetActiveAttrib = loader.apply("glGetActiveAttrib");
        HANDLE$glGetActiveAttrib = RawFunctionLoader.link(SEGMENT$glGetActiveAttrib, Descriptors.DESCRIPTOR$glGetActiveAttrib);
        SEGMENT$glGetActiveSubroutineName = loader.apply("glGetActiveSubroutineName");
        HANDLE$glGetActiveSubroutineName = RawFunctionLoader.link(SEGMENT$glGetActiveSubroutineName, Descriptors.DESCRIPTOR$glGetActiveSubroutineName);
        SEGMENT$glGetActiveSubroutineUniformName = loader.apply("glGetActiveSubroutineUniformName");
        HANDLE$glGetActiveSubroutineUniformName = RawFunctionLoader.link(SEGMENT$glGetActiveSubroutineUniformName, Descriptors.DESCRIPTOR$glGetActiveSubroutineUniformName);
        SEGMENT$glGetActiveSubroutineUniformiv = loader.apply("glGetActiveSubroutineUniformiv");
        HANDLE$glGetActiveSubroutineUniformiv = RawFunctionLoader.link(SEGMENT$glGetActiveSubroutineUniformiv, Descriptors.DESCRIPTOR$glGetActiveSubroutineUniformiv);
        SEGMENT$glGetActiveUniform = loader.apply("glGetActiveUniform");
        HANDLE$glGetActiveUniform = RawFunctionLoader.link(SEGMENT$glGetActiveUniform, Descriptors.DESCRIPTOR$glGetActiveUniform);
        SEGMENT$glGetActiveUniformBlockName = loader.apply("glGetActiveUniformBlockName");
        HANDLE$glGetActiveUniformBlockName = RawFunctionLoader.link(SEGMENT$glGetActiveUniformBlockName, Descriptors.DESCRIPTOR$glGetActiveUniformBlockName);
        SEGMENT$glGetActiveUniformBlockiv = loader.apply("glGetActiveUniformBlockiv");
        HANDLE$glGetActiveUniformBlockiv = RawFunctionLoader.link(SEGMENT$glGetActiveUniformBlockiv, Descriptors.DESCRIPTOR$glGetActiveUniformBlockiv);
        SEGMENT$glGetActiveUniformName = loader.apply("glGetActiveUniformName");
        HANDLE$glGetActiveUniformName = RawFunctionLoader.link(SEGMENT$glGetActiveUniformName, Descriptors.DESCRIPTOR$glGetActiveUniformName);
        SEGMENT$glGetActiveUniformsiv = loader.apply("glGetActiveUniformsiv");
        HANDLE$glGetActiveUniformsiv = RawFunctionLoader.link(SEGMENT$glGetActiveUniformsiv, Descriptors.DESCRIPTOR$glGetActiveUniformsiv);
        SEGMENT$glGetAttachedShaders = loader.apply("glGetAttachedShaders");
        HANDLE$glGetAttachedShaders = RawFunctionLoader.link(SEGMENT$glGetAttachedShaders, Descriptors.DESCRIPTOR$glGetAttachedShaders);
        SEGMENT$glGetAttribLocation = loader.apply("glGetAttribLocation");
        HANDLE$glGetAttribLocation = RawFunctionLoader.link(SEGMENT$glGetAttribLocation, Descriptors.DESCRIPTOR$glGetAttribLocation);
        SEGMENT$glGetBooleanIndexedvEXT = loader.apply("glGetBooleanIndexedvEXT");
        HANDLE$glGetBooleanIndexedvEXT = RawFunctionLoader.link(SEGMENT$glGetBooleanIndexedvEXT, Descriptors.DESCRIPTOR$glGetBooleanIndexedvEXT);
        SEGMENT$glGetBooleani_v = loader.apply("glGetBooleani_v");
        HANDLE$glGetBooleani_v = RawFunctionLoader.link(SEGMENT$glGetBooleani_v, Descriptors.DESCRIPTOR$glGetBooleani_v);
        SEGMENT$glGetBooleanv = loader.apply("glGetBooleanv");
        HANDLE$glGetBooleanv = RawFunctionLoader.link(SEGMENT$glGetBooleanv, Descriptors.DESCRIPTOR$glGetBooleanv);
        SEGMENT$glGetBufferParameteri64v = loader.apply("glGetBufferParameteri64v");
        HANDLE$glGetBufferParameteri64v = RawFunctionLoader.link(SEGMENT$glGetBufferParameteri64v, Descriptors.DESCRIPTOR$glGetBufferParameteri64v);
        SEGMENT$glGetBufferParameteriv = loader.apply("glGetBufferParameteriv");
        HANDLE$glGetBufferParameteriv = RawFunctionLoader.link(SEGMENT$glGetBufferParameteriv, Descriptors.DESCRIPTOR$glGetBufferParameteriv);
        SEGMENT$glGetBufferParameterui64vNV = loader.apply("glGetBufferParameterui64vNV");
        HANDLE$glGetBufferParameterui64vNV = RawFunctionLoader.link(SEGMENT$glGetBufferParameterui64vNV, Descriptors.DESCRIPTOR$glGetBufferParameterui64vNV);
        SEGMENT$glGetBufferPointerv = loader.apply("glGetBufferPointerv");
        HANDLE$glGetBufferPointerv = RawFunctionLoader.link(SEGMENT$glGetBufferPointerv, Descriptors.DESCRIPTOR$glGetBufferPointerv);
        SEGMENT$glGetBufferSubData = loader.apply("glGetBufferSubData");
        HANDLE$glGetBufferSubData = RawFunctionLoader.link(SEGMENT$glGetBufferSubData, Descriptors.DESCRIPTOR$glGetBufferSubData);
        SEGMENT$glGetCommandHeaderNV = loader.apply("glGetCommandHeaderNV");
        HANDLE$glGetCommandHeaderNV = RawFunctionLoader.link(SEGMENT$glGetCommandHeaderNV, Descriptors.DESCRIPTOR$glGetCommandHeaderNV);
        SEGMENT$glGetCompressedMultiTexImageEXT = loader.apply("glGetCompressedMultiTexImageEXT");
        HANDLE$glGetCompressedMultiTexImageEXT = RawFunctionLoader.link(SEGMENT$glGetCompressedMultiTexImageEXT, Descriptors.DESCRIPTOR$glGetCompressedMultiTexImageEXT);
        SEGMENT$glGetCompressedTexImage = loader.apply("glGetCompressedTexImage");
        HANDLE$glGetCompressedTexImage = RawFunctionLoader.link(SEGMENT$glGetCompressedTexImage, Descriptors.DESCRIPTOR$glGetCompressedTexImage);
        SEGMENT$glGetCompressedTextureImage = loader.apply("glGetCompressedTextureImage");
        HANDLE$glGetCompressedTextureImage = RawFunctionLoader.link(SEGMENT$glGetCompressedTextureImage, Descriptors.DESCRIPTOR$glGetCompressedTextureImage);
        SEGMENT$glGetCompressedTextureImageEXT = loader.apply("glGetCompressedTextureImageEXT");
        HANDLE$glGetCompressedTextureImageEXT = RawFunctionLoader.link(SEGMENT$glGetCompressedTextureImageEXT, Descriptors.DESCRIPTOR$glGetCompressedTextureImageEXT);
        SEGMENT$glGetCompressedTextureSubImage = loader.apply("glGetCompressedTextureSubImage");
        HANDLE$glGetCompressedTextureSubImage = RawFunctionLoader.link(SEGMENT$glGetCompressedTextureSubImage, Descriptors.DESCRIPTOR$glGetCompressedTextureSubImage);
        SEGMENT$glGetCoverageModulationTableNV = loader.apply("glGetCoverageModulationTableNV");
        HANDLE$glGetCoverageModulationTableNV = RawFunctionLoader.link(SEGMENT$glGetCoverageModulationTableNV, Descriptors.DESCRIPTOR$glGetCoverageModulationTableNV);
        SEGMENT$glGetDebugMessageLog = loader.apply("glGetDebugMessageLog");
        HANDLE$glGetDebugMessageLog = RawFunctionLoader.link(SEGMENT$glGetDebugMessageLog, Descriptors.DESCRIPTOR$glGetDebugMessageLog);
        SEGMENT$glGetDebugMessageLogARB = loader.apply("glGetDebugMessageLogARB");
        HANDLE$glGetDebugMessageLogARB = RawFunctionLoader.link(SEGMENT$glGetDebugMessageLogARB, Descriptors.DESCRIPTOR$glGetDebugMessageLogARB);
        SEGMENT$glGetDebugMessageLogKHR = loader.apply("glGetDebugMessageLogKHR");
        HANDLE$glGetDebugMessageLogKHR = RawFunctionLoader.link(SEGMENT$glGetDebugMessageLogKHR, Descriptors.DESCRIPTOR$glGetDebugMessageLogKHR);
        SEGMENT$glGetDoubleIndexedvEXT = loader.apply("glGetDoubleIndexedvEXT");
        HANDLE$glGetDoubleIndexedvEXT = RawFunctionLoader.link(SEGMENT$glGetDoubleIndexedvEXT, Descriptors.DESCRIPTOR$glGetDoubleIndexedvEXT);
        SEGMENT$glGetDoublei_v = loader.apply("glGetDoublei_v");
        HANDLE$glGetDoublei_v = RawFunctionLoader.link(SEGMENT$glGetDoublei_v, Descriptors.DESCRIPTOR$glGetDoublei_v);
        SEGMENT$glGetDoublei_vEXT = loader.apply("glGetDoublei_vEXT");
        HANDLE$glGetDoublei_vEXT = RawFunctionLoader.link(SEGMENT$glGetDoublei_vEXT, Descriptors.DESCRIPTOR$glGetDoublei_vEXT);
        SEGMENT$glGetDoublev = loader.apply("glGetDoublev");
        HANDLE$glGetDoublev = RawFunctionLoader.link(SEGMENT$glGetDoublev, Descriptors.DESCRIPTOR$glGetDoublev);
        SEGMENT$glGetError = loader.apply("glGetError");
        HANDLE$glGetError = RawFunctionLoader.link(SEGMENT$glGetError, Descriptors.DESCRIPTOR$glGetError);
        SEGMENT$glGetFirstPerfQueryIdINTEL = loader.apply("glGetFirstPerfQueryIdINTEL");
        HANDLE$glGetFirstPerfQueryIdINTEL = RawFunctionLoader.link(SEGMENT$glGetFirstPerfQueryIdINTEL, Descriptors.DESCRIPTOR$glGetFirstPerfQueryIdINTEL);
        SEGMENT$glGetFloatIndexedvEXT = loader.apply("glGetFloatIndexedvEXT");
        HANDLE$glGetFloatIndexedvEXT = RawFunctionLoader.link(SEGMENT$glGetFloatIndexedvEXT, Descriptors.DESCRIPTOR$glGetFloatIndexedvEXT);
        SEGMENT$glGetFloati_v = loader.apply("glGetFloati_v");
        HANDLE$glGetFloati_v = RawFunctionLoader.link(SEGMENT$glGetFloati_v, Descriptors.DESCRIPTOR$glGetFloati_v);
        SEGMENT$glGetFloati_vEXT = loader.apply("glGetFloati_vEXT");
        HANDLE$glGetFloati_vEXT = RawFunctionLoader.link(SEGMENT$glGetFloati_vEXT, Descriptors.DESCRIPTOR$glGetFloati_vEXT);
        SEGMENT$glGetFloatv = loader.apply("glGetFloatv");
        HANDLE$glGetFloatv = RawFunctionLoader.link(SEGMENT$glGetFloatv, Descriptors.DESCRIPTOR$glGetFloatv);
        SEGMENT$glGetFragDataIndex = loader.apply("glGetFragDataIndex");
        HANDLE$glGetFragDataIndex = RawFunctionLoader.link(SEGMENT$glGetFragDataIndex, Descriptors.DESCRIPTOR$glGetFragDataIndex);
        SEGMENT$glGetFragDataLocation = loader.apply("glGetFragDataLocation");
        HANDLE$glGetFragDataLocation = RawFunctionLoader.link(SEGMENT$glGetFragDataLocation, Descriptors.DESCRIPTOR$glGetFragDataLocation);
        SEGMENT$glGetFramebufferAttachmentParameteriv = loader.apply("glGetFramebufferAttachmentParameteriv");
        HANDLE$glGetFramebufferAttachmentParameteriv = RawFunctionLoader.link(SEGMENT$glGetFramebufferAttachmentParameteriv, Descriptors.DESCRIPTOR$glGetFramebufferAttachmentParameteriv);
        SEGMENT$glGetFramebufferParameteriv = loader.apply("glGetFramebufferParameteriv");
        HANDLE$glGetFramebufferParameteriv = RawFunctionLoader.link(SEGMENT$glGetFramebufferParameteriv, Descriptors.DESCRIPTOR$glGetFramebufferParameteriv);
        SEGMENT$glGetFramebufferParameterivEXT = loader.apply("glGetFramebufferParameterivEXT");
        HANDLE$glGetFramebufferParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetFramebufferParameterivEXT, Descriptors.DESCRIPTOR$glGetFramebufferParameterivEXT);
        SEGMENT$glGetFramebufferParameterivMESA = loader.apply("glGetFramebufferParameterivMESA");
        HANDLE$glGetFramebufferParameterivMESA = RawFunctionLoader.link(SEGMENT$glGetFramebufferParameterivMESA, Descriptors.DESCRIPTOR$glGetFramebufferParameterivMESA);
        SEGMENT$glGetGraphicsResetStatus = loader.apply("glGetGraphicsResetStatus");
        HANDLE$glGetGraphicsResetStatus = RawFunctionLoader.link(SEGMENT$glGetGraphicsResetStatus, Descriptors.DESCRIPTOR$glGetGraphicsResetStatus);
        SEGMENT$glGetGraphicsResetStatusARB = loader.apply("glGetGraphicsResetStatusARB");
        HANDLE$glGetGraphicsResetStatusARB = RawFunctionLoader.link(SEGMENT$glGetGraphicsResetStatusARB, Descriptors.DESCRIPTOR$glGetGraphicsResetStatusARB);
        SEGMENT$glGetGraphicsResetStatusKHR = loader.apply("glGetGraphicsResetStatusKHR");
        HANDLE$glGetGraphicsResetStatusKHR = RawFunctionLoader.link(SEGMENT$glGetGraphicsResetStatusKHR, Descriptors.DESCRIPTOR$glGetGraphicsResetStatusKHR);
        SEGMENT$glGetImageHandleARB = loader.apply("glGetImageHandleARB");
        HANDLE$glGetImageHandleARB = RawFunctionLoader.link(SEGMENT$glGetImageHandleARB, Descriptors.DESCRIPTOR$glGetImageHandleARB);
        SEGMENT$glGetImageHandleNV = loader.apply("glGetImageHandleNV");
        HANDLE$glGetImageHandleNV = RawFunctionLoader.link(SEGMENT$glGetImageHandleNV, Descriptors.DESCRIPTOR$glGetImageHandleNV);
        SEGMENT$glGetInteger64i_v = loader.apply("glGetInteger64i_v");
        HANDLE$glGetInteger64i_v = RawFunctionLoader.link(SEGMENT$glGetInteger64i_v, Descriptors.DESCRIPTOR$glGetInteger64i_v);
        SEGMENT$glGetInteger64v = loader.apply("glGetInteger64v");
        HANDLE$glGetInteger64v = RawFunctionLoader.link(SEGMENT$glGetInteger64v, Descriptors.DESCRIPTOR$glGetInteger64v);
        SEGMENT$glGetIntegerIndexedvEXT = loader.apply("glGetIntegerIndexedvEXT");
        HANDLE$glGetIntegerIndexedvEXT = RawFunctionLoader.link(SEGMENT$glGetIntegerIndexedvEXT, Descriptors.DESCRIPTOR$glGetIntegerIndexedvEXT);
        SEGMENT$glGetIntegeri_v = loader.apply("glGetIntegeri_v");
        HANDLE$glGetIntegeri_v = RawFunctionLoader.link(SEGMENT$glGetIntegeri_v, Descriptors.DESCRIPTOR$glGetIntegeri_v);
        SEGMENT$glGetIntegerui64i_vNV = loader.apply("glGetIntegerui64i_vNV");
        HANDLE$glGetIntegerui64i_vNV = RawFunctionLoader.link(SEGMENT$glGetIntegerui64i_vNV, Descriptors.DESCRIPTOR$glGetIntegerui64i_vNV);
        SEGMENT$glGetIntegerui64vNV = loader.apply("glGetIntegerui64vNV");
        HANDLE$glGetIntegerui64vNV = RawFunctionLoader.link(SEGMENT$glGetIntegerui64vNV, Descriptors.DESCRIPTOR$glGetIntegerui64vNV);
        SEGMENT$glGetIntegerv = loader.apply("glGetIntegerv");
        HANDLE$glGetIntegerv = RawFunctionLoader.link(SEGMENT$glGetIntegerv, Descriptors.DESCRIPTOR$glGetIntegerv);
        SEGMENT$glGetInternalformatSampleivNV = loader.apply("glGetInternalformatSampleivNV");
        HANDLE$glGetInternalformatSampleivNV = RawFunctionLoader.link(SEGMENT$glGetInternalformatSampleivNV, Descriptors.DESCRIPTOR$glGetInternalformatSampleivNV);
        SEGMENT$glGetInternalformati64v = loader.apply("glGetInternalformati64v");
        HANDLE$glGetInternalformati64v = RawFunctionLoader.link(SEGMENT$glGetInternalformati64v, Descriptors.DESCRIPTOR$glGetInternalformati64v);
        SEGMENT$glGetInternalformativ = loader.apply("glGetInternalformativ");
        HANDLE$glGetInternalformativ = RawFunctionLoader.link(SEGMENT$glGetInternalformativ, Descriptors.DESCRIPTOR$glGetInternalformativ);
        SEGMENT$glGetMemoryObjectDetachedResourcesuivNV = loader.apply("glGetMemoryObjectDetachedResourcesuivNV");
        HANDLE$glGetMemoryObjectDetachedResourcesuivNV = RawFunctionLoader.link(SEGMENT$glGetMemoryObjectDetachedResourcesuivNV, Descriptors.DESCRIPTOR$glGetMemoryObjectDetachedResourcesuivNV);
        SEGMENT$glGetMultiTexEnvfvEXT = loader.apply("glGetMultiTexEnvfvEXT");
        HANDLE$glGetMultiTexEnvfvEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexEnvfvEXT, Descriptors.DESCRIPTOR$glGetMultiTexEnvfvEXT);
        SEGMENT$glGetMultiTexEnvivEXT = loader.apply("glGetMultiTexEnvivEXT");
        HANDLE$glGetMultiTexEnvivEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexEnvivEXT, Descriptors.DESCRIPTOR$glGetMultiTexEnvivEXT);
        SEGMENT$glGetMultiTexGendvEXT = loader.apply("glGetMultiTexGendvEXT");
        HANDLE$glGetMultiTexGendvEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexGendvEXT, Descriptors.DESCRIPTOR$glGetMultiTexGendvEXT);
        SEGMENT$glGetMultiTexGenfvEXT = loader.apply("glGetMultiTexGenfvEXT");
        HANDLE$glGetMultiTexGenfvEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexGenfvEXT, Descriptors.DESCRIPTOR$glGetMultiTexGenfvEXT);
        SEGMENT$glGetMultiTexGenivEXT = loader.apply("glGetMultiTexGenivEXT");
        HANDLE$glGetMultiTexGenivEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexGenivEXT, Descriptors.DESCRIPTOR$glGetMultiTexGenivEXT);
        SEGMENT$glGetMultiTexImageEXT = loader.apply("glGetMultiTexImageEXT");
        HANDLE$glGetMultiTexImageEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexImageEXT, Descriptors.DESCRIPTOR$glGetMultiTexImageEXT);
        SEGMENT$glGetMultiTexLevelParameterfvEXT = loader.apply("glGetMultiTexLevelParameterfvEXT");
        HANDLE$glGetMultiTexLevelParameterfvEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexLevelParameterfvEXT, Descriptors.DESCRIPTOR$glGetMultiTexLevelParameterfvEXT);
        SEGMENT$glGetMultiTexLevelParameterivEXT = loader.apply("glGetMultiTexLevelParameterivEXT");
        HANDLE$glGetMultiTexLevelParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexLevelParameterivEXT, Descriptors.DESCRIPTOR$glGetMultiTexLevelParameterivEXT);
        SEGMENT$glGetMultiTexParameterIivEXT = loader.apply("glGetMultiTexParameterIivEXT");
        HANDLE$glGetMultiTexParameterIivEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexParameterIivEXT, Descriptors.DESCRIPTOR$glGetMultiTexParameterIivEXT);
        SEGMENT$glGetMultiTexParameterIuivEXT = loader.apply("glGetMultiTexParameterIuivEXT");
        HANDLE$glGetMultiTexParameterIuivEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexParameterIuivEXT, Descriptors.DESCRIPTOR$glGetMultiTexParameterIuivEXT);
        SEGMENT$glGetMultiTexParameterfvEXT = loader.apply("glGetMultiTexParameterfvEXT");
        HANDLE$glGetMultiTexParameterfvEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexParameterfvEXT, Descriptors.DESCRIPTOR$glGetMultiTexParameterfvEXT);
        SEGMENT$glGetMultiTexParameterivEXT = loader.apply("glGetMultiTexParameterivEXT");
        HANDLE$glGetMultiTexParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetMultiTexParameterivEXT, Descriptors.DESCRIPTOR$glGetMultiTexParameterivEXT);
        SEGMENT$glGetMultisamplefv = loader.apply("glGetMultisamplefv");
        HANDLE$glGetMultisamplefv = RawFunctionLoader.link(SEGMENT$glGetMultisamplefv, Descriptors.DESCRIPTOR$glGetMultisamplefv);
        SEGMENT$glGetNamedBufferParameteri64v = loader.apply("glGetNamedBufferParameteri64v");
        HANDLE$glGetNamedBufferParameteri64v = RawFunctionLoader.link(SEGMENT$glGetNamedBufferParameteri64v, Descriptors.DESCRIPTOR$glGetNamedBufferParameteri64v);
        SEGMENT$glGetNamedBufferParameteriv = loader.apply("glGetNamedBufferParameteriv");
        HANDLE$glGetNamedBufferParameteriv = RawFunctionLoader.link(SEGMENT$glGetNamedBufferParameteriv, Descriptors.DESCRIPTOR$glGetNamedBufferParameteriv);
        SEGMENT$glGetNamedBufferParameterivEXT = loader.apply("glGetNamedBufferParameterivEXT");
        HANDLE$glGetNamedBufferParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetNamedBufferParameterivEXT, Descriptors.DESCRIPTOR$glGetNamedBufferParameterivEXT);
        SEGMENT$glGetNamedBufferParameterui64vNV = loader.apply("glGetNamedBufferParameterui64vNV");
        HANDLE$glGetNamedBufferParameterui64vNV = RawFunctionLoader.link(SEGMENT$glGetNamedBufferParameterui64vNV, Descriptors.DESCRIPTOR$glGetNamedBufferParameterui64vNV);
        SEGMENT$glGetNamedBufferPointerv = loader.apply("glGetNamedBufferPointerv");
        HANDLE$glGetNamedBufferPointerv = RawFunctionLoader.link(SEGMENT$glGetNamedBufferPointerv, Descriptors.DESCRIPTOR$glGetNamedBufferPointerv);
        SEGMENT$glGetNamedBufferPointervEXT = loader.apply("glGetNamedBufferPointervEXT");
        HANDLE$glGetNamedBufferPointervEXT = RawFunctionLoader.link(SEGMENT$glGetNamedBufferPointervEXT, Descriptors.DESCRIPTOR$glGetNamedBufferPointervEXT);
        SEGMENT$glGetNamedBufferSubData = loader.apply("glGetNamedBufferSubData");
        HANDLE$glGetNamedBufferSubData = RawFunctionLoader.link(SEGMENT$glGetNamedBufferSubData, Descriptors.DESCRIPTOR$glGetNamedBufferSubData);
        SEGMENT$glGetNamedBufferSubDataEXT = loader.apply("glGetNamedBufferSubDataEXT");
        HANDLE$glGetNamedBufferSubDataEXT = RawFunctionLoader.link(SEGMENT$glGetNamedBufferSubDataEXT, Descriptors.DESCRIPTOR$glGetNamedBufferSubDataEXT);
        SEGMENT$glGetNamedFramebufferAttachmentParameteriv = loader.apply("glGetNamedFramebufferAttachmentParameteriv");
        HANDLE$glGetNamedFramebufferAttachmentParameteriv = RawFunctionLoader.link(SEGMENT$glGetNamedFramebufferAttachmentParameteriv, Descriptors.DESCRIPTOR$glGetNamedFramebufferAttachmentParameteriv);
        SEGMENT$glGetNamedFramebufferAttachmentParameterivEXT = loader.apply("glGetNamedFramebufferAttachmentParameterivEXT");
        HANDLE$glGetNamedFramebufferAttachmentParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetNamedFramebufferAttachmentParameterivEXT, Descriptors.DESCRIPTOR$glGetNamedFramebufferAttachmentParameterivEXT);
        SEGMENT$glGetNamedFramebufferParameteriv = loader.apply("glGetNamedFramebufferParameteriv");
        HANDLE$glGetNamedFramebufferParameteriv = RawFunctionLoader.link(SEGMENT$glGetNamedFramebufferParameteriv, Descriptors.DESCRIPTOR$glGetNamedFramebufferParameteriv);
        SEGMENT$glGetNamedFramebufferParameterivEXT = loader.apply("glGetNamedFramebufferParameterivEXT");
        HANDLE$glGetNamedFramebufferParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetNamedFramebufferParameterivEXT, Descriptors.DESCRIPTOR$glGetNamedFramebufferParameterivEXT);
        SEGMENT$glGetNamedProgramLocalParameterIivEXT = loader.apply("glGetNamedProgramLocalParameterIivEXT");
        HANDLE$glGetNamedProgramLocalParameterIivEXT = RawFunctionLoader.link(SEGMENT$glGetNamedProgramLocalParameterIivEXT, Descriptors.DESCRIPTOR$glGetNamedProgramLocalParameterIivEXT);
        SEGMENT$glGetNamedProgramLocalParameterIuivEXT = loader.apply("glGetNamedProgramLocalParameterIuivEXT");
        HANDLE$glGetNamedProgramLocalParameterIuivEXT = RawFunctionLoader.link(SEGMENT$glGetNamedProgramLocalParameterIuivEXT, Descriptors.DESCRIPTOR$glGetNamedProgramLocalParameterIuivEXT);
        SEGMENT$glGetNamedProgramLocalParameterdvEXT = loader.apply("glGetNamedProgramLocalParameterdvEXT");
        HANDLE$glGetNamedProgramLocalParameterdvEXT = RawFunctionLoader.link(SEGMENT$glGetNamedProgramLocalParameterdvEXT, Descriptors.DESCRIPTOR$glGetNamedProgramLocalParameterdvEXT);
        SEGMENT$glGetNamedProgramLocalParameterfvEXT = loader.apply("glGetNamedProgramLocalParameterfvEXT");
        HANDLE$glGetNamedProgramLocalParameterfvEXT = RawFunctionLoader.link(SEGMENT$glGetNamedProgramLocalParameterfvEXT, Descriptors.DESCRIPTOR$glGetNamedProgramLocalParameterfvEXT);
        SEGMENT$glGetNamedProgramStringEXT = loader.apply("glGetNamedProgramStringEXT");
        HANDLE$glGetNamedProgramStringEXT = RawFunctionLoader.link(SEGMENT$glGetNamedProgramStringEXT, Descriptors.DESCRIPTOR$glGetNamedProgramStringEXT);
        SEGMENT$glGetNamedProgramivEXT = loader.apply("glGetNamedProgramivEXT");
        HANDLE$glGetNamedProgramivEXT = RawFunctionLoader.link(SEGMENT$glGetNamedProgramivEXT, Descriptors.DESCRIPTOR$glGetNamedProgramivEXT);
        SEGMENT$glGetNamedRenderbufferParameteriv = loader.apply("glGetNamedRenderbufferParameteriv");
        HANDLE$glGetNamedRenderbufferParameteriv = RawFunctionLoader.link(SEGMENT$glGetNamedRenderbufferParameteriv, Descriptors.DESCRIPTOR$glGetNamedRenderbufferParameteriv);
        SEGMENT$glGetNamedRenderbufferParameterivEXT = loader.apply("glGetNamedRenderbufferParameterivEXT");
        HANDLE$glGetNamedRenderbufferParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetNamedRenderbufferParameterivEXT, Descriptors.DESCRIPTOR$glGetNamedRenderbufferParameterivEXT);
        SEGMENT$glGetNamedStringARB = loader.apply("glGetNamedStringARB");
        HANDLE$glGetNamedStringARB = RawFunctionLoader.link(SEGMENT$glGetNamedStringARB, Descriptors.DESCRIPTOR$glGetNamedStringARB);
        SEGMENT$glGetNamedStringivARB = loader.apply("glGetNamedStringivARB");
        HANDLE$glGetNamedStringivARB = RawFunctionLoader.link(SEGMENT$glGetNamedStringivARB, Descriptors.DESCRIPTOR$glGetNamedStringivARB);
        SEGMENT$glGetNextPerfQueryIdINTEL = loader.apply("glGetNextPerfQueryIdINTEL");
        HANDLE$glGetNextPerfQueryIdINTEL = RawFunctionLoader.link(SEGMENT$glGetNextPerfQueryIdINTEL, Descriptors.DESCRIPTOR$glGetNextPerfQueryIdINTEL);
        SEGMENT$glGetObjectLabel = loader.apply("glGetObjectLabel");
        HANDLE$glGetObjectLabel = RawFunctionLoader.link(SEGMENT$glGetObjectLabel, Descriptors.DESCRIPTOR$glGetObjectLabel);
        SEGMENT$glGetObjectLabelEXT = loader.apply("glGetObjectLabelEXT");
        HANDLE$glGetObjectLabelEXT = RawFunctionLoader.link(SEGMENT$glGetObjectLabelEXT, Descriptors.DESCRIPTOR$glGetObjectLabelEXT);
        SEGMENT$glGetObjectLabelKHR = loader.apply("glGetObjectLabelKHR");
        HANDLE$glGetObjectLabelKHR = RawFunctionLoader.link(SEGMENT$glGetObjectLabelKHR, Descriptors.DESCRIPTOR$glGetObjectLabelKHR);
        SEGMENT$glGetObjectPtrLabel = loader.apply("glGetObjectPtrLabel");
        HANDLE$glGetObjectPtrLabel = RawFunctionLoader.link(SEGMENT$glGetObjectPtrLabel, Descriptors.DESCRIPTOR$glGetObjectPtrLabel);
        SEGMENT$glGetObjectPtrLabelKHR = loader.apply("glGetObjectPtrLabelKHR");
        HANDLE$glGetObjectPtrLabelKHR = RawFunctionLoader.link(SEGMENT$glGetObjectPtrLabelKHR, Descriptors.DESCRIPTOR$glGetObjectPtrLabelKHR);
        SEGMENT$glGetPathCommandsNV = loader.apply("glGetPathCommandsNV");
        HANDLE$glGetPathCommandsNV = RawFunctionLoader.link(SEGMENT$glGetPathCommandsNV, Descriptors.DESCRIPTOR$glGetPathCommandsNV);
        SEGMENT$glGetPathCoordsNV = loader.apply("glGetPathCoordsNV");
        HANDLE$glGetPathCoordsNV = RawFunctionLoader.link(SEGMENT$glGetPathCoordsNV, Descriptors.DESCRIPTOR$glGetPathCoordsNV);
        SEGMENT$glGetPathDashArrayNV = loader.apply("glGetPathDashArrayNV");
        HANDLE$glGetPathDashArrayNV = RawFunctionLoader.link(SEGMENT$glGetPathDashArrayNV, Descriptors.DESCRIPTOR$glGetPathDashArrayNV);
        SEGMENT$glGetPathLengthNV = loader.apply("glGetPathLengthNV");
        HANDLE$glGetPathLengthNV = RawFunctionLoader.link(SEGMENT$glGetPathLengthNV, Descriptors.DESCRIPTOR$glGetPathLengthNV);
        SEGMENT$glGetPathMetricRangeNV = loader.apply("glGetPathMetricRangeNV");
        HANDLE$glGetPathMetricRangeNV = RawFunctionLoader.link(SEGMENT$glGetPathMetricRangeNV, Descriptors.DESCRIPTOR$glGetPathMetricRangeNV);
        SEGMENT$glGetPathMetricsNV = loader.apply("glGetPathMetricsNV");
        HANDLE$glGetPathMetricsNV = RawFunctionLoader.link(SEGMENT$glGetPathMetricsNV, Descriptors.DESCRIPTOR$glGetPathMetricsNV);
        SEGMENT$glGetPathParameterfvNV = loader.apply("glGetPathParameterfvNV");
        HANDLE$glGetPathParameterfvNV = RawFunctionLoader.link(SEGMENT$glGetPathParameterfvNV, Descriptors.DESCRIPTOR$glGetPathParameterfvNV);
        SEGMENT$glGetPathParameterivNV = loader.apply("glGetPathParameterivNV");
        HANDLE$glGetPathParameterivNV = RawFunctionLoader.link(SEGMENT$glGetPathParameterivNV, Descriptors.DESCRIPTOR$glGetPathParameterivNV);
        SEGMENT$glGetPathSpacingNV = loader.apply("glGetPathSpacingNV");
        HANDLE$glGetPathSpacingNV = RawFunctionLoader.link(SEGMENT$glGetPathSpacingNV, Descriptors.DESCRIPTOR$glGetPathSpacingNV);
        SEGMENT$glGetPerfCounterInfoINTEL = loader.apply("glGetPerfCounterInfoINTEL");
        HANDLE$glGetPerfCounterInfoINTEL = RawFunctionLoader.link(SEGMENT$glGetPerfCounterInfoINTEL, Descriptors.DESCRIPTOR$glGetPerfCounterInfoINTEL);
        SEGMENT$glGetPerfMonitorCounterDataAMD = loader.apply("glGetPerfMonitorCounterDataAMD");
        HANDLE$glGetPerfMonitorCounterDataAMD = RawFunctionLoader.link(SEGMENT$glGetPerfMonitorCounterDataAMD, Descriptors.DESCRIPTOR$glGetPerfMonitorCounterDataAMD);
        SEGMENT$glGetPerfMonitorCounterInfoAMD = loader.apply("glGetPerfMonitorCounterInfoAMD");
        HANDLE$glGetPerfMonitorCounterInfoAMD = RawFunctionLoader.link(SEGMENT$glGetPerfMonitorCounterInfoAMD, Descriptors.DESCRIPTOR$glGetPerfMonitorCounterInfoAMD);
        SEGMENT$glGetPerfMonitorCounterStringAMD = loader.apply("glGetPerfMonitorCounterStringAMD");
        HANDLE$glGetPerfMonitorCounterStringAMD = RawFunctionLoader.link(SEGMENT$glGetPerfMonitorCounterStringAMD, Descriptors.DESCRIPTOR$glGetPerfMonitorCounterStringAMD);
        SEGMENT$glGetPerfMonitorCountersAMD = loader.apply("glGetPerfMonitorCountersAMD");
        HANDLE$glGetPerfMonitorCountersAMD = RawFunctionLoader.link(SEGMENT$glGetPerfMonitorCountersAMD, Descriptors.DESCRIPTOR$glGetPerfMonitorCountersAMD);
        SEGMENT$glGetPerfMonitorGroupStringAMD = loader.apply("glGetPerfMonitorGroupStringAMD");
        HANDLE$glGetPerfMonitorGroupStringAMD = RawFunctionLoader.link(SEGMENT$glGetPerfMonitorGroupStringAMD, Descriptors.DESCRIPTOR$glGetPerfMonitorGroupStringAMD);
        SEGMENT$glGetPerfMonitorGroupsAMD = loader.apply("glGetPerfMonitorGroupsAMD");
        HANDLE$glGetPerfMonitorGroupsAMD = RawFunctionLoader.link(SEGMENT$glGetPerfMonitorGroupsAMD, Descriptors.DESCRIPTOR$glGetPerfMonitorGroupsAMD);
        SEGMENT$glGetPerfQueryDataINTEL = loader.apply("glGetPerfQueryDataINTEL");
        HANDLE$glGetPerfQueryDataINTEL = RawFunctionLoader.link(SEGMENT$glGetPerfQueryDataINTEL, Descriptors.DESCRIPTOR$glGetPerfQueryDataINTEL);
        SEGMENT$glGetPerfQueryIdByNameINTEL = loader.apply("glGetPerfQueryIdByNameINTEL");
        HANDLE$glGetPerfQueryIdByNameINTEL = RawFunctionLoader.link(SEGMENT$glGetPerfQueryIdByNameINTEL, Descriptors.DESCRIPTOR$glGetPerfQueryIdByNameINTEL);
        SEGMENT$glGetPerfQueryInfoINTEL = loader.apply("glGetPerfQueryInfoINTEL");
        HANDLE$glGetPerfQueryInfoINTEL = RawFunctionLoader.link(SEGMENT$glGetPerfQueryInfoINTEL, Descriptors.DESCRIPTOR$glGetPerfQueryInfoINTEL);
        SEGMENT$glGetPointerIndexedvEXT = loader.apply("glGetPointerIndexedvEXT");
        HANDLE$glGetPointerIndexedvEXT = RawFunctionLoader.link(SEGMENT$glGetPointerIndexedvEXT, Descriptors.DESCRIPTOR$glGetPointerIndexedvEXT);
        SEGMENT$glGetPointeri_vEXT = loader.apply("glGetPointeri_vEXT");
        HANDLE$glGetPointeri_vEXT = RawFunctionLoader.link(SEGMENT$glGetPointeri_vEXT, Descriptors.DESCRIPTOR$glGetPointeri_vEXT);
        SEGMENT$glGetPointerv = loader.apply("glGetPointerv");
        HANDLE$glGetPointerv = RawFunctionLoader.link(SEGMENT$glGetPointerv, Descriptors.DESCRIPTOR$glGetPointerv);
        SEGMENT$glGetPointervKHR = loader.apply("glGetPointervKHR");
        HANDLE$glGetPointervKHR = RawFunctionLoader.link(SEGMENT$glGetPointervKHR, Descriptors.DESCRIPTOR$glGetPointervKHR);
        SEGMENT$glGetProgramBinary = loader.apply("glGetProgramBinary");
        HANDLE$glGetProgramBinary = RawFunctionLoader.link(SEGMENT$glGetProgramBinary, Descriptors.DESCRIPTOR$glGetProgramBinary);
        SEGMENT$glGetProgramInfoLog = loader.apply("glGetProgramInfoLog");
        HANDLE$glGetProgramInfoLog = RawFunctionLoader.link(SEGMENT$glGetProgramInfoLog, Descriptors.DESCRIPTOR$glGetProgramInfoLog);
        SEGMENT$glGetProgramInterfaceiv = loader.apply("glGetProgramInterfaceiv");
        HANDLE$glGetProgramInterfaceiv = RawFunctionLoader.link(SEGMENT$glGetProgramInterfaceiv, Descriptors.DESCRIPTOR$glGetProgramInterfaceiv);
        SEGMENT$glGetProgramPipelineInfoLog = loader.apply("glGetProgramPipelineInfoLog");
        HANDLE$glGetProgramPipelineInfoLog = RawFunctionLoader.link(SEGMENT$glGetProgramPipelineInfoLog, Descriptors.DESCRIPTOR$glGetProgramPipelineInfoLog);
        SEGMENT$glGetProgramPipelineInfoLogEXT = loader.apply("glGetProgramPipelineInfoLogEXT");
        HANDLE$glGetProgramPipelineInfoLogEXT = RawFunctionLoader.link(SEGMENT$glGetProgramPipelineInfoLogEXT, Descriptors.DESCRIPTOR$glGetProgramPipelineInfoLogEXT);
        SEGMENT$glGetProgramPipelineiv = loader.apply("glGetProgramPipelineiv");
        HANDLE$glGetProgramPipelineiv = RawFunctionLoader.link(SEGMENT$glGetProgramPipelineiv, Descriptors.DESCRIPTOR$glGetProgramPipelineiv);
        SEGMENT$glGetProgramPipelineivEXT = loader.apply("glGetProgramPipelineivEXT");
        HANDLE$glGetProgramPipelineivEXT = RawFunctionLoader.link(SEGMENT$glGetProgramPipelineivEXT, Descriptors.DESCRIPTOR$glGetProgramPipelineivEXT);
        SEGMENT$glGetProgramResourceIndex = loader.apply("glGetProgramResourceIndex");
        HANDLE$glGetProgramResourceIndex = RawFunctionLoader.link(SEGMENT$glGetProgramResourceIndex, Descriptors.DESCRIPTOR$glGetProgramResourceIndex);
        SEGMENT$glGetProgramResourceLocation = loader.apply("glGetProgramResourceLocation");
        HANDLE$glGetProgramResourceLocation = RawFunctionLoader.link(SEGMENT$glGetProgramResourceLocation, Descriptors.DESCRIPTOR$glGetProgramResourceLocation);
        SEGMENT$glGetProgramResourceLocationIndex = loader.apply("glGetProgramResourceLocationIndex");
        HANDLE$glGetProgramResourceLocationIndex = RawFunctionLoader.link(SEGMENT$glGetProgramResourceLocationIndex, Descriptors.DESCRIPTOR$glGetProgramResourceLocationIndex);
        SEGMENT$glGetProgramResourceName = loader.apply("glGetProgramResourceName");
        HANDLE$glGetProgramResourceName = RawFunctionLoader.link(SEGMENT$glGetProgramResourceName, Descriptors.DESCRIPTOR$glGetProgramResourceName);
        SEGMENT$glGetProgramResourcefvNV = loader.apply("glGetProgramResourcefvNV");
        HANDLE$glGetProgramResourcefvNV = RawFunctionLoader.link(SEGMENT$glGetProgramResourcefvNV, Descriptors.DESCRIPTOR$glGetProgramResourcefvNV);
        SEGMENT$glGetProgramResourceiv = loader.apply("glGetProgramResourceiv");
        HANDLE$glGetProgramResourceiv = RawFunctionLoader.link(SEGMENT$glGetProgramResourceiv, Descriptors.DESCRIPTOR$glGetProgramResourceiv);
        SEGMENT$glGetProgramStageiv = loader.apply("glGetProgramStageiv");
        HANDLE$glGetProgramStageiv = RawFunctionLoader.link(SEGMENT$glGetProgramStageiv, Descriptors.DESCRIPTOR$glGetProgramStageiv);
        SEGMENT$glGetProgramiv = loader.apply("glGetProgramiv");
        HANDLE$glGetProgramiv = RawFunctionLoader.link(SEGMENT$glGetProgramiv, Descriptors.DESCRIPTOR$glGetProgramiv);
        SEGMENT$glGetQueryBufferObjecti64v = loader.apply("glGetQueryBufferObjecti64v");
        HANDLE$glGetQueryBufferObjecti64v = RawFunctionLoader.link(SEGMENT$glGetQueryBufferObjecti64v, Descriptors.DESCRIPTOR$glGetQueryBufferObjecti64v);
        SEGMENT$glGetQueryBufferObjectiv = loader.apply("glGetQueryBufferObjectiv");
        HANDLE$glGetQueryBufferObjectiv = RawFunctionLoader.link(SEGMENT$glGetQueryBufferObjectiv, Descriptors.DESCRIPTOR$glGetQueryBufferObjectiv);
        SEGMENT$glGetQueryBufferObjectui64v = loader.apply("glGetQueryBufferObjectui64v");
        HANDLE$glGetQueryBufferObjectui64v = RawFunctionLoader.link(SEGMENT$glGetQueryBufferObjectui64v, Descriptors.DESCRIPTOR$glGetQueryBufferObjectui64v);
        SEGMENT$glGetQueryBufferObjectuiv = loader.apply("glGetQueryBufferObjectuiv");
        HANDLE$glGetQueryBufferObjectuiv = RawFunctionLoader.link(SEGMENT$glGetQueryBufferObjectuiv, Descriptors.DESCRIPTOR$glGetQueryBufferObjectuiv);
        SEGMENT$glGetQueryIndexediv = loader.apply("glGetQueryIndexediv");
        HANDLE$glGetQueryIndexediv = RawFunctionLoader.link(SEGMENT$glGetQueryIndexediv, Descriptors.DESCRIPTOR$glGetQueryIndexediv);
        SEGMENT$glGetQueryObjecti64v = loader.apply("glGetQueryObjecti64v");
        HANDLE$glGetQueryObjecti64v = RawFunctionLoader.link(SEGMENT$glGetQueryObjecti64v, Descriptors.DESCRIPTOR$glGetQueryObjecti64v);
        SEGMENT$glGetQueryObjectiv = loader.apply("glGetQueryObjectiv");
        HANDLE$glGetQueryObjectiv = RawFunctionLoader.link(SEGMENT$glGetQueryObjectiv, Descriptors.DESCRIPTOR$glGetQueryObjectiv);
        SEGMENT$glGetQueryObjectui64v = loader.apply("glGetQueryObjectui64v");
        HANDLE$glGetQueryObjectui64v = RawFunctionLoader.link(SEGMENT$glGetQueryObjectui64v, Descriptors.DESCRIPTOR$glGetQueryObjectui64v);
        SEGMENT$glGetQueryObjectuiv = loader.apply("glGetQueryObjectuiv");
        HANDLE$glGetQueryObjectuiv = RawFunctionLoader.link(SEGMENT$glGetQueryObjectuiv, Descriptors.DESCRIPTOR$glGetQueryObjectuiv);
        SEGMENT$glGetQueryiv = loader.apply("glGetQueryiv");
        HANDLE$glGetQueryiv = RawFunctionLoader.link(SEGMENT$glGetQueryiv, Descriptors.DESCRIPTOR$glGetQueryiv);
        SEGMENT$glGetRenderbufferParameteriv = loader.apply("glGetRenderbufferParameteriv");
        HANDLE$glGetRenderbufferParameteriv = RawFunctionLoader.link(SEGMENT$glGetRenderbufferParameteriv, Descriptors.DESCRIPTOR$glGetRenderbufferParameteriv);
        SEGMENT$glGetSamplerParameterIiv = loader.apply("glGetSamplerParameterIiv");
        HANDLE$glGetSamplerParameterIiv = RawFunctionLoader.link(SEGMENT$glGetSamplerParameterIiv, Descriptors.DESCRIPTOR$glGetSamplerParameterIiv);
        SEGMENT$glGetSamplerParameterIuiv = loader.apply("glGetSamplerParameterIuiv");
        HANDLE$glGetSamplerParameterIuiv = RawFunctionLoader.link(SEGMENT$glGetSamplerParameterIuiv, Descriptors.DESCRIPTOR$glGetSamplerParameterIuiv);
        SEGMENT$glGetSamplerParameterfv = loader.apply("glGetSamplerParameterfv");
        HANDLE$glGetSamplerParameterfv = RawFunctionLoader.link(SEGMENT$glGetSamplerParameterfv, Descriptors.DESCRIPTOR$glGetSamplerParameterfv);
        SEGMENT$glGetSamplerParameteriv = loader.apply("glGetSamplerParameteriv");
        HANDLE$glGetSamplerParameteriv = RawFunctionLoader.link(SEGMENT$glGetSamplerParameteriv, Descriptors.DESCRIPTOR$glGetSamplerParameteriv);
        SEGMENT$glGetShaderInfoLog = loader.apply("glGetShaderInfoLog");
        HANDLE$glGetShaderInfoLog = RawFunctionLoader.link(SEGMENT$glGetShaderInfoLog, Descriptors.DESCRIPTOR$glGetShaderInfoLog);
        SEGMENT$glGetShaderPrecisionFormat = loader.apply("glGetShaderPrecisionFormat");
        HANDLE$glGetShaderPrecisionFormat = RawFunctionLoader.link(SEGMENT$glGetShaderPrecisionFormat, Descriptors.DESCRIPTOR$glGetShaderPrecisionFormat);
        SEGMENT$glGetShaderSource = loader.apply("glGetShaderSource");
        HANDLE$glGetShaderSource = RawFunctionLoader.link(SEGMENT$glGetShaderSource, Descriptors.DESCRIPTOR$glGetShaderSource);
        SEGMENT$glGetShaderiv = loader.apply("glGetShaderiv");
        HANDLE$glGetShaderiv = RawFunctionLoader.link(SEGMENT$glGetShaderiv, Descriptors.DESCRIPTOR$glGetShaderiv);
        SEGMENT$glGetShadingRateImagePaletteNV = loader.apply("glGetShadingRateImagePaletteNV");
        HANDLE$glGetShadingRateImagePaletteNV = RawFunctionLoader.link(SEGMENT$glGetShadingRateImagePaletteNV, Descriptors.DESCRIPTOR$glGetShadingRateImagePaletteNV);
        SEGMENT$glGetShadingRateSampleLocationivNV = loader.apply("glGetShadingRateSampleLocationivNV");
        HANDLE$glGetShadingRateSampleLocationivNV = RawFunctionLoader.link(SEGMENT$glGetShadingRateSampleLocationivNV, Descriptors.DESCRIPTOR$glGetShadingRateSampleLocationivNV);
        SEGMENT$glGetStageIndexNV = loader.apply("glGetStageIndexNV");
        HANDLE$glGetStageIndexNV = RawFunctionLoader.link(SEGMENT$glGetStageIndexNV, Descriptors.DESCRIPTOR$glGetStageIndexNV);
        SEGMENT$glGetString = loader.apply("glGetString");
        HANDLE$glGetString = RawFunctionLoader.link(SEGMENT$glGetString, Descriptors.DESCRIPTOR$glGetString);
        SEGMENT$glGetStringi = loader.apply("glGetStringi");
        HANDLE$glGetStringi = RawFunctionLoader.link(SEGMENT$glGetStringi, Descriptors.DESCRIPTOR$glGetStringi);
        SEGMENT$glGetSubroutineIndex = loader.apply("glGetSubroutineIndex");
        HANDLE$glGetSubroutineIndex = RawFunctionLoader.link(SEGMENT$glGetSubroutineIndex, Descriptors.DESCRIPTOR$glGetSubroutineIndex);
        SEGMENT$glGetSubroutineUniformLocation = loader.apply("glGetSubroutineUniformLocation");
        HANDLE$glGetSubroutineUniformLocation = RawFunctionLoader.link(SEGMENT$glGetSubroutineUniformLocation, Descriptors.DESCRIPTOR$glGetSubroutineUniformLocation);
        SEGMENT$glGetSynciv = loader.apply("glGetSynciv");
        HANDLE$glGetSynciv = RawFunctionLoader.link(SEGMENT$glGetSynciv, Descriptors.DESCRIPTOR$glGetSynciv);
        SEGMENT$glGetTexImage = loader.apply("glGetTexImage");
        HANDLE$glGetTexImage = RawFunctionLoader.link(SEGMENT$glGetTexImage, Descriptors.DESCRIPTOR$glGetTexImage);
        SEGMENT$glGetTexLevelParameterfv = loader.apply("glGetTexLevelParameterfv");
        HANDLE$glGetTexLevelParameterfv = RawFunctionLoader.link(SEGMENT$glGetTexLevelParameterfv, Descriptors.DESCRIPTOR$glGetTexLevelParameterfv);
        SEGMENT$glGetTexLevelParameteriv = loader.apply("glGetTexLevelParameteriv");
        HANDLE$glGetTexLevelParameteriv = RawFunctionLoader.link(SEGMENT$glGetTexLevelParameteriv, Descriptors.DESCRIPTOR$glGetTexLevelParameteriv);
        SEGMENT$glGetTexParameterIiv = loader.apply("glGetTexParameterIiv");
        HANDLE$glGetTexParameterIiv = RawFunctionLoader.link(SEGMENT$glGetTexParameterIiv, Descriptors.DESCRIPTOR$glGetTexParameterIiv);
        SEGMENT$glGetTexParameterIuiv = loader.apply("glGetTexParameterIuiv");
        HANDLE$glGetTexParameterIuiv = RawFunctionLoader.link(SEGMENT$glGetTexParameterIuiv, Descriptors.DESCRIPTOR$glGetTexParameterIuiv);
        SEGMENT$glGetTexParameterfv = loader.apply("glGetTexParameterfv");
        HANDLE$glGetTexParameterfv = RawFunctionLoader.link(SEGMENT$glGetTexParameterfv, Descriptors.DESCRIPTOR$glGetTexParameterfv);
        SEGMENT$glGetTexParameteriv = loader.apply("glGetTexParameteriv");
        HANDLE$glGetTexParameteriv = RawFunctionLoader.link(SEGMENT$glGetTexParameteriv, Descriptors.DESCRIPTOR$glGetTexParameteriv);
        SEGMENT$glGetTextureHandleARB = loader.apply("glGetTextureHandleARB");
        HANDLE$glGetTextureHandleARB = RawFunctionLoader.link(SEGMENT$glGetTextureHandleARB, Descriptors.DESCRIPTOR$glGetTextureHandleARB);
        SEGMENT$glGetTextureHandleNV = loader.apply("glGetTextureHandleNV");
        HANDLE$glGetTextureHandleNV = RawFunctionLoader.link(SEGMENT$glGetTextureHandleNV, Descriptors.DESCRIPTOR$glGetTextureHandleNV);
        SEGMENT$glGetTextureImage = loader.apply("glGetTextureImage");
        HANDLE$glGetTextureImage = RawFunctionLoader.link(SEGMENT$glGetTextureImage, Descriptors.DESCRIPTOR$glGetTextureImage);
        SEGMENT$glGetTextureImageEXT = loader.apply("glGetTextureImageEXT");
        HANDLE$glGetTextureImageEXT = RawFunctionLoader.link(SEGMENT$glGetTextureImageEXT, Descriptors.DESCRIPTOR$glGetTextureImageEXT);
        SEGMENT$glGetTextureLevelParameterfv = loader.apply("glGetTextureLevelParameterfv");
        HANDLE$glGetTextureLevelParameterfv = RawFunctionLoader.link(SEGMENT$glGetTextureLevelParameterfv, Descriptors.DESCRIPTOR$glGetTextureLevelParameterfv);
        SEGMENT$glGetTextureLevelParameterfvEXT = loader.apply("glGetTextureLevelParameterfvEXT");
        HANDLE$glGetTextureLevelParameterfvEXT = RawFunctionLoader.link(SEGMENT$glGetTextureLevelParameterfvEXT, Descriptors.DESCRIPTOR$glGetTextureLevelParameterfvEXT);
        SEGMENT$glGetTextureLevelParameteriv = loader.apply("glGetTextureLevelParameteriv");
        HANDLE$glGetTextureLevelParameteriv = RawFunctionLoader.link(SEGMENT$glGetTextureLevelParameteriv, Descriptors.DESCRIPTOR$glGetTextureLevelParameteriv);
        SEGMENT$glGetTextureLevelParameterivEXT = loader.apply("glGetTextureLevelParameterivEXT");
        HANDLE$glGetTextureLevelParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetTextureLevelParameterivEXT, Descriptors.DESCRIPTOR$glGetTextureLevelParameterivEXT);
        SEGMENT$glGetTextureParameterIiv = loader.apply("glGetTextureParameterIiv");
        HANDLE$glGetTextureParameterIiv = RawFunctionLoader.link(SEGMENT$glGetTextureParameterIiv, Descriptors.DESCRIPTOR$glGetTextureParameterIiv);
        SEGMENT$glGetTextureParameterIivEXT = loader.apply("glGetTextureParameterIivEXT");
        HANDLE$glGetTextureParameterIivEXT = RawFunctionLoader.link(SEGMENT$glGetTextureParameterIivEXT, Descriptors.DESCRIPTOR$glGetTextureParameterIivEXT);
        SEGMENT$glGetTextureParameterIuiv = loader.apply("glGetTextureParameterIuiv");
        HANDLE$glGetTextureParameterIuiv = RawFunctionLoader.link(SEGMENT$glGetTextureParameterIuiv, Descriptors.DESCRIPTOR$glGetTextureParameterIuiv);
        SEGMENT$glGetTextureParameterIuivEXT = loader.apply("glGetTextureParameterIuivEXT");
        HANDLE$glGetTextureParameterIuivEXT = RawFunctionLoader.link(SEGMENT$glGetTextureParameterIuivEXT, Descriptors.DESCRIPTOR$glGetTextureParameterIuivEXT);
        SEGMENT$glGetTextureParameterfv = loader.apply("glGetTextureParameterfv");
        HANDLE$glGetTextureParameterfv = RawFunctionLoader.link(SEGMENT$glGetTextureParameterfv, Descriptors.DESCRIPTOR$glGetTextureParameterfv);
        SEGMENT$glGetTextureParameterfvEXT = loader.apply("glGetTextureParameterfvEXT");
        HANDLE$glGetTextureParameterfvEXT = RawFunctionLoader.link(SEGMENT$glGetTextureParameterfvEXT, Descriptors.DESCRIPTOR$glGetTextureParameterfvEXT);
        SEGMENT$glGetTextureParameteriv = loader.apply("glGetTextureParameteriv");
        HANDLE$glGetTextureParameteriv = RawFunctionLoader.link(SEGMENT$glGetTextureParameteriv, Descriptors.DESCRIPTOR$glGetTextureParameteriv);
        SEGMENT$glGetTextureParameterivEXT = loader.apply("glGetTextureParameterivEXT");
        HANDLE$glGetTextureParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetTextureParameterivEXT, Descriptors.DESCRIPTOR$glGetTextureParameterivEXT);
        SEGMENT$glGetTextureSamplerHandleARB = loader.apply("glGetTextureSamplerHandleARB");
        HANDLE$glGetTextureSamplerHandleARB = RawFunctionLoader.link(SEGMENT$glGetTextureSamplerHandleARB, Descriptors.DESCRIPTOR$glGetTextureSamplerHandleARB);
        SEGMENT$glGetTextureSamplerHandleNV = loader.apply("glGetTextureSamplerHandleNV");
        HANDLE$glGetTextureSamplerHandleNV = RawFunctionLoader.link(SEGMENT$glGetTextureSamplerHandleNV, Descriptors.DESCRIPTOR$glGetTextureSamplerHandleNV);
        SEGMENT$glGetTextureSubImage = loader.apply("glGetTextureSubImage");
        HANDLE$glGetTextureSubImage = RawFunctionLoader.link(SEGMENT$glGetTextureSubImage, Descriptors.DESCRIPTOR$glGetTextureSubImage);
        SEGMENT$glGetTransformFeedbackVarying = loader.apply("glGetTransformFeedbackVarying");
        HANDLE$glGetTransformFeedbackVarying = RawFunctionLoader.link(SEGMENT$glGetTransformFeedbackVarying, Descriptors.DESCRIPTOR$glGetTransformFeedbackVarying);
        SEGMENT$glGetTransformFeedbacki64_v = loader.apply("glGetTransformFeedbacki64_v");
        HANDLE$glGetTransformFeedbacki64_v = RawFunctionLoader.link(SEGMENT$glGetTransformFeedbacki64_v, Descriptors.DESCRIPTOR$glGetTransformFeedbacki64_v);
        SEGMENT$glGetTransformFeedbacki_v = loader.apply("glGetTransformFeedbacki_v");
        HANDLE$glGetTransformFeedbacki_v = RawFunctionLoader.link(SEGMENT$glGetTransformFeedbacki_v, Descriptors.DESCRIPTOR$glGetTransformFeedbacki_v);
        SEGMENT$glGetTransformFeedbackiv = loader.apply("glGetTransformFeedbackiv");
        HANDLE$glGetTransformFeedbackiv = RawFunctionLoader.link(SEGMENT$glGetTransformFeedbackiv, Descriptors.DESCRIPTOR$glGetTransformFeedbackiv);
        SEGMENT$glGetUniformBlockIndex = loader.apply("glGetUniformBlockIndex");
        HANDLE$glGetUniformBlockIndex = RawFunctionLoader.link(SEGMENT$glGetUniformBlockIndex, Descriptors.DESCRIPTOR$glGetUniformBlockIndex);
        SEGMENT$glGetUniformIndices = loader.apply("glGetUniformIndices");
        HANDLE$glGetUniformIndices = RawFunctionLoader.link(SEGMENT$glGetUniformIndices, Descriptors.DESCRIPTOR$glGetUniformIndices);
        SEGMENT$glGetUniformLocation = loader.apply("glGetUniformLocation");
        HANDLE$glGetUniformLocation = RawFunctionLoader.link(SEGMENT$glGetUniformLocation, Descriptors.DESCRIPTOR$glGetUniformLocation);
        SEGMENT$glGetUniformSubroutineuiv = loader.apply("glGetUniformSubroutineuiv");
        HANDLE$glGetUniformSubroutineuiv = RawFunctionLoader.link(SEGMENT$glGetUniformSubroutineuiv, Descriptors.DESCRIPTOR$glGetUniformSubroutineuiv);
        SEGMENT$glGetUniformdv = loader.apply("glGetUniformdv");
        HANDLE$glGetUniformdv = RawFunctionLoader.link(SEGMENT$glGetUniformdv, Descriptors.DESCRIPTOR$glGetUniformdv);
        SEGMENT$glGetUniformfv = loader.apply("glGetUniformfv");
        HANDLE$glGetUniformfv = RawFunctionLoader.link(SEGMENT$glGetUniformfv, Descriptors.DESCRIPTOR$glGetUniformfv);
        SEGMENT$glGetUniformi64vARB = loader.apply("glGetUniformi64vARB");
        HANDLE$glGetUniformi64vARB = RawFunctionLoader.link(SEGMENT$glGetUniformi64vARB, Descriptors.DESCRIPTOR$glGetUniformi64vARB);
        SEGMENT$glGetUniformiv = loader.apply("glGetUniformiv");
        HANDLE$glGetUniformiv = RawFunctionLoader.link(SEGMENT$glGetUniformiv, Descriptors.DESCRIPTOR$glGetUniformiv);
        SEGMENT$glGetUniformui64vARB = loader.apply("glGetUniformui64vARB");
        HANDLE$glGetUniformui64vARB = RawFunctionLoader.link(SEGMENT$glGetUniformui64vARB, Descriptors.DESCRIPTOR$glGetUniformui64vARB);
        SEGMENT$glGetUniformuiv = loader.apply("glGetUniformuiv");
        HANDLE$glGetUniformuiv = RawFunctionLoader.link(SEGMENT$glGetUniformuiv, Descriptors.DESCRIPTOR$glGetUniformuiv);
        SEGMENT$glGetVertexArrayIndexed64iv = loader.apply("glGetVertexArrayIndexed64iv");
        HANDLE$glGetVertexArrayIndexed64iv = RawFunctionLoader.link(SEGMENT$glGetVertexArrayIndexed64iv, Descriptors.DESCRIPTOR$glGetVertexArrayIndexed64iv);
        SEGMENT$glGetVertexArrayIndexediv = loader.apply("glGetVertexArrayIndexediv");
        HANDLE$glGetVertexArrayIndexediv = RawFunctionLoader.link(SEGMENT$glGetVertexArrayIndexediv, Descriptors.DESCRIPTOR$glGetVertexArrayIndexediv);
        SEGMENT$glGetVertexArrayIntegeri_vEXT = loader.apply("glGetVertexArrayIntegeri_vEXT");
        HANDLE$glGetVertexArrayIntegeri_vEXT = RawFunctionLoader.link(SEGMENT$glGetVertexArrayIntegeri_vEXT, Descriptors.DESCRIPTOR$glGetVertexArrayIntegeri_vEXT);
        SEGMENT$glGetVertexArrayIntegervEXT = loader.apply("glGetVertexArrayIntegervEXT");
        HANDLE$glGetVertexArrayIntegervEXT = RawFunctionLoader.link(SEGMENT$glGetVertexArrayIntegervEXT, Descriptors.DESCRIPTOR$glGetVertexArrayIntegervEXT);
        SEGMENT$glGetVertexArrayPointeri_vEXT = loader.apply("glGetVertexArrayPointeri_vEXT");
        HANDLE$glGetVertexArrayPointeri_vEXT = RawFunctionLoader.link(SEGMENT$glGetVertexArrayPointeri_vEXT, Descriptors.DESCRIPTOR$glGetVertexArrayPointeri_vEXT);
        SEGMENT$glGetVertexArrayPointervEXT = loader.apply("glGetVertexArrayPointervEXT");
        HANDLE$glGetVertexArrayPointervEXT = RawFunctionLoader.link(SEGMENT$glGetVertexArrayPointervEXT, Descriptors.DESCRIPTOR$glGetVertexArrayPointervEXT);
        SEGMENT$glGetVertexArrayiv = loader.apply("glGetVertexArrayiv");
        HANDLE$glGetVertexArrayiv = RawFunctionLoader.link(SEGMENT$glGetVertexArrayiv, Descriptors.DESCRIPTOR$glGetVertexArrayiv);
        SEGMENT$glGetVertexAttribIiv = loader.apply("glGetVertexAttribIiv");
        HANDLE$glGetVertexAttribIiv = RawFunctionLoader.link(SEGMENT$glGetVertexAttribIiv, Descriptors.DESCRIPTOR$glGetVertexAttribIiv);
        SEGMENT$glGetVertexAttribIuiv = loader.apply("glGetVertexAttribIuiv");
        HANDLE$glGetVertexAttribIuiv = RawFunctionLoader.link(SEGMENT$glGetVertexAttribIuiv, Descriptors.DESCRIPTOR$glGetVertexAttribIuiv);
        SEGMENT$glGetVertexAttribLdv = loader.apply("glGetVertexAttribLdv");
        HANDLE$glGetVertexAttribLdv = RawFunctionLoader.link(SEGMENT$glGetVertexAttribLdv, Descriptors.DESCRIPTOR$glGetVertexAttribLdv);
        SEGMENT$glGetVertexAttribLi64vNV = loader.apply("glGetVertexAttribLi64vNV");
        HANDLE$glGetVertexAttribLi64vNV = RawFunctionLoader.link(SEGMENT$glGetVertexAttribLi64vNV, Descriptors.DESCRIPTOR$glGetVertexAttribLi64vNV);
        SEGMENT$glGetVertexAttribLui64vARB = loader.apply("glGetVertexAttribLui64vARB");
        HANDLE$glGetVertexAttribLui64vARB = RawFunctionLoader.link(SEGMENT$glGetVertexAttribLui64vARB, Descriptors.DESCRIPTOR$glGetVertexAttribLui64vARB);
        SEGMENT$glGetVertexAttribLui64vNV = loader.apply("glGetVertexAttribLui64vNV");
        HANDLE$glGetVertexAttribLui64vNV = RawFunctionLoader.link(SEGMENT$glGetVertexAttribLui64vNV, Descriptors.DESCRIPTOR$glGetVertexAttribLui64vNV);
        SEGMENT$glGetVertexAttribPointerv = loader.apply("glGetVertexAttribPointerv");
        HANDLE$glGetVertexAttribPointerv = RawFunctionLoader.link(SEGMENT$glGetVertexAttribPointerv, Descriptors.DESCRIPTOR$glGetVertexAttribPointerv);
        SEGMENT$glGetVertexAttribdv = loader.apply("glGetVertexAttribdv");
        HANDLE$glGetVertexAttribdv = RawFunctionLoader.link(SEGMENT$glGetVertexAttribdv, Descriptors.DESCRIPTOR$glGetVertexAttribdv);
        SEGMENT$glGetVertexAttribfv = loader.apply("glGetVertexAttribfv");
        HANDLE$glGetVertexAttribfv = RawFunctionLoader.link(SEGMENT$glGetVertexAttribfv, Descriptors.DESCRIPTOR$glGetVertexAttribfv);
        SEGMENT$glGetVertexAttribiv = loader.apply("glGetVertexAttribiv");
        HANDLE$glGetVertexAttribiv = RawFunctionLoader.link(SEGMENT$glGetVertexAttribiv, Descriptors.DESCRIPTOR$glGetVertexAttribiv);
        SEGMENT$glGetVkProcAddrNV = loader.apply("glGetVkProcAddrNV");
        HANDLE$glGetVkProcAddrNV = RawFunctionLoader.link(SEGMENT$glGetVkProcAddrNV, Descriptors.DESCRIPTOR$glGetVkProcAddrNV);
        SEGMENT$glGetnCompressedTexImage = loader.apply("glGetnCompressedTexImage");
        HANDLE$glGetnCompressedTexImage = RawFunctionLoader.link(SEGMENT$glGetnCompressedTexImage, Descriptors.DESCRIPTOR$glGetnCompressedTexImage);
        SEGMENT$glGetnCompressedTexImageARB = loader.apply("glGetnCompressedTexImageARB");
        HANDLE$glGetnCompressedTexImageARB = RawFunctionLoader.link(SEGMENT$glGetnCompressedTexImageARB, Descriptors.DESCRIPTOR$glGetnCompressedTexImageARB);
        SEGMENT$glGetnTexImage = loader.apply("glGetnTexImage");
        HANDLE$glGetnTexImage = RawFunctionLoader.link(SEGMENT$glGetnTexImage, Descriptors.DESCRIPTOR$glGetnTexImage);
        SEGMENT$glGetnTexImageARB = loader.apply("glGetnTexImageARB");
        HANDLE$glGetnTexImageARB = RawFunctionLoader.link(SEGMENT$glGetnTexImageARB, Descriptors.DESCRIPTOR$glGetnTexImageARB);
        SEGMENT$glGetnUniformdv = loader.apply("glGetnUniformdv");
        HANDLE$glGetnUniformdv = RawFunctionLoader.link(SEGMENT$glGetnUniformdv, Descriptors.DESCRIPTOR$glGetnUniformdv);
        SEGMENT$glGetnUniformdvARB = loader.apply("glGetnUniformdvARB");
        HANDLE$glGetnUniformdvARB = RawFunctionLoader.link(SEGMENT$glGetnUniformdvARB, Descriptors.DESCRIPTOR$glGetnUniformdvARB);
        SEGMENT$glGetnUniformfv = loader.apply("glGetnUniformfv");
        HANDLE$glGetnUniformfv = RawFunctionLoader.link(SEGMENT$glGetnUniformfv, Descriptors.DESCRIPTOR$glGetnUniformfv);
        SEGMENT$glGetnUniformfvARB = loader.apply("glGetnUniformfvARB");
        HANDLE$glGetnUniformfvARB = RawFunctionLoader.link(SEGMENT$glGetnUniformfvARB, Descriptors.DESCRIPTOR$glGetnUniformfvARB);
        SEGMENT$glGetnUniformfvKHR = loader.apply("glGetnUniformfvKHR");
        HANDLE$glGetnUniformfvKHR = RawFunctionLoader.link(SEGMENT$glGetnUniformfvKHR, Descriptors.DESCRIPTOR$glGetnUniformfvKHR);
        SEGMENT$glGetnUniformi64vARB = loader.apply("glGetnUniformi64vARB");
        HANDLE$glGetnUniformi64vARB = RawFunctionLoader.link(SEGMENT$glGetnUniformi64vARB, Descriptors.DESCRIPTOR$glGetnUniformi64vARB);
        SEGMENT$glGetnUniformiv = loader.apply("glGetnUniformiv");
        HANDLE$glGetnUniformiv = RawFunctionLoader.link(SEGMENT$glGetnUniformiv, Descriptors.DESCRIPTOR$glGetnUniformiv);
        SEGMENT$glGetnUniformivARB = loader.apply("glGetnUniformivARB");
        HANDLE$glGetnUniformivARB = RawFunctionLoader.link(SEGMENT$glGetnUniformivARB, Descriptors.DESCRIPTOR$glGetnUniformivARB);
        SEGMENT$glGetnUniformivKHR = loader.apply("glGetnUniformivKHR");
        HANDLE$glGetnUniformivKHR = RawFunctionLoader.link(SEGMENT$glGetnUniformivKHR, Descriptors.DESCRIPTOR$glGetnUniformivKHR);
        SEGMENT$glGetnUniformui64vARB = loader.apply("glGetnUniformui64vARB");
        HANDLE$glGetnUniformui64vARB = RawFunctionLoader.link(SEGMENT$glGetnUniformui64vARB, Descriptors.DESCRIPTOR$glGetnUniformui64vARB);
        SEGMENT$glGetnUniformuiv = loader.apply("glGetnUniformuiv");
        HANDLE$glGetnUniformuiv = RawFunctionLoader.link(SEGMENT$glGetnUniformuiv, Descriptors.DESCRIPTOR$glGetnUniformuiv);
        SEGMENT$glGetnUniformuivARB = loader.apply("glGetnUniformuivARB");
        HANDLE$glGetnUniformuivARB = RawFunctionLoader.link(SEGMENT$glGetnUniformuivARB, Descriptors.DESCRIPTOR$glGetnUniformuivARB);
        SEGMENT$glGetnUniformuivKHR = loader.apply("glGetnUniformuivKHR");
        HANDLE$glGetnUniformuivKHR = RawFunctionLoader.link(SEGMENT$glGetnUniformuivKHR, Descriptors.DESCRIPTOR$glGetnUniformuivKHR);
        SEGMENT$glHint = loader.apply("glHint");
        HANDLE$glHint = RawFunctionLoader.link(SEGMENT$glHint, Descriptors.DESCRIPTOR$glHint);
        SEGMENT$glIndexFormatNV = loader.apply("glIndexFormatNV");
        HANDLE$glIndexFormatNV = RawFunctionLoader.link(SEGMENT$glIndexFormatNV, Descriptors.DESCRIPTOR$glIndexFormatNV);
        SEGMENT$glInsertEventMarkerEXT = loader.apply("glInsertEventMarkerEXT");
        HANDLE$glInsertEventMarkerEXT = RawFunctionLoader.link(SEGMENT$glInsertEventMarkerEXT, Descriptors.DESCRIPTOR$glInsertEventMarkerEXT);
        SEGMENT$glInterpolatePathsNV = loader.apply("glInterpolatePathsNV");
        HANDLE$glInterpolatePathsNV = RawFunctionLoader.link(SEGMENT$glInterpolatePathsNV, Descriptors.DESCRIPTOR$glInterpolatePathsNV);
        SEGMENT$glInvalidateBufferData = loader.apply("glInvalidateBufferData");
        HANDLE$glInvalidateBufferData = RawFunctionLoader.link(SEGMENT$glInvalidateBufferData, Descriptors.DESCRIPTOR$glInvalidateBufferData);
        SEGMENT$glInvalidateBufferSubData = loader.apply("glInvalidateBufferSubData");
        HANDLE$glInvalidateBufferSubData = RawFunctionLoader.link(SEGMENT$glInvalidateBufferSubData, Descriptors.DESCRIPTOR$glInvalidateBufferSubData);
        SEGMENT$glInvalidateFramebuffer = loader.apply("glInvalidateFramebuffer");
        HANDLE$glInvalidateFramebuffer = RawFunctionLoader.link(SEGMENT$glInvalidateFramebuffer, Descriptors.DESCRIPTOR$glInvalidateFramebuffer);
        SEGMENT$glInvalidateNamedFramebufferData = loader.apply("glInvalidateNamedFramebufferData");
        HANDLE$glInvalidateNamedFramebufferData = RawFunctionLoader.link(SEGMENT$glInvalidateNamedFramebufferData, Descriptors.DESCRIPTOR$glInvalidateNamedFramebufferData);
        SEGMENT$glInvalidateNamedFramebufferSubData = loader.apply("glInvalidateNamedFramebufferSubData");
        HANDLE$glInvalidateNamedFramebufferSubData = RawFunctionLoader.link(SEGMENT$glInvalidateNamedFramebufferSubData, Descriptors.DESCRIPTOR$glInvalidateNamedFramebufferSubData);
        SEGMENT$glInvalidateSubFramebuffer = loader.apply("glInvalidateSubFramebuffer");
        HANDLE$glInvalidateSubFramebuffer = RawFunctionLoader.link(SEGMENT$glInvalidateSubFramebuffer, Descriptors.DESCRIPTOR$glInvalidateSubFramebuffer);
        SEGMENT$glInvalidateTexImage = loader.apply("glInvalidateTexImage");
        HANDLE$glInvalidateTexImage = RawFunctionLoader.link(SEGMENT$glInvalidateTexImage, Descriptors.DESCRIPTOR$glInvalidateTexImage);
        SEGMENT$glInvalidateTexSubImage = loader.apply("glInvalidateTexSubImage");
        HANDLE$glInvalidateTexSubImage = RawFunctionLoader.link(SEGMENT$glInvalidateTexSubImage, Descriptors.DESCRIPTOR$glInvalidateTexSubImage);
        SEGMENT$glIsBuffer = loader.apply("glIsBuffer");
        HANDLE$glIsBuffer = RawFunctionLoader.link(SEGMENT$glIsBuffer, Descriptors.DESCRIPTOR$glIsBuffer);
        SEGMENT$glIsBufferResidentNV = loader.apply("glIsBufferResidentNV");
        HANDLE$glIsBufferResidentNV = RawFunctionLoader.link(SEGMENT$glIsBufferResidentNV, Descriptors.DESCRIPTOR$glIsBufferResidentNV);
        SEGMENT$glIsCommandListNV = loader.apply("glIsCommandListNV");
        HANDLE$glIsCommandListNV = RawFunctionLoader.link(SEGMENT$glIsCommandListNV, Descriptors.DESCRIPTOR$glIsCommandListNV);
        SEGMENT$glIsEnabled = loader.apply("glIsEnabled");
        HANDLE$glIsEnabled = RawFunctionLoader.link(SEGMENT$glIsEnabled, Descriptors.DESCRIPTOR$glIsEnabled);
        SEGMENT$glIsEnabledIndexedEXT = loader.apply("glIsEnabledIndexedEXT");
        HANDLE$glIsEnabledIndexedEXT = RawFunctionLoader.link(SEGMENT$glIsEnabledIndexedEXT, Descriptors.DESCRIPTOR$glIsEnabledIndexedEXT);
        SEGMENT$glIsEnabledi = loader.apply("glIsEnabledi");
        HANDLE$glIsEnabledi = RawFunctionLoader.link(SEGMENT$glIsEnabledi, Descriptors.DESCRIPTOR$glIsEnabledi);
        SEGMENT$glIsFramebuffer = loader.apply("glIsFramebuffer");
        HANDLE$glIsFramebuffer = RawFunctionLoader.link(SEGMENT$glIsFramebuffer, Descriptors.DESCRIPTOR$glIsFramebuffer);
        SEGMENT$glIsImageHandleResidentARB = loader.apply("glIsImageHandleResidentARB");
        HANDLE$glIsImageHandleResidentARB = RawFunctionLoader.link(SEGMENT$glIsImageHandleResidentARB, Descriptors.DESCRIPTOR$glIsImageHandleResidentARB);
        SEGMENT$glIsImageHandleResidentNV = loader.apply("glIsImageHandleResidentNV");
        HANDLE$glIsImageHandleResidentNV = RawFunctionLoader.link(SEGMENT$glIsImageHandleResidentNV, Descriptors.DESCRIPTOR$glIsImageHandleResidentNV);
        SEGMENT$glIsNamedBufferResidentNV = loader.apply("glIsNamedBufferResidentNV");
        HANDLE$glIsNamedBufferResidentNV = RawFunctionLoader.link(SEGMENT$glIsNamedBufferResidentNV, Descriptors.DESCRIPTOR$glIsNamedBufferResidentNV);
        SEGMENT$glIsNamedStringARB = loader.apply("glIsNamedStringARB");
        HANDLE$glIsNamedStringARB = RawFunctionLoader.link(SEGMENT$glIsNamedStringARB, Descriptors.DESCRIPTOR$glIsNamedStringARB);
        SEGMENT$glIsPathNV = loader.apply("glIsPathNV");
        HANDLE$glIsPathNV = RawFunctionLoader.link(SEGMENT$glIsPathNV, Descriptors.DESCRIPTOR$glIsPathNV);
        SEGMENT$glIsPointInFillPathNV = loader.apply("glIsPointInFillPathNV");
        HANDLE$glIsPointInFillPathNV = RawFunctionLoader.link(SEGMENT$glIsPointInFillPathNV, Descriptors.DESCRIPTOR$glIsPointInFillPathNV);
        SEGMENT$glIsPointInStrokePathNV = loader.apply("glIsPointInStrokePathNV");
        HANDLE$glIsPointInStrokePathNV = RawFunctionLoader.link(SEGMENT$glIsPointInStrokePathNV, Descriptors.DESCRIPTOR$glIsPointInStrokePathNV);
        SEGMENT$glIsProgram = loader.apply("glIsProgram");
        HANDLE$glIsProgram = RawFunctionLoader.link(SEGMENT$glIsProgram, Descriptors.DESCRIPTOR$glIsProgram);
        SEGMENT$glIsProgramPipeline = loader.apply("glIsProgramPipeline");
        HANDLE$glIsProgramPipeline = RawFunctionLoader.link(SEGMENT$glIsProgramPipeline, Descriptors.DESCRIPTOR$glIsProgramPipeline);
        SEGMENT$glIsProgramPipelineEXT = loader.apply("glIsProgramPipelineEXT");
        HANDLE$glIsProgramPipelineEXT = RawFunctionLoader.link(SEGMENT$glIsProgramPipelineEXT, Descriptors.DESCRIPTOR$glIsProgramPipelineEXT);
        SEGMENT$glIsQuery = loader.apply("glIsQuery");
        HANDLE$glIsQuery = RawFunctionLoader.link(SEGMENT$glIsQuery, Descriptors.DESCRIPTOR$glIsQuery);
        SEGMENT$glIsRenderbuffer = loader.apply("glIsRenderbuffer");
        HANDLE$glIsRenderbuffer = RawFunctionLoader.link(SEGMENT$glIsRenderbuffer, Descriptors.DESCRIPTOR$glIsRenderbuffer);
        SEGMENT$glIsSampler = loader.apply("glIsSampler");
        HANDLE$glIsSampler = RawFunctionLoader.link(SEGMENT$glIsSampler, Descriptors.DESCRIPTOR$glIsSampler);
        SEGMENT$glIsShader = loader.apply("glIsShader");
        HANDLE$glIsShader = RawFunctionLoader.link(SEGMENT$glIsShader, Descriptors.DESCRIPTOR$glIsShader);
        SEGMENT$glIsStateNV = loader.apply("glIsStateNV");
        HANDLE$glIsStateNV = RawFunctionLoader.link(SEGMENT$glIsStateNV, Descriptors.DESCRIPTOR$glIsStateNV);
        SEGMENT$glIsSync = loader.apply("glIsSync");
        HANDLE$glIsSync = RawFunctionLoader.link(SEGMENT$glIsSync, Descriptors.DESCRIPTOR$glIsSync);
        SEGMENT$glIsTexture = loader.apply("glIsTexture");
        HANDLE$glIsTexture = RawFunctionLoader.link(SEGMENT$glIsTexture, Descriptors.DESCRIPTOR$glIsTexture);
        SEGMENT$glIsTextureHandleResidentARB = loader.apply("glIsTextureHandleResidentARB");
        HANDLE$glIsTextureHandleResidentARB = RawFunctionLoader.link(SEGMENT$glIsTextureHandleResidentARB, Descriptors.DESCRIPTOR$glIsTextureHandleResidentARB);
        SEGMENT$glIsTextureHandleResidentNV = loader.apply("glIsTextureHandleResidentNV");
        HANDLE$glIsTextureHandleResidentNV = RawFunctionLoader.link(SEGMENT$glIsTextureHandleResidentNV, Descriptors.DESCRIPTOR$glIsTextureHandleResidentNV);
        SEGMENT$glIsTransformFeedback = loader.apply("glIsTransformFeedback");
        HANDLE$glIsTransformFeedback = RawFunctionLoader.link(SEGMENT$glIsTransformFeedback, Descriptors.DESCRIPTOR$glIsTransformFeedback);
        SEGMENT$glIsVertexArray = loader.apply("glIsVertexArray");
        HANDLE$glIsVertexArray = RawFunctionLoader.link(SEGMENT$glIsVertexArray, Descriptors.DESCRIPTOR$glIsVertexArray);
        SEGMENT$glLabelObjectEXT = loader.apply("glLabelObjectEXT");
        HANDLE$glLabelObjectEXT = RawFunctionLoader.link(SEGMENT$glLabelObjectEXT, Descriptors.DESCRIPTOR$glLabelObjectEXT);
        SEGMENT$glLineWidth = loader.apply("glLineWidth");
        HANDLE$glLineWidth = RawFunctionLoader.link(SEGMENT$glLineWidth, Descriptors.DESCRIPTOR$glLineWidth);
        SEGMENT$glLinkProgram = loader.apply("glLinkProgram");
        HANDLE$glLinkProgram = RawFunctionLoader.link(SEGMENT$glLinkProgram, Descriptors.DESCRIPTOR$glLinkProgram);
        SEGMENT$glListDrawCommandsStatesClientNV = loader.apply("glListDrawCommandsStatesClientNV");
        HANDLE$glListDrawCommandsStatesClientNV = RawFunctionLoader.link(SEGMENT$glListDrawCommandsStatesClientNV, Descriptors.DESCRIPTOR$glListDrawCommandsStatesClientNV);
        SEGMENT$glLogicOp = loader.apply("glLogicOp");
        HANDLE$glLogicOp = RawFunctionLoader.link(SEGMENT$glLogicOp, Descriptors.DESCRIPTOR$glLogicOp);
        SEGMENT$glMakeBufferNonResidentNV = loader.apply("glMakeBufferNonResidentNV");
        HANDLE$glMakeBufferNonResidentNV = RawFunctionLoader.link(SEGMENT$glMakeBufferNonResidentNV, Descriptors.DESCRIPTOR$glMakeBufferNonResidentNV);
        SEGMENT$glMakeBufferResidentNV = loader.apply("glMakeBufferResidentNV");
        HANDLE$glMakeBufferResidentNV = RawFunctionLoader.link(SEGMENT$glMakeBufferResidentNV, Descriptors.DESCRIPTOR$glMakeBufferResidentNV);
        SEGMENT$glMakeImageHandleNonResidentARB = loader.apply("glMakeImageHandleNonResidentARB");
        HANDLE$glMakeImageHandleNonResidentARB = RawFunctionLoader.link(SEGMENT$glMakeImageHandleNonResidentARB, Descriptors.DESCRIPTOR$glMakeImageHandleNonResidentARB);
        SEGMENT$glMakeImageHandleNonResidentNV = loader.apply("glMakeImageHandleNonResidentNV");
        HANDLE$glMakeImageHandleNonResidentNV = RawFunctionLoader.link(SEGMENT$glMakeImageHandleNonResidentNV, Descriptors.DESCRIPTOR$glMakeImageHandleNonResidentNV);
        SEGMENT$glMakeImageHandleResidentARB = loader.apply("glMakeImageHandleResidentARB");
        HANDLE$glMakeImageHandleResidentARB = RawFunctionLoader.link(SEGMENT$glMakeImageHandleResidentARB, Descriptors.DESCRIPTOR$glMakeImageHandleResidentARB);
        SEGMENT$glMakeImageHandleResidentNV = loader.apply("glMakeImageHandleResidentNV");
        HANDLE$glMakeImageHandleResidentNV = RawFunctionLoader.link(SEGMENT$glMakeImageHandleResidentNV, Descriptors.DESCRIPTOR$glMakeImageHandleResidentNV);
        SEGMENT$glMakeNamedBufferNonResidentNV = loader.apply("glMakeNamedBufferNonResidentNV");
        HANDLE$glMakeNamedBufferNonResidentNV = RawFunctionLoader.link(SEGMENT$glMakeNamedBufferNonResidentNV, Descriptors.DESCRIPTOR$glMakeNamedBufferNonResidentNV);
        SEGMENT$glMakeNamedBufferResidentNV = loader.apply("glMakeNamedBufferResidentNV");
        HANDLE$glMakeNamedBufferResidentNV = RawFunctionLoader.link(SEGMENT$glMakeNamedBufferResidentNV, Descriptors.DESCRIPTOR$glMakeNamedBufferResidentNV);
        SEGMENT$glMakeTextureHandleNonResidentARB = loader.apply("glMakeTextureHandleNonResidentARB");
        HANDLE$glMakeTextureHandleNonResidentARB = RawFunctionLoader.link(SEGMENT$glMakeTextureHandleNonResidentARB, Descriptors.DESCRIPTOR$glMakeTextureHandleNonResidentARB);
        SEGMENT$glMakeTextureHandleNonResidentNV = loader.apply("glMakeTextureHandleNonResidentNV");
        HANDLE$glMakeTextureHandleNonResidentNV = RawFunctionLoader.link(SEGMENT$glMakeTextureHandleNonResidentNV, Descriptors.DESCRIPTOR$glMakeTextureHandleNonResidentNV);
        SEGMENT$glMakeTextureHandleResidentARB = loader.apply("glMakeTextureHandleResidentARB");
        HANDLE$glMakeTextureHandleResidentARB = RawFunctionLoader.link(SEGMENT$glMakeTextureHandleResidentARB, Descriptors.DESCRIPTOR$glMakeTextureHandleResidentARB);
        SEGMENT$glMakeTextureHandleResidentNV = loader.apply("glMakeTextureHandleResidentNV");
        HANDLE$glMakeTextureHandleResidentNV = RawFunctionLoader.link(SEGMENT$glMakeTextureHandleResidentNV, Descriptors.DESCRIPTOR$glMakeTextureHandleResidentNV);
        SEGMENT$glMapBuffer = loader.apply("glMapBuffer");
        HANDLE$glMapBuffer = RawFunctionLoader.link(SEGMENT$glMapBuffer, Descriptors.DESCRIPTOR$glMapBuffer);
        SEGMENT$glMapBufferRange = loader.apply("glMapBufferRange");
        HANDLE$glMapBufferRange = RawFunctionLoader.link(SEGMENT$glMapBufferRange, Descriptors.DESCRIPTOR$glMapBufferRange);
        SEGMENT$glMapNamedBuffer = loader.apply("glMapNamedBuffer");
        HANDLE$glMapNamedBuffer = RawFunctionLoader.link(SEGMENT$glMapNamedBuffer, Descriptors.DESCRIPTOR$glMapNamedBuffer);
        SEGMENT$glMapNamedBufferEXT = loader.apply("glMapNamedBufferEXT");
        HANDLE$glMapNamedBufferEXT = RawFunctionLoader.link(SEGMENT$glMapNamedBufferEXT, Descriptors.DESCRIPTOR$glMapNamedBufferEXT);
        SEGMENT$glMapNamedBufferRange = loader.apply("glMapNamedBufferRange");
        HANDLE$glMapNamedBufferRange = RawFunctionLoader.link(SEGMENT$glMapNamedBufferRange, Descriptors.DESCRIPTOR$glMapNamedBufferRange);
        SEGMENT$glMapNamedBufferRangeEXT = loader.apply("glMapNamedBufferRangeEXT");
        HANDLE$glMapNamedBufferRangeEXT = RawFunctionLoader.link(SEGMENT$glMapNamedBufferRangeEXT, Descriptors.DESCRIPTOR$glMapNamedBufferRangeEXT);
        SEGMENT$glMatrixFrustumEXT = loader.apply("glMatrixFrustumEXT");
        HANDLE$glMatrixFrustumEXT = RawFunctionLoader.link(SEGMENT$glMatrixFrustumEXT, Descriptors.DESCRIPTOR$glMatrixFrustumEXT);
        SEGMENT$glMatrixLoad3x2fNV = loader.apply("glMatrixLoad3x2fNV");
        HANDLE$glMatrixLoad3x2fNV = RawFunctionLoader.link(SEGMENT$glMatrixLoad3x2fNV, Descriptors.DESCRIPTOR$glMatrixLoad3x2fNV);
        SEGMENT$glMatrixLoad3x3fNV = loader.apply("glMatrixLoad3x3fNV");
        HANDLE$glMatrixLoad3x3fNV = RawFunctionLoader.link(SEGMENT$glMatrixLoad3x3fNV, Descriptors.DESCRIPTOR$glMatrixLoad3x3fNV);
        SEGMENT$glMatrixLoadIdentityEXT = loader.apply("glMatrixLoadIdentityEXT");
        HANDLE$glMatrixLoadIdentityEXT = RawFunctionLoader.link(SEGMENT$glMatrixLoadIdentityEXT, Descriptors.DESCRIPTOR$glMatrixLoadIdentityEXT);
        SEGMENT$glMatrixLoadTranspose3x3fNV = loader.apply("glMatrixLoadTranspose3x3fNV");
        HANDLE$glMatrixLoadTranspose3x3fNV = RawFunctionLoader.link(SEGMENT$glMatrixLoadTranspose3x3fNV, Descriptors.DESCRIPTOR$glMatrixLoadTranspose3x3fNV);
        SEGMENT$glMatrixLoadTransposedEXT = loader.apply("glMatrixLoadTransposedEXT");
        HANDLE$glMatrixLoadTransposedEXT = RawFunctionLoader.link(SEGMENT$glMatrixLoadTransposedEXT, Descriptors.DESCRIPTOR$glMatrixLoadTransposedEXT);
        SEGMENT$glMatrixLoadTransposefEXT = loader.apply("glMatrixLoadTransposefEXT");
        HANDLE$glMatrixLoadTransposefEXT = RawFunctionLoader.link(SEGMENT$glMatrixLoadTransposefEXT, Descriptors.DESCRIPTOR$glMatrixLoadTransposefEXT);
        SEGMENT$glMatrixLoaddEXT = loader.apply("glMatrixLoaddEXT");
        HANDLE$glMatrixLoaddEXT = RawFunctionLoader.link(SEGMENT$glMatrixLoaddEXT, Descriptors.DESCRIPTOR$glMatrixLoaddEXT);
        SEGMENT$glMatrixLoadfEXT = loader.apply("glMatrixLoadfEXT");
        HANDLE$glMatrixLoadfEXT = RawFunctionLoader.link(SEGMENT$glMatrixLoadfEXT, Descriptors.DESCRIPTOR$glMatrixLoadfEXT);
        SEGMENT$glMatrixMult3x2fNV = loader.apply("glMatrixMult3x2fNV");
        HANDLE$glMatrixMult3x2fNV = RawFunctionLoader.link(SEGMENT$glMatrixMult3x2fNV, Descriptors.DESCRIPTOR$glMatrixMult3x2fNV);
        SEGMENT$glMatrixMult3x3fNV = loader.apply("glMatrixMult3x3fNV");
        HANDLE$glMatrixMult3x3fNV = RawFunctionLoader.link(SEGMENT$glMatrixMult3x3fNV, Descriptors.DESCRIPTOR$glMatrixMult3x3fNV);
        SEGMENT$glMatrixMultTranspose3x3fNV = loader.apply("glMatrixMultTranspose3x3fNV");
        HANDLE$glMatrixMultTranspose3x3fNV = RawFunctionLoader.link(SEGMENT$glMatrixMultTranspose3x3fNV, Descriptors.DESCRIPTOR$glMatrixMultTranspose3x3fNV);
        SEGMENT$glMatrixMultTransposedEXT = loader.apply("glMatrixMultTransposedEXT");
        HANDLE$glMatrixMultTransposedEXT = RawFunctionLoader.link(SEGMENT$glMatrixMultTransposedEXT, Descriptors.DESCRIPTOR$glMatrixMultTransposedEXT);
        SEGMENT$glMatrixMultTransposefEXT = loader.apply("glMatrixMultTransposefEXT");
        HANDLE$glMatrixMultTransposefEXT = RawFunctionLoader.link(SEGMENT$glMatrixMultTransposefEXT, Descriptors.DESCRIPTOR$glMatrixMultTransposefEXT);
        SEGMENT$glMatrixMultdEXT = loader.apply("glMatrixMultdEXT");
        HANDLE$glMatrixMultdEXT = RawFunctionLoader.link(SEGMENT$glMatrixMultdEXT, Descriptors.DESCRIPTOR$glMatrixMultdEXT);
        SEGMENT$glMatrixMultfEXT = loader.apply("glMatrixMultfEXT");
        HANDLE$glMatrixMultfEXT = RawFunctionLoader.link(SEGMENT$glMatrixMultfEXT, Descriptors.DESCRIPTOR$glMatrixMultfEXT);
        SEGMENT$glMatrixOrthoEXT = loader.apply("glMatrixOrthoEXT");
        HANDLE$glMatrixOrthoEXT = RawFunctionLoader.link(SEGMENT$glMatrixOrthoEXT, Descriptors.DESCRIPTOR$glMatrixOrthoEXT);
        SEGMENT$glMatrixPopEXT = loader.apply("glMatrixPopEXT");
        HANDLE$glMatrixPopEXT = RawFunctionLoader.link(SEGMENT$glMatrixPopEXT, Descriptors.DESCRIPTOR$glMatrixPopEXT);
        SEGMENT$glMatrixPushEXT = loader.apply("glMatrixPushEXT");
        HANDLE$glMatrixPushEXT = RawFunctionLoader.link(SEGMENT$glMatrixPushEXT, Descriptors.DESCRIPTOR$glMatrixPushEXT);
        SEGMENT$glMatrixRotatedEXT = loader.apply("glMatrixRotatedEXT");
        HANDLE$glMatrixRotatedEXT = RawFunctionLoader.link(SEGMENT$glMatrixRotatedEXT, Descriptors.DESCRIPTOR$glMatrixRotatedEXT);
        SEGMENT$glMatrixRotatefEXT = loader.apply("glMatrixRotatefEXT");
        HANDLE$glMatrixRotatefEXT = RawFunctionLoader.link(SEGMENT$glMatrixRotatefEXT, Descriptors.DESCRIPTOR$glMatrixRotatefEXT);
        SEGMENT$glMatrixScaledEXT = loader.apply("glMatrixScaledEXT");
        HANDLE$glMatrixScaledEXT = RawFunctionLoader.link(SEGMENT$glMatrixScaledEXT, Descriptors.DESCRIPTOR$glMatrixScaledEXT);
        SEGMENT$glMatrixScalefEXT = loader.apply("glMatrixScalefEXT");
        HANDLE$glMatrixScalefEXT = RawFunctionLoader.link(SEGMENT$glMatrixScalefEXT, Descriptors.DESCRIPTOR$glMatrixScalefEXT);
        SEGMENT$glMatrixTranslatedEXT = loader.apply("glMatrixTranslatedEXT");
        HANDLE$glMatrixTranslatedEXT = RawFunctionLoader.link(SEGMENT$glMatrixTranslatedEXT, Descriptors.DESCRIPTOR$glMatrixTranslatedEXT);
        SEGMENT$glMatrixTranslatefEXT = loader.apply("glMatrixTranslatefEXT");
        HANDLE$glMatrixTranslatefEXT = RawFunctionLoader.link(SEGMENT$glMatrixTranslatefEXT, Descriptors.DESCRIPTOR$glMatrixTranslatefEXT);
        SEGMENT$glMaxShaderCompilerThreadsARB = loader.apply("glMaxShaderCompilerThreadsARB");
        HANDLE$glMaxShaderCompilerThreadsARB = RawFunctionLoader.link(SEGMENT$glMaxShaderCompilerThreadsARB, Descriptors.DESCRIPTOR$glMaxShaderCompilerThreadsARB);
        SEGMENT$glMaxShaderCompilerThreadsKHR = loader.apply("glMaxShaderCompilerThreadsKHR");
        HANDLE$glMaxShaderCompilerThreadsKHR = RawFunctionLoader.link(SEGMENT$glMaxShaderCompilerThreadsKHR, Descriptors.DESCRIPTOR$glMaxShaderCompilerThreadsKHR);
        SEGMENT$glMemoryBarrier = loader.apply("glMemoryBarrier");
        HANDLE$glMemoryBarrier = RawFunctionLoader.link(SEGMENT$glMemoryBarrier, Descriptors.DESCRIPTOR$glMemoryBarrier);
        SEGMENT$glMemoryBarrierByRegion = loader.apply("glMemoryBarrierByRegion");
        HANDLE$glMemoryBarrierByRegion = RawFunctionLoader.link(SEGMENT$glMemoryBarrierByRegion, Descriptors.DESCRIPTOR$glMemoryBarrierByRegion);
        SEGMENT$glMinSampleShading = loader.apply("glMinSampleShading");
        HANDLE$glMinSampleShading = RawFunctionLoader.link(SEGMENT$glMinSampleShading, Descriptors.DESCRIPTOR$glMinSampleShading);
        SEGMENT$glMinSampleShadingARB = loader.apply("glMinSampleShadingARB");
        HANDLE$glMinSampleShadingARB = RawFunctionLoader.link(SEGMENT$glMinSampleShadingARB, Descriptors.DESCRIPTOR$glMinSampleShadingARB);
        SEGMENT$glMultiDrawArrays = loader.apply("glMultiDrawArrays");
        HANDLE$glMultiDrawArrays = RawFunctionLoader.link(SEGMENT$glMultiDrawArrays, Descriptors.DESCRIPTOR$glMultiDrawArrays);
        SEGMENT$glMultiDrawArraysIndirect = loader.apply("glMultiDrawArraysIndirect");
        HANDLE$glMultiDrawArraysIndirect = RawFunctionLoader.link(SEGMENT$glMultiDrawArraysIndirect, Descriptors.DESCRIPTOR$glMultiDrawArraysIndirect);
        SEGMENT$glMultiDrawArraysIndirectBindlessCountNV = loader.apply("glMultiDrawArraysIndirectBindlessCountNV");
        HANDLE$glMultiDrawArraysIndirectBindlessCountNV = RawFunctionLoader.link(SEGMENT$glMultiDrawArraysIndirectBindlessCountNV, Descriptors.DESCRIPTOR$glMultiDrawArraysIndirectBindlessCountNV);
        SEGMENT$glMultiDrawArraysIndirectBindlessNV = loader.apply("glMultiDrawArraysIndirectBindlessNV");
        HANDLE$glMultiDrawArraysIndirectBindlessNV = RawFunctionLoader.link(SEGMENT$glMultiDrawArraysIndirectBindlessNV, Descriptors.DESCRIPTOR$glMultiDrawArraysIndirectBindlessNV);
        SEGMENT$glMultiDrawArraysIndirectCount = loader.apply("glMultiDrawArraysIndirectCount");
        HANDLE$glMultiDrawArraysIndirectCount = RawFunctionLoader.link(SEGMENT$glMultiDrawArraysIndirectCount, Descriptors.DESCRIPTOR$glMultiDrawArraysIndirectCount);
        SEGMENT$glMultiDrawArraysIndirectCountARB = loader.apply("glMultiDrawArraysIndirectCountARB");
        HANDLE$glMultiDrawArraysIndirectCountARB = RawFunctionLoader.link(SEGMENT$glMultiDrawArraysIndirectCountARB, Descriptors.DESCRIPTOR$glMultiDrawArraysIndirectCountARB);
        SEGMENT$glMultiDrawElements = loader.apply("glMultiDrawElements");
        HANDLE$glMultiDrawElements = RawFunctionLoader.link(SEGMENT$glMultiDrawElements, Descriptors.DESCRIPTOR$glMultiDrawElements);
        SEGMENT$glMultiDrawElementsBaseVertex = loader.apply("glMultiDrawElementsBaseVertex");
        HANDLE$glMultiDrawElementsBaseVertex = RawFunctionLoader.link(SEGMENT$glMultiDrawElementsBaseVertex, Descriptors.DESCRIPTOR$glMultiDrawElementsBaseVertex);
        SEGMENT$glMultiDrawElementsIndirect = loader.apply("glMultiDrawElementsIndirect");
        HANDLE$glMultiDrawElementsIndirect = RawFunctionLoader.link(SEGMENT$glMultiDrawElementsIndirect, Descriptors.DESCRIPTOR$glMultiDrawElementsIndirect);
        SEGMENT$glMultiDrawElementsIndirectBindlessCountNV = loader.apply("glMultiDrawElementsIndirectBindlessCountNV");
        HANDLE$glMultiDrawElementsIndirectBindlessCountNV = RawFunctionLoader.link(SEGMENT$glMultiDrawElementsIndirectBindlessCountNV, Descriptors.DESCRIPTOR$glMultiDrawElementsIndirectBindlessCountNV);
        SEGMENT$glMultiDrawElementsIndirectBindlessNV = loader.apply("glMultiDrawElementsIndirectBindlessNV");
        HANDLE$glMultiDrawElementsIndirectBindlessNV = RawFunctionLoader.link(SEGMENT$glMultiDrawElementsIndirectBindlessNV, Descriptors.DESCRIPTOR$glMultiDrawElementsIndirectBindlessNV);
        SEGMENT$glMultiDrawElementsIndirectCount = loader.apply("glMultiDrawElementsIndirectCount");
        HANDLE$glMultiDrawElementsIndirectCount = RawFunctionLoader.link(SEGMENT$glMultiDrawElementsIndirectCount, Descriptors.DESCRIPTOR$glMultiDrawElementsIndirectCount);
        SEGMENT$glMultiDrawElementsIndirectCountARB = loader.apply("glMultiDrawElementsIndirectCountARB");
        HANDLE$glMultiDrawElementsIndirectCountARB = RawFunctionLoader.link(SEGMENT$glMultiDrawElementsIndirectCountARB, Descriptors.DESCRIPTOR$glMultiDrawElementsIndirectCountARB);
        SEGMENT$glMultiDrawMeshTasksIndirectCountNV = loader.apply("glMultiDrawMeshTasksIndirectCountNV");
        HANDLE$glMultiDrawMeshTasksIndirectCountNV = RawFunctionLoader.link(SEGMENT$glMultiDrawMeshTasksIndirectCountNV, Descriptors.DESCRIPTOR$glMultiDrawMeshTasksIndirectCountNV);
        SEGMENT$glMultiDrawMeshTasksIndirectNV = loader.apply("glMultiDrawMeshTasksIndirectNV");
        HANDLE$glMultiDrawMeshTasksIndirectNV = RawFunctionLoader.link(SEGMENT$glMultiDrawMeshTasksIndirectNV, Descriptors.DESCRIPTOR$glMultiDrawMeshTasksIndirectNV);
        SEGMENT$glMultiTexBufferEXT = loader.apply("glMultiTexBufferEXT");
        HANDLE$glMultiTexBufferEXT = RawFunctionLoader.link(SEGMENT$glMultiTexBufferEXT, Descriptors.DESCRIPTOR$glMultiTexBufferEXT);
        SEGMENT$glMultiTexCoordPointerEXT = loader.apply("glMultiTexCoordPointerEXT");
        HANDLE$glMultiTexCoordPointerEXT = RawFunctionLoader.link(SEGMENT$glMultiTexCoordPointerEXT, Descriptors.DESCRIPTOR$glMultiTexCoordPointerEXT);
        SEGMENT$glMultiTexEnvfEXT = loader.apply("glMultiTexEnvfEXT");
        HANDLE$glMultiTexEnvfEXT = RawFunctionLoader.link(SEGMENT$glMultiTexEnvfEXT, Descriptors.DESCRIPTOR$glMultiTexEnvfEXT);
        SEGMENT$glMultiTexEnvfvEXT = loader.apply("glMultiTexEnvfvEXT");
        HANDLE$glMultiTexEnvfvEXT = RawFunctionLoader.link(SEGMENT$glMultiTexEnvfvEXT, Descriptors.DESCRIPTOR$glMultiTexEnvfvEXT);
        SEGMENT$glMultiTexEnviEXT = loader.apply("glMultiTexEnviEXT");
        HANDLE$glMultiTexEnviEXT = RawFunctionLoader.link(SEGMENT$glMultiTexEnviEXT, Descriptors.DESCRIPTOR$glMultiTexEnviEXT);
        SEGMENT$glMultiTexEnvivEXT = loader.apply("glMultiTexEnvivEXT");
        HANDLE$glMultiTexEnvivEXT = RawFunctionLoader.link(SEGMENT$glMultiTexEnvivEXT, Descriptors.DESCRIPTOR$glMultiTexEnvivEXT);
        SEGMENT$glMultiTexGendEXT = loader.apply("glMultiTexGendEXT");
        HANDLE$glMultiTexGendEXT = RawFunctionLoader.link(SEGMENT$glMultiTexGendEXT, Descriptors.DESCRIPTOR$glMultiTexGendEXT);
        SEGMENT$glMultiTexGendvEXT = loader.apply("glMultiTexGendvEXT");
        HANDLE$glMultiTexGendvEXT = RawFunctionLoader.link(SEGMENT$glMultiTexGendvEXT, Descriptors.DESCRIPTOR$glMultiTexGendvEXT);
        SEGMENT$glMultiTexGenfEXT = loader.apply("glMultiTexGenfEXT");
        HANDLE$glMultiTexGenfEXT = RawFunctionLoader.link(SEGMENT$glMultiTexGenfEXT, Descriptors.DESCRIPTOR$glMultiTexGenfEXT);
        SEGMENT$glMultiTexGenfvEXT = loader.apply("glMultiTexGenfvEXT");
        HANDLE$glMultiTexGenfvEXT = RawFunctionLoader.link(SEGMENT$glMultiTexGenfvEXT, Descriptors.DESCRIPTOR$glMultiTexGenfvEXT);
        SEGMENT$glMultiTexGeniEXT = loader.apply("glMultiTexGeniEXT");
        HANDLE$glMultiTexGeniEXT = RawFunctionLoader.link(SEGMENT$glMultiTexGeniEXT, Descriptors.DESCRIPTOR$glMultiTexGeniEXT);
        SEGMENT$glMultiTexGenivEXT = loader.apply("glMultiTexGenivEXT");
        HANDLE$glMultiTexGenivEXT = RawFunctionLoader.link(SEGMENT$glMultiTexGenivEXT, Descriptors.DESCRIPTOR$glMultiTexGenivEXT);
        SEGMENT$glMultiTexImage1DEXT = loader.apply("glMultiTexImage1DEXT");
        HANDLE$glMultiTexImage1DEXT = RawFunctionLoader.link(SEGMENT$glMultiTexImage1DEXT, Descriptors.DESCRIPTOR$glMultiTexImage1DEXT);
        SEGMENT$glMultiTexImage2DEXT = loader.apply("glMultiTexImage2DEXT");
        HANDLE$glMultiTexImage2DEXT = RawFunctionLoader.link(SEGMENT$glMultiTexImage2DEXT, Descriptors.DESCRIPTOR$glMultiTexImage2DEXT);
        SEGMENT$glMultiTexImage3DEXT = loader.apply("glMultiTexImage3DEXT");
        HANDLE$glMultiTexImage3DEXT = RawFunctionLoader.link(SEGMENT$glMultiTexImage3DEXT, Descriptors.DESCRIPTOR$glMultiTexImage3DEXT);
        SEGMENT$glMultiTexParameterIivEXT = loader.apply("glMultiTexParameterIivEXT");
        HANDLE$glMultiTexParameterIivEXT = RawFunctionLoader.link(SEGMENT$glMultiTexParameterIivEXT, Descriptors.DESCRIPTOR$glMultiTexParameterIivEXT);
        SEGMENT$glMultiTexParameterIuivEXT = loader.apply("glMultiTexParameterIuivEXT");
        HANDLE$glMultiTexParameterIuivEXT = RawFunctionLoader.link(SEGMENT$glMultiTexParameterIuivEXT, Descriptors.DESCRIPTOR$glMultiTexParameterIuivEXT);
        SEGMENT$glMultiTexParameterfEXT = loader.apply("glMultiTexParameterfEXT");
        HANDLE$glMultiTexParameterfEXT = RawFunctionLoader.link(SEGMENT$glMultiTexParameterfEXT, Descriptors.DESCRIPTOR$glMultiTexParameterfEXT);
        SEGMENT$glMultiTexParameterfvEXT = loader.apply("glMultiTexParameterfvEXT");
        HANDLE$glMultiTexParameterfvEXT = RawFunctionLoader.link(SEGMENT$glMultiTexParameterfvEXT, Descriptors.DESCRIPTOR$glMultiTexParameterfvEXT);
        SEGMENT$glMultiTexParameteriEXT = loader.apply("glMultiTexParameteriEXT");
        HANDLE$glMultiTexParameteriEXT = RawFunctionLoader.link(SEGMENT$glMultiTexParameteriEXT, Descriptors.DESCRIPTOR$glMultiTexParameteriEXT);
        SEGMENT$glMultiTexParameterivEXT = loader.apply("glMultiTexParameterivEXT");
        HANDLE$glMultiTexParameterivEXT = RawFunctionLoader.link(SEGMENT$glMultiTexParameterivEXT, Descriptors.DESCRIPTOR$glMultiTexParameterivEXT);
        SEGMENT$glMultiTexRenderbufferEXT = loader.apply("glMultiTexRenderbufferEXT");
        HANDLE$glMultiTexRenderbufferEXT = RawFunctionLoader.link(SEGMENT$glMultiTexRenderbufferEXT, Descriptors.DESCRIPTOR$glMultiTexRenderbufferEXT);
        SEGMENT$glMultiTexSubImage1DEXT = loader.apply("glMultiTexSubImage1DEXT");
        HANDLE$glMultiTexSubImage1DEXT = RawFunctionLoader.link(SEGMENT$glMultiTexSubImage1DEXT, Descriptors.DESCRIPTOR$glMultiTexSubImage1DEXT);
        SEGMENT$glMultiTexSubImage2DEXT = loader.apply("glMultiTexSubImage2DEXT");
        HANDLE$glMultiTexSubImage2DEXT = RawFunctionLoader.link(SEGMENT$glMultiTexSubImage2DEXT, Descriptors.DESCRIPTOR$glMultiTexSubImage2DEXT);
        SEGMENT$glMultiTexSubImage3DEXT = loader.apply("glMultiTexSubImage3DEXT");
        HANDLE$glMultiTexSubImage3DEXT = RawFunctionLoader.link(SEGMENT$glMultiTexSubImage3DEXT, Descriptors.DESCRIPTOR$glMultiTexSubImage3DEXT);
        SEGMENT$glNamedBufferAttachMemoryNV = loader.apply("glNamedBufferAttachMemoryNV");
        HANDLE$glNamedBufferAttachMemoryNV = RawFunctionLoader.link(SEGMENT$glNamedBufferAttachMemoryNV, Descriptors.DESCRIPTOR$glNamedBufferAttachMemoryNV);
        SEGMENT$glNamedBufferData = loader.apply("glNamedBufferData");
        HANDLE$glNamedBufferData = RawFunctionLoader.link(SEGMENT$glNamedBufferData, Descriptors.DESCRIPTOR$glNamedBufferData);
        SEGMENT$glNamedBufferDataEXT = loader.apply("glNamedBufferDataEXT");
        HANDLE$glNamedBufferDataEXT = RawFunctionLoader.link(SEGMENT$glNamedBufferDataEXT, Descriptors.DESCRIPTOR$glNamedBufferDataEXT);
        SEGMENT$glNamedBufferPageCommitmentARB = loader.apply("glNamedBufferPageCommitmentARB");
        HANDLE$glNamedBufferPageCommitmentARB = RawFunctionLoader.link(SEGMENT$glNamedBufferPageCommitmentARB, Descriptors.DESCRIPTOR$glNamedBufferPageCommitmentARB);
        SEGMENT$glNamedBufferPageCommitmentEXT = loader.apply("glNamedBufferPageCommitmentEXT");
        HANDLE$glNamedBufferPageCommitmentEXT = RawFunctionLoader.link(SEGMENT$glNamedBufferPageCommitmentEXT, Descriptors.DESCRIPTOR$glNamedBufferPageCommitmentEXT);
        SEGMENT$glNamedBufferPageCommitmentMemNV = loader.apply("glNamedBufferPageCommitmentMemNV");
        HANDLE$glNamedBufferPageCommitmentMemNV = RawFunctionLoader.link(SEGMENT$glNamedBufferPageCommitmentMemNV, Descriptors.DESCRIPTOR$glNamedBufferPageCommitmentMemNV);
        SEGMENT$glNamedBufferStorage = loader.apply("glNamedBufferStorage");
        HANDLE$glNamedBufferStorage = RawFunctionLoader.link(SEGMENT$glNamedBufferStorage, Descriptors.DESCRIPTOR$glNamedBufferStorage);
        SEGMENT$glNamedBufferStorageEXT = loader.apply("glNamedBufferStorageEXT");
        HANDLE$glNamedBufferStorageEXT = RawFunctionLoader.link(SEGMENT$glNamedBufferStorageEXT, Descriptors.DESCRIPTOR$glNamedBufferStorageEXT);
        SEGMENT$glNamedBufferSubData = loader.apply("glNamedBufferSubData");
        HANDLE$glNamedBufferSubData = RawFunctionLoader.link(SEGMENT$glNamedBufferSubData, Descriptors.DESCRIPTOR$glNamedBufferSubData);
        SEGMENT$glNamedBufferSubDataEXT = loader.apply("glNamedBufferSubDataEXT");
        HANDLE$glNamedBufferSubDataEXT = RawFunctionLoader.link(SEGMENT$glNamedBufferSubDataEXT, Descriptors.DESCRIPTOR$glNamedBufferSubDataEXT);
        SEGMENT$glNamedCopyBufferSubDataEXT = loader.apply("glNamedCopyBufferSubDataEXT");
        HANDLE$glNamedCopyBufferSubDataEXT = RawFunctionLoader.link(SEGMENT$glNamedCopyBufferSubDataEXT, Descriptors.DESCRIPTOR$glNamedCopyBufferSubDataEXT);
        SEGMENT$glNamedFramebufferDrawBuffer = loader.apply("glNamedFramebufferDrawBuffer");
        HANDLE$glNamedFramebufferDrawBuffer = RawFunctionLoader.link(SEGMENT$glNamedFramebufferDrawBuffer, Descriptors.DESCRIPTOR$glNamedFramebufferDrawBuffer);
        SEGMENT$glNamedFramebufferDrawBuffers = loader.apply("glNamedFramebufferDrawBuffers");
        HANDLE$glNamedFramebufferDrawBuffers = RawFunctionLoader.link(SEGMENT$glNamedFramebufferDrawBuffers, Descriptors.DESCRIPTOR$glNamedFramebufferDrawBuffers);
        SEGMENT$glNamedFramebufferParameteri = loader.apply("glNamedFramebufferParameteri");
        HANDLE$glNamedFramebufferParameteri = RawFunctionLoader.link(SEGMENT$glNamedFramebufferParameteri, Descriptors.DESCRIPTOR$glNamedFramebufferParameteri);
        SEGMENT$glNamedFramebufferParameteriEXT = loader.apply("glNamedFramebufferParameteriEXT");
        HANDLE$glNamedFramebufferParameteriEXT = RawFunctionLoader.link(SEGMENT$glNamedFramebufferParameteriEXT, Descriptors.DESCRIPTOR$glNamedFramebufferParameteriEXT);
        SEGMENT$glNamedFramebufferReadBuffer = loader.apply("glNamedFramebufferReadBuffer");
        HANDLE$glNamedFramebufferReadBuffer = RawFunctionLoader.link(SEGMENT$glNamedFramebufferReadBuffer, Descriptors.DESCRIPTOR$glNamedFramebufferReadBuffer);
        SEGMENT$glNamedFramebufferRenderbuffer = loader.apply("glNamedFramebufferRenderbuffer");
        HANDLE$glNamedFramebufferRenderbuffer = RawFunctionLoader.link(SEGMENT$glNamedFramebufferRenderbuffer, Descriptors.DESCRIPTOR$glNamedFramebufferRenderbuffer);
        SEGMENT$glNamedFramebufferRenderbufferEXT = loader.apply("glNamedFramebufferRenderbufferEXT");
        HANDLE$glNamedFramebufferRenderbufferEXT = RawFunctionLoader.link(SEGMENT$glNamedFramebufferRenderbufferEXT, Descriptors.DESCRIPTOR$glNamedFramebufferRenderbufferEXT);
        SEGMENT$glNamedFramebufferSampleLocationsfvARB = loader.apply("glNamedFramebufferSampleLocationsfvARB");
        HANDLE$glNamedFramebufferSampleLocationsfvARB = RawFunctionLoader.link(SEGMENT$glNamedFramebufferSampleLocationsfvARB, Descriptors.DESCRIPTOR$glNamedFramebufferSampleLocationsfvARB);
        SEGMENT$glNamedFramebufferSampleLocationsfvNV = loader.apply("glNamedFramebufferSampleLocationsfvNV");
        HANDLE$glNamedFramebufferSampleLocationsfvNV = RawFunctionLoader.link(SEGMENT$glNamedFramebufferSampleLocationsfvNV, Descriptors.DESCRIPTOR$glNamedFramebufferSampleLocationsfvNV);
        SEGMENT$glNamedFramebufferTexture = loader.apply("glNamedFramebufferTexture");
        HANDLE$glNamedFramebufferTexture = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTexture, Descriptors.DESCRIPTOR$glNamedFramebufferTexture);
        SEGMENT$glNamedFramebufferTexture1DEXT = loader.apply("glNamedFramebufferTexture1DEXT");
        HANDLE$glNamedFramebufferTexture1DEXT = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTexture1DEXT, Descriptors.DESCRIPTOR$glNamedFramebufferTexture1DEXT);
        SEGMENT$glNamedFramebufferTexture2DEXT = loader.apply("glNamedFramebufferTexture2DEXT");
        HANDLE$glNamedFramebufferTexture2DEXT = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTexture2DEXT, Descriptors.DESCRIPTOR$glNamedFramebufferTexture2DEXT);
        SEGMENT$glNamedFramebufferTexture3DEXT = loader.apply("glNamedFramebufferTexture3DEXT");
        HANDLE$glNamedFramebufferTexture3DEXT = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTexture3DEXT, Descriptors.DESCRIPTOR$glNamedFramebufferTexture3DEXT);
        SEGMENT$glNamedFramebufferTextureEXT = loader.apply("glNamedFramebufferTextureEXT");
        HANDLE$glNamedFramebufferTextureEXT = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTextureEXT, Descriptors.DESCRIPTOR$glNamedFramebufferTextureEXT);
        SEGMENT$glNamedFramebufferTextureFaceEXT = loader.apply("glNamedFramebufferTextureFaceEXT");
        HANDLE$glNamedFramebufferTextureFaceEXT = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTextureFaceEXT, Descriptors.DESCRIPTOR$glNamedFramebufferTextureFaceEXT);
        SEGMENT$glNamedFramebufferTextureLayer = loader.apply("glNamedFramebufferTextureLayer");
        HANDLE$glNamedFramebufferTextureLayer = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTextureLayer, Descriptors.DESCRIPTOR$glNamedFramebufferTextureLayer);
        SEGMENT$glNamedFramebufferTextureLayerEXT = loader.apply("glNamedFramebufferTextureLayerEXT");
        HANDLE$glNamedFramebufferTextureLayerEXT = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTextureLayerEXT, Descriptors.DESCRIPTOR$glNamedFramebufferTextureLayerEXT);
        SEGMENT$glNamedFramebufferTextureMultiviewOVR = loader.apply("glNamedFramebufferTextureMultiviewOVR");
        HANDLE$glNamedFramebufferTextureMultiviewOVR = RawFunctionLoader.link(SEGMENT$glNamedFramebufferTextureMultiviewOVR, Descriptors.DESCRIPTOR$glNamedFramebufferTextureMultiviewOVR);
        SEGMENT$glNamedProgramLocalParameter4dEXT = loader.apply("glNamedProgramLocalParameter4dEXT");
        HANDLE$glNamedProgramLocalParameter4dEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameter4dEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameter4dEXT);
        SEGMENT$glNamedProgramLocalParameter4dvEXT = loader.apply("glNamedProgramLocalParameter4dvEXT");
        HANDLE$glNamedProgramLocalParameter4dvEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameter4dvEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameter4dvEXT);
        SEGMENT$glNamedProgramLocalParameter4fEXT = loader.apply("glNamedProgramLocalParameter4fEXT");
        HANDLE$glNamedProgramLocalParameter4fEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameter4fEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameter4fEXT);
        SEGMENT$glNamedProgramLocalParameter4fvEXT = loader.apply("glNamedProgramLocalParameter4fvEXT");
        HANDLE$glNamedProgramLocalParameter4fvEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameter4fvEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameter4fvEXT);
        SEGMENT$glNamedProgramLocalParameterI4iEXT = loader.apply("glNamedProgramLocalParameterI4iEXT");
        HANDLE$glNamedProgramLocalParameterI4iEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameterI4iEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameterI4iEXT);
        SEGMENT$glNamedProgramLocalParameterI4ivEXT = loader.apply("glNamedProgramLocalParameterI4ivEXT");
        HANDLE$glNamedProgramLocalParameterI4ivEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameterI4ivEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameterI4ivEXT);
        SEGMENT$glNamedProgramLocalParameterI4uiEXT = loader.apply("glNamedProgramLocalParameterI4uiEXT");
        HANDLE$glNamedProgramLocalParameterI4uiEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameterI4uiEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameterI4uiEXT);
        SEGMENT$glNamedProgramLocalParameterI4uivEXT = loader.apply("glNamedProgramLocalParameterI4uivEXT");
        HANDLE$glNamedProgramLocalParameterI4uivEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameterI4uivEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameterI4uivEXT);
        SEGMENT$glNamedProgramLocalParameters4fvEXT = loader.apply("glNamedProgramLocalParameters4fvEXT");
        HANDLE$glNamedProgramLocalParameters4fvEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParameters4fvEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParameters4fvEXT);
        SEGMENT$glNamedProgramLocalParametersI4ivEXT = loader.apply("glNamedProgramLocalParametersI4ivEXT");
        HANDLE$glNamedProgramLocalParametersI4ivEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParametersI4ivEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParametersI4ivEXT);
        SEGMENT$glNamedProgramLocalParametersI4uivEXT = loader.apply("glNamedProgramLocalParametersI4uivEXT");
        HANDLE$glNamedProgramLocalParametersI4uivEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramLocalParametersI4uivEXT, Descriptors.DESCRIPTOR$glNamedProgramLocalParametersI4uivEXT);
        SEGMENT$glNamedProgramStringEXT = loader.apply("glNamedProgramStringEXT");
        HANDLE$glNamedProgramStringEXT = RawFunctionLoader.link(SEGMENT$glNamedProgramStringEXT, Descriptors.DESCRIPTOR$glNamedProgramStringEXT);
        SEGMENT$glNamedRenderbufferStorage = loader.apply("glNamedRenderbufferStorage");
        HANDLE$glNamedRenderbufferStorage = RawFunctionLoader.link(SEGMENT$glNamedRenderbufferStorage, Descriptors.DESCRIPTOR$glNamedRenderbufferStorage);
        SEGMENT$glNamedRenderbufferStorageEXT = loader.apply("glNamedRenderbufferStorageEXT");
        HANDLE$glNamedRenderbufferStorageEXT = RawFunctionLoader.link(SEGMENT$glNamedRenderbufferStorageEXT, Descriptors.DESCRIPTOR$glNamedRenderbufferStorageEXT);
        SEGMENT$glNamedRenderbufferStorageMultisample = loader.apply("glNamedRenderbufferStorageMultisample");
        HANDLE$glNamedRenderbufferStorageMultisample = RawFunctionLoader.link(SEGMENT$glNamedRenderbufferStorageMultisample, Descriptors.DESCRIPTOR$glNamedRenderbufferStorageMultisample);
        SEGMENT$glNamedRenderbufferStorageMultisampleAdvancedAMD = loader.apply("glNamedRenderbufferStorageMultisampleAdvancedAMD");
        HANDLE$glNamedRenderbufferStorageMultisampleAdvancedAMD = RawFunctionLoader.link(SEGMENT$glNamedRenderbufferStorageMultisampleAdvancedAMD, Descriptors.DESCRIPTOR$glNamedRenderbufferStorageMultisampleAdvancedAMD);
        SEGMENT$glNamedRenderbufferStorageMultisampleCoverageEXT = loader.apply("glNamedRenderbufferStorageMultisampleCoverageEXT");
        HANDLE$glNamedRenderbufferStorageMultisampleCoverageEXT = RawFunctionLoader.link(SEGMENT$glNamedRenderbufferStorageMultisampleCoverageEXT, Descriptors.DESCRIPTOR$glNamedRenderbufferStorageMultisampleCoverageEXT);
        SEGMENT$glNamedRenderbufferStorageMultisampleEXT = loader.apply("glNamedRenderbufferStorageMultisampleEXT");
        HANDLE$glNamedRenderbufferStorageMultisampleEXT = RawFunctionLoader.link(SEGMENT$glNamedRenderbufferStorageMultisampleEXT, Descriptors.DESCRIPTOR$glNamedRenderbufferStorageMultisampleEXT);
        SEGMENT$glNamedStringARB = loader.apply("glNamedStringARB");
        HANDLE$glNamedStringARB = RawFunctionLoader.link(SEGMENT$glNamedStringARB, Descriptors.DESCRIPTOR$glNamedStringARB);
        SEGMENT$glNormalFormatNV = loader.apply("glNormalFormatNV");
        HANDLE$glNormalFormatNV = RawFunctionLoader.link(SEGMENT$glNormalFormatNV, Descriptors.DESCRIPTOR$glNormalFormatNV);
        SEGMENT$glObjectLabel = loader.apply("glObjectLabel");
        HANDLE$glObjectLabel = RawFunctionLoader.link(SEGMENT$glObjectLabel, Descriptors.DESCRIPTOR$glObjectLabel);
        SEGMENT$glObjectLabelKHR = loader.apply("glObjectLabelKHR");
        HANDLE$glObjectLabelKHR = RawFunctionLoader.link(SEGMENT$glObjectLabelKHR, Descriptors.DESCRIPTOR$glObjectLabelKHR);
        SEGMENT$glObjectPtrLabel = loader.apply("glObjectPtrLabel");
        HANDLE$glObjectPtrLabel = RawFunctionLoader.link(SEGMENT$glObjectPtrLabel, Descriptors.DESCRIPTOR$glObjectPtrLabel);
        SEGMENT$glObjectPtrLabelKHR = loader.apply("glObjectPtrLabelKHR");
        HANDLE$glObjectPtrLabelKHR = RawFunctionLoader.link(SEGMENT$glObjectPtrLabelKHR, Descriptors.DESCRIPTOR$glObjectPtrLabelKHR);
        SEGMENT$glPatchParameterfv = loader.apply("glPatchParameterfv");
        HANDLE$glPatchParameterfv = RawFunctionLoader.link(SEGMENT$glPatchParameterfv, Descriptors.DESCRIPTOR$glPatchParameterfv);
        SEGMENT$glPatchParameteri = loader.apply("glPatchParameteri");
        HANDLE$glPatchParameteri = RawFunctionLoader.link(SEGMENT$glPatchParameteri, Descriptors.DESCRIPTOR$glPatchParameteri);
        SEGMENT$glPathCommandsNV = loader.apply("glPathCommandsNV");
        HANDLE$glPathCommandsNV = RawFunctionLoader.link(SEGMENT$glPathCommandsNV, Descriptors.DESCRIPTOR$glPathCommandsNV);
        SEGMENT$glPathCoordsNV = loader.apply("glPathCoordsNV");
        HANDLE$glPathCoordsNV = RawFunctionLoader.link(SEGMENT$glPathCoordsNV, Descriptors.DESCRIPTOR$glPathCoordsNV);
        SEGMENT$glPathCoverDepthFuncNV = loader.apply("glPathCoverDepthFuncNV");
        HANDLE$glPathCoverDepthFuncNV = RawFunctionLoader.link(SEGMENT$glPathCoverDepthFuncNV, Descriptors.DESCRIPTOR$glPathCoverDepthFuncNV);
        SEGMENT$glPathDashArrayNV = loader.apply("glPathDashArrayNV");
        HANDLE$glPathDashArrayNV = RawFunctionLoader.link(SEGMENT$glPathDashArrayNV, Descriptors.DESCRIPTOR$glPathDashArrayNV);
        SEGMENT$glPathGlyphIndexArrayNV = loader.apply("glPathGlyphIndexArrayNV");
        HANDLE$glPathGlyphIndexArrayNV = RawFunctionLoader.link(SEGMENT$glPathGlyphIndexArrayNV, Descriptors.DESCRIPTOR$glPathGlyphIndexArrayNV);
        SEGMENT$glPathGlyphIndexRangeNV = loader.apply("glPathGlyphIndexRangeNV");
        HANDLE$glPathGlyphIndexRangeNV = RawFunctionLoader.link(SEGMENT$glPathGlyphIndexRangeNV, Descriptors.DESCRIPTOR$glPathGlyphIndexRangeNV);
        SEGMENT$glPathGlyphRangeNV = loader.apply("glPathGlyphRangeNV");
        HANDLE$glPathGlyphRangeNV = RawFunctionLoader.link(SEGMENT$glPathGlyphRangeNV, Descriptors.DESCRIPTOR$glPathGlyphRangeNV);
        SEGMENT$glPathGlyphsNV = loader.apply("glPathGlyphsNV");
        HANDLE$glPathGlyphsNV = RawFunctionLoader.link(SEGMENT$glPathGlyphsNV, Descriptors.DESCRIPTOR$glPathGlyphsNV);
        SEGMENT$glPathMemoryGlyphIndexArrayNV = loader.apply("glPathMemoryGlyphIndexArrayNV");
        HANDLE$glPathMemoryGlyphIndexArrayNV = RawFunctionLoader.link(SEGMENT$glPathMemoryGlyphIndexArrayNV, Descriptors.DESCRIPTOR$glPathMemoryGlyphIndexArrayNV);
        SEGMENT$glPathParameterfNV = loader.apply("glPathParameterfNV");
        HANDLE$glPathParameterfNV = RawFunctionLoader.link(SEGMENT$glPathParameterfNV, Descriptors.DESCRIPTOR$glPathParameterfNV);
        SEGMENT$glPathParameterfvNV = loader.apply("glPathParameterfvNV");
        HANDLE$glPathParameterfvNV = RawFunctionLoader.link(SEGMENT$glPathParameterfvNV, Descriptors.DESCRIPTOR$glPathParameterfvNV);
        SEGMENT$glPathParameteriNV = loader.apply("glPathParameteriNV");
        HANDLE$glPathParameteriNV = RawFunctionLoader.link(SEGMENT$glPathParameteriNV, Descriptors.DESCRIPTOR$glPathParameteriNV);
        SEGMENT$glPathParameterivNV = loader.apply("glPathParameterivNV");
        HANDLE$glPathParameterivNV = RawFunctionLoader.link(SEGMENT$glPathParameterivNV, Descriptors.DESCRIPTOR$glPathParameterivNV);
        SEGMENT$glPathStencilDepthOffsetNV = loader.apply("glPathStencilDepthOffsetNV");
        HANDLE$glPathStencilDepthOffsetNV = RawFunctionLoader.link(SEGMENT$glPathStencilDepthOffsetNV, Descriptors.DESCRIPTOR$glPathStencilDepthOffsetNV);
        SEGMENT$glPathStencilFuncNV = loader.apply("glPathStencilFuncNV");
        HANDLE$glPathStencilFuncNV = RawFunctionLoader.link(SEGMENT$glPathStencilFuncNV, Descriptors.DESCRIPTOR$glPathStencilFuncNV);
        SEGMENT$glPathStringNV = loader.apply("glPathStringNV");
        HANDLE$glPathStringNV = RawFunctionLoader.link(SEGMENT$glPathStringNV, Descriptors.DESCRIPTOR$glPathStringNV);
        SEGMENT$glPathSubCommandsNV = loader.apply("glPathSubCommandsNV");
        HANDLE$glPathSubCommandsNV = RawFunctionLoader.link(SEGMENT$glPathSubCommandsNV, Descriptors.DESCRIPTOR$glPathSubCommandsNV);
        SEGMENT$glPathSubCoordsNV = loader.apply("glPathSubCoordsNV");
        HANDLE$glPathSubCoordsNV = RawFunctionLoader.link(SEGMENT$glPathSubCoordsNV, Descriptors.DESCRIPTOR$glPathSubCoordsNV);
        SEGMENT$glPauseTransformFeedback = loader.apply("glPauseTransformFeedback");
        HANDLE$glPauseTransformFeedback = RawFunctionLoader.link(SEGMENT$glPauseTransformFeedback, Descriptors.DESCRIPTOR$glPauseTransformFeedback);
        SEGMENT$glPixelStoref = loader.apply("glPixelStoref");
        HANDLE$glPixelStoref = RawFunctionLoader.link(SEGMENT$glPixelStoref, Descriptors.DESCRIPTOR$glPixelStoref);
        SEGMENT$glPixelStorei = loader.apply("glPixelStorei");
        HANDLE$glPixelStorei = RawFunctionLoader.link(SEGMENT$glPixelStorei, Descriptors.DESCRIPTOR$glPixelStorei);
        SEGMENT$glPointAlongPathNV = loader.apply("glPointAlongPathNV");
        HANDLE$glPointAlongPathNV = RawFunctionLoader.link(SEGMENT$glPointAlongPathNV, Descriptors.DESCRIPTOR$glPointAlongPathNV);
        SEGMENT$glPointParameterf = loader.apply("glPointParameterf");
        HANDLE$glPointParameterf = RawFunctionLoader.link(SEGMENT$glPointParameterf, Descriptors.DESCRIPTOR$glPointParameterf);
        SEGMENT$glPointParameterfv = loader.apply("glPointParameterfv");
        HANDLE$glPointParameterfv = RawFunctionLoader.link(SEGMENT$glPointParameterfv, Descriptors.DESCRIPTOR$glPointParameterfv);
        SEGMENT$glPointParameteri = loader.apply("glPointParameteri");
        HANDLE$glPointParameteri = RawFunctionLoader.link(SEGMENT$glPointParameteri, Descriptors.DESCRIPTOR$glPointParameteri);
        SEGMENT$glPointParameteriv = loader.apply("glPointParameteriv");
        HANDLE$glPointParameteriv = RawFunctionLoader.link(SEGMENT$glPointParameteriv, Descriptors.DESCRIPTOR$glPointParameteriv);
        SEGMENT$glPointSize = loader.apply("glPointSize");
        HANDLE$glPointSize = RawFunctionLoader.link(SEGMENT$glPointSize, Descriptors.DESCRIPTOR$glPointSize);
        SEGMENT$glPolygonMode = loader.apply("glPolygonMode");
        HANDLE$glPolygonMode = RawFunctionLoader.link(SEGMENT$glPolygonMode, Descriptors.DESCRIPTOR$glPolygonMode);
        SEGMENT$glPolygonOffset = loader.apply("glPolygonOffset");
        HANDLE$glPolygonOffset = RawFunctionLoader.link(SEGMENT$glPolygonOffset, Descriptors.DESCRIPTOR$glPolygonOffset);
        SEGMENT$glPolygonOffsetClamp = loader.apply("glPolygonOffsetClamp");
        HANDLE$glPolygonOffsetClamp = RawFunctionLoader.link(SEGMENT$glPolygonOffsetClamp, Descriptors.DESCRIPTOR$glPolygonOffsetClamp);
        SEGMENT$glPolygonOffsetClampEXT = loader.apply("glPolygonOffsetClampEXT");
        HANDLE$glPolygonOffsetClampEXT = RawFunctionLoader.link(SEGMENT$glPolygonOffsetClampEXT, Descriptors.DESCRIPTOR$glPolygonOffsetClampEXT);
        SEGMENT$glPopDebugGroup = loader.apply("glPopDebugGroup");
        HANDLE$glPopDebugGroup = RawFunctionLoader.link(SEGMENT$glPopDebugGroup, Descriptors.DESCRIPTOR$glPopDebugGroup);
        SEGMENT$glPopDebugGroupKHR = loader.apply("glPopDebugGroupKHR");
        HANDLE$glPopDebugGroupKHR = RawFunctionLoader.link(SEGMENT$glPopDebugGroupKHR, Descriptors.DESCRIPTOR$glPopDebugGroupKHR);
        SEGMENT$glPopGroupMarkerEXT = loader.apply("glPopGroupMarkerEXT");
        HANDLE$glPopGroupMarkerEXT = RawFunctionLoader.link(SEGMENT$glPopGroupMarkerEXT, Descriptors.DESCRIPTOR$glPopGroupMarkerEXT);
        SEGMENT$glPrimitiveBoundingBoxARB = loader.apply("glPrimitiveBoundingBoxARB");
        HANDLE$glPrimitiveBoundingBoxARB = RawFunctionLoader.link(SEGMENT$glPrimitiveBoundingBoxARB, Descriptors.DESCRIPTOR$glPrimitiveBoundingBoxARB);
        SEGMENT$glPrimitiveRestartIndex = loader.apply("glPrimitiveRestartIndex");
        HANDLE$glPrimitiveRestartIndex = RawFunctionLoader.link(SEGMENT$glPrimitiveRestartIndex, Descriptors.DESCRIPTOR$glPrimitiveRestartIndex);
        SEGMENT$glProgramBinary = loader.apply("glProgramBinary");
        HANDLE$glProgramBinary = RawFunctionLoader.link(SEGMENT$glProgramBinary, Descriptors.DESCRIPTOR$glProgramBinary);
        SEGMENT$glProgramParameteri = loader.apply("glProgramParameteri");
        HANDLE$glProgramParameteri = RawFunctionLoader.link(SEGMENT$glProgramParameteri, Descriptors.DESCRIPTOR$glProgramParameteri);
        SEGMENT$glProgramParameteriARB = loader.apply("glProgramParameteriARB");
        HANDLE$glProgramParameteriARB = RawFunctionLoader.link(SEGMENT$glProgramParameteriARB, Descriptors.DESCRIPTOR$glProgramParameteriARB);
        SEGMENT$glProgramPathFragmentInputGenNV = loader.apply("glProgramPathFragmentInputGenNV");
        HANDLE$glProgramPathFragmentInputGenNV = RawFunctionLoader.link(SEGMENT$glProgramPathFragmentInputGenNV, Descriptors.DESCRIPTOR$glProgramPathFragmentInputGenNV);
        SEGMENT$glProgramUniform1d = loader.apply("glProgramUniform1d");
        HANDLE$glProgramUniform1d = RawFunctionLoader.link(SEGMENT$glProgramUniform1d, Descriptors.DESCRIPTOR$glProgramUniform1d);
        SEGMENT$glProgramUniform1dEXT = loader.apply("glProgramUniform1dEXT");
        HANDLE$glProgramUniform1dEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform1dEXT, Descriptors.DESCRIPTOR$glProgramUniform1dEXT);
        SEGMENT$glProgramUniform1dv = loader.apply("glProgramUniform1dv");
        HANDLE$glProgramUniform1dv = RawFunctionLoader.link(SEGMENT$glProgramUniform1dv, Descriptors.DESCRIPTOR$glProgramUniform1dv);
        SEGMENT$glProgramUniform1dvEXT = loader.apply("glProgramUniform1dvEXT");
        HANDLE$glProgramUniform1dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform1dvEXT, Descriptors.DESCRIPTOR$glProgramUniform1dvEXT);
        SEGMENT$glProgramUniform1f = loader.apply("glProgramUniform1f");
        HANDLE$glProgramUniform1f = RawFunctionLoader.link(SEGMENT$glProgramUniform1f, Descriptors.DESCRIPTOR$glProgramUniform1f);
        SEGMENT$glProgramUniform1fEXT = loader.apply("glProgramUniform1fEXT");
        HANDLE$glProgramUniform1fEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform1fEXT, Descriptors.DESCRIPTOR$glProgramUniform1fEXT);
        SEGMENT$glProgramUniform1fv = loader.apply("glProgramUniform1fv");
        HANDLE$glProgramUniform1fv = RawFunctionLoader.link(SEGMENT$glProgramUniform1fv, Descriptors.DESCRIPTOR$glProgramUniform1fv);
        SEGMENT$glProgramUniform1fvEXT = loader.apply("glProgramUniform1fvEXT");
        HANDLE$glProgramUniform1fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform1fvEXT, Descriptors.DESCRIPTOR$glProgramUniform1fvEXT);
        SEGMENT$glProgramUniform1i = loader.apply("glProgramUniform1i");
        HANDLE$glProgramUniform1i = RawFunctionLoader.link(SEGMENT$glProgramUniform1i, Descriptors.DESCRIPTOR$glProgramUniform1i);
        SEGMENT$glProgramUniform1i64ARB = loader.apply("glProgramUniform1i64ARB");
        HANDLE$glProgramUniform1i64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniform1i64ARB, Descriptors.DESCRIPTOR$glProgramUniform1i64ARB);
        SEGMENT$glProgramUniform1i64vARB = loader.apply("glProgramUniform1i64vARB");
        HANDLE$glProgramUniform1i64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniform1i64vARB, Descriptors.DESCRIPTOR$glProgramUniform1i64vARB);
        SEGMENT$glProgramUniform1iEXT = loader.apply("glProgramUniform1iEXT");
        HANDLE$glProgramUniform1iEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform1iEXT, Descriptors.DESCRIPTOR$glProgramUniform1iEXT);
        SEGMENT$glProgramUniform1iv = loader.apply("glProgramUniform1iv");
        HANDLE$glProgramUniform1iv = RawFunctionLoader.link(SEGMENT$glProgramUniform1iv, Descriptors.DESCRIPTOR$glProgramUniform1iv);
        SEGMENT$glProgramUniform1ivEXT = loader.apply("glProgramUniform1ivEXT");
        HANDLE$glProgramUniform1ivEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform1ivEXT, Descriptors.DESCRIPTOR$glProgramUniform1ivEXT);
        SEGMENT$glProgramUniform1ui = loader.apply("glProgramUniform1ui");
        HANDLE$glProgramUniform1ui = RawFunctionLoader.link(SEGMENT$glProgramUniform1ui, Descriptors.DESCRIPTOR$glProgramUniform1ui);
        SEGMENT$glProgramUniform1ui64ARB = loader.apply("glProgramUniform1ui64ARB");
        HANDLE$glProgramUniform1ui64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniform1ui64ARB, Descriptors.DESCRIPTOR$glProgramUniform1ui64ARB);
        SEGMENT$glProgramUniform1ui64vARB = loader.apply("glProgramUniform1ui64vARB");
        HANDLE$glProgramUniform1ui64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniform1ui64vARB, Descriptors.DESCRIPTOR$glProgramUniform1ui64vARB);
        SEGMENT$glProgramUniform1uiEXT = loader.apply("glProgramUniform1uiEXT");
        HANDLE$glProgramUniform1uiEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform1uiEXT, Descriptors.DESCRIPTOR$glProgramUniform1uiEXT);
        SEGMENT$glProgramUniform1uiv = loader.apply("glProgramUniform1uiv");
        HANDLE$glProgramUniform1uiv = RawFunctionLoader.link(SEGMENT$glProgramUniform1uiv, Descriptors.DESCRIPTOR$glProgramUniform1uiv);
        SEGMENT$glProgramUniform1uivEXT = loader.apply("glProgramUniform1uivEXT");
        HANDLE$glProgramUniform1uivEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform1uivEXT, Descriptors.DESCRIPTOR$glProgramUniform1uivEXT);
        SEGMENT$glProgramUniform2d = loader.apply("glProgramUniform2d");
        HANDLE$glProgramUniform2d = RawFunctionLoader.link(SEGMENT$glProgramUniform2d, Descriptors.DESCRIPTOR$glProgramUniform2d);
        SEGMENT$glProgramUniform2dEXT = loader.apply("glProgramUniform2dEXT");
        HANDLE$glProgramUniform2dEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform2dEXT, Descriptors.DESCRIPTOR$glProgramUniform2dEXT);
        SEGMENT$glProgramUniform2dv = loader.apply("glProgramUniform2dv");
        HANDLE$glProgramUniform2dv = RawFunctionLoader.link(SEGMENT$glProgramUniform2dv, Descriptors.DESCRIPTOR$glProgramUniform2dv);
        SEGMENT$glProgramUniform2dvEXT = loader.apply("glProgramUniform2dvEXT");
        HANDLE$glProgramUniform2dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform2dvEXT, Descriptors.DESCRIPTOR$glProgramUniform2dvEXT);
        SEGMENT$glProgramUniform2f = loader.apply("glProgramUniform2f");
        HANDLE$glProgramUniform2f = RawFunctionLoader.link(SEGMENT$glProgramUniform2f, Descriptors.DESCRIPTOR$glProgramUniform2f);
        SEGMENT$glProgramUniform2fEXT = loader.apply("glProgramUniform2fEXT");
        HANDLE$glProgramUniform2fEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform2fEXT, Descriptors.DESCRIPTOR$glProgramUniform2fEXT);
        SEGMENT$glProgramUniform2fv = loader.apply("glProgramUniform2fv");
        HANDLE$glProgramUniform2fv = RawFunctionLoader.link(SEGMENT$glProgramUniform2fv, Descriptors.DESCRIPTOR$glProgramUniform2fv);
        SEGMENT$glProgramUniform2fvEXT = loader.apply("glProgramUniform2fvEXT");
        HANDLE$glProgramUniform2fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform2fvEXT, Descriptors.DESCRIPTOR$glProgramUniform2fvEXT);
        SEGMENT$glProgramUniform2i = loader.apply("glProgramUniform2i");
        HANDLE$glProgramUniform2i = RawFunctionLoader.link(SEGMENT$glProgramUniform2i, Descriptors.DESCRIPTOR$glProgramUniform2i);
        SEGMENT$glProgramUniform2i64ARB = loader.apply("glProgramUniform2i64ARB");
        HANDLE$glProgramUniform2i64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniform2i64ARB, Descriptors.DESCRIPTOR$glProgramUniform2i64ARB);
        SEGMENT$glProgramUniform2i64vARB = loader.apply("glProgramUniform2i64vARB");
        HANDLE$glProgramUniform2i64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniform2i64vARB, Descriptors.DESCRIPTOR$glProgramUniform2i64vARB);
        SEGMENT$glProgramUniform2iEXT = loader.apply("glProgramUniform2iEXT");
        HANDLE$glProgramUniform2iEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform2iEXT, Descriptors.DESCRIPTOR$glProgramUniform2iEXT);
        SEGMENT$glProgramUniform2iv = loader.apply("glProgramUniform2iv");
        HANDLE$glProgramUniform2iv = RawFunctionLoader.link(SEGMENT$glProgramUniform2iv, Descriptors.DESCRIPTOR$glProgramUniform2iv);
        SEGMENT$glProgramUniform2ivEXT = loader.apply("glProgramUniform2ivEXT");
        HANDLE$glProgramUniform2ivEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform2ivEXT, Descriptors.DESCRIPTOR$glProgramUniform2ivEXT);
        SEGMENT$glProgramUniform2ui = loader.apply("glProgramUniform2ui");
        HANDLE$glProgramUniform2ui = RawFunctionLoader.link(SEGMENT$glProgramUniform2ui, Descriptors.DESCRIPTOR$glProgramUniform2ui);
        SEGMENT$glProgramUniform2ui64ARB = loader.apply("glProgramUniform2ui64ARB");
        HANDLE$glProgramUniform2ui64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniform2ui64ARB, Descriptors.DESCRIPTOR$glProgramUniform2ui64ARB);
        SEGMENT$glProgramUniform2ui64vARB = loader.apply("glProgramUniform2ui64vARB");
        HANDLE$glProgramUniform2ui64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniform2ui64vARB, Descriptors.DESCRIPTOR$glProgramUniform2ui64vARB);
        SEGMENT$glProgramUniform2uiEXT = loader.apply("glProgramUniform2uiEXT");
        HANDLE$glProgramUniform2uiEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform2uiEXT, Descriptors.DESCRIPTOR$glProgramUniform2uiEXT);
        SEGMENT$glProgramUniform2uiv = loader.apply("glProgramUniform2uiv");
        HANDLE$glProgramUniform2uiv = RawFunctionLoader.link(SEGMENT$glProgramUniform2uiv, Descriptors.DESCRIPTOR$glProgramUniform2uiv);
        SEGMENT$glProgramUniform2uivEXT = loader.apply("glProgramUniform2uivEXT");
        HANDLE$glProgramUniform2uivEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform2uivEXT, Descriptors.DESCRIPTOR$glProgramUniform2uivEXT);
        SEGMENT$glProgramUniform3d = loader.apply("glProgramUniform3d");
        HANDLE$glProgramUniform3d = RawFunctionLoader.link(SEGMENT$glProgramUniform3d, Descriptors.DESCRIPTOR$glProgramUniform3d);
        SEGMENT$glProgramUniform3dEXT = loader.apply("glProgramUniform3dEXT");
        HANDLE$glProgramUniform3dEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform3dEXT, Descriptors.DESCRIPTOR$glProgramUniform3dEXT);
        SEGMENT$glProgramUniform3dv = loader.apply("glProgramUniform3dv");
        HANDLE$glProgramUniform3dv = RawFunctionLoader.link(SEGMENT$glProgramUniform3dv, Descriptors.DESCRIPTOR$glProgramUniform3dv);
        SEGMENT$glProgramUniform3dvEXT = loader.apply("glProgramUniform3dvEXT");
        HANDLE$glProgramUniform3dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform3dvEXT, Descriptors.DESCRIPTOR$glProgramUniform3dvEXT);
        SEGMENT$glProgramUniform3f = loader.apply("glProgramUniform3f");
        HANDLE$glProgramUniform3f = RawFunctionLoader.link(SEGMENT$glProgramUniform3f, Descriptors.DESCRIPTOR$glProgramUniform3f);
        SEGMENT$glProgramUniform3fEXT = loader.apply("glProgramUniform3fEXT");
        HANDLE$glProgramUniform3fEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform3fEXT, Descriptors.DESCRIPTOR$glProgramUniform3fEXT);
        SEGMENT$glProgramUniform3fv = loader.apply("glProgramUniform3fv");
        HANDLE$glProgramUniform3fv = RawFunctionLoader.link(SEGMENT$glProgramUniform3fv, Descriptors.DESCRIPTOR$glProgramUniform3fv);
        SEGMENT$glProgramUniform3fvEXT = loader.apply("glProgramUniform3fvEXT");
        HANDLE$glProgramUniform3fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform3fvEXT, Descriptors.DESCRIPTOR$glProgramUniform3fvEXT);
        SEGMENT$glProgramUniform3i = loader.apply("glProgramUniform3i");
        HANDLE$glProgramUniform3i = RawFunctionLoader.link(SEGMENT$glProgramUniform3i, Descriptors.DESCRIPTOR$glProgramUniform3i);
        SEGMENT$glProgramUniform3i64ARB = loader.apply("glProgramUniform3i64ARB");
        HANDLE$glProgramUniform3i64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniform3i64ARB, Descriptors.DESCRIPTOR$glProgramUniform3i64ARB);
        SEGMENT$glProgramUniform3i64vARB = loader.apply("glProgramUniform3i64vARB");
        HANDLE$glProgramUniform3i64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniform3i64vARB, Descriptors.DESCRIPTOR$glProgramUniform3i64vARB);
        SEGMENT$glProgramUniform3iEXT = loader.apply("glProgramUniform3iEXT");
        HANDLE$glProgramUniform3iEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform3iEXT, Descriptors.DESCRIPTOR$glProgramUniform3iEXT);
        SEGMENT$glProgramUniform3iv = loader.apply("glProgramUniform3iv");
        HANDLE$glProgramUniform3iv = RawFunctionLoader.link(SEGMENT$glProgramUniform3iv, Descriptors.DESCRIPTOR$glProgramUniform3iv);
        SEGMENT$glProgramUniform3ivEXT = loader.apply("glProgramUniform3ivEXT");
        HANDLE$glProgramUniform3ivEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform3ivEXT, Descriptors.DESCRIPTOR$glProgramUniform3ivEXT);
        SEGMENT$glProgramUniform3ui = loader.apply("glProgramUniform3ui");
        HANDLE$glProgramUniform3ui = RawFunctionLoader.link(SEGMENT$glProgramUniform3ui, Descriptors.DESCRIPTOR$glProgramUniform3ui);
        SEGMENT$glProgramUniform3ui64ARB = loader.apply("glProgramUniform3ui64ARB");
        HANDLE$glProgramUniform3ui64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniform3ui64ARB, Descriptors.DESCRIPTOR$glProgramUniform3ui64ARB);
        SEGMENT$glProgramUniform3ui64vARB = loader.apply("glProgramUniform3ui64vARB");
        HANDLE$glProgramUniform3ui64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniform3ui64vARB, Descriptors.DESCRIPTOR$glProgramUniform3ui64vARB);
        SEGMENT$glProgramUniform3uiEXT = loader.apply("glProgramUniform3uiEXT");
        HANDLE$glProgramUniform3uiEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform3uiEXT, Descriptors.DESCRIPTOR$glProgramUniform3uiEXT);
        SEGMENT$glProgramUniform3uiv = loader.apply("glProgramUniform3uiv");
        HANDLE$glProgramUniform3uiv = RawFunctionLoader.link(SEGMENT$glProgramUniform3uiv, Descriptors.DESCRIPTOR$glProgramUniform3uiv);
        SEGMENT$glProgramUniform3uivEXT = loader.apply("glProgramUniform3uivEXT");
        HANDLE$glProgramUniform3uivEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform3uivEXT, Descriptors.DESCRIPTOR$glProgramUniform3uivEXT);
        SEGMENT$glProgramUniform4d = loader.apply("glProgramUniform4d");
        HANDLE$glProgramUniform4d = RawFunctionLoader.link(SEGMENT$glProgramUniform4d, Descriptors.DESCRIPTOR$glProgramUniform4d);
        SEGMENT$glProgramUniform4dEXT = loader.apply("glProgramUniform4dEXT");
        HANDLE$glProgramUniform4dEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform4dEXT, Descriptors.DESCRIPTOR$glProgramUniform4dEXT);
        SEGMENT$glProgramUniform4dv = loader.apply("glProgramUniform4dv");
        HANDLE$glProgramUniform4dv = RawFunctionLoader.link(SEGMENT$glProgramUniform4dv, Descriptors.DESCRIPTOR$glProgramUniform4dv);
        SEGMENT$glProgramUniform4dvEXT = loader.apply("glProgramUniform4dvEXT");
        HANDLE$glProgramUniform4dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform4dvEXT, Descriptors.DESCRIPTOR$glProgramUniform4dvEXT);
        SEGMENT$glProgramUniform4f = loader.apply("glProgramUniform4f");
        HANDLE$glProgramUniform4f = RawFunctionLoader.link(SEGMENT$glProgramUniform4f, Descriptors.DESCRIPTOR$glProgramUniform4f);
        SEGMENT$glProgramUniform4fEXT = loader.apply("glProgramUniform4fEXT");
        HANDLE$glProgramUniform4fEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform4fEXT, Descriptors.DESCRIPTOR$glProgramUniform4fEXT);
        SEGMENT$glProgramUniform4fv = loader.apply("glProgramUniform4fv");
        HANDLE$glProgramUniform4fv = RawFunctionLoader.link(SEGMENT$glProgramUniform4fv, Descriptors.DESCRIPTOR$glProgramUniform4fv);
        SEGMENT$glProgramUniform4fvEXT = loader.apply("glProgramUniform4fvEXT");
        HANDLE$glProgramUniform4fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform4fvEXT, Descriptors.DESCRIPTOR$glProgramUniform4fvEXT);
        SEGMENT$glProgramUniform4i = loader.apply("glProgramUniform4i");
        HANDLE$glProgramUniform4i = RawFunctionLoader.link(SEGMENT$glProgramUniform4i, Descriptors.DESCRIPTOR$glProgramUniform4i);
        SEGMENT$glProgramUniform4i64ARB = loader.apply("glProgramUniform4i64ARB");
        HANDLE$glProgramUniform4i64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniform4i64ARB, Descriptors.DESCRIPTOR$glProgramUniform4i64ARB);
        SEGMENT$glProgramUniform4i64vARB = loader.apply("glProgramUniform4i64vARB");
        HANDLE$glProgramUniform4i64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniform4i64vARB, Descriptors.DESCRIPTOR$glProgramUniform4i64vARB);
        SEGMENT$glProgramUniform4iEXT = loader.apply("glProgramUniform4iEXT");
        HANDLE$glProgramUniform4iEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform4iEXT, Descriptors.DESCRIPTOR$glProgramUniform4iEXT);
        SEGMENT$glProgramUniform4iv = loader.apply("glProgramUniform4iv");
        HANDLE$glProgramUniform4iv = RawFunctionLoader.link(SEGMENT$glProgramUniform4iv, Descriptors.DESCRIPTOR$glProgramUniform4iv);
        SEGMENT$glProgramUniform4ivEXT = loader.apply("glProgramUniform4ivEXT");
        HANDLE$glProgramUniform4ivEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform4ivEXT, Descriptors.DESCRIPTOR$glProgramUniform4ivEXT);
        SEGMENT$glProgramUniform4ui = loader.apply("glProgramUniform4ui");
        HANDLE$glProgramUniform4ui = RawFunctionLoader.link(SEGMENT$glProgramUniform4ui, Descriptors.DESCRIPTOR$glProgramUniform4ui);
        SEGMENT$glProgramUniform4ui64ARB = loader.apply("glProgramUniform4ui64ARB");
        HANDLE$glProgramUniform4ui64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniform4ui64ARB, Descriptors.DESCRIPTOR$glProgramUniform4ui64ARB);
        SEGMENT$glProgramUniform4ui64vARB = loader.apply("glProgramUniform4ui64vARB");
        HANDLE$glProgramUniform4ui64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniform4ui64vARB, Descriptors.DESCRIPTOR$glProgramUniform4ui64vARB);
        SEGMENT$glProgramUniform4uiEXT = loader.apply("glProgramUniform4uiEXT");
        HANDLE$glProgramUniform4uiEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform4uiEXT, Descriptors.DESCRIPTOR$glProgramUniform4uiEXT);
        SEGMENT$glProgramUniform4uiv = loader.apply("glProgramUniform4uiv");
        HANDLE$glProgramUniform4uiv = RawFunctionLoader.link(SEGMENT$glProgramUniform4uiv, Descriptors.DESCRIPTOR$glProgramUniform4uiv);
        SEGMENT$glProgramUniform4uivEXT = loader.apply("glProgramUniform4uivEXT");
        HANDLE$glProgramUniform4uivEXT = RawFunctionLoader.link(SEGMENT$glProgramUniform4uivEXT, Descriptors.DESCRIPTOR$glProgramUniform4uivEXT);
        SEGMENT$glProgramUniformHandleui64ARB = loader.apply("glProgramUniformHandleui64ARB");
        HANDLE$glProgramUniformHandleui64ARB = RawFunctionLoader.link(SEGMENT$glProgramUniformHandleui64ARB, Descriptors.DESCRIPTOR$glProgramUniformHandleui64ARB);
        SEGMENT$glProgramUniformHandleui64NV = loader.apply("glProgramUniformHandleui64NV");
        HANDLE$glProgramUniformHandleui64NV = RawFunctionLoader.link(SEGMENT$glProgramUniformHandleui64NV, Descriptors.DESCRIPTOR$glProgramUniformHandleui64NV);
        SEGMENT$glProgramUniformHandleui64vARB = loader.apply("glProgramUniformHandleui64vARB");
        HANDLE$glProgramUniformHandleui64vARB = RawFunctionLoader.link(SEGMENT$glProgramUniformHandleui64vARB, Descriptors.DESCRIPTOR$glProgramUniformHandleui64vARB);
        SEGMENT$glProgramUniformHandleui64vNV = loader.apply("glProgramUniformHandleui64vNV");
        HANDLE$glProgramUniformHandleui64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniformHandleui64vNV, Descriptors.DESCRIPTOR$glProgramUniformHandleui64vNV);
        SEGMENT$glProgramUniformMatrix2dv = loader.apply("glProgramUniformMatrix2dv");
        HANDLE$glProgramUniformMatrix2dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix2dv);
        SEGMENT$glProgramUniformMatrix2dvEXT = loader.apply("glProgramUniformMatrix2dvEXT");
        HANDLE$glProgramUniformMatrix2dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix2dvEXT);
        SEGMENT$glProgramUniformMatrix2fv = loader.apply("glProgramUniformMatrix2fv");
        HANDLE$glProgramUniformMatrix2fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix2fv);
        SEGMENT$glProgramUniformMatrix2fvEXT = loader.apply("glProgramUniformMatrix2fvEXT");
        HANDLE$glProgramUniformMatrix2fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix2fvEXT);
        SEGMENT$glProgramUniformMatrix2x3dv = loader.apply("glProgramUniformMatrix2x3dv");
        HANDLE$glProgramUniformMatrix2x3dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2x3dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix2x3dv);
        SEGMENT$glProgramUniformMatrix2x3dvEXT = loader.apply("glProgramUniformMatrix2x3dvEXT");
        HANDLE$glProgramUniformMatrix2x3dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2x3dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix2x3dvEXT);
        SEGMENT$glProgramUniformMatrix2x3fv = loader.apply("glProgramUniformMatrix2x3fv");
        HANDLE$glProgramUniformMatrix2x3fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2x3fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix2x3fv);
        SEGMENT$glProgramUniformMatrix2x3fvEXT = loader.apply("glProgramUniformMatrix2x3fvEXT");
        HANDLE$glProgramUniformMatrix2x3fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2x3fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix2x3fvEXT);
        SEGMENT$glProgramUniformMatrix2x4dv = loader.apply("glProgramUniformMatrix2x4dv");
        HANDLE$glProgramUniformMatrix2x4dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2x4dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix2x4dv);
        SEGMENT$glProgramUniformMatrix2x4dvEXT = loader.apply("glProgramUniformMatrix2x4dvEXT");
        HANDLE$glProgramUniformMatrix2x4dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2x4dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix2x4dvEXT);
        SEGMENT$glProgramUniformMatrix2x4fv = loader.apply("glProgramUniformMatrix2x4fv");
        HANDLE$glProgramUniformMatrix2x4fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2x4fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix2x4fv);
        SEGMENT$glProgramUniformMatrix2x4fvEXT = loader.apply("glProgramUniformMatrix2x4fvEXT");
        HANDLE$glProgramUniformMatrix2x4fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix2x4fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix2x4fvEXT);
        SEGMENT$glProgramUniformMatrix3dv = loader.apply("glProgramUniformMatrix3dv");
        HANDLE$glProgramUniformMatrix3dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix3dv);
        SEGMENT$glProgramUniformMatrix3dvEXT = loader.apply("glProgramUniformMatrix3dvEXT");
        HANDLE$glProgramUniformMatrix3dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix3dvEXT);
        SEGMENT$glProgramUniformMatrix3fv = loader.apply("glProgramUniformMatrix3fv");
        HANDLE$glProgramUniformMatrix3fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix3fv);
        SEGMENT$glProgramUniformMatrix3fvEXT = loader.apply("glProgramUniformMatrix3fvEXT");
        HANDLE$glProgramUniformMatrix3fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix3fvEXT);
        SEGMENT$glProgramUniformMatrix3x2dv = loader.apply("glProgramUniformMatrix3x2dv");
        HANDLE$glProgramUniformMatrix3x2dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3x2dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix3x2dv);
        SEGMENT$glProgramUniformMatrix3x2dvEXT = loader.apply("glProgramUniformMatrix3x2dvEXT");
        HANDLE$glProgramUniformMatrix3x2dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3x2dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix3x2dvEXT);
        SEGMENT$glProgramUniformMatrix3x2fv = loader.apply("glProgramUniformMatrix3x2fv");
        HANDLE$glProgramUniformMatrix3x2fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3x2fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix3x2fv);
        SEGMENT$glProgramUniformMatrix3x2fvEXT = loader.apply("glProgramUniformMatrix3x2fvEXT");
        HANDLE$glProgramUniformMatrix3x2fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3x2fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix3x2fvEXT);
        SEGMENT$glProgramUniformMatrix3x4dv = loader.apply("glProgramUniformMatrix3x4dv");
        HANDLE$glProgramUniformMatrix3x4dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3x4dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix3x4dv);
        SEGMENT$glProgramUniformMatrix3x4dvEXT = loader.apply("glProgramUniformMatrix3x4dvEXT");
        HANDLE$glProgramUniformMatrix3x4dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3x4dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix3x4dvEXT);
        SEGMENT$glProgramUniformMatrix3x4fv = loader.apply("glProgramUniformMatrix3x4fv");
        HANDLE$glProgramUniformMatrix3x4fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3x4fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix3x4fv);
        SEGMENT$glProgramUniformMatrix3x4fvEXT = loader.apply("glProgramUniformMatrix3x4fvEXT");
        HANDLE$glProgramUniformMatrix3x4fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix3x4fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix3x4fvEXT);
        SEGMENT$glProgramUniformMatrix4dv = loader.apply("glProgramUniformMatrix4dv");
        HANDLE$glProgramUniformMatrix4dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix4dv);
        SEGMENT$glProgramUniformMatrix4dvEXT = loader.apply("glProgramUniformMatrix4dvEXT");
        HANDLE$glProgramUniformMatrix4dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix4dvEXT);
        SEGMENT$glProgramUniformMatrix4fv = loader.apply("glProgramUniformMatrix4fv");
        HANDLE$glProgramUniformMatrix4fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix4fv);
        SEGMENT$glProgramUniformMatrix4fvEXT = loader.apply("glProgramUniformMatrix4fvEXT");
        HANDLE$glProgramUniformMatrix4fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix4fvEXT);
        SEGMENT$glProgramUniformMatrix4x2dv = loader.apply("glProgramUniformMatrix4x2dv");
        HANDLE$glProgramUniformMatrix4x2dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4x2dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix4x2dv);
        SEGMENT$glProgramUniformMatrix4x2dvEXT = loader.apply("glProgramUniformMatrix4x2dvEXT");
        HANDLE$glProgramUniformMatrix4x2dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4x2dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix4x2dvEXT);
        SEGMENT$glProgramUniformMatrix4x2fv = loader.apply("glProgramUniformMatrix4x2fv");
        HANDLE$glProgramUniformMatrix4x2fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4x2fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix4x2fv);
        SEGMENT$glProgramUniformMatrix4x2fvEXT = loader.apply("glProgramUniformMatrix4x2fvEXT");
        HANDLE$glProgramUniformMatrix4x2fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4x2fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix4x2fvEXT);
        SEGMENT$glProgramUniformMatrix4x3dv = loader.apply("glProgramUniformMatrix4x3dv");
        HANDLE$glProgramUniformMatrix4x3dv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4x3dv, Descriptors.DESCRIPTOR$glProgramUniformMatrix4x3dv);
        SEGMENT$glProgramUniformMatrix4x3dvEXT = loader.apply("glProgramUniformMatrix4x3dvEXT");
        HANDLE$glProgramUniformMatrix4x3dvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4x3dvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix4x3dvEXT);
        SEGMENT$glProgramUniformMatrix4x3fv = loader.apply("glProgramUniformMatrix4x3fv");
        HANDLE$glProgramUniformMatrix4x3fv = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4x3fv, Descriptors.DESCRIPTOR$glProgramUniformMatrix4x3fv);
        SEGMENT$glProgramUniformMatrix4x3fvEXT = loader.apply("glProgramUniformMatrix4x3fvEXT");
        HANDLE$glProgramUniformMatrix4x3fvEXT = RawFunctionLoader.link(SEGMENT$glProgramUniformMatrix4x3fvEXT, Descriptors.DESCRIPTOR$glProgramUniformMatrix4x3fvEXT);
        SEGMENT$glProgramUniformui64NV = loader.apply("glProgramUniformui64NV");
        HANDLE$glProgramUniformui64NV = RawFunctionLoader.link(SEGMENT$glProgramUniformui64NV, Descriptors.DESCRIPTOR$glProgramUniformui64NV);
        SEGMENT$glProgramUniformui64vNV = loader.apply("glProgramUniformui64vNV");
        HANDLE$glProgramUniformui64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniformui64vNV, Descriptors.DESCRIPTOR$glProgramUniformui64vNV);
        SEGMENT$glProvokingVertex = loader.apply("glProvokingVertex");
        HANDLE$glProvokingVertex = RawFunctionLoader.link(SEGMENT$glProvokingVertex, Descriptors.DESCRIPTOR$glProvokingVertex);
        SEGMENT$glPushClientAttribDefaultEXT = loader.apply("glPushClientAttribDefaultEXT");
        HANDLE$glPushClientAttribDefaultEXT = RawFunctionLoader.link(SEGMENT$glPushClientAttribDefaultEXT, Descriptors.DESCRIPTOR$glPushClientAttribDefaultEXT);
        SEGMENT$glPushDebugGroup = loader.apply("glPushDebugGroup");
        HANDLE$glPushDebugGroup = RawFunctionLoader.link(SEGMENT$glPushDebugGroup, Descriptors.DESCRIPTOR$glPushDebugGroup);
        SEGMENT$glPushDebugGroupKHR = loader.apply("glPushDebugGroupKHR");
        HANDLE$glPushDebugGroupKHR = RawFunctionLoader.link(SEGMENT$glPushDebugGroupKHR, Descriptors.DESCRIPTOR$glPushDebugGroupKHR);
        SEGMENT$glPushGroupMarkerEXT = loader.apply("glPushGroupMarkerEXT");
        HANDLE$glPushGroupMarkerEXT = RawFunctionLoader.link(SEGMENT$glPushGroupMarkerEXT, Descriptors.DESCRIPTOR$glPushGroupMarkerEXT);
        SEGMENT$glQueryCounter = loader.apply("glQueryCounter");
        HANDLE$glQueryCounter = RawFunctionLoader.link(SEGMENT$glQueryCounter, Descriptors.DESCRIPTOR$glQueryCounter);
        SEGMENT$glRasterSamplesEXT = loader.apply("glRasterSamplesEXT");
        HANDLE$glRasterSamplesEXT = RawFunctionLoader.link(SEGMENT$glRasterSamplesEXT, Descriptors.DESCRIPTOR$glRasterSamplesEXT);
        SEGMENT$glReadBuffer = loader.apply("glReadBuffer");
        HANDLE$glReadBuffer = RawFunctionLoader.link(SEGMENT$glReadBuffer, Descriptors.DESCRIPTOR$glReadBuffer);
        SEGMENT$glReadPixels = loader.apply("glReadPixels");
        HANDLE$glReadPixels = RawFunctionLoader.link(SEGMENT$glReadPixels, Descriptors.DESCRIPTOR$glReadPixels);
        SEGMENT$glReadnPixels = loader.apply("glReadnPixels");
        HANDLE$glReadnPixels = RawFunctionLoader.link(SEGMENT$glReadnPixels, Descriptors.DESCRIPTOR$glReadnPixels);
        SEGMENT$glReadnPixelsARB = loader.apply("glReadnPixelsARB");
        HANDLE$glReadnPixelsARB = RawFunctionLoader.link(SEGMENT$glReadnPixelsARB, Descriptors.DESCRIPTOR$glReadnPixelsARB);
        SEGMENT$glReadnPixelsKHR = loader.apply("glReadnPixelsKHR");
        HANDLE$glReadnPixelsKHR = RawFunctionLoader.link(SEGMENT$glReadnPixelsKHR, Descriptors.DESCRIPTOR$glReadnPixelsKHR);
        SEGMENT$glReleaseShaderCompiler = loader.apply("glReleaseShaderCompiler");
        HANDLE$glReleaseShaderCompiler = RawFunctionLoader.link(SEGMENT$glReleaseShaderCompiler, Descriptors.DESCRIPTOR$glReleaseShaderCompiler);
        SEGMENT$glRenderbufferStorage = loader.apply("glRenderbufferStorage");
        HANDLE$glRenderbufferStorage = RawFunctionLoader.link(SEGMENT$glRenderbufferStorage, Descriptors.DESCRIPTOR$glRenderbufferStorage);
        SEGMENT$glRenderbufferStorageMultisample = loader.apply("glRenderbufferStorageMultisample");
        HANDLE$glRenderbufferStorageMultisample = RawFunctionLoader.link(SEGMENT$glRenderbufferStorageMultisample, Descriptors.DESCRIPTOR$glRenderbufferStorageMultisample);
        SEGMENT$glRenderbufferStorageMultisampleAdvancedAMD = loader.apply("glRenderbufferStorageMultisampleAdvancedAMD");
        HANDLE$glRenderbufferStorageMultisampleAdvancedAMD = RawFunctionLoader.link(SEGMENT$glRenderbufferStorageMultisampleAdvancedAMD, Descriptors.DESCRIPTOR$glRenderbufferStorageMultisampleAdvancedAMD);
        SEGMENT$glRenderbufferStorageMultisampleCoverageNV = loader.apply("glRenderbufferStorageMultisampleCoverageNV");
        HANDLE$glRenderbufferStorageMultisampleCoverageNV = RawFunctionLoader.link(SEGMENT$glRenderbufferStorageMultisampleCoverageNV, Descriptors.DESCRIPTOR$glRenderbufferStorageMultisampleCoverageNV);
        SEGMENT$glResetMemoryObjectParameterNV = loader.apply("glResetMemoryObjectParameterNV");
        HANDLE$glResetMemoryObjectParameterNV = RawFunctionLoader.link(SEGMENT$glResetMemoryObjectParameterNV, Descriptors.DESCRIPTOR$glResetMemoryObjectParameterNV);
        SEGMENT$glResolveDepthValuesNV = loader.apply("glResolveDepthValuesNV");
        HANDLE$glResolveDepthValuesNV = RawFunctionLoader.link(SEGMENT$glResolveDepthValuesNV, Descriptors.DESCRIPTOR$glResolveDepthValuesNV);
        SEGMENT$glResumeTransformFeedback = loader.apply("glResumeTransformFeedback");
        HANDLE$glResumeTransformFeedback = RawFunctionLoader.link(SEGMENT$glResumeTransformFeedback, Descriptors.DESCRIPTOR$glResumeTransformFeedback);
        SEGMENT$glSampleCoverage = loader.apply("glSampleCoverage");
        HANDLE$glSampleCoverage = RawFunctionLoader.link(SEGMENT$glSampleCoverage, Descriptors.DESCRIPTOR$glSampleCoverage);
        SEGMENT$glSampleMaski = loader.apply("glSampleMaski");
        HANDLE$glSampleMaski = RawFunctionLoader.link(SEGMENT$glSampleMaski, Descriptors.DESCRIPTOR$glSampleMaski);
        SEGMENT$glSamplerParameterIiv = loader.apply("glSamplerParameterIiv");
        HANDLE$glSamplerParameterIiv = RawFunctionLoader.link(SEGMENT$glSamplerParameterIiv, Descriptors.DESCRIPTOR$glSamplerParameterIiv);
        SEGMENT$glSamplerParameterIuiv = loader.apply("glSamplerParameterIuiv");
        HANDLE$glSamplerParameterIuiv = RawFunctionLoader.link(SEGMENT$glSamplerParameterIuiv, Descriptors.DESCRIPTOR$glSamplerParameterIuiv);
        SEGMENT$glSamplerParameterf = loader.apply("glSamplerParameterf");
        HANDLE$glSamplerParameterf = RawFunctionLoader.link(SEGMENT$glSamplerParameterf, Descriptors.DESCRIPTOR$glSamplerParameterf);
        SEGMENT$glSamplerParameterfv = loader.apply("glSamplerParameterfv");
        HANDLE$glSamplerParameterfv = RawFunctionLoader.link(SEGMENT$glSamplerParameterfv, Descriptors.DESCRIPTOR$glSamplerParameterfv);
        SEGMENT$glSamplerParameteri = loader.apply("glSamplerParameteri");
        HANDLE$glSamplerParameteri = RawFunctionLoader.link(SEGMENT$glSamplerParameteri, Descriptors.DESCRIPTOR$glSamplerParameteri);
        SEGMENT$glSamplerParameteriv = loader.apply("glSamplerParameteriv");
        HANDLE$glSamplerParameteriv = RawFunctionLoader.link(SEGMENT$glSamplerParameteriv, Descriptors.DESCRIPTOR$glSamplerParameteriv);
        SEGMENT$glScissor = loader.apply("glScissor");
        HANDLE$glScissor = RawFunctionLoader.link(SEGMENT$glScissor, Descriptors.DESCRIPTOR$glScissor);
        SEGMENT$glScissorArrayv = loader.apply("glScissorArrayv");
        HANDLE$glScissorArrayv = RawFunctionLoader.link(SEGMENT$glScissorArrayv, Descriptors.DESCRIPTOR$glScissorArrayv);
        SEGMENT$glScissorExclusiveArrayvNV = loader.apply("glScissorExclusiveArrayvNV");
        HANDLE$glScissorExclusiveArrayvNV = RawFunctionLoader.link(SEGMENT$glScissorExclusiveArrayvNV, Descriptors.DESCRIPTOR$glScissorExclusiveArrayvNV);
        SEGMENT$glScissorExclusiveNV = loader.apply("glScissorExclusiveNV");
        HANDLE$glScissorExclusiveNV = RawFunctionLoader.link(SEGMENT$glScissorExclusiveNV, Descriptors.DESCRIPTOR$glScissorExclusiveNV);
        SEGMENT$glScissorIndexed = loader.apply("glScissorIndexed");
        HANDLE$glScissorIndexed = RawFunctionLoader.link(SEGMENT$glScissorIndexed, Descriptors.DESCRIPTOR$glScissorIndexed);
        SEGMENT$glScissorIndexedv = loader.apply("glScissorIndexedv");
        HANDLE$glScissorIndexedv = RawFunctionLoader.link(SEGMENT$glScissorIndexedv, Descriptors.DESCRIPTOR$glScissorIndexedv);
        SEGMENT$glSecondaryColorFormatNV = loader.apply("glSecondaryColorFormatNV");
        HANDLE$glSecondaryColorFormatNV = RawFunctionLoader.link(SEGMENT$glSecondaryColorFormatNV, Descriptors.DESCRIPTOR$glSecondaryColorFormatNV);
        SEGMENT$glSelectPerfMonitorCountersAMD = loader.apply("glSelectPerfMonitorCountersAMD");
        HANDLE$glSelectPerfMonitorCountersAMD = RawFunctionLoader.link(SEGMENT$glSelectPerfMonitorCountersAMD, Descriptors.DESCRIPTOR$glSelectPerfMonitorCountersAMD);
        SEGMENT$glShaderBinary = loader.apply("glShaderBinary");
        HANDLE$glShaderBinary = RawFunctionLoader.link(SEGMENT$glShaderBinary, Descriptors.DESCRIPTOR$glShaderBinary);
        SEGMENT$glShaderSource = loader.apply("glShaderSource");
        HANDLE$glShaderSource = RawFunctionLoader.link(SEGMENT$glShaderSource, Descriptors.DESCRIPTOR$glShaderSource);
        SEGMENT$glShaderStorageBlockBinding = loader.apply("glShaderStorageBlockBinding");
        HANDLE$glShaderStorageBlockBinding = RawFunctionLoader.link(SEGMENT$glShaderStorageBlockBinding, Descriptors.DESCRIPTOR$glShaderStorageBlockBinding);
        SEGMENT$glShadingRateImageBarrierNV = loader.apply("glShadingRateImageBarrierNV");
        HANDLE$glShadingRateImageBarrierNV = RawFunctionLoader.link(SEGMENT$glShadingRateImageBarrierNV, Descriptors.DESCRIPTOR$glShadingRateImageBarrierNV);
        SEGMENT$glShadingRateImagePaletteNV = loader.apply("glShadingRateImagePaletteNV");
        HANDLE$glShadingRateImagePaletteNV = RawFunctionLoader.link(SEGMENT$glShadingRateImagePaletteNV, Descriptors.DESCRIPTOR$glShadingRateImagePaletteNV);
        SEGMENT$glShadingRateSampleOrderCustomNV = loader.apply("glShadingRateSampleOrderCustomNV");
        HANDLE$glShadingRateSampleOrderCustomNV = RawFunctionLoader.link(SEGMENT$glShadingRateSampleOrderCustomNV, Descriptors.DESCRIPTOR$glShadingRateSampleOrderCustomNV);
        SEGMENT$glShadingRateSampleOrderNV = loader.apply("glShadingRateSampleOrderNV");
        HANDLE$glShadingRateSampleOrderNV = RawFunctionLoader.link(SEGMENT$glShadingRateSampleOrderNV, Descriptors.DESCRIPTOR$glShadingRateSampleOrderNV);
        SEGMENT$glSignalVkFenceNV = loader.apply("glSignalVkFenceNV");
        HANDLE$glSignalVkFenceNV = RawFunctionLoader.link(SEGMENT$glSignalVkFenceNV, Descriptors.DESCRIPTOR$glSignalVkFenceNV);
        SEGMENT$glSignalVkSemaphoreNV = loader.apply("glSignalVkSemaphoreNV");
        HANDLE$glSignalVkSemaphoreNV = RawFunctionLoader.link(SEGMENT$glSignalVkSemaphoreNV, Descriptors.DESCRIPTOR$glSignalVkSemaphoreNV);
        SEGMENT$glSpecializeShader = loader.apply("glSpecializeShader");
        HANDLE$glSpecializeShader = RawFunctionLoader.link(SEGMENT$glSpecializeShader, Descriptors.DESCRIPTOR$glSpecializeShader);
        SEGMENT$glSpecializeShaderARB = loader.apply("glSpecializeShaderARB");
        HANDLE$glSpecializeShaderARB = RawFunctionLoader.link(SEGMENT$glSpecializeShaderARB, Descriptors.DESCRIPTOR$glSpecializeShaderARB);
        SEGMENT$glStateCaptureNV = loader.apply("glStateCaptureNV");
        HANDLE$glStateCaptureNV = RawFunctionLoader.link(SEGMENT$glStateCaptureNV, Descriptors.DESCRIPTOR$glStateCaptureNV);
        SEGMENT$glStencilFillPathInstancedNV = loader.apply("glStencilFillPathInstancedNV");
        HANDLE$glStencilFillPathInstancedNV = RawFunctionLoader.link(SEGMENT$glStencilFillPathInstancedNV, Descriptors.DESCRIPTOR$glStencilFillPathInstancedNV);
        SEGMENT$glStencilFillPathNV = loader.apply("glStencilFillPathNV");
        HANDLE$glStencilFillPathNV = RawFunctionLoader.link(SEGMENT$glStencilFillPathNV, Descriptors.DESCRIPTOR$glStencilFillPathNV);
        SEGMENT$glStencilFunc = loader.apply("glStencilFunc");
        HANDLE$glStencilFunc = RawFunctionLoader.link(SEGMENT$glStencilFunc, Descriptors.DESCRIPTOR$glStencilFunc);
        SEGMENT$glStencilFuncSeparate = loader.apply("glStencilFuncSeparate");
        HANDLE$glStencilFuncSeparate = RawFunctionLoader.link(SEGMENT$glStencilFuncSeparate, Descriptors.DESCRIPTOR$glStencilFuncSeparate);
        SEGMENT$glStencilMask = loader.apply("glStencilMask");
        HANDLE$glStencilMask = RawFunctionLoader.link(SEGMENT$glStencilMask, Descriptors.DESCRIPTOR$glStencilMask);
        SEGMENT$glStencilMaskSeparate = loader.apply("glStencilMaskSeparate");
        HANDLE$glStencilMaskSeparate = RawFunctionLoader.link(SEGMENT$glStencilMaskSeparate, Descriptors.DESCRIPTOR$glStencilMaskSeparate);
        SEGMENT$glStencilOp = loader.apply("glStencilOp");
        HANDLE$glStencilOp = RawFunctionLoader.link(SEGMENT$glStencilOp, Descriptors.DESCRIPTOR$glStencilOp);
        SEGMENT$glStencilOpSeparate = loader.apply("glStencilOpSeparate");
        HANDLE$glStencilOpSeparate = RawFunctionLoader.link(SEGMENT$glStencilOpSeparate, Descriptors.DESCRIPTOR$glStencilOpSeparate);
        SEGMENT$glStencilStrokePathInstancedNV = loader.apply("glStencilStrokePathInstancedNV");
        HANDLE$glStencilStrokePathInstancedNV = RawFunctionLoader.link(SEGMENT$glStencilStrokePathInstancedNV, Descriptors.DESCRIPTOR$glStencilStrokePathInstancedNV);
        SEGMENT$glStencilStrokePathNV = loader.apply("glStencilStrokePathNV");
        HANDLE$glStencilStrokePathNV = RawFunctionLoader.link(SEGMENT$glStencilStrokePathNV, Descriptors.DESCRIPTOR$glStencilStrokePathNV);
        SEGMENT$glStencilThenCoverFillPathInstancedNV = loader.apply("glStencilThenCoverFillPathInstancedNV");
        HANDLE$glStencilThenCoverFillPathInstancedNV = RawFunctionLoader.link(SEGMENT$glStencilThenCoverFillPathInstancedNV, Descriptors.DESCRIPTOR$glStencilThenCoverFillPathInstancedNV);
        SEGMENT$glStencilThenCoverFillPathNV = loader.apply("glStencilThenCoverFillPathNV");
        HANDLE$glStencilThenCoverFillPathNV = RawFunctionLoader.link(SEGMENT$glStencilThenCoverFillPathNV, Descriptors.DESCRIPTOR$glStencilThenCoverFillPathNV);
        SEGMENT$glStencilThenCoverStrokePathInstancedNV = loader.apply("glStencilThenCoverStrokePathInstancedNV");
        HANDLE$glStencilThenCoverStrokePathInstancedNV = RawFunctionLoader.link(SEGMENT$glStencilThenCoverStrokePathInstancedNV, Descriptors.DESCRIPTOR$glStencilThenCoverStrokePathInstancedNV);
        SEGMENT$glStencilThenCoverStrokePathNV = loader.apply("glStencilThenCoverStrokePathNV");
        HANDLE$glStencilThenCoverStrokePathNV = RawFunctionLoader.link(SEGMENT$glStencilThenCoverStrokePathNV, Descriptors.DESCRIPTOR$glStencilThenCoverStrokePathNV);
        SEGMENT$glSubpixelPrecisionBiasNV = loader.apply("glSubpixelPrecisionBiasNV");
        HANDLE$glSubpixelPrecisionBiasNV = RawFunctionLoader.link(SEGMENT$glSubpixelPrecisionBiasNV, Descriptors.DESCRIPTOR$glSubpixelPrecisionBiasNV);
        SEGMENT$glTexAttachMemoryNV = loader.apply("glTexAttachMemoryNV");
        HANDLE$glTexAttachMemoryNV = RawFunctionLoader.link(SEGMENT$glTexAttachMemoryNV, Descriptors.DESCRIPTOR$glTexAttachMemoryNV);
        SEGMENT$glTexBuffer = loader.apply("glTexBuffer");
        HANDLE$glTexBuffer = RawFunctionLoader.link(SEGMENT$glTexBuffer, Descriptors.DESCRIPTOR$glTexBuffer);
        SEGMENT$glTexBufferARB = loader.apply("glTexBufferARB");
        HANDLE$glTexBufferARB = RawFunctionLoader.link(SEGMENT$glTexBufferARB, Descriptors.DESCRIPTOR$glTexBufferARB);
        SEGMENT$glTexBufferRange = loader.apply("glTexBufferRange");
        HANDLE$glTexBufferRange = RawFunctionLoader.link(SEGMENT$glTexBufferRange, Descriptors.DESCRIPTOR$glTexBufferRange);
        SEGMENT$glTexCoordFormatNV = loader.apply("glTexCoordFormatNV");
        HANDLE$glTexCoordFormatNV = RawFunctionLoader.link(SEGMENT$glTexCoordFormatNV, Descriptors.DESCRIPTOR$glTexCoordFormatNV);
        SEGMENT$glTexImage1D = loader.apply("glTexImage1D");
        HANDLE$glTexImage1D = RawFunctionLoader.link(SEGMENT$glTexImage1D, Descriptors.DESCRIPTOR$glTexImage1D);
        SEGMENT$glTexImage2D = loader.apply("glTexImage2D");
        HANDLE$glTexImage2D = RawFunctionLoader.link(SEGMENT$glTexImage2D, Descriptors.DESCRIPTOR$glTexImage2D);
        SEGMENT$glTexImage2DMultisample = loader.apply("glTexImage2DMultisample");
        HANDLE$glTexImage2DMultisample = RawFunctionLoader.link(SEGMENT$glTexImage2DMultisample, Descriptors.DESCRIPTOR$glTexImage2DMultisample);
        SEGMENT$glTexImage3D = loader.apply("glTexImage3D");
        HANDLE$glTexImage3D = RawFunctionLoader.link(SEGMENT$glTexImage3D, Descriptors.DESCRIPTOR$glTexImage3D);
        SEGMENT$glTexImage3DMultisample = loader.apply("glTexImage3DMultisample");
        HANDLE$glTexImage3DMultisample = RawFunctionLoader.link(SEGMENT$glTexImage3DMultisample, Descriptors.DESCRIPTOR$glTexImage3DMultisample);
        SEGMENT$glTexPageCommitmentARB = loader.apply("glTexPageCommitmentARB");
        HANDLE$glTexPageCommitmentARB = RawFunctionLoader.link(SEGMENT$glTexPageCommitmentARB, Descriptors.DESCRIPTOR$glTexPageCommitmentARB);
        SEGMENT$glTexPageCommitmentMemNV = loader.apply("glTexPageCommitmentMemNV");
        HANDLE$glTexPageCommitmentMemNV = RawFunctionLoader.link(SEGMENT$glTexPageCommitmentMemNV, Descriptors.DESCRIPTOR$glTexPageCommitmentMemNV);
        SEGMENT$glTexParameterIiv = loader.apply("glTexParameterIiv");
        HANDLE$glTexParameterIiv = RawFunctionLoader.link(SEGMENT$glTexParameterIiv, Descriptors.DESCRIPTOR$glTexParameterIiv);
        SEGMENT$glTexParameterIuiv = loader.apply("glTexParameterIuiv");
        HANDLE$glTexParameterIuiv = RawFunctionLoader.link(SEGMENT$glTexParameterIuiv, Descriptors.DESCRIPTOR$glTexParameterIuiv);
        SEGMENT$glTexParameterf = loader.apply("glTexParameterf");
        HANDLE$glTexParameterf = RawFunctionLoader.link(SEGMENT$glTexParameterf, Descriptors.DESCRIPTOR$glTexParameterf);
        SEGMENT$glTexParameterfv = loader.apply("glTexParameterfv");
        HANDLE$glTexParameterfv = RawFunctionLoader.link(SEGMENT$glTexParameterfv, Descriptors.DESCRIPTOR$glTexParameterfv);
        SEGMENT$glTexParameteri = loader.apply("glTexParameteri");
        HANDLE$glTexParameteri = RawFunctionLoader.link(SEGMENT$glTexParameteri, Descriptors.DESCRIPTOR$glTexParameteri);
        SEGMENT$glTexParameteriv = loader.apply("glTexParameteriv");
        HANDLE$glTexParameteriv = RawFunctionLoader.link(SEGMENT$glTexParameteriv, Descriptors.DESCRIPTOR$glTexParameteriv);
        SEGMENT$glTexStorage1D = loader.apply("glTexStorage1D");
        HANDLE$glTexStorage1D = RawFunctionLoader.link(SEGMENT$glTexStorage1D, Descriptors.DESCRIPTOR$glTexStorage1D);
        SEGMENT$glTexStorage1DEXT = loader.apply("glTexStorage1DEXT");
        HANDLE$glTexStorage1DEXT = RawFunctionLoader.link(SEGMENT$glTexStorage1DEXT, Descriptors.DESCRIPTOR$glTexStorage1DEXT);
        SEGMENT$glTexStorage2D = loader.apply("glTexStorage2D");
        HANDLE$glTexStorage2D = RawFunctionLoader.link(SEGMENT$glTexStorage2D, Descriptors.DESCRIPTOR$glTexStorage2D);
        SEGMENT$glTexStorage2DEXT = loader.apply("glTexStorage2DEXT");
        HANDLE$glTexStorage2DEXT = RawFunctionLoader.link(SEGMENT$glTexStorage2DEXT, Descriptors.DESCRIPTOR$glTexStorage2DEXT);
        SEGMENT$glTexStorage2DMultisample = loader.apply("glTexStorage2DMultisample");
        HANDLE$glTexStorage2DMultisample = RawFunctionLoader.link(SEGMENT$glTexStorage2DMultisample, Descriptors.DESCRIPTOR$glTexStorage2DMultisample);
        SEGMENT$glTexStorage3D = loader.apply("glTexStorage3D");
        HANDLE$glTexStorage3D = RawFunctionLoader.link(SEGMENT$glTexStorage3D, Descriptors.DESCRIPTOR$glTexStorage3D);
        SEGMENT$glTexStorage3DEXT = loader.apply("glTexStorage3DEXT");
        HANDLE$glTexStorage3DEXT = RawFunctionLoader.link(SEGMENT$glTexStorage3DEXT, Descriptors.DESCRIPTOR$glTexStorage3DEXT);
        SEGMENT$glTexStorage3DMultisample = loader.apply("glTexStorage3DMultisample");
        HANDLE$glTexStorage3DMultisample = RawFunctionLoader.link(SEGMENT$glTexStorage3DMultisample, Descriptors.DESCRIPTOR$glTexStorage3DMultisample);
        SEGMENT$glTexSubImage1D = loader.apply("glTexSubImage1D");
        HANDLE$glTexSubImage1D = RawFunctionLoader.link(SEGMENT$glTexSubImage1D, Descriptors.DESCRIPTOR$glTexSubImage1D);
        SEGMENT$glTexSubImage2D = loader.apply("glTexSubImage2D");
        HANDLE$glTexSubImage2D = RawFunctionLoader.link(SEGMENT$glTexSubImage2D, Descriptors.DESCRIPTOR$glTexSubImage2D);
        SEGMENT$glTexSubImage3D = loader.apply("glTexSubImage3D");
        HANDLE$glTexSubImage3D = RawFunctionLoader.link(SEGMENT$glTexSubImage3D, Descriptors.DESCRIPTOR$glTexSubImage3D);
        SEGMENT$glTextureAttachMemoryNV = loader.apply("glTextureAttachMemoryNV");
        HANDLE$glTextureAttachMemoryNV = RawFunctionLoader.link(SEGMENT$glTextureAttachMemoryNV, Descriptors.DESCRIPTOR$glTextureAttachMemoryNV);
        SEGMENT$glTextureBarrier = loader.apply("glTextureBarrier");
        HANDLE$glTextureBarrier = RawFunctionLoader.link(SEGMENT$glTextureBarrier, Descriptors.DESCRIPTOR$glTextureBarrier);
        SEGMENT$glTextureBarrierNV = loader.apply("glTextureBarrierNV");
        HANDLE$glTextureBarrierNV = RawFunctionLoader.link(SEGMENT$glTextureBarrierNV, Descriptors.DESCRIPTOR$glTextureBarrierNV);
        SEGMENT$glTextureBuffer = loader.apply("glTextureBuffer");
        HANDLE$glTextureBuffer = RawFunctionLoader.link(SEGMENT$glTextureBuffer, Descriptors.DESCRIPTOR$glTextureBuffer);
        SEGMENT$glTextureBufferEXT = loader.apply("glTextureBufferEXT");
        HANDLE$glTextureBufferEXT = RawFunctionLoader.link(SEGMENT$glTextureBufferEXT, Descriptors.DESCRIPTOR$glTextureBufferEXT);
        SEGMENT$glTextureBufferRange = loader.apply("glTextureBufferRange");
        HANDLE$glTextureBufferRange = RawFunctionLoader.link(SEGMENT$glTextureBufferRange, Descriptors.DESCRIPTOR$glTextureBufferRange);
        SEGMENT$glTextureBufferRangeEXT = loader.apply("glTextureBufferRangeEXT");
        HANDLE$glTextureBufferRangeEXT = RawFunctionLoader.link(SEGMENT$glTextureBufferRangeEXT, Descriptors.DESCRIPTOR$glTextureBufferRangeEXT);
        SEGMENT$glTextureImage1DEXT = loader.apply("glTextureImage1DEXT");
        HANDLE$glTextureImage1DEXT = RawFunctionLoader.link(SEGMENT$glTextureImage1DEXT, Descriptors.DESCRIPTOR$glTextureImage1DEXT);
        SEGMENT$glTextureImage2DEXT = loader.apply("glTextureImage2DEXT");
        HANDLE$glTextureImage2DEXT = RawFunctionLoader.link(SEGMENT$glTextureImage2DEXT, Descriptors.DESCRIPTOR$glTextureImage2DEXT);
        SEGMENT$glTextureImage3DEXT = loader.apply("glTextureImage3DEXT");
        HANDLE$glTextureImage3DEXT = RawFunctionLoader.link(SEGMENT$glTextureImage3DEXT, Descriptors.DESCRIPTOR$glTextureImage3DEXT);
        SEGMENT$glTexturePageCommitmentEXT = loader.apply("glTexturePageCommitmentEXT");
        HANDLE$glTexturePageCommitmentEXT = RawFunctionLoader.link(SEGMENT$glTexturePageCommitmentEXT, Descriptors.DESCRIPTOR$glTexturePageCommitmentEXT);
        SEGMENT$glTexturePageCommitmentMemNV = loader.apply("glTexturePageCommitmentMemNV");
        HANDLE$glTexturePageCommitmentMemNV = RawFunctionLoader.link(SEGMENT$glTexturePageCommitmentMemNV, Descriptors.DESCRIPTOR$glTexturePageCommitmentMemNV);
        SEGMENT$glTextureParameterIiv = loader.apply("glTextureParameterIiv");
        HANDLE$glTextureParameterIiv = RawFunctionLoader.link(SEGMENT$glTextureParameterIiv, Descriptors.DESCRIPTOR$glTextureParameterIiv);
        SEGMENT$glTextureParameterIivEXT = loader.apply("glTextureParameterIivEXT");
        HANDLE$glTextureParameterIivEXT = RawFunctionLoader.link(SEGMENT$glTextureParameterIivEXT, Descriptors.DESCRIPTOR$glTextureParameterIivEXT);
        SEGMENT$glTextureParameterIuiv = loader.apply("glTextureParameterIuiv");
        HANDLE$glTextureParameterIuiv = RawFunctionLoader.link(SEGMENT$glTextureParameterIuiv, Descriptors.DESCRIPTOR$glTextureParameterIuiv);
        SEGMENT$glTextureParameterIuivEXT = loader.apply("glTextureParameterIuivEXT");
        HANDLE$glTextureParameterIuivEXT = RawFunctionLoader.link(SEGMENT$glTextureParameterIuivEXT, Descriptors.DESCRIPTOR$glTextureParameterIuivEXT);
        SEGMENT$glTextureParameterf = loader.apply("glTextureParameterf");
        HANDLE$glTextureParameterf = RawFunctionLoader.link(SEGMENT$glTextureParameterf, Descriptors.DESCRIPTOR$glTextureParameterf);
        SEGMENT$glTextureParameterfEXT = loader.apply("glTextureParameterfEXT");
        HANDLE$glTextureParameterfEXT = RawFunctionLoader.link(SEGMENT$glTextureParameterfEXT, Descriptors.DESCRIPTOR$glTextureParameterfEXT);
        SEGMENT$glTextureParameterfv = loader.apply("glTextureParameterfv");
        HANDLE$glTextureParameterfv = RawFunctionLoader.link(SEGMENT$glTextureParameterfv, Descriptors.DESCRIPTOR$glTextureParameterfv);
        SEGMENT$glTextureParameterfvEXT = loader.apply("glTextureParameterfvEXT");
        HANDLE$glTextureParameterfvEXT = RawFunctionLoader.link(SEGMENT$glTextureParameterfvEXT, Descriptors.DESCRIPTOR$glTextureParameterfvEXT);
        SEGMENT$glTextureParameteri = loader.apply("glTextureParameteri");
        HANDLE$glTextureParameteri = RawFunctionLoader.link(SEGMENT$glTextureParameteri, Descriptors.DESCRIPTOR$glTextureParameteri);
        SEGMENT$glTextureParameteriEXT = loader.apply("glTextureParameteriEXT");
        HANDLE$glTextureParameteriEXT = RawFunctionLoader.link(SEGMENT$glTextureParameteriEXT, Descriptors.DESCRIPTOR$glTextureParameteriEXT);
        SEGMENT$glTextureParameteriv = loader.apply("glTextureParameteriv");
        HANDLE$glTextureParameteriv = RawFunctionLoader.link(SEGMENT$glTextureParameteriv, Descriptors.DESCRIPTOR$glTextureParameteriv);
        SEGMENT$glTextureParameterivEXT = loader.apply("glTextureParameterivEXT");
        HANDLE$glTextureParameterivEXT = RawFunctionLoader.link(SEGMENT$glTextureParameterivEXT, Descriptors.DESCRIPTOR$glTextureParameterivEXT);
        SEGMENT$glTextureRenderbufferEXT = loader.apply("glTextureRenderbufferEXT");
        HANDLE$glTextureRenderbufferEXT = RawFunctionLoader.link(SEGMENT$glTextureRenderbufferEXT, Descriptors.DESCRIPTOR$glTextureRenderbufferEXT);
        SEGMENT$glTextureStorage1D = loader.apply("glTextureStorage1D");
        HANDLE$glTextureStorage1D = RawFunctionLoader.link(SEGMENT$glTextureStorage1D, Descriptors.DESCRIPTOR$glTextureStorage1D);
        SEGMENT$glTextureStorage1DEXT = loader.apply("glTextureStorage1DEXT");
        HANDLE$glTextureStorage1DEXT = RawFunctionLoader.link(SEGMENT$glTextureStorage1DEXT, Descriptors.DESCRIPTOR$glTextureStorage1DEXT);
        SEGMENT$glTextureStorage2D = loader.apply("glTextureStorage2D");
        HANDLE$glTextureStorage2D = RawFunctionLoader.link(SEGMENT$glTextureStorage2D, Descriptors.DESCRIPTOR$glTextureStorage2D);
        SEGMENT$glTextureStorage2DEXT = loader.apply("glTextureStorage2DEXT");
        HANDLE$glTextureStorage2DEXT = RawFunctionLoader.link(SEGMENT$glTextureStorage2DEXT, Descriptors.DESCRIPTOR$glTextureStorage2DEXT);
        SEGMENT$glTextureStorage2DMultisample = loader.apply("glTextureStorage2DMultisample");
        HANDLE$glTextureStorage2DMultisample = RawFunctionLoader.link(SEGMENT$glTextureStorage2DMultisample, Descriptors.DESCRIPTOR$glTextureStorage2DMultisample);
        SEGMENT$glTextureStorage2DMultisampleEXT = loader.apply("glTextureStorage2DMultisampleEXT");
        HANDLE$glTextureStorage2DMultisampleEXT = RawFunctionLoader.link(SEGMENT$glTextureStorage2DMultisampleEXT, Descriptors.DESCRIPTOR$glTextureStorage2DMultisampleEXT);
        SEGMENT$glTextureStorage3D = loader.apply("glTextureStorage3D");
        HANDLE$glTextureStorage3D = RawFunctionLoader.link(SEGMENT$glTextureStorage3D, Descriptors.DESCRIPTOR$glTextureStorage3D);
        SEGMENT$glTextureStorage3DEXT = loader.apply("glTextureStorage3DEXT");
        HANDLE$glTextureStorage3DEXT = RawFunctionLoader.link(SEGMENT$glTextureStorage3DEXT, Descriptors.DESCRIPTOR$glTextureStorage3DEXT);
        SEGMENT$glTextureStorage3DMultisample = loader.apply("glTextureStorage3DMultisample");
        HANDLE$glTextureStorage3DMultisample = RawFunctionLoader.link(SEGMENT$glTextureStorage3DMultisample, Descriptors.DESCRIPTOR$glTextureStorage3DMultisample);
        SEGMENT$glTextureStorage3DMultisampleEXT = loader.apply("glTextureStorage3DMultisampleEXT");
        HANDLE$glTextureStorage3DMultisampleEXT = RawFunctionLoader.link(SEGMENT$glTextureStorage3DMultisampleEXT, Descriptors.DESCRIPTOR$glTextureStorage3DMultisampleEXT);
        SEGMENT$glTextureSubImage1D = loader.apply("glTextureSubImage1D");
        HANDLE$glTextureSubImage1D = RawFunctionLoader.link(SEGMENT$glTextureSubImage1D, Descriptors.DESCRIPTOR$glTextureSubImage1D);
        SEGMENT$glTextureSubImage1DEXT = loader.apply("glTextureSubImage1DEXT");
        HANDLE$glTextureSubImage1DEXT = RawFunctionLoader.link(SEGMENT$glTextureSubImage1DEXT, Descriptors.DESCRIPTOR$glTextureSubImage1DEXT);
        SEGMENT$glTextureSubImage2D = loader.apply("glTextureSubImage2D");
        HANDLE$glTextureSubImage2D = RawFunctionLoader.link(SEGMENT$glTextureSubImage2D, Descriptors.DESCRIPTOR$glTextureSubImage2D);
        SEGMENT$glTextureSubImage2DEXT = loader.apply("glTextureSubImage2DEXT");
        HANDLE$glTextureSubImage2DEXT = RawFunctionLoader.link(SEGMENT$glTextureSubImage2DEXT, Descriptors.DESCRIPTOR$glTextureSubImage2DEXT);
        SEGMENT$glTextureSubImage3D = loader.apply("glTextureSubImage3D");
        HANDLE$glTextureSubImage3D = RawFunctionLoader.link(SEGMENT$glTextureSubImage3D, Descriptors.DESCRIPTOR$glTextureSubImage3D);
        SEGMENT$glTextureSubImage3DEXT = loader.apply("glTextureSubImage3DEXT");
        HANDLE$glTextureSubImage3DEXT = RawFunctionLoader.link(SEGMENT$glTextureSubImage3DEXT, Descriptors.DESCRIPTOR$glTextureSubImage3DEXT);
        SEGMENT$glTextureView = loader.apply("glTextureView");
        HANDLE$glTextureView = RawFunctionLoader.link(SEGMENT$glTextureView, Descriptors.DESCRIPTOR$glTextureView);
        SEGMENT$glTransformFeedbackBufferBase = loader.apply("glTransformFeedbackBufferBase");
        HANDLE$glTransformFeedbackBufferBase = RawFunctionLoader.link(SEGMENT$glTransformFeedbackBufferBase, Descriptors.DESCRIPTOR$glTransformFeedbackBufferBase);
        SEGMENT$glTransformFeedbackBufferRange = loader.apply("glTransformFeedbackBufferRange");
        HANDLE$glTransformFeedbackBufferRange = RawFunctionLoader.link(SEGMENT$glTransformFeedbackBufferRange, Descriptors.DESCRIPTOR$glTransformFeedbackBufferRange);
        SEGMENT$glTransformFeedbackVaryings = loader.apply("glTransformFeedbackVaryings");
        HANDLE$glTransformFeedbackVaryings = RawFunctionLoader.link(SEGMENT$glTransformFeedbackVaryings, Descriptors.DESCRIPTOR$glTransformFeedbackVaryings);
        SEGMENT$glTransformPathNV = loader.apply("glTransformPathNV");
        HANDLE$glTransformPathNV = RawFunctionLoader.link(SEGMENT$glTransformPathNV, Descriptors.DESCRIPTOR$glTransformPathNV);
        SEGMENT$glUniform1d = loader.apply("glUniform1d");
        HANDLE$glUniform1d = RawFunctionLoader.link(SEGMENT$glUniform1d, Descriptors.DESCRIPTOR$glUniform1d);
        SEGMENT$glUniform1dv = loader.apply("glUniform1dv");
        HANDLE$glUniform1dv = RawFunctionLoader.link(SEGMENT$glUniform1dv, Descriptors.DESCRIPTOR$glUniform1dv);
        SEGMENT$glUniform1f = loader.apply("glUniform1f");
        HANDLE$glUniform1f = RawFunctionLoader.link(SEGMENT$glUniform1f, Descriptors.DESCRIPTOR$glUniform1f);
        SEGMENT$glUniform1fv = loader.apply("glUniform1fv");
        HANDLE$glUniform1fv = RawFunctionLoader.link(SEGMENT$glUniform1fv, Descriptors.DESCRIPTOR$glUniform1fv);
        SEGMENT$glUniform1i = loader.apply("glUniform1i");
        HANDLE$glUniform1i = RawFunctionLoader.link(SEGMENT$glUniform1i, Descriptors.DESCRIPTOR$glUniform1i);
        SEGMENT$glUniform1i64ARB = loader.apply("glUniform1i64ARB");
        HANDLE$glUniform1i64ARB = RawFunctionLoader.link(SEGMENT$glUniform1i64ARB, Descriptors.DESCRIPTOR$glUniform1i64ARB);
        SEGMENT$glUniform1i64vARB = loader.apply("glUniform1i64vARB");
        HANDLE$glUniform1i64vARB = RawFunctionLoader.link(SEGMENT$glUniform1i64vARB, Descriptors.DESCRIPTOR$glUniform1i64vARB);
        SEGMENT$glUniform1iv = loader.apply("glUniform1iv");
        HANDLE$glUniform1iv = RawFunctionLoader.link(SEGMENT$glUniform1iv, Descriptors.DESCRIPTOR$glUniform1iv);
        SEGMENT$glUniform1ui = loader.apply("glUniform1ui");
        HANDLE$glUniform1ui = RawFunctionLoader.link(SEGMENT$glUniform1ui, Descriptors.DESCRIPTOR$glUniform1ui);
        SEGMENT$glUniform1ui64ARB = loader.apply("glUniform1ui64ARB");
        HANDLE$glUniform1ui64ARB = RawFunctionLoader.link(SEGMENT$glUniform1ui64ARB, Descriptors.DESCRIPTOR$glUniform1ui64ARB);
        SEGMENT$glUniform1ui64vARB = loader.apply("glUniform1ui64vARB");
        HANDLE$glUniform1ui64vARB = RawFunctionLoader.link(SEGMENT$glUniform1ui64vARB, Descriptors.DESCRIPTOR$glUniform1ui64vARB);
        SEGMENT$glUniform1uiv = loader.apply("glUniform1uiv");
        HANDLE$glUniform1uiv = RawFunctionLoader.link(SEGMENT$glUniform1uiv, Descriptors.DESCRIPTOR$glUniform1uiv);
        SEGMENT$glUniform2d = loader.apply("glUniform2d");
        HANDLE$glUniform2d = RawFunctionLoader.link(SEGMENT$glUniform2d, Descriptors.DESCRIPTOR$glUniform2d);
        SEGMENT$glUniform2dv = loader.apply("glUniform2dv");
        HANDLE$glUniform2dv = RawFunctionLoader.link(SEGMENT$glUniform2dv, Descriptors.DESCRIPTOR$glUniform2dv);
        SEGMENT$glUniform2f = loader.apply("glUniform2f");
        HANDLE$glUniform2f = RawFunctionLoader.link(SEGMENT$glUniform2f, Descriptors.DESCRIPTOR$glUniform2f);
        SEGMENT$glUniform2fv = loader.apply("glUniform2fv");
        HANDLE$glUniform2fv = RawFunctionLoader.link(SEGMENT$glUniform2fv, Descriptors.DESCRIPTOR$glUniform2fv);
        SEGMENT$glUniform2i = loader.apply("glUniform2i");
        HANDLE$glUniform2i = RawFunctionLoader.link(SEGMENT$glUniform2i, Descriptors.DESCRIPTOR$glUniform2i);
        SEGMENT$glUniform2i64ARB = loader.apply("glUniform2i64ARB");
        HANDLE$glUniform2i64ARB = RawFunctionLoader.link(SEGMENT$glUniform2i64ARB, Descriptors.DESCRIPTOR$glUniform2i64ARB);
        SEGMENT$glUniform2i64vARB = loader.apply("glUniform2i64vARB");
        HANDLE$glUniform2i64vARB = RawFunctionLoader.link(SEGMENT$glUniform2i64vARB, Descriptors.DESCRIPTOR$glUniform2i64vARB);
        SEGMENT$glUniform2iv = loader.apply("glUniform2iv");
        HANDLE$glUniform2iv = RawFunctionLoader.link(SEGMENT$glUniform2iv, Descriptors.DESCRIPTOR$glUniform2iv);
        SEGMENT$glUniform2ui = loader.apply("glUniform2ui");
        HANDLE$glUniform2ui = RawFunctionLoader.link(SEGMENT$glUniform2ui, Descriptors.DESCRIPTOR$glUniform2ui);
        SEGMENT$glUniform2ui64ARB = loader.apply("glUniform2ui64ARB");
        HANDLE$glUniform2ui64ARB = RawFunctionLoader.link(SEGMENT$glUniform2ui64ARB, Descriptors.DESCRIPTOR$glUniform2ui64ARB);
        SEGMENT$glUniform2ui64vARB = loader.apply("glUniform2ui64vARB");
        HANDLE$glUniform2ui64vARB = RawFunctionLoader.link(SEGMENT$glUniform2ui64vARB, Descriptors.DESCRIPTOR$glUniform2ui64vARB);
        SEGMENT$glUniform2uiv = loader.apply("glUniform2uiv");
        HANDLE$glUniform2uiv = RawFunctionLoader.link(SEGMENT$glUniform2uiv, Descriptors.DESCRIPTOR$glUniform2uiv);
        SEGMENT$glUniform3d = loader.apply("glUniform3d");
        HANDLE$glUniform3d = RawFunctionLoader.link(SEGMENT$glUniform3d, Descriptors.DESCRIPTOR$glUniform3d);
        SEGMENT$glUniform3dv = loader.apply("glUniform3dv");
        HANDLE$glUniform3dv = RawFunctionLoader.link(SEGMENT$glUniform3dv, Descriptors.DESCRIPTOR$glUniform3dv);
        SEGMENT$glUniform3f = loader.apply("glUniform3f");
        HANDLE$glUniform3f = RawFunctionLoader.link(SEGMENT$glUniform3f, Descriptors.DESCRIPTOR$glUniform3f);
        SEGMENT$glUniform3fv = loader.apply("glUniform3fv");
        HANDLE$glUniform3fv = RawFunctionLoader.link(SEGMENT$glUniform3fv, Descriptors.DESCRIPTOR$glUniform3fv);
        SEGMENT$glUniform3i = loader.apply("glUniform3i");
        HANDLE$glUniform3i = RawFunctionLoader.link(SEGMENT$glUniform3i, Descriptors.DESCRIPTOR$glUniform3i);
        SEGMENT$glUniform3i64ARB = loader.apply("glUniform3i64ARB");
        HANDLE$glUniform3i64ARB = RawFunctionLoader.link(SEGMENT$glUniform3i64ARB, Descriptors.DESCRIPTOR$glUniform3i64ARB);
        SEGMENT$glUniform3i64vARB = loader.apply("glUniform3i64vARB");
        HANDLE$glUniform3i64vARB = RawFunctionLoader.link(SEGMENT$glUniform3i64vARB, Descriptors.DESCRIPTOR$glUniform3i64vARB);
        SEGMENT$glUniform3iv = loader.apply("glUniform3iv");
        HANDLE$glUniform3iv = RawFunctionLoader.link(SEGMENT$glUniform3iv, Descriptors.DESCRIPTOR$glUniform3iv);
        SEGMENT$glUniform3ui = loader.apply("glUniform3ui");
        HANDLE$glUniform3ui = RawFunctionLoader.link(SEGMENT$glUniform3ui, Descriptors.DESCRIPTOR$glUniform3ui);
        SEGMENT$glUniform3ui64ARB = loader.apply("glUniform3ui64ARB");
        HANDLE$glUniform3ui64ARB = RawFunctionLoader.link(SEGMENT$glUniform3ui64ARB, Descriptors.DESCRIPTOR$glUniform3ui64ARB);
        SEGMENT$glUniform3ui64vARB = loader.apply("glUniform3ui64vARB");
        HANDLE$glUniform3ui64vARB = RawFunctionLoader.link(SEGMENT$glUniform3ui64vARB, Descriptors.DESCRIPTOR$glUniform3ui64vARB);
        SEGMENT$glUniform3uiv = loader.apply("glUniform3uiv");
        HANDLE$glUniform3uiv = RawFunctionLoader.link(SEGMENT$glUniform3uiv, Descriptors.DESCRIPTOR$glUniform3uiv);
        SEGMENT$glUniform4d = loader.apply("glUniform4d");
        HANDLE$glUniform4d = RawFunctionLoader.link(SEGMENT$glUniform4d, Descriptors.DESCRIPTOR$glUniform4d);
        SEGMENT$glUniform4dv = loader.apply("glUniform4dv");
        HANDLE$glUniform4dv = RawFunctionLoader.link(SEGMENT$glUniform4dv, Descriptors.DESCRIPTOR$glUniform4dv);
        SEGMENT$glUniform4f = loader.apply("glUniform4f");
        HANDLE$glUniform4f = RawFunctionLoader.link(SEGMENT$glUniform4f, Descriptors.DESCRIPTOR$glUniform4f);
        SEGMENT$glUniform4fv = loader.apply("glUniform4fv");
        HANDLE$glUniform4fv = RawFunctionLoader.link(SEGMENT$glUniform4fv, Descriptors.DESCRIPTOR$glUniform4fv);
        SEGMENT$glUniform4i = loader.apply("glUniform4i");
        HANDLE$glUniform4i = RawFunctionLoader.link(SEGMENT$glUniform4i, Descriptors.DESCRIPTOR$glUniform4i);
        SEGMENT$glUniform4i64ARB = loader.apply("glUniform4i64ARB");
        HANDLE$glUniform4i64ARB = RawFunctionLoader.link(SEGMENT$glUniform4i64ARB, Descriptors.DESCRIPTOR$glUniform4i64ARB);
        SEGMENT$glUniform4i64vARB = loader.apply("glUniform4i64vARB");
        HANDLE$glUniform4i64vARB = RawFunctionLoader.link(SEGMENT$glUniform4i64vARB, Descriptors.DESCRIPTOR$glUniform4i64vARB);
        SEGMENT$glUniform4iv = loader.apply("glUniform4iv");
        HANDLE$glUniform4iv = RawFunctionLoader.link(SEGMENT$glUniform4iv, Descriptors.DESCRIPTOR$glUniform4iv);
        SEGMENT$glUniform4ui = loader.apply("glUniform4ui");
        HANDLE$glUniform4ui = RawFunctionLoader.link(SEGMENT$glUniform4ui, Descriptors.DESCRIPTOR$glUniform4ui);
        SEGMENT$glUniform4ui64ARB = loader.apply("glUniform4ui64ARB");
        HANDLE$glUniform4ui64ARB = RawFunctionLoader.link(SEGMENT$glUniform4ui64ARB, Descriptors.DESCRIPTOR$glUniform4ui64ARB);
        SEGMENT$glUniform4ui64vARB = loader.apply("glUniform4ui64vARB");
        HANDLE$glUniform4ui64vARB = RawFunctionLoader.link(SEGMENT$glUniform4ui64vARB, Descriptors.DESCRIPTOR$glUniform4ui64vARB);
        SEGMENT$glUniform4uiv = loader.apply("glUniform4uiv");
        HANDLE$glUniform4uiv = RawFunctionLoader.link(SEGMENT$glUniform4uiv, Descriptors.DESCRIPTOR$glUniform4uiv);
        SEGMENT$glUniformBlockBinding = loader.apply("glUniformBlockBinding");
        HANDLE$glUniformBlockBinding = RawFunctionLoader.link(SEGMENT$glUniformBlockBinding, Descriptors.DESCRIPTOR$glUniformBlockBinding);
        SEGMENT$glUniformHandleui64ARB = loader.apply("glUniformHandleui64ARB");
        HANDLE$glUniformHandleui64ARB = RawFunctionLoader.link(SEGMENT$glUniformHandleui64ARB, Descriptors.DESCRIPTOR$glUniformHandleui64ARB);
        SEGMENT$glUniformHandleui64NV = loader.apply("glUniformHandleui64NV");
        HANDLE$glUniformHandleui64NV = RawFunctionLoader.link(SEGMENT$glUniformHandleui64NV, Descriptors.DESCRIPTOR$glUniformHandleui64NV);
        SEGMENT$glUniformHandleui64vARB = loader.apply("glUniformHandleui64vARB");
        HANDLE$glUniformHandleui64vARB = RawFunctionLoader.link(SEGMENT$glUniformHandleui64vARB, Descriptors.DESCRIPTOR$glUniformHandleui64vARB);
        SEGMENT$glUniformHandleui64vNV = loader.apply("glUniformHandleui64vNV");
        HANDLE$glUniformHandleui64vNV = RawFunctionLoader.link(SEGMENT$glUniformHandleui64vNV, Descriptors.DESCRIPTOR$glUniformHandleui64vNV);
        SEGMENT$glUniformMatrix2dv = loader.apply("glUniformMatrix2dv");
        HANDLE$glUniformMatrix2dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix2dv, Descriptors.DESCRIPTOR$glUniformMatrix2dv);
        SEGMENT$glUniformMatrix2fv = loader.apply("glUniformMatrix2fv");
        HANDLE$glUniformMatrix2fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix2fv, Descriptors.DESCRIPTOR$glUniformMatrix2fv);
        SEGMENT$glUniformMatrix2x3dv = loader.apply("glUniformMatrix2x3dv");
        HANDLE$glUniformMatrix2x3dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix2x3dv, Descriptors.DESCRIPTOR$glUniformMatrix2x3dv);
        SEGMENT$glUniformMatrix2x3fv = loader.apply("glUniformMatrix2x3fv");
        HANDLE$glUniformMatrix2x3fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix2x3fv, Descriptors.DESCRIPTOR$glUniformMatrix2x3fv);
        SEGMENT$glUniformMatrix2x4dv = loader.apply("glUniformMatrix2x4dv");
        HANDLE$glUniformMatrix2x4dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix2x4dv, Descriptors.DESCRIPTOR$glUniformMatrix2x4dv);
        SEGMENT$glUniformMatrix2x4fv = loader.apply("glUniformMatrix2x4fv");
        HANDLE$glUniformMatrix2x4fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix2x4fv, Descriptors.DESCRIPTOR$glUniformMatrix2x4fv);
        SEGMENT$glUniformMatrix3dv = loader.apply("glUniformMatrix3dv");
        HANDLE$glUniformMatrix3dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix3dv, Descriptors.DESCRIPTOR$glUniformMatrix3dv);
        SEGMENT$glUniformMatrix3fv = loader.apply("glUniformMatrix3fv");
        HANDLE$glUniformMatrix3fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix3fv, Descriptors.DESCRIPTOR$glUniformMatrix3fv);
        SEGMENT$glUniformMatrix3x2dv = loader.apply("glUniformMatrix3x2dv");
        HANDLE$glUniformMatrix3x2dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix3x2dv, Descriptors.DESCRIPTOR$glUniformMatrix3x2dv);
        SEGMENT$glUniformMatrix3x2fv = loader.apply("glUniformMatrix3x2fv");
        HANDLE$glUniformMatrix3x2fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix3x2fv, Descriptors.DESCRIPTOR$glUniformMatrix3x2fv);
        SEGMENT$glUniformMatrix3x4dv = loader.apply("glUniformMatrix3x4dv");
        HANDLE$glUniformMatrix3x4dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix3x4dv, Descriptors.DESCRIPTOR$glUniformMatrix3x4dv);
        SEGMENT$glUniformMatrix3x4fv = loader.apply("glUniformMatrix3x4fv");
        HANDLE$glUniformMatrix3x4fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix3x4fv, Descriptors.DESCRIPTOR$glUniformMatrix3x4fv);
        SEGMENT$glUniformMatrix4dv = loader.apply("glUniformMatrix4dv");
        HANDLE$glUniformMatrix4dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix4dv, Descriptors.DESCRIPTOR$glUniformMatrix4dv);
        SEGMENT$glUniformMatrix4fv = loader.apply("glUniformMatrix4fv");
        HANDLE$glUniformMatrix4fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix4fv, Descriptors.DESCRIPTOR$glUniformMatrix4fv);
        SEGMENT$glUniformMatrix4x2dv = loader.apply("glUniformMatrix4x2dv");
        HANDLE$glUniformMatrix4x2dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix4x2dv, Descriptors.DESCRIPTOR$glUniformMatrix4x2dv);
        SEGMENT$glUniformMatrix4x2fv = loader.apply("glUniformMatrix4x2fv");
        HANDLE$glUniformMatrix4x2fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix4x2fv, Descriptors.DESCRIPTOR$glUniformMatrix4x2fv);
        SEGMENT$glUniformMatrix4x3dv = loader.apply("glUniformMatrix4x3dv");
        HANDLE$glUniformMatrix4x3dv = RawFunctionLoader.link(SEGMENT$glUniformMatrix4x3dv, Descriptors.DESCRIPTOR$glUniformMatrix4x3dv);
        SEGMENT$glUniformMatrix4x3fv = loader.apply("glUniformMatrix4x3fv");
        HANDLE$glUniformMatrix4x3fv = RawFunctionLoader.link(SEGMENT$glUniformMatrix4x3fv, Descriptors.DESCRIPTOR$glUniformMatrix4x3fv);
        SEGMENT$glUniformSubroutinesuiv = loader.apply("glUniformSubroutinesuiv");
        HANDLE$glUniformSubroutinesuiv = RawFunctionLoader.link(SEGMENT$glUniformSubroutinesuiv, Descriptors.DESCRIPTOR$glUniformSubroutinesuiv);
        SEGMENT$glUniformui64NV = loader.apply("glUniformui64NV");
        HANDLE$glUniformui64NV = RawFunctionLoader.link(SEGMENT$glUniformui64NV, Descriptors.DESCRIPTOR$glUniformui64NV);
        SEGMENT$glUniformui64vNV = loader.apply("glUniformui64vNV");
        HANDLE$glUniformui64vNV = RawFunctionLoader.link(SEGMENT$glUniformui64vNV, Descriptors.DESCRIPTOR$glUniformui64vNV);
        SEGMENT$glUnmapBuffer = loader.apply("glUnmapBuffer");
        HANDLE$glUnmapBuffer = RawFunctionLoader.link(SEGMENT$glUnmapBuffer, Descriptors.DESCRIPTOR$glUnmapBuffer);
        SEGMENT$glUnmapNamedBuffer = loader.apply("glUnmapNamedBuffer");
        HANDLE$glUnmapNamedBuffer = RawFunctionLoader.link(SEGMENT$glUnmapNamedBuffer, Descriptors.DESCRIPTOR$glUnmapNamedBuffer);
        SEGMENT$glUnmapNamedBufferEXT = loader.apply("glUnmapNamedBufferEXT");
        HANDLE$glUnmapNamedBufferEXT = RawFunctionLoader.link(SEGMENT$glUnmapNamedBufferEXT, Descriptors.DESCRIPTOR$glUnmapNamedBufferEXT);
        SEGMENT$glUseProgram = loader.apply("glUseProgram");
        HANDLE$glUseProgram = RawFunctionLoader.link(SEGMENT$glUseProgram, Descriptors.DESCRIPTOR$glUseProgram);
        SEGMENT$glUseProgramStages = loader.apply("glUseProgramStages");
        HANDLE$glUseProgramStages = RawFunctionLoader.link(SEGMENT$glUseProgramStages, Descriptors.DESCRIPTOR$glUseProgramStages);
        SEGMENT$glUseProgramStagesEXT = loader.apply("glUseProgramStagesEXT");
        HANDLE$glUseProgramStagesEXT = RawFunctionLoader.link(SEGMENT$glUseProgramStagesEXT, Descriptors.DESCRIPTOR$glUseProgramStagesEXT);
        SEGMENT$glUseShaderProgramEXT = loader.apply("glUseShaderProgramEXT");
        HANDLE$glUseShaderProgramEXT = RawFunctionLoader.link(SEGMENT$glUseShaderProgramEXT, Descriptors.DESCRIPTOR$glUseShaderProgramEXT);
        SEGMENT$glValidateProgram = loader.apply("glValidateProgram");
        HANDLE$glValidateProgram = RawFunctionLoader.link(SEGMENT$glValidateProgram, Descriptors.DESCRIPTOR$glValidateProgram);
        SEGMENT$glValidateProgramPipeline = loader.apply("glValidateProgramPipeline");
        HANDLE$glValidateProgramPipeline = RawFunctionLoader.link(SEGMENT$glValidateProgramPipeline, Descriptors.DESCRIPTOR$glValidateProgramPipeline);
        SEGMENT$glValidateProgramPipelineEXT = loader.apply("glValidateProgramPipelineEXT");
        HANDLE$glValidateProgramPipelineEXT = RawFunctionLoader.link(SEGMENT$glValidateProgramPipelineEXT, Descriptors.DESCRIPTOR$glValidateProgramPipelineEXT);
        SEGMENT$glVertexArrayAttribBinding = loader.apply("glVertexArrayAttribBinding");
        HANDLE$glVertexArrayAttribBinding = RawFunctionLoader.link(SEGMENT$glVertexArrayAttribBinding, Descriptors.DESCRIPTOR$glVertexArrayAttribBinding);
        SEGMENT$glVertexArrayAttribFormat = loader.apply("glVertexArrayAttribFormat");
        HANDLE$glVertexArrayAttribFormat = RawFunctionLoader.link(SEGMENT$glVertexArrayAttribFormat, Descriptors.DESCRIPTOR$glVertexArrayAttribFormat);
        SEGMENT$glVertexArrayAttribIFormat = loader.apply("glVertexArrayAttribIFormat");
        HANDLE$glVertexArrayAttribIFormat = RawFunctionLoader.link(SEGMENT$glVertexArrayAttribIFormat, Descriptors.DESCRIPTOR$glVertexArrayAttribIFormat);
        SEGMENT$glVertexArrayAttribLFormat = loader.apply("glVertexArrayAttribLFormat");
        HANDLE$glVertexArrayAttribLFormat = RawFunctionLoader.link(SEGMENT$glVertexArrayAttribLFormat, Descriptors.DESCRIPTOR$glVertexArrayAttribLFormat);
        SEGMENT$glVertexArrayBindVertexBufferEXT = loader.apply("glVertexArrayBindVertexBufferEXT");
        HANDLE$glVertexArrayBindVertexBufferEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayBindVertexBufferEXT, Descriptors.DESCRIPTOR$glVertexArrayBindVertexBufferEXT);
        SEGMENT$glVertexArrayBindingDivisor = loader.apply("glVertexArrayBindingDivisor");
        HANDLE$glVertexArrayBindingDivisor = RawFunctionLoader.link(SEGMENT$glVertexArrayBindingDivisor, Descriptors.DESCRIPTOR$glVertexArrayBindingDivisor);
        SEGMENT$glVertexArrayColorOffsetEXT = loader.apply("glVertexArrayColorOffsetEXT");
        HANDLE$glVertexArrayColorOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayColorOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayColorOffsetEXT);
        SEGMENT$glVertexArrayEdgeFlagOffsetEXT = loader.apply("glVertexArrayEdgeFlagOffsetEXT");
        HANDLE$glVertexArrayEdgeFlagOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayEdgeFlagOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayEdgeFlagOffsetEXT);
        SEGMENT$glVertexArrayElementBuffer = loader.apply("glVertexArrayElementBuffer");
        HANDLE$glVertexArrayElementBuffer = RawFunctionLoader.link(SEGMENT$glVertexArrayElementBuffer, Descriptors.DESCRIPTOR$glVertexArrayElementBuffer);
        SEGMENT$glVertexArrayFogCoordOffsetEXT = loader.apply("glVertexArrayFogCoordOffsetEXT");
        HANDLE$glVertexArrayFogCoordOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayFogCoordOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayFogCoordOffsetEXT);
        SEGMENT$glVertexArrayIndexOffsetEXT = loader.apply("glVertexArrayIndexOffsetEXT");
        HANDLE$glVertexArrayIndexOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayIndexOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayIndexOffsetEXT);
        SEGMENT$glVertexArrayMultiTexCoordOffsetEXT = loader.apply("glVertexArrayMultiTexCoordOffsetEXT");
        HANDLE$glVertexArrayMultiTexCoordOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayMultiTexCoordOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayMultiTexCoordOffsetEXT);
        SEGMENT$glVertexArrayNormalOffsetEXT = loader.apply("glVertexArrayNormalOffsetEXT");
        HANDLE$glVertexArrayNormalOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayNormalOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayNormalOffsetEXT);
        SEGMENT$glVertexArraySecondaryColorOffsetEXT = loader.apply("glVertexArraySecondaryColorOffsetEXT");
        HANDLE$glVertexArraySecondaryColorOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArraySecondaryColorOffsetEXT, Descriptors.DESCRIPTOR$glVertexArraySecondaryColorOffsetEXT);
        SEGMENT$glVertexArrayTexCoordOffsetEXT = loader.apply("glVertexArrayTexCoordOffsetEXT");
        HANDLE$glVertexArrayTexCoordOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayTexCoordOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayTexCoordOffsetEXT);
        SEGMENT$glVertexArrayVertexAttribBindingEXT = loader.apply("glVertexArrayVertexAttribBindingEXT");
        HANDLE$glVertexArrayVertexAttribBindingEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexAttribBindingEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexAttribBindingEXT);
        SEGMENT$glVertexArrayVertexAttribDivisorEXT = loader.apply("glVertexArrayVertexAttribDivisorEXT");
        HANDLE$glVertexArrayVertexAttribDivisorEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexAttribDivisorEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexAttribDivisorEXT);
        SEGMENT$glVertexArrayVertexAttribFormatEXT = loader.apply("glVertexArrayVertexAttribFormatEXT");
        HANDLE$glVertexArrayVertexAttribFormatEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexAttribFormatEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexAttribFormatEXT);
        SEGMENT$glVertexArrayVertexAttribIFormatEXT = loader.apply("glVertexArrayVertexAttribIFormatEXT");
        HANDLE$glVertexArrayVertexAttribIFormatEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexAttribIFormatEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexAttribIFormatEXT);
        SEGMENT$glVertexArrayVertexAttribIOffsetEXT = loader.apply("glVertexArrayVertexAttribIOffsetEXT");
        HANDLE$glVertexArrayVertexAttribIOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexAttribIOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexAttribIOffsetEXT);
        SEGMENT$glVertexArrayVertexAttribLFormatEXT = loader.apply("glVertexArrayVertexAttribLFormatEXT");
        HANDLE$glVertexArrayVertexAttribLFormatEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexAttribLFormatEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexAttribLFormatEXT);
        SEGMENT$glVertexArrayVertexAttribLOffsetEXT = loader.apply("glVertexArrayVertexAttribLOffsetEXT");
        HANDLE$glVertexArrayVertexAttribLOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexAttribLOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexAttribLOffsetEXT);
        SEGMENT$glVertexArrayVertexAttribOffsetEXT = loader.apply("glVertexArrayVertexAttribOffsetEXT");
        HANDLE$glVertexArrayVertexAttribOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexAttribOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexAttribOffsetEXT);
        SEGMENT$glVertexArrayVertexBindingDivisorEXT = loader.apply("glVertexArrayVertexBindingDivisorEXT");
        HANDLE$glVertexArrayVertexBindingDivisorEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexBindingDivisorEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexBindingDivisorEXT);
        SEGMENT$glVertexArrayVertexBuffer = loader.apply("glVertexArrayVertexBuffer");
        HANDLE$glVertexArrayVertexBuffer = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexBuffer, Descriptors.DESCRIPTOR$glVertexArrayVertexBuffer);
        SEGMENT$glVertexArrayVertexBuffers = loader.apply("glVertexArrayVertexBuffers");
        HANDLE$glVertexArrayVertexBuffers = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexBuffers, Descriptors.DESCRIPTOR$glVertexArrayVertexBuffers);
        SEGMENT$glVertexArrayVertexOffsetEXT = loader.apply("glVertexArrayVertexOffsetEXT");
        HANDLE$glVertexArrayVertexOffsetEXT = RawFunctionLoader.link(SEGMENT$glVertexArrayVertexOffsetEXT, Descriptors.DESCRIPTOR$glVertexArrayVertexOffsetEXT);
        SEGMENT$glVertexAttrib1d = loader.apply("glVertexAttrib1d");
        HANDLE$glVertexAttrib1d = RawFunctionLoader.link(SEGMENT$glVertexAttrib1d, Descriptors.DESCRIPTOR$glVertexAttrib1d);
        SEGMENT$glVertexAttrib1dv = loader.apply("glVertexAttrib1dv");
        HANDLE$glVertexAttrib1dv = RawFunctionLoader.link(SEGMENT$glVertexAttrib1dv, Descriptors.DESCRIPTOR$glVertexAttrib1dv);
        SEGMENT$glVertexAttrib1f = loader.apply("glVertexAttrib1f");
        HANDLE$glVertexAttrib1f = RawFunctionLoader.link(SEGMENT$glVertexAttrib1f, Descriptors.DESCRIPTOR$glVertexAttrib1f);
        SEGMENT$glVertexAttrib1fv = loader.apply("glVertexAttrib1fv");
        HANDLE$glVertexAttrib1fv = RawFunctionLoader.link(SEGMENT$glVertexAttrib1fv, Descriptors.DESCRIPTOR$glVertexAttrib1fv);
        SEGMENT$glVertexAttrib1s = loader.apply("glVertexAttrib1s");
        HANDLE$glVertexAttrib1s = RawFunctionLoader.link(SEGMENT$glVertexAttrib1s, Descriptors.DESCRIPTOR$glVertexAttrib1s);
        SEGMENT$glVertexAttrib1sv = loader.apply("glVertexAttrib1sv");
        HANDLE$glVertexAttrib1sv = RawFunctionLoader.link(SEGMENT$glVertexAttrib1sv, Descriptors.DESCRIPTOR$glVertexAttrib1sv);
        SEGMENT$glVertexAttrib2d = loader.apply("glVertexAttrib2d");
        HANDLE$glVertexAttrib2d = RawFunctionLoader.link(SEGMENT$glVertexAttrib2d, Descriptors.DESCRIPTOR$glVertexAttrib2d);
        SEGMENT$glVertexAttrib2dv = loader.apply("glVertexAttrib2dv");
        HANDLE$glVertexAttrib2dv = RawFunctionLoader.link(SEGMENT$glVertexAttrib2dv, Descriptors.DESCRIPTOR$glVertexAttrib2dv);
        SEGMENT$glVertexAttrib2f = loader.apply("glVertexAttrib2f");
        HANDLE$glVertexAttrib2f = RawFunctionLoader.link(SEGMENT$glVertexAttrib2f, Descriptors.DESCRIPTOR$glVertexAttrib2f);
        SEGMENT$glVertexAttrib2fv = loader.apply("glVertexAttrib2fv");
        HANDLE$glVertexAttrib2fv = RawFunctionLoader.link(SEGMENT$glVertexAttrib2fv, Descriptors.DESCRIPTOR$glVertexAttrib2fv);
        SEGMENT$glVertexAttrib2s = loader.apply("glVertexAttrib2s");
        HANDLE$glVertexAttrib2s = RawFunctionLoader.link(SEGMENT$glVertexAttrib2s, Descriptors.DESCRIPTOR$glVertexAttrib2s);
        SEGMENT$glVertexAttrib2sv = loader.apply("glVertexAttrib2sv");
        HANDLE$glVertexAttrib2sv = RawFunctionLoader.link(SEGMENT$glVertexAttrib2sv, Descriptors.DESCRIPTOR$glVertexAttrib2sv);
        SEGMENT$glVertexAttrib3d = loader.apply("glVertexAttrib3d");
        HANDLE$glVertexAttrib3d = RawFunctionLoader.link(SEGMENT$glVertexAttrib3d, Descriptors.DESCRIPTOR$glVertexAttrib3d);
        SEGMENT$glVertexAttrib3dv = loader.apply("glVertexAttrib3dv");
        HANDLE$glVertexAttrib3dv = RawFunctionLoader.link(SEGMENT$glVertexAttrib3dv, Descriptors.DESCRIPTOR$glVertexAttrib3dv);
        SEGMENT$glVertexAttrib3f = loader.apply("glVertexAttrib3f");
        HANDLE$glVertexAttrib3f = RawFunctionLoader.link(SEGMENT$glVertexAttrib3f, Descriptors.DESCRIPTOR$glVertexAttrib3f);
        SEGMENT$glVertexAttrib3fv = loader.apply("glVertexAttrib3fv");
        HANDLE$glVertexAttrib3fv = RawFunctionLoader.link(SEGMENT$glVertexAttrib3fv, Descriptors.DESCRIPTOR$glVertexAttrib3fv);
        SEGMENT$glVertexAttrib3s = loader.apply("glVertexAttrib3s");
        HANDLE$glVertexAttrib3s = RawFunctionLoader.link(SEGMENT$glVertexAttrib3s, Descriptors.DESCRIPTOR$glVertexAttrib3s);
        SEGMENT$glVertexAttrib3sv = loader.apply("glVertexAttrib3sv");
        HANDLE$glVertexAttrib3sv = RawFunctionLoader.link(SEGMENT$glVertexAttrib3sv, Descriptors.DESCRIPTOR$glVertexAttrib3sv);
        SEGMENT$glVertexAttrib4Nbv = loader.apply("glVertexAttrib4Nbv");
        HANDLE$glVertexAttrib4Nbv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4Nbv, Descriptors.DESCRIPTOR$glVertexAttrib4Nbv);
        SEGMENT$glVertexAttrib4Niv = loader.apply("glVertexAttrib4Niv");
        HANDLE$glVertexAttrib4Niv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4Niv, Descriptors.DESCRIPTOR$glVertexAttrib4Niv);
        SEGMENT$glVertexAttrib4Nsv = loader.apply("glVertexAttrib4Nsv");
        HANDLE$glVertexAttrib4Nsv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4Nsv, Descriptors.DESCRIPTOR$glVertexAttrib4Nsv);
        SEGMENT$glVertexAttrib4Nub = loader.apply("glVertexAttrib4Nub");
        HANDLE$glVertexAttrib4Nub = RawFunctionLoader.link(SEGMENT$glVertexAttrib4Nub, Descriptors.DESCRIPTOR$glVertexAttrib4Nub);
        SEGMENT$glVertexAttrib4Nubv = loader.apply("glVertexAttrib4Nubv");
        HANDLE$glVertexAttrib4Nubv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4Nubv, Descriptors.DESCRIPTOR$glVertexAttrib4Nubv);
        SEGMENT$glVertexAttrib4Nuiv = loader.apply("glVertexAttrib4Nuiv");
        HANDLE$glVertexAttrib4Nuiv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4Nuiv, Descriptors.DESCRIPTOR$glVertexAttrib4Nuiv);
        SEGMENT$glVertexAttrib4Nusv = loader.apply("glVertexAttrib4Nusv");
        HANDLE$glVertexAttrib4Nusv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4Nusv, Descriptors.DESCRIPTOR$glVertexAttrib4Nusv);
        SEGMENT$glVertexAttrib4bv = loader.apply("glVertexAttrib4bv");
        HANDLE$glVertexAttrib4bv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4bv, Descriptors.DESCRIPTOR$glVertexAttrib4bv);
        SEGMENT$glVertexAttrib4d = loader.apply("glVertexAttrib4d");
        HANDLE$glVertexAttrib4d = RawFunctionLoader.link(SEGMENT$glVertexAttrib4d, Descriptors.DESCRIPTOR$glVertexAttrib4d);
        SEGMENT$glVertexAttrib4dv = loader.apply("glVertexAttrib4dv");
        HANDLE$glVertexAttrib4dv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4dv, Descriptors.DESCRIPTOR$glVertexAttrib4dv);
        SEGMENT$glVertexAttrib4f = loader.apply("glVertexAttrib4f");
        HANDLE$glVertexAttrib4f = RawFunctionLoader.link(SEGMENT$glVertexAttrib4f, Descriptors.DESCRIPTOR$glVertexAttrib4f);
        SEGMENT$glVertexAttrib4fv = loader.apply("glVertexAttrib4fv");
        HANDLE$glVertexAttrib4fv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4fv, Descriptors.DESCRIPTOR$glVertexAttrib4fv);
        SEGMENT$glVertexAttrib4iv = loader.apply("glVertexAttrib4iv");
        HANDLE$glVertexAttrib4iv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4iv, Descriptors.DESCRIPTOR$glVertexAttrib4iv);
        SEGMENT$glVertexAttrib4s = loader.apply("glVertexAttrib4s");
        HANDLE$glVertexAttrib4s = RawFunctionLoader.link(SEGMENT$glVertexAttrib4s, Descriptors.DESCRIPTOR$glVertexAttrib4s);
        SEGMENT$glVertexAttrib4sv = loader.apply("glVertexAttrib4sv");
        HANDLE$glVertexAttrib4sv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4sv, Descriptors.DESCRIPTOR$glVertexAttrib4sv);
        SEGMENT$glVertexAttrib4ubv = loader.apply("glVertexAttrib4ubv");
        HANDLE$glVertexAttrib4ubv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4ubv, Descriptors.DESCRIPTOR$glVertexAttrib4ubv);
        SEGMENT$glVertexAttrib4uiv = loader.apply("glVertexAttrib4uiv");
        HANDLE$glVertexAttrib4uiv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4uiv, Descriptors.DESCRIPTOR$glVertexAttrib4uiv);
        SEGMENT$glVertexAttrib4usv = loader.apply("glVertexAttrib4usv");
        HANDLE$glVertexAttrib4usv = RawFunctionLoader.link(SEGMENT$glVertexAttrib4usv, Descriptors.DESCRIPTOR$glVertexAttrib4usv);
        SEGMENT$glVertexAttribBinding = loader.apply("glVertexAttribBinding");
        HANDLE$glVertexAttribBinding = RawFunctionLoader.link(SEGMENT$glVertexAttribBinding, Descriptors.DESCRIPTOR$glVertexAttribBinding);
        SEGMENT$glVertexAttribDivisor = loader.apply("glVertexAttribDivisor");
        HANDLE$glVertexAttribDivisor = RawFunctionLoader.link(SEGMENT$glVertexAttribDivisor, Descriptors.DESCRIPTOR$glVertexAttribDivisor);
        SEGMENT$glVertexAttribDivisorARB = loader.apply("glVertexAttribDivisorARB");
        HANDLE$glVertexAttribDivisorARB = RawFunctionLoader.link(SEGMENT$glVertexAttribDivisorARB, Descriptors.DESCRIPTOR$glVertexAttribDivisorARB);
        SEGMENT$glVertexAttribFormat = loader.apply("glVertexAttribFormat");
        HANDLE$glVertexAttribFormat = RawFunctionLoader.link(SEGMENT$glVertexAttribFormat, Descriptors.DESCRIPTOR$glVertexAttribFormat);
        SEGMENT$glVertexAttribFormatNV = loader.apply("glVertexAttribFormatNV");
        HANDLE$glVertexAttribFormatNV = RawFunctionLoader.link(SEGMENT$glVertexAttribFormatNV, Descriptors.DESCRIPTOR$glVertexAttribFormatNV);
        SEGMENT$glVertexAttribI1i = loader.apply("glVertexAttribI1i");
        HANDLE$glVertexAttribI1i = RawFunctionLoader.link(SEGMENT$glVertexAttribI1i, Descriptors.DESCRIPTOR$glVertexAttribI1i);
        SEGMENT$glVertexAttribI1iv = loader.apply("glVertexAttribI1iv");
        HANDLE$glVertexAttribI1iv = RawFunctionLoader.link(SEGMENT$glVertexAttribI1iv, Descriptors.DESCRIPTOR$glVertexAttribI1iv);
        SEGMENT$glVertexAttribI1ui = loader.apply("glVertexAttribI1ui");
        HANDLE$glVertexAttribI1ui = RawFunctionLoader.link(SEGMENT$glVertexAttribI1ui, Descriptors.DESCRIPTOR$glVertexAttribI1ui);
        SEGMENT$glVertexAttribI1uiv = loader.apply("glVertexAttribI1uiv");
        HANDLE$glVertexAttribI1uiv = RawFunctionLoader.link(SEGMENT$glVertexAttribI1uiv, Descriptors.DESCRIPTOR$glVertexAttribI1uiv);
        SEGMENT$glVertexAttribI2i = loader.apply("glVertexAttribI2i");
        HANDLE$glVertexAttribI2i = RawFunctionLoader.link(SEGMENT$glVertexAttribI2i, Descriptors.DESCRIPTOR$glVertexAttribI2i);
        SEGMENT$glVertexAttribI2iv = loader.apply("glVertexAttribI2iv");
        HANDLE$glVertexAttribI2iv = RawFunctionLoader.link(SEGMENT$glVertexAttribI2iv, Descriptors.DESCRIPTOR$glVertexAttribI2iv);
        SEGMENT$glVertexAttribI2ui = loader.apply("glVertexAttribI2ui");
        HANDLE$glVertexAttribI2ui = RawFunctionLoader.link(SEGMENT$glVertexAttribI2ui, Descriptors.DESCRIPTOR$glVertexAttribI2ui);
        SEGMENT$glVertexAttribI2uiv = loader.apply("glVertexAttribI2uiv");
        HANDLE$glVertexAttribI2uiv = RawFunctionLoader.link(SEGMENT$glVertexAttribI2uiv, Descriptors.DESCRIPTOR$glVertexAttribI2uiv);
        SEGMENT$glVertexAttribI3i = loader.apply("glVertexAttribI3i");
        HANDLE$glVertexAttribI3i = RawFunctionLoader.link(SEGMENT$glVertexAttribI3i, Descriptors.DESCRIPTOR$glVertexAttribI3i);
        SEGMENT$glVertexAttribI3iv = loader.apply("glVertexAttribI3iv");
        HANDLE$glVertexAttribI3iv = RawFunctionLoader.link(SEGMENT$glVertexAttribI3iv, Descriptors.DESCRIPTOR$glVertexAttribI3iv);
        SEGMENT$glVertexAttribI3ui = loader.apply("glVertexAttribI3ui");
        HANDLE$glVertexAttribI3ui = RawFunctionLoader.link(SEGMENT$glVertexAttribI3ui, Descriptors.DESCRIPTOR$glVertexAttribI3ui);
        SEGMENT$glVertexAttribI3uiv = loader.apply("glVertexAttribI3uiv");
        HANDLE$glVertexAttribI3uiv = RawFunctionLoader.link(SEGMENT$glVertexAttribI3uiv, Descriptors.DESCRIPTOR$glVertexAttribI3uiv);
        SEGMENT$glVertexAttribI4bv = loader.apply("glVertexAttribI4bv");
        HANDLE$glVertexAttribI4bv = RawFunctionLoader.link(SEGMENT$glVertexAttribI4bv, Descriptors.DESCRIPTOR$glVertexAttribI4bv);
        SEGMENT$glVertexAttribI4i = loader.apply("glVertexAttribI4i");
        HANDLE$glVertexAttribI4i = RawFunctionLoader.link(SEGMENT$glVertexAttribI4i, Descriptors.DESCRIPTOR$glVertexAttribI4i);
        SEGMENT$glVertexAttribI4iv = loader.apply("glVertexAttribI4iv");
        HANDLE$glVertexAttribI4iv = RawFunctionLoader.link(SEGMENT$glVertexAttribI4iv, Descriptors.DESCRIPTOR$glVertexAttribI4iv);
        SEGMENT$glVertexAttribI4sv = loader.apply("glVertexAttribI4sv");
        HANDLE$glVertexAttribI4sv = RawFunctionLoader.link(SEGMENT$glVertexAttribI4sv, Descriptors.DESCRIPTOR$glVertexAttribI4sv);
        SEGMENT$glVertexAttribI4ubv = loader.apply("glVertexAttribI4ubv");
        HANDLE$glVertexAttribI4ubv = RawFunctionLoader.link(SEGMENT$glVertexAttribI4ubv, Descriptors.DESCRIPTOR$glVertexAttribI4ubv);
        SEGMENT$glVertexAttribI4ui = loader.apply("glVertexAttribI4ui");
        HANDLE$glVertexAttribI4ui = RawFunctionLoader.link(SEGMENT$glVertexAttribI4ui, Descriptors.DESCRIPTOR$glVertexAttribI4ui);
        SEGMENT$glVertexAttribI4uiv = loader.apply("glVertexAttribI4uiv");
        HANDLE$glVertexAttribI4uiv = RawFunctionLoader.link(SEGMENT$glVertexAttribI4uiv, Descriptors.DESCRIPTOR$glVertexAttribI4uiv);
        SEGMENT$glVertexAttribI4usv = loader.apply("glVertexAttribI4usv");
        HANDLE$glVertexAttribI4usv = RawFunctionLoader.link(SEGMENT$glVertexAttribI4usv, Descriptors.DESCRIPTOR$glVertexAttribI4usv);
        SEGMENT$glVertexAttribIFormat = loader.apply("glVertexAttribIFormat");
        HANDLE$glVertexAttribIFormat = RawFunctionLoader.link(SEGMENT$glVertexAttribIFormat, Descriptors.DESCRIPTOR$glVertexAttribIFormat);
        SEGMENT$glVertexAttribIFormatNV = loader.apply("glVertexAttribIFormatNV");
        HANDLE$glVertexAttribIFormatNV = RawFunctionLoader.link(SEGMENT$glVertexAttribIFormatNV, Descriptors.DESCRIPTOR$glVertexAttribIFormatNV);
        SEGMENT$glVertexAttribIPointer = loader.apply("glVertexAttribIPointer");
        HANDLE$glVertexAttribIPointer = RawFunctionLoader.link(SEGMENT$glVertexAttribIPointer, Descriptors.DESCRIPTOR$glVertexAttribIPointer);
        SEGMENT$glVertexAttribL1d = loader.apply("glVertexAttribL1d");
        HANDLE$glVertexAttribL1d = RawFunctionLoader.link(SEGMENT$glVertexAttribL1d, Descriptors.DESCRIPTOR$glVertexAttribL1d);
        SEGMENT$glVertexAttribL1dv = loader.apply("glVertexAttribL1dv");
        HANDLE$glVertexAttribL1dv = RawFunctionLoader.link(SEGMENT$glVertexAttribL1dv, Descriptors.DESCRIPTOR$glVertexAttribL1dv);
        SEGMENT$glVertexAttribL1i64NV = loader.apply("glVertexAttribL1i64NV");
        HANDLE$glVertexAttribL1i64NV = RawFunctionLoader.link(SEGMENT$glVertexAttribL1i64NV, Descriptors.DESCRIPTOR$glVertexAttribL1i64NV);
        SEGMENT$glVertexAttribL1i64vNV = loader.apply("glVertexAttribL1i64vNV");
        HANDLE$glVertexAttribL1i64vNV = RawFunctionLoader.link(SEGMENT$glVertexAttribL1i64vNV, Descriptors.DESCRIPTOR$glVertexAttribL1i64vNV);
        SEGMENT$glVertexAttribL1ui64ARB = loader.apply("glVertexAttribL1ui64ARB");
        HANDLE$glVertexAttribL1ui64ARB = RawFunctionLoader.link(SEGMENT$glVertexAttribL1ui64ARB, Descriptors.DESCRIPTOR$glVertexAttribL1ui64ARB);
        SEGMENT$glVertexAttribL1ui64NV = loader.apply("glVertexAttribL1ui64NV");
        HANDLE$glVertexAttribL1ui64NV = RawFunctionLoader.link(SEGMENT$glVertexAttribL1ui64NV, Descriptors.DESCRIPTOR$glVertexAttribL1ui64NV);
        SEGMENT$glVertexAttribL1ui64vARB = loader.apply("glVertexAttribL1ui64vARB");
        HANDLE$glVertexAttribL1ui64vARB = RawFunctionLoader.link(SEGMENT$glVertexAttribL1ui64vARB, Descriptors.DESCRIPTOR$glVertexAttribL1ui64vARB);
        SEGMENT$glVertexAttribL1ui64vNV = loader.apply("glVertexAttribL1ui64vNV");
        HANDLE$glVertexAttribL1ui64vNV = RawFunctionLoader.link(SEGMENT$glVertexAttribL1ui64vNV, Descriptors.DESCRIPTOR$glVertexAttribL1ui64vNV);
        SEGMENT$glVertexAttribL2d = loader.apply("glVertexAttribL2d");
        HANDLE$glVertexAttribL2d = RawFunctionLoader.link(SEGMENT$glVertexAttribL2d, Descriptors.DESCRIPTOR$glVertexAttribL2d);
        SEGMENT$glVertexAttribL2dv = loader.apply("glVertexAttribL2dv");
        HANDLE$glVertexAttribL2dv = RawFunctionLoader.link(SEGMENT$glVertexAttribL2dv, Descriptors.DESCRIPTOR$glVertexAttribL2dv);
        SEGMENT$glVertexAttribL2i64NV = loader.apply("glVertexAttribL2i64NV");
        HANDLE$glVertexAttribL2i64NV = RawFunctionLoader.link(SEGMENT$glVertexAttribL2i64NV, Descriptors.DESCRIPTOR$glVertexAttribL2i64NV);
        SEGMENT$glVertexAttribL2i64vNV = loader.apply("glVertexAttribL2i64vNV");
        HANDLE$glVertexAttribL2i64vNV = RawFunctionLoader.link(SEGMENT$glVertexAttribL2i64vNV, Descriptors.DESCRIPTOR$glVertexAttribL2i64vNV);
        SEGMENT$glVertexAttribL2ui64NV = loader.apply("glVertexAttribL2ui64NV");
        HANDLE$glVertexAttribL2ui64NV = RawFunctionLoader.link(SEGMENT$glVertexAttribL2ui64NV, Descriptors.DESCRIPTOR$glVertexAttribL2ui64NV);
        SEGMENT$glVertexAttribL2ui64vNV = loader.apply("glVertexAttribL2ui64vNV");
        HANDLE$glVertexAttribL2ui64vNV = RawFunctionLoader.link(SEGMENT$glVertexAttribL2ui64vNV, Descriptors.DESCRIPTOR$glVertexAttribL2ui64vNV);
        SEGMENT$glVertexAttribL3d = loader.apply("glVertexAttribL3d");
        HANDLE$glVertexAttribL3d = RawFunctionLoader.link(SEGMENT$glVertexAttribL3d, Descriptors.DESCRIPTOR$glVertexAttribL3d);
        SEGMENT$glVertexAttribL3dv = loader.apply("glVertexAttribL3dv");
        HANDLE$glVertexAttribL3dv = RawFunctionLoader.link(SEGMENT$glVertexAttribL3dv, Descriptors.DESCRIPTOR$glVertexAttribL3dv);
        SEGMENT$glVertexAttribL3i64NV = loader.apply("glVertexAttribL3i64NV");
        HANDLE$glVertexAttribL3i64NV = RawFunctionLoader.link(SEGMENT$glVertexAttribL3i64NV, Descriptors.DESCRIPTOR$glVertexAttribL3i64NV);
        SEGMENT$glVertexAttribL3i64vNV = loader.apply("glVertexAttribL3i64vNV");
        HANDLE$glVertexAttribL3i64vNV = RawFunctionLoader.link(SEGMENT$glVertexAttribL3i64vNV, Descriptors.DESCRIPTOR$glVertexAttribL3i64vNV);
        SEGMENT$glVertexAttribL3ui64NV = loader.apply("glVertexAttribL3ui64NV");
        HANDLE$glVertexAttribL3ui64NV = RawFunctionLoader.link(SEGMENT$glVertexAttribL3ui64NV, Descriptors.DESCRIPTOR$glVertexAttribL3ui64NV);
        SEGMENT$glVertexAttribL3ui64vNV = loader.apply("glVertexAttribL3ui64vNV");
        HANDLE$glVertexAttribL3ui64vNV = RawFunctionLoader.link(SEGMENT$glVertexAttribL3ui64vNV, Descriptors.DESCRIPTOR$glVertexAttribL3ui64vNV);
        SEGMENT$glVertexAttribL4d = loader.apply("glVertexAttribL4d");
        HANDLE$glVertexAttribL4d = RawFunctionLoader.link(SEGMENT$glVertexAttribL4d, Descriptors.DESCRIPTOR$glVertexAttribL4d);
        SEGMENT$glVertexAttribL4dv = loader.apply("glVertexAttribL4dv");
        HANDLE$glVertexAttribL4dv = RawFunctionLoader.link(SEGMENT$glVertexAttribL4dv, Descriptors.DESCRIPTOR$glVertexAttribL4dv);
        SEGMENT$glVertexAttribL4i64NV = loader.apply("glVertexAttribL4i64NV");
        HANDLE$glVertexAttribL4i64NV = RawFunctionLoader.link(SEGMENT$glVertexAttribL4i64NV, Descriptors.DESCRIPTOR$glVertexAttribL4i64NV);
        SEGMENT$glVertexAttribL4i64vNV = loader.apply("glVertexAttribL4i64vNV");
        HANDLE$glVertexAttribL4i64vNV = RawFunctionLoader.link(SEGMENT$glVertexAttribL4i64vNV, Descriptors.DESCRIPTOR$glVertexAttribL4i64vNV);
        SEGMENT$glVertexAttribL4ui64NV = loader.apply("glVertexAttribL4ui64NV");
        HANDLE$glVertexAttribL4ui64NV = RawFunctionLoader.link(SEGMENT$glVertexAttribL4ui64NV, Descriptors.DESCRIPTOR$glVertexAttribL4ui64NV);
        SEGMENT$glVertexAttribL4ui64vNV = loader.apply("glVertexAttribL4ui64vNV");
        HANDLE$glVertexAttribL4ui64vNV = RawFunctionLoader.link(SEGMENT$glVertexAttribL4ui64vNV, Descriptors.DESCRIPTOR$glVertexAttribL4ui64vNV);
        SEGMENT$glVertexAttribLFormat = loader.apply("glVertexAttribLFormat");
        HANDLE$glVertexAttribLFormat = RawFunctionLoader.link(SEGMENT$glVertexAttribLFormat, Descriptors.DESCRIPTOR$glVertexAttribLFormat);
        SEGMENT$glVertexAttribLFormatNV = loader.apply("glVertexAttribLFormatNV");
        HANDLE$glVertexAttribLFormatNV = RawFunctionLoader.link(SEGMENT$glVertexAttribLFormatNV, Descriptors.DESCRIPTOR$glVertexAttribLFormatNV);
        SEGMENT$glVertexAttribLPointer = loader.apply("glVertexAttribLPointer");
        HANDLE$glVertexAttribLPointer = RawFunctionLoader.link(SEGMENT$glVertexAttribLPointer, Descriptors.DESCRIPTOR$glVertexAttribLPointer);
        SEGMENT$glVertexAttribP1ui = loader.apply("glVertexAttribP1ui");
        HANDLE$glVertexAttribP1ui = RawFunctionLoader.link(SEGMENT$glVertexAttribP1ui, Descriptors.DESCRIPTOR$glVertexAttribP1ui);
        SEGMENT$glVertexAttribP1uiv = loader.apply("glVertexAttribP1uiv");
        HANDLE$glVertexAttribP1uiv = RawFunctionLoader.link(SEGMENT$glVertexAttribP1uiv, Descriptors.DESCRIPTOR$glVertexAttribP1uiv);
        SEGMENT$glVertexAttribP2ui = loader.apply("glVertexAttribP2ui");
        HANDLE$glVertexAttribP2ui = RawFunctionLoader.link(SEGMENT$glVertexAttribP2ui, Descriptors.DESCRIPTOR$glVertexAttribP2ui);
        SEGMENT$glVertexAttribP2uiv = loader.apply("glVertexAttribP2uiv");
        HANDLE$glVertexAttribP2uiv = RawFunctionLoader.link(SEGMENT$glVertexAttribP2uiv, Descriptors.DESCRIPTOR$glVertexAttribP2uiv);
        SEGMENT$glVertexAttribP3ui = loader.apply("glVertexAttribP3ui");
        HANDLE$glVertexAttribP3ui = RawFunctionLoader.link(SEGMENT$glVertexAttribP3ui, Descriptors.DESCRIPTOR$glVertexAttribP3ui);
        SEGMENT$glVertexAttribP3uiv = loader.apply("glVertexAttribP3uiv");
        HANDLE$glVertexAttribP3uiv = RawFunctionLoader.link(SEGMENT$glVertexAttribP3uiv, Descriptors.DESCRIPTOR$glVertexAttribP3uiv);
        SEGMENT$glVertexAttribP4ui = loader.apply("glVertexAttribP4ui");
        HANDLE$glVertexAttribP4ui = RawFunctionLoader.link(SEGMENT$glVertexAttribP4ui, Descriptors.DESCRIPTOR$glVertexAttribP4ui);
        SEGMENT$glVertexAttribP4uiv = loader.apply("glVertexAttribP4uiv");
        HANDLE$glVertexAttribP4uiv = RawFunctionLoader.link(SEGMENT$glVertexAttribP4uiv, Descriptors.DESCRIPTOR$glVertexAttribP4uiv);
        SEGMENT$glVertexAttribPointer = loader.apply("glVertexAttribPointer");
        HANDLE$glVertexAttribPointer = RawFunctionLoader.link(SEGMENT$glVertexAttribPointer, Descriptors.DESCRIPTOR$glVertexAttribPointer);
        SEGMENT$glVertexBindingDivisor = loader.apply("glVertexBindingDivisor");
        HANDLE$glVertexBindingDivisor = RawFunctionLoader.link(SEGMENT$glVertexBindingDivisor, Descriptors.DESCRIPTOR$glVertexBindingDivisor);
        SEGMENT$glVertexFormatNV = loader.apply("glVertexFormatNV");
        HANDLE$glVertexFormatNV = RawFunctionLoader.link(SEGMENT$glVertexFormatNV, Descriptors.DESCRIPTOR$glVertexFormatNV);
        SEGMENT$glViewport = loader.apply("glViewport");
        HANDLE$glViewport = RawFunctionLoader.link(SEGMENT$glViewport, Descriptors.DESCRIPTOR$glViewport);
        SEGMENT$glViewportArrayv = loader.apply("glViewportArrayv");
        HANDLE$glViewportArrayv = RawFunctionLoader.link(SEGMENT$glViewportArrayv, Descriptors.DESCRIPTOR$glViewportArrayv);
        SEGMENT$glViewportIndexedf = loader.apply("glViewportIndexedf");
        HANDLE$glViewportIndexedf = RawFunctionLoader.link(SEGMENT$glViewportIndexedf, Descriptors.DESCRIPTOR$glViewportIndexedf);
        SEGMENT$glViewportIndexedfv = loader.apply("glViewportIndexedfv");
        HANDLE$glViewportIndexedfv = RawFunctionLoader.link(SEGMENT$glViewportIndexedfv, Descriptors.DESCRIPTOR$glViewportIndexedfv);
        SEGMENT$glViewportPositionWScaleNV = loader.apply("glViewportPositionWScaleNV");
        HANDLE$glViewportPositionWScaleNV = RawFunctionLoader.link(SEGMENT$glViewportPositionWScaleNV, Descriptors.DESCRIPTOR$glViewportPositionWScaleNV);
        SEGMENT$glViewportSwizzleNV = loader.apply("glViewportSwizzleNV");
        HANDLE$glViewportSwizzleNV = RawFunctionLoader.link(SEGMENT$glViewportSwizzleNV, Descriptors.DESCRIPTOR$glViewportSwizzleNV);
        SEGMENT$glWaitSync = loader.apply("glWaitSync");
        HANDLE$glWaitSync = RawFunctionLoader.link(SEGMENT$glWaitSync, Descriptors.DESCRIPTOR$glWaitSync);
        SEGMENT$glWaitVkSemaphoreNV = loader.apply("glWaitVkSemaphoreNV");
        HANDLE$glWaitVkSemaphoreNV = RawFunctionLoader.link(SEGMENT$glWaitVkSemaphoreNV, Descriptors.DESCRIPTOR$glWaitVkSemaphoreNV);
        SEGMENT$glWeightPathsNV = loader.apply("glWeightPathsNV");
        HANDLE$glWeightPathsNV = RawFunctionLoader.link(SEGMENT$glWeightPathsNV, Descriptors.DESCRIPTOR$glWeightPathsNV);
        SEGMENT$glWindowRectanglesEXT = loader.apply("glWindowRectanglesEXT");
        HANDLE$glWindowRectanglesEXT = RawFunctionLoader.link(SEGMENT$glWindowRectanglesEXT, Descriptors.DESCRIPTOR$glWindowRectanglesEXT);
    }

    // region command wrappers

    public void activeProgramEXT(
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glActiveProgramEXT);
        try {
            hFunction.invokeExact(
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void activeShaderProgram(
        @NativeType("GLuint") @Unsigned int pipeline,
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glActiveShaderProgram);
        try {
            hFunction.invokeExact(
                pipeline,
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void activeShaderProgramEXT(
        @NativeType("GLuint") @Unsigned int pipeline,
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glActiveShaderProgramEXT);
        try {
            hFunction.invokeExact(
                pipeline,
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void activeTexture(
        @NativeType("GLenum") int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glActiveTexture);
        try {
            hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void applyFramebufferAttachmentCMAAINTEL() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glApplyFramebufferAttachmentCMAAINTEL);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void attachShader(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int shader
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAttachShader);
        try {
            hFunction.invokeExact(
                program,
                shader
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginConditionalRender(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginConditionalRender);
        try {
            hFunction.invokeExact(
                id,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginConditionalRenderNV(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginConditionalRenderNV);
        try {
            hFunction.invokeExact(
                id,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginPerfMonitorAMD(
        @NativeType("GLuint") @Unsigned int monitor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginPerfMonitorAMD);
        try {
            hFunction.invokeExact(
                monitor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginPerfQueryINTEL(
        @NativeType("GLuint") @Unsigned int queryHandle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginPerfQueryINTEL);
        try {
            hFunction.invokeExact(
                queryHandle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginQuery(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginQuery);
        try {
            hFunction.invokeExact(
                target,
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginQueryIndexed(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginQueryIndexed);
        try {
            hFunction.invokeExact(
                target,
                index,
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginTransformFeedback(
        @NativeType("GLenum") int primitiveMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginTransformFeedback);
        try {
            hFunction.invokeExact(
                primitiveMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindAttribLocation(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindAttribLocation);
        try {
            hFunction.invokeExact(
                program,
                index,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBuffer(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBuffer);
        try {
            hFunction.invokeExact(
                target,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferBase(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferBase);
        try {
            hFunction.invokeExact(
                target,
                index,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferRange(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferRange);
        try {
            hFunction.invokeExact(
                target,
                index,
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBuffersBase(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBuffersBase);
        try {
            hFunction.invokeExact(
                target,
                first,
                count,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBuffersRange(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers,
        @Nullable @Pointer(comment="GLintptr") PointerPtr offsets,
        @Nullable @Pointer(comment="GLsizeiptr") PointerPtr sizes
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBuffersRange);
        try {
            hFunction.invokeExact(
                target,
                first,
                count,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL),
                (MemorySegment) (offsets != null ? offsets.segment() : MemorySegment.NULL),
                (MemorySegment) (sizes != null ? sizes.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindFragDataLocation(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int color,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindFragDataLocation);
        try {
            hFunction.invokeExact(
                program,
                color,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindFragDataLocationIndexed(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int colorNumber,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindFragDataLocationIndexed);
        try {
            hFunction.invokeExact(
                program,
                colorNumber,
                index,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindFramebuffer(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int framebuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindFramebuffer);
        try {
            hFunction.invokeExact(
                target,
                framebuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindImageTexture(
        @NativeType("GLuint") @Unsigned int unit,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLboolean") @Unsigned byte layered,
        @NativeType("GLint") int layer,
        @NativeType("GLenum") int access,
        @NativeType("GLenum") int format
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindImageTexture);
        try {
            hFunction.invokeExact(
                unit,
                texture,
                level,
                layered,
                layer,
                access,
                format
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindImageTextures(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr textures
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindImageTextures);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (textures != null ? textures.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindMultiTextureEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindMultiTextureEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindProgramPipeline(
        @NativeType("GLuint") @Unsigned int pipeline
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindProgramPipeline);
        try {
            hFunction.invokeExact(
                pipeline
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindProgramPipelineEXT(
        @NativeType("GLuint") @Unsigned int pipeline
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindProgramPipelineEXT);
        try {
            hFunction.invokeExact(
                pipeline
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindRenderbuffer(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindRenderbuffer);
        try {
            hFunction.invokeExact(
                target,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindSampler(
        @NativeType("GLuint") @Unsigned int unit,
        @NativeType("GLuint") @Unsigned int sampler
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindSampler);
        try {
            hFunction.invokeExact(
                unit,
                sampler
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindSamplers(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr samplers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindSamplers);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (samplers != null ? samplers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindShadingRateImageNV(
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindShadingRateImageNV);
        try {
            hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindTexture(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindTexture);
        try {
            hFunction.invokeExact(
                target,
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindTextureUnit(
        @NativeType("GLuint") @Unsigned int unit,
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindTextureUnit);
        try {
            hFunction.invokeExact(
                unit,
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindTextures(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr textures
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindTextures);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (textures != null ? textures.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindTransformFeedback(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindTransformFeedback);
        try {
            hFunction.invokeExact(
                target,
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindVertexArray(
        @NativeType("GLuint") @Unsigned int array
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindVertexArray);
        try {
            hFunction.invokeExact(
                array
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindVertexBuffer(
        @NativeType("GLuint") @Unsigned int bindingindex,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindVertexBuffer);
        try {
            hFunction.invokeExact(
                bindingindex,
                buffer,
                MemorySegment.ofAddress(offset),
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindVertexBuffers(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers,
        @Nullable @Pointer(comment="GLintptr") PointerPtr offsets,
        @Nullable @Pointer(comment="GLsizei") IntPtr strides
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindVertexBuffers);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL),
                (MemorySegment) (offsets != null ? offsets.segment() : MemorySegment.NULL),
                (MemorySegment) (strides != null ? strides.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendBarrierKHR() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendBarrierKHR);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendBarrierNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendBarrierNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendColor(
        @NativeType("GLfloat") float red,
        @NativeType("GLfloat") float green,
        @NativeType("GLfloat") float blue,
        @NativeType("GLfloat") float alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendColor);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquation(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquation);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationSeparate(
        @NativeType("GLenum") int modeRGB,
        @NativeType("GLenum") int modeAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationSeparate);
        try {
            hFunction.invokeExact(
                modeRGB,
                modeAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationSeparatei(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int modeRGB,
        @NativeType("GLenum") int modeAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationSeparatei);
        try {
            hFunction.invokeExact(
                buf,
                modeRGB,
                modeAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationSeparateiARB(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int modeRGB,
        @NativeType("GLenum") int modeAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationSeparateiARB);
        try {
            hFunction.invokeExact(
                buf,
                modeRGB,
                modeAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationi(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationi);
        try {
            hFunction.invokeExact(
                buf,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationiARB(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationiARB);
        try {
            hFunction.invokeExact(
                buf,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFunc(
        @NativeType("GLenum") int sfactor,
        @NativeType("GLenum") int dfactor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFunc);
        try {
            hFunction.invokeExact(
                sfactor,
                dfactor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFuncSeparate(
        @NativeType("GLenum") int sfactorRGB,
        @NativeType("GLenum") int dfactorRGB,
        @NativeType("GLenum") int sfactorAlpha,
        @NativeType("GLenum") int dfactorAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFuncSeparate);
        try {
            hFunction.invokeExact(
                sfactorRGB,
                dfactorRGB,
                sfactorAlpha,
                dfactorAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFuncSeparatei(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int srcRGB,
        @NativeType("GLenum") int dstRGB,
        @NativeType("GLenum") int srcAlpha,
        @NativeType("GLenum") int dstAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFuncSeparatei);
        try {
            hFunction.invokeExact(
                buf,
                srcRGB,
                dstRGB,
                srcAlpha,
                dstAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFuncSeparateiARB(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int srcRGB,
        @NativeType("GLenum") int dstRGB,
        @NativeType("GLenum") int srcAlpha,
        @NativeType("GLenum") int dstAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFuncSeparateiARB);
        try {
            hFunction.invokeExact(
                buf,
                srcRGB,
                dstRGB,
                srcAlpha,
                dstAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFunci(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int src,
        @NativeType("GLenum") int dst
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFunci);
        try {
            hFunction.invokeExact(
                buf,
                src,
                dst
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFunciARB(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int src,
        @NativeType("GLenum") int dst
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFunciARB);
        try {
            hFunction.invokeExact(
                buf,
                src,
                dst
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendParameteriNV(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendParameteriNV);
        try {
            hFunction.invokeExact(
                pname,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blitFramebuffer(
        @NativeType("GLint") int srcX0,
        @NativeType("GLint") int srcY0,
        @NativeType("GLint") int srcX1,
        @NativeType("GLint") int srcY1,
        @NativeType("GLint") int dstX0,
        @NativeType("GLint") int dstY0,
        @NativeType("GLint") int dstX1,
        @NativeType("GLint") int dstY1,
        @NativeType("GLbitfield") @Unsigned int mask,
        @NativeType("GLenum") int filter
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlitFramebuffer);
        try {
            hFunction.invokeExact(
                srcX0,
                srcY0,
                srcX1,
                srcY1,
                dstX0,
                dstY0,
                dstX1,
                dstY1,
                mask,
                filter
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blitNamedFramebuffer(
        @NativeType("GLuint") @Unsigned int readFramebuffer,
        @NativeType("GLuint") @Unsigned int drawFramebuffer,
        @NativeType("GLint") int srcX0,
        @NativeType("GLint") int srcY0,
        @NativeType("GLint") int srcX1,
        @NativeType("GLint") int srcY1,
        @NativeType("GLint") int dstX0,
        @NativeType("GLint") int dstY0,
        @NativeType("GLint") int dstX1,
        @NativeType("GLint") int dstY1,
        @NativeType("GLbitfield") @Unsigned int mask,
        @NativeType("GLenum") int filter
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlitNamedFramebuffer);
        try {
            hFunction.invokeExact(
                readFramebuffer,
                drawFramebuffer,
                srcX0,
                srcY0,
                srcX1,
                srcY1,
                dstX0,
                dstY0,
                dstX1,
                dstY1,
                mask,
                filter
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferAddressRangeNV(
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint64EXT") @Unsigned long address,
        @NativeType("GLsizeiptr") long length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferAddressRangeNV);
        try {
            hFunction.invokeExact(
                pname,
                index,
                address,
                MemorySegment.ofAddress(length)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferAttachMemoryNV(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferAttachMemoryNV);
        try {
            hFunction.invokeExact(
                target,
                memory,
                offset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferData(
        @NativeType("GLenum") int target,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data,
        @NativeType("GLenum") int usage
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferData);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(size),
                data,
                usage
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferPageCommitmentARB(
        @NativeType("GLenum") int target,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferPageCommitmentARB);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferPageCommitmentMemNV(
        @NativeType("GLenum") int target,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long memOffset,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferPageCommitmentMemNV);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                memory,
                memOffset,
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferStorage(
        @NativeType("GLenum") int target,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferStorage);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(size),
                data,
                flags
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferSubData(
        @NativeType("GLenum") int target,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferSubData);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void callCommandListNV(
        @NativeType("GLuint") @Unsigned int list
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCallCommandListNV);
        try {
            hFunction.invokeExact(
                list
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int checkFramebufferStatus(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCheckFramebufferStatus);
        try {
            return (int) hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int checkNamedFramebufferStatus(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCheckNamedFramebufferStatus);
        try {
            return (int) hFunction.invokeExact(
                framebuffer,
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int checkNamedFramebufferStatusEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCheckNamedFramebufferStatusEXT);
        try {
            return (int) hFunction.invokeExact(
                framebuffer,
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clampColor(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int clamp
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClampColor);
        try {
            hFunction.invokeExact(
                target,
                clamp
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clear(
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClear);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearBufferData(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearBufferData);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearBufferSubData(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearBufferSubData);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearBufferfi(
        @NativeType("GLenum") int buffer,
        @NativeType("GLint") int drawbuffer,
        @NativeType("GLfloat") float depth,
        @NativeType("GLint") int stencil
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearBufferfi);
        try {
            hFunction.invokeExact(
                buffer,
                drawbuffer,
                depth,
                stencil
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearBufferfv(
        @NativeType("GLenum") int buffer,
        @NativeType("GLint") int drawbuffer,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearBufferfv);
        try {
            hFunction.invokeExact(
                buffer,
                drawbuffer,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearBufferiv(
        @NativeType("GLenum") int buffer,
        @NativeType("GLint") int drawbuffer,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearBufferiv);
        try {
            hFunction.invokeExact(
                buffer,
                drawbuffer,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearBufferuiv(
        @NativeType("GLenum") int buffer,
        @NativeType("GLint") int drawbuffer,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearBufferuiv);
        try {
            hFunction.invokeExact(
                buffer,
                drawbuffer,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearColor(
        @NativeType("GLfloat") float red,
        @NativeType("GLfloat") float green,
        @NativeType("GLfloat") float blue,
        @NativeType("GLfloat") float alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearColor);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearDepth(
        @NativeType("GLdouble") double depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearDepth);
        try {
            hFunction.invokeExact(
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearDepthdNV(
        @NativeType("GLdouble") double depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearDepthdNV);
        try {
            hFunction.invokeExact(
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearDepthf(
        @NativeType("GLfloat") float d
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearDepthf);
        try {
            hFunction.invokeExact(
                d
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearNamedBufferData(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearNamedBufferData);
        try {
            hFunction.invokeExact(
                buffer,
                internalformat,
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearNamedBufferDataEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearNamedBufferDataEXT);
        try {
            hFunction.invokeExact(
                buffer,
                internalformat,
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearNamedBufferSubData(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearNamedBufferSubData);
        try {
            hFunction.invokeExact(
                buffer,
                internalformat,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearNamedBufferSubDataEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizeiptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearNamedBufferSubDataEXT);
        try {
            hFunction.invokeExact(
                buffer,
                internalformat,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearNamedFramebufferfi(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int buffer,
        @NativeType("GLint") int drawbuffer,
        @NativeType("GLfloat") float depth,
        @NativeType("GLint") int stencil
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearNamedFramebufferfi);
        try {
            hFunction.invokeExact(
                framebuffer,
                buffer,
                drawbuffer,
                depth,
                stencil
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearNamedFramebufferfv(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int buffer,
        @NativeType("GLint") int drawbuffer,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearNamedFramebufferfv);
        try {
            hFunction.invokeExact(
                framebuffer,
                buffer,
                drawbuffer,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearNamedFramebufferiv(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int buffer,
        @NativeType("GLint") int drawbuffer,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearNamedFramebufferiv);
        try {
            hFunction.invokeExact(
                framebuffer,
                buffer,
                drawbuffer,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearNamedFramebufferuiv(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int buffer,
        @NativeType("GLint") int drawbuffer,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearNamedFramebufferuiv);
        try {
            hFunction.invokeExact(
                framebuffer,
                buffer,
                drawbuffer,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearStencil(
        @NativeType("GLint") int s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearStencil);
        try {
            hFunction.invokeExact(
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearTexImage(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearTexImage);
        try {
            hFunction.invokeExact(
                texture,
                level,
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearTexSubImage(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearTexSubImage);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clientAttribDefaultEXT(
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClientAttribDefaultEXT);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int clientWaitSync(
        @Nullable GLsync sync,
        @NativeType("GLbitfield") @Unsigned int flags,
        @NativeType("GLuint64") @Unsigned long timeout
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClientWaitSync);
        try {
            return (int) hFunction.invokeExact(
                (MemorySegment) (sync != null ? sync.segment() : MemorySegment.NULL),
                flags,
                timeout
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clipControl(
        @NativeType("GLenum") int origin,
        @NativeType("GLenum") int depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClipControl);
        try {
            hFunction.invokeExact(
                origin,
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorFormatNV(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorFormatNV);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorMask(
        @NativeType("GLboolean") @Unsigned byte red,
        @NativeType("GLboolean") @Unsigned byte green,
        @NativeType("GLboolean") @Unsigned byte blue,
        @NativeType("GLboolean") @Unsigned byte alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorMask);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorMaski(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLboolean") @Unsigned byte r,
        @NativeType("GLboolean") @Unsigned byte g,
        @NativeType("GLboolean") @Unsigned byte b,
        @NativeType("GLboolean") @Unsigned byte a
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorMaski);
        try {
            hFunction.invokeExact(
                index,
                r,
                g,
                b,
                a
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void commandListSegmentsNV(
        @NativeType("GLuint") @Unsigned int list,
        @NativeType("GLuint") @Unsigned int segments
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCommandListSegmentsNV);
        try {
            hFunction.invokeExact(
                list,
                segments
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compileCommandListNV(
        @NativeType("GLuint") @Unsigned int list
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompileCommandListNV);
        try {
            hFunction.invokeExact(
                list
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compileShader(
        @NativeType("GLuint") @Unsigned int shader
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompileShader);
        try {
            hFunction.invokeExact(
                shader
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compileShaderIncludeARB(
        @NativeType("GLuint") @Unsigned int shader,
        @NativeType("GLsizei") int count,
        @Nullable PointerPtr path,
        @Nullable @Pointer(comment="GLint") IntPtr length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompileShaderIncludeARB);
        try {
            hFunction.invokeExact(
                shader,
                count,
                (MemorySegment) (path != null ? path.segment() : MemorySegment.NULL),
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedMultiTexImage1DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedMultiTexImage1DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                internalformat,
                width,
                border,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedMultiTexImage2DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedMultiTexImage2DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                internalformat,
                width,
                height,
                border,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedMultiTexImage3DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedMultiTexImage3DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                internalformat,
                width,
                height,
                depth,
                border,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedMultiTexSubImage1DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedMultiTexSubImage1DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                width,
                format,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedMultiTexSubImage2DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedMultiTexSubImage2DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedMultiTexSubImage3DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedMultiTexSubImage3DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexImage1D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexImage1D);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                border,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexImage2D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexImage2D);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                height,
                border,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexImage3D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexImage3D);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                height,
                depth,
                border,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexSubImage1D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexSubImage1D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                width,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexSubImage2D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexSubImage2D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexSubImage3D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexSubImage3D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureImage1DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureImage1DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                internalformat,
                width,
                border,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureImage2DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureImage2DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                internalformat,
                width,
                height,
                border,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureImage3DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureImage3DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                internalformat,
                width,
                height,
                depth,
                border,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureSubImage1D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureSubImage1D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                width,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureSubImage1DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureSubImage1DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                width,
                format,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureSubImage2D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureSubImage2D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureSubImage2DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureSubImage2DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureSubImage3D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureSubImage3D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTextureSubImage3DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment bits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTextureSubImage3DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                imageSize,
                bits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void conservativeRasterParameterfNV(
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glConservativeRasterParameterfNV);
        try {
            hFunction.invokeExact(
                pname,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void conservativeRasterParameteriNV(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glConservativeRasterParameteriNV);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyBufferSubData(
        @NativeType("GLenum") int readTarget,
        @NativeType("GLenum") int writeTarget,
        @NativeType("GLintptr") long readOffset,
        @NativeType("GLintptr") long writeOffset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyBufferSubData);
        try {
            hFunction.invokeExact(
                readTarget,
                writeTarget,
                MemorySegment.ofAddress(readOffset),
                MemorySegment.ofAddress(writeOffset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyImageSubData(
        @NativeType("GLuint") @Unsigned int srcName,
        @NativeType("GLenum") int srcTarget,
        @NativeType("GLint") int srcLevel,
        @NativeType("GLint") int srcX,
        @NativeType("GLint") int srcY,
        @NativeType("GLint") int srcZ,
        @NativeType("GLuint") @Unsigned int dstName,
        @NativeType("GLenum") int dstTarget,
        @NativeType("GLint") int dstLevel,
        @NativeType("GLint") int dstX,
        @NativeType("GLint") int dstY,
        @NativeType("GLint") int dstZ,
        @NativeType("GLsizei") int srcWidth,
        @NativeType("GLsizei") int srcHeight,
        @NativeType("GLsizei") int srcDepth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyImageSubData);
        try {
            hFunction.invokeExact(
                srcName,
                srcTarget,
                srcLevel,
                srcX,
                srcY,
                srcZ,
                dstName,
                dstTarget,
                dstLevel,
                dstX,
                dstY,
                dstZ,
                srcWidth,
                srcHeight,
                srcDepth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyMultiTexImage1DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyMultiTexImage1DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                internalformat,
                x,
                y,
                width,
                border
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyMultiTexImage2DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyMultiTexImage2DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                internalformat,
                x,
                y,
                width,
                height,
                border
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyMultiTexSubImage1DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyMultiTexSubImage1DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                x,
                y,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyMultiTexSubImage2DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyMultiTexSubImage2DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                yoffset,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyMultiTexSubImage3DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyMultiTexSubImage3DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyNamedBufferSubData(
        @NativeType("GLuint") @Unsigned int readBuffer,
        @NativeType("GLuint") @Unsigned int writeBuffer,
        @NativeType("GLintptr") long readOffset,
        @NativeType("GLintptr") long writeOffset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyNamedBufferSubData);
        try {
            hFunction.invokeExact(
                readBuffer,
                writeBuffer,
                MemorySegment.ofAddress(readOffset),
                MemorySegment.ofAddress(writeOffset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyPathNV(
        @NativeType("GLuint") @Unsigned int resultPath,
        @NativeType("GLuint") @Unsigned int srcPath
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyPathNV);
        try {
            hFunction.invokeExact(
                resultPath,
                srcPath
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTexImage1D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTexImage1D);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                x,
                y,
                width,
                border
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTexImage2D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTexImage2D);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                x,
                y,
                width,
                height,
                border
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTexSubImage1D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTexSubImage1D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                x,
                y,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTexSubImage2D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTexSubImage2D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTexSubImage3D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTexSubImage3D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTextureImage1DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTextureImage1DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                internalformat,
                x,
                y,
                width,
                border
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTextureImage2DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTextureImage2DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                internalformat,
                x,
                y,
                width,
                height,
                border
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTextureSubImage1D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTextureSubImage1D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                x,
                y,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTextureSubImage1DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTextureSubImage1DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                x,
                y,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTextureSubImage2D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTextureSubImage2D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTextureSubImage2DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTextureSubImage2DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                yoffset,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTextureSubImage3D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTextureSubImage3D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                zoffset,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyTextureSubImage3DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyTextureSubImage3DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void coverFillPathInstancedNV(
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLenum") int pathNameType,
        @Pointer(comment="void*") @NotNull MemorySegment paths,
        @NativeType("GLuint") @Unsigned int pathBase,
        @NativeType("GLenum") int coverMode,
        @NativeType("GLenum") int transformType,
        @Nullable @Pointer(comment="GLfloat") FloatPtr transformValues
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCoverFillPathInstancedNV);
        try {
            hFunction.invokeExact(
                numPaths,
                pathNameType,
                paths,
                pathBase,
                coverMode,
                transformType,
                (MemorySegment) (transformValues != null ? transformValues.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void coverFillPathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int coverMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCoverFillPathNV);
        try {
            hFunction.invokeExact(
                path,
                coverMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void coverStrokePathInstancedNV(
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLenum") int pathNameType,
        @Pointer(comment="void*") @NotNull MemorySegment paths,
        @NativeType("GLuint") @Unsigned int pathBase,
        @NativeType("GLenum") int coverMode,
        @NativeType("GLenum") int transformType,
        @Nullable @Pointer(comment="GLfloat") FloatPtr transformValues
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCoverStrokePathInstancedNV);
        try {
            hFunction.invokeExact(
                numPaths,
                pathNameType,
                paths,
                pathBase,
                coverMode,
                transformType,
                (MemorySegment) (transformValues != null ? transformValues.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void coverStrokePathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int coverMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCoverStrokePathNV);
        try {
            hFunction.invokeExact(
                path,
                coverMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void coverageModulationNV(
        @NativeType("GLenum") int components
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCoverageModulationNV);
        try {
            hFunction.invokeExact(
                components
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void coverageModulationTableNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCoverageModulationTableNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createBuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateBuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createCommandListsNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr lists
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateCommandListsNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (lists != null ? lists.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createFramebuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr framebuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateFramebuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (framebuffers != null ? framebuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createPerfQueryINTEL(
        @NativeType("GLuint") @Unsigned int queryId,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr queryHandle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreatePerfQueryINTEL);
        try {
            hFunction.invokeExact(
                queryId,
                (MemorySegment) (queryHandle != null ? queryHandle.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int createProgram() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateProgram);
        try {
            return (int) hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createProgramPipelines(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pipelines
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateProgramPipelines);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (pipelines != null ? pipelines.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createQueries(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateQueries);
        try {
            hFunction.invokeExact(
                target,
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createRenderbuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr renderbuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateRenderbuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (renderbuffers != null ? renderbuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createSamplers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr samplers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateSamplers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (samplers != null ? samplers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int createShader(
        @NativeType("GLenum") int type
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateShader);
        try {
            return (int) hFunction.invokeExact(
                type
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int createShaderProgramEXT(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLchar") BytePtr string
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateShaderProgramEXT);
        try {
            return (int) hFunction.invokeExact(
                type,
                (MemorySegment) (string != null ? string.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int createShaderProgramv(
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int count,
        @Nullable PointerPtr strings
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateShaderProgramv);
        try {
            return (int) hFunction.invokeExact(
                type,
                count,
                (MemorySegment) (strings != null ? strings.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int createShaderProgramvEXT(
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int count,
        @Nullable PointerPtr strings
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateShaderProgramvEXT);
        try {
            return (int) hFunction.invokeExact(
                type,
                count,
                (MemorySegment) (strings != null ? strings.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createStatesNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr states
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateStatesNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (states != null ? states.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Nullable GLsync createSyncFromCLeventARB(
        @Pointer(comment="_cl_context*") @NotNull MemorySegment context,
        @Pointer(comment="_cl_event*") @NotNull MemorySegment event,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateSyncFromCLeventARB);
        try {
            MemorySegment s = (MemorySegment) hFunction.invokeExact(
                context,
                event,
                flags
            );
            return s.equals(MemorySegment.NULL) ? null : new GLsync(s);
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createTextures(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr textures
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateTextures);
        try {
            hFunction.invokeExact(
                target,
                n,
                (MemorySegment) (textures != null ? textures.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createTransformFeedbacks(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateTransformFeedbacks);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createVertexArrays(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr arrays
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateVertexArrays);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (arrays != null ? arrays.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void cullFace(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCullFace);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageCallback(
        @Pointer(comment="GLDEBUGPROC") @NotNull MemorySegment callback,
        @Pointer(comment="void*") @NotNull MemorySegment userParam
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageCallback);
        try {
            hFunction.invokeExact(
                callback,
                userParam
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageCallbackARB(
        @Pointer(comment="GLDEBUGPROCARB") @NotNull MemorySegment callback,
        @Pointer(comment="void*") @NotNull MemorySegment userParam
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageCallbackARB);
        try {
            hFunction.invokeExact(
                callback,
                userParam
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageCallbackKHR(
        @Pointer(comment="GLDEBUGPROCKHR") @NotNull MemorySegment callback,
        @Pointer(comment="void*") @NotNull MemorySegment userParam
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageCallbackKHR);
        try {
            hFunction.invokeExact(
                callback,
                userParam
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageControl(
        @NativeType("GLenum") int source,
        @NativeType("GLenum") int type,
        @NativeType("GLenum") int severity,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids,
        @NativeType("GLboolean") @Unsigned byte enabled
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageControl);
        try {
            hFunction.invokeExact(
                source,
                type,
                severity,
                count,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL),
                enabled
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageControlARB(
        @NativeType("GLenum") int source,
        @NativeType("GLenum") int type,
        @NativeType("GLenum") int severity,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids,
        @NativeType("GLboolean") @Unsigned byte enabled
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageControlARB);
        try {
            hFunction.invokeExact(
                source,
                type,
                severity,
                count,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL),
                enabled
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageControlKHR(
        @NativeType("GLenum") int source,
        @NativeType("GLenum") int type,
        @NativeType("GLenum") int severity,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids,
        @NativeType("GLboolean") @Unsigned byte enabled
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageControlKHR);
        try {
            hFunction.invokeExact(
                source,
                type,
                severity,
                count,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL),
                enabled
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageInsert(
        @NativeType("GLenum") int source,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int severity,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr buf
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageInsert);
        try {
            hFunction.invokeExact(
                source,
                type,
                id,
                severity,
                length,
                (MemorySegment) (buf != null ? buf.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageInsertARB(
        @NativeType("GLenum") int source,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int severity,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr buf
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageInsertARB);
        try {
            hFunction.invokeExact(
                source,
                type,
                id,
                severity,
                length,
                (MemorySegment) (buf != null ? buf.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageInsertKHR(
        @NativeType("GLenum") int source,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int severity,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr buf
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageInsertKHR);
        try {
            hFunction.invokeExact(
                source,
                type,
                id,
                severity,
                length,
                (MemorySegment) (buf != null ? buf.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteBuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteBuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteCommandListsNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr lists
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteCommandListsNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (lists != null ? lists.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteFramebuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr framebuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteFramebuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (framebuffers != null ? framebuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteNamedStringARB(
        @NativeType("GLint") int namelen,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteNamedStringARB);
        try {
            hFunction.invokeExact(
                namelen,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deletePathsNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLsizei") int range
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeletePathsNV);
        try {
            hFunction.invokeExact(
                path,
                range
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deletePerfMonitorsAMD(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr monitors
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeletePerfMonitorsAMD);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (monitors != null ? monitors.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deletePerfQueryINTEL(
        @NativeType("GLuint") @Unsigned int queryHandle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeletePerfQueryINTEL);
        try {
            hFunction.invokeExact(
                queryHandle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteProgram(
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteProgram);
        try {
            hFunction.invokeExact(
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteProgramPipelines(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pipelines
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteProgramPipelines);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (pipelines != null ? pipelines.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteProgramPipelinesEXT(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pipelines
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteProgramPipelinesEXT);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (pipelines != null ? pipelines.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteQueries(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteQueries);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteRenderbuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr renderbuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteRenderbuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (renderbuffers != null ? renderbuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteSamplers(
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr samplers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteSamplers);
        try {
            hFunction.invokeExact(
                count,
                (MemorySegment) (samplers != null ? samplers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteShader(
        @NativeType("GLuint") @Unsigned int shader
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteShader);
        try {
            hFunction.invokeExact(
                shader
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteStatesNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr states
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteStatesNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (states != null ? states.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteSync(
        @Nullable GLsync sync
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteSync);
        try {
            hFunction.invokeExact(
                (MemorySegment) (sync != null ? sync.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteTextures(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr textures
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteTextures);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (textures != null ? textures.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteTransformFeedbacks(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteTransformFeedbacks);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteVertexArrays(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr arrays
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteVertexArrays);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (arrays != null ? arrays.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthBoundsdNV(
        @NativeType("GLdouble") double zmin,
        @NativeType("GLdouble") double zmax
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthBoundsdNV);
        try {
            hFunction.invokeExact(
                zmin,
                zmax
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthFunc(
        @NativeType("GLenum") int func
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthFunc);
        try {
            hFunction.invokeExact(
                func
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthMask(
        @NativeType("GLboolean") @Unsigned byte flag
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthMask);
        try {
            hFunction.invokeExact(
                flag
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthRange(
        @NativeType("GLdouble") double n,
        @NativeType("GLdouble") double f
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthRange);
        try {
            hFunction.invokeExact(
                n,
                f
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthRangeArraydvNV(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthRangeArraydvNV);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthRangeArrayv(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthRangeArrayv);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthRangeIndexed(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double n,
        @NativeType("GLdouble") double f
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthRangeIndexed);
        try {
            hFunction.invokeExact(
                index,
                n,
                f
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthRangeIndexeddNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double n,
        @NativeType("GLdouble") double f
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthRangeIndexeddNV);
        try {
            hFunction.invokeExact(
                index,
                n,
                f
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthRangedNV(
        @NativeType("GLdouble") double zNear,
        @NativeType("GLdouble") double zFar
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthRangedNV);
        try {
            hFunction.invokeExact(
                zNear,
                zFar
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthRangef(
        @NativeType("GLfloat") float n,
        @NativeType("GLfloat") float f
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthRangef);
        try {
            hFunction.invokeExact(
                n,
                f
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void detachShader(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int shader
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDetachShader);
        try {
            hFunction.invokeExact(
                program,
                shader
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disable(
        @NativeType("GLenum") int cap
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisable);
        try {
            hFunction.invokeExact(
                cap
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableClientStateIndexedEXT(
        @NativeType("GLenum") int array,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableClientStateIndexedEXT);
        try {
            hFunction.invokeExact(
                array,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableClientStateiEXT(
        @NativeType("GLenum") int array,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableClientStateiEXT);
        try {
            hFunction.invokeExact(
                array,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableIndexedEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableIndexedEXT);
        try {
            hFunction.invokeExact(
                target,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableVertexArrayAttrib(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableVertexArrayAttrib);
        try {
            hFunction.invokeExact(
                vaobj,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableVertexArrayAttribEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableVertexArrayAttribEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableVertexArrayEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLenum") int array
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableVertexArrayEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                array
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableVertexAttribArray(
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableVertexAttribArray);
        try {
            hFunction.invokeExact(
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disablei(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisablei);
        try {
            hFunction.invokeExact(
                target,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void dispatchCompute(
        @NativeType("GLuint") @Unsigned int num_groups_x,
        @NativeType("GLuint") @Unsigned int num_groups_y,
        @NativeType("GLuint") @Unsigned int num_groups_z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDispatchCompute);
        try {
            hFunction.invokeExact(
                num_groups_x,
                num_groups_y,
                num_groups_z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void dispatchComputeGroupSizeARB(
        @NativeType("GLuint") @Unsigned int num_groups_x,
        @NativeType("GLuint") @Unsigned int num_groups_y,
        @NativeType("GLuint") @Unsigned int num_groups_z,
        @NativeType("GLuint") @Unsigned int group_size_x,
        @NativeType("GLuint") @Unsigned int group_size_y,
        @NativeType("GLuint") @Unsigned int group_size_z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDispatchComputeGroupSizeARB);
        try {
            hFunction.invokeExact(
                num_groups_x,
                num_groups_y,
                num_groups_z,
                group_size_x,
                group_size_y,
                group_size_z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void dispatchComputeIndirect(
        @NativeType("GLintptr") long indirect
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDispatchComputeIndirect);
        try {
            hFunction.invokeExact(
                MemorySegment.ofAddress(indirect)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawArrays(
        @NativeType("GLenum") int mode,
        @NativeType("GLint") int first,
        @NativeType("GLsizei") int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawArrays);
        try {
            hFunction.invokeExact(
                mode,
                first,
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawArraysIndirect(
        @NativeType("GLenum") int mode,
        @Pointer(comment="void*") @NotNull MemorySegment indirect
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawArraysIndirect);
        try {
            hFunction.invokeExact(
                mode,
                indirect
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawArraysInstanced(
        @NativeType("GLenum") int mode,
        @NativeType("GLint") int first,
        @NativeType("GLsizei") int count,
        @NativeType("GLsizei") int instancecount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawArraysInstanced);
        try {
            hFunction.invokeExact(
                mode,
                first,
                count,
                instancecount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawArraysInstancedARB(
        @NativeType("GLenum") int mode,
        @NativeType("GLint") int first,
        @NativeType("GLsizei") int count,
        @NativeType("GLsizei") int primcount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawArraysInstancedARB);
        try {
            hFunction.invokeExact(
                mode,
                first,
                count,
                primcount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawArraysInstancedBaseInstance(
        @NativeType("GLenum") int mode,
        @NativeType("GLint") int first,
        @NativeType("GLsizei") int count,
        @NativeType("GLsizei") int instancecount,
        @NativeType("GLuint") @Unsigned int baseinstance
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawArraysInstancedBaseInstance);
        try {
            hFunction.invokeExact(
                mode,
                first,
                count,
                instancecount,
                baseinstance
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawArraysInstancedEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLint") int start,
        @NativeType("GLsizei") int count,
        @NativeType("GLsizei") int primcount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawArraysInstancedEXT);
        try {
            hFunction.invokeExact(
                mode,
                start,
                count,
                primcount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawBuffer(
        @NativeType("GLenum") int buf
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawBuffer);
        try {
            hFunction.invokeExact(
                buf
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawBuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLenum") IntPtr bufs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawBuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (bufs != null ? bufs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawCommandsAddressNV(
        @NativeType("GLenum") int primitiveMode,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr indirects,
        @Nullable @Pointer(comment="GLsizei") IntPtr sizes,
        @NativeType("GLuint") @Unsigned int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawCommandsAddressNV);
        try {
            hFunction.invokeExact(
                primitiveMode,
                (MemorySegment) (indirects != null ? indirects.segment() : MemorySegment.NULL),
                (MemorySegment) (sizes != null ? sizes.segment() : MemorySegment.NULL),
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawCommandsNV(
        @NativeType("GLenum") int primitiveMode,
        @NativeType("GLuint") @Unsigned int buffer,
        @Nullable @Pointer(comment="GLintptr") PointerPtr indirects,
        @Nullable @Pointer(comment="GLsizei") IntPtr sizes,
        @NativeType("GLuint") @Unsigned int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawCommandsNV);
        try {
            hFunction.invokeExact(
                primitiveMode,
                buffer,
                (MemorySegment) (indirects != null ? indirects.segment() : MemorySegment.NULL),
                (MemorySegment) (sizes != null ? sizes.segment() : MemorySegment.NULL),
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawCommandsStatesAddressNV(
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr indirects,
        @Nullable @Pointer(comment="GLsizei") IntPtr sizes,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr states,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr fbos,
        @NativeType("GLuint") @Unsigned int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawCommandsStatesAddressNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (indirects != null ? indirects.segment() : MemorySegment.NULL),
                (MemorySegment) (sizes != null ? sizes.segment() : MemorySegment.NULL),
                (MemorySegment) (states != null ? states.segment() : MemorySegment.NULL),
                (MemorySegment) (fbos != null ? fbos.segment() : MemorySegment.NULL),
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawCommandsStatesNV(
        @NativeType("GLuint") @Unsigned int buffer,
        @Nullable @Pointer(comment="GLintptr") PointerPtr indirects,
        @Nullable @Pointer(comment="GLsizei") IntPtr sizes,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr states,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr fbos,
        @NativeType("GLuint") @Unsigned int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawCommandsStatesNV);
        try {
            hFunction.invokeExact(
                buffer,
                (MemorySegment) (indirects != null ? indirects.segment() : MemorySegment.NULL),
                (MemorySegment) (sizes != null ? sizes.segment() : MemorySegment.NULL),
                (MemorySegment) (states != null ? states.segment() : MemorySegment.NULL),
                (MemorySegment) (fbos != null ? fbos.segment() : MemorySegment.NULL),
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElements(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElements);
        try {
            hFunction.invokeExact(
                mode,
                count,
                type,
                indices
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElementsBaseVertex(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices,
        @NativeType("GLint") int basevertex
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElementsBaseVertex);
        try {
            hFunction.invokeExact(
                mode,
                count,
                type,
                indices,
                basevertex
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElementsIndirect(
        @NativeType("GLenum") int mode,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indirect
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElementsIndirect);
        try {
            hFunction.invokeExact(
                mode,
                type,
                indirect
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElementsInstanced(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices,
        @NativeType("GLsizei") int instancecount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElementsInstanced);
        try {
            hFunction.invokeExact(
                mode,
                count,
                type,
                indices,
                instancecount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElementsInstancedARB(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices,
        @NativeType("GLsizei") int primcount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElementsInstancedARB);
        try {
            hFunction.invokeExact(
                mode,
                count,
                type,
                indices,
                primcount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElementsInstancedBaseInstance(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices,
        @NativeType("GLsizei") int instancecount,
        @NativeType("GLuint") @Unsigned int baseinstance
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElementsInstancedBaseInstance);
        try {
            hFunction.invokeExact(
                mode,
                count,
                type,
                indices,
                instancecount,
                baseinstance
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElementsInstancedBaseVertex(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices,
        @NativeType("GLsizei") int instancecount,
        @NativeType("GLint") int basevertex
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElementsInstancedBaseVertex);
        try {
            hFunction.invokeExact(
                mode,
                count,
                type,
                indices,
                instancecount,
                basevertex
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElementsInstancedBaseVertexBaseInstance(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices,
        @NativeType("GLsizei") int instancecount,
        @NativeType("GLint") int basevertex,
        @NativeType("GLuint") @Unsigned int baseinstance
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElementsInstancedBaseVertexBaseInstance);
        try {
            hFunction.invokeExact(
                mode,
                count,
                type,
                indices,
                instancecount,
                basevertex,
                baseinstance
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawElementsInstancedEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices,
        @NativeType("GLsizei") int primcount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawElementsInstancedEXT);
        try {
            hFunction.invokeExact(
                mode,
                count,
                type,
                indices,
                primcount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawMeshTasksIndirectNV(
        @NativeType("GLintptr") long indirect
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawMeshTasksIndirectNV);
        try {
            hFunction.invokeExact(
                MemorySegment.ofAddress(indirect)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawMeshTasksNV(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLuint") @Unsigned int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawMeshTasksNV);
        try {
            hFunction.invokeExact(
                first,
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawRangeElements(
        @NativeType("GLenum") int mode,
        @NativeType("GLuint") @Unsigned int start,
        @NativeType("GLuint") @Unsigned int end,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawRangeElements);
        try {
            hFunction.invokeExact(
                mode,
                start,
                end,
                count,
                type,
                indices
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawRangeElementsBaseVertex(
        @NativeType("GLenum") int mode,
        @NativeType("GLuint") @Unsigned int start,
        @NativeType("GLuint") @Unsigned int end,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indices,
        @NativeType("GLint") int basevertex
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawRangeElementsBaseVertex);
        try {
            hFunction.invokeExact(
                mode,
                start,
                end,
                count,
                type,
                indices,
                basevertex
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawTransformFeedback(
        @NativeType("GLenum") int mode,
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawTransformFeedback);
        try {
            hFunction.invokeExact(
                mode,
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawTransformFeedbackInstanced(
        @NativeType("GLenum") int mode,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLsizei") int instancecount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawTransformFeedbackInstanced);
        try {
            hFunction.invokeExact(
                mode,
                id,
                instancecount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawTransformFeedbackStream(
        @NativeType("GLenum") int mode,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLuint") @Unsigned int stream
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawTransformFeedbackStream);
        try {
            hFunction.invokeExact(
                mode,
                id,
                stream
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawTransformFeedbackStreamInstanced(
        @NativeType("GLenum") int mode,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLuint") @Unsigned int stream,
        @NativeType("GLsizei") int instancecount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawTransformFeedbackStreamInstanced);
        try {
            hFunction.invokeExact(
                mode,
                id,
                stream,
                instancecount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawVkImageNV(
        @NativeType("GLuint64") @Unsigned long vkImage,
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLfloat") float x0,
        @NativeType("GLfloat") float y0,
        @NativeType("GLfloat") float x1,
        @NativeType("GLfloat") float y1,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float s0,
        @NativeType("GLfloat") float t0,
        @NativeType("GLfloat") float s1,
        @NativeType("GLfloat") float t1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawVkImageNV);
        try {
            hFunction.invokeExact(
                vkImage,
                sampler,
                x0,
                y0,
                x1,
                y1,
                z,
                s0,
                t0,
                s1,
                t1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void EGLImageTargetTexStorageEXT(
        @NativeType("GLenum") int target,
        @Nullable GLeglImageOES image,
        @Nullable @Pointer(comment="GLint") IntPtr attrib_list
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEGLImageTargetTexStorageEXT);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (image != null ? image.segment() : MemorySegment.NULL),
                (MemorySegment) (attrib_list != null ? attrib_list.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void EGLImageTargetTextureStorageEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @Nullable GLeglImageOES image,
        @Nullable @Pointer(comment="GLint") IntPtr attrib_list
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEGLImageTargetTextureStorageEXT);
        try {
            hFunction.invokeExact(
                texture,
                (MemorySegment) (image != null ? image.segment() : MemorySegment.NULL),
                (MemorySegment) (attrib_list != null ? attrib_list.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void edgeFlagFormatNV(
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEdgeFlagFormatNV);
        try {
            hFunction.invokeExact(
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enable(
        @NativeType("GLenum") int cap
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnable);
        try {
            hFunction.invokeExact(
                cap
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableClientStateIndexedEXT(
        @NativeType("GLenum") int array,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableClientStateIndexedEXT);
        try {
            hFunction.invokeExact(
                array,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableClientStateiEXT(
        @NativeType("GLenum") int array,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableClientStateiEXT);
        try {
            hFunction.invokeExact(
                array,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableIndexedEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableIndexedEXT);
        try {
            hFunction.invokeExact(
                target,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableVertexArrayAttrib(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableVertexArrayAttrib);
        try {
            hFunction.invokeExact(
                vaobj,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableVertexArrayAttribEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableVertexArrayAttribEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableVertexArrayEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLenum") int array
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableVertexArrayEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                array
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableVertexAttribArray(
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableVertexAttribArray);
        try {
            hFunction.invokeExact(
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enablei(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnablei);
        try {
            hFunction.invokeExact(
                target,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endConditionalRender() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndConditionalRender);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endConditionalRenderNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndConditionalRenderNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endPerfMonitorAMD(
        @NativeType("GLuint") @Unsigned int monitor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndPerfMonitorAMD);
        try {
            hFunction.invokeExact(
                monitor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endPerfQueryINTEL(
        @NativeType("GLuint") @Unsigned int queryHandle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndPerfQueryINTEL);
        try {
            hFunction.invokeExact(
                queryHandle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endQuery(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndQuery);
        try {
            hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endQueryIndexed(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndQueryIndexed);
        try {
            hFunction.invokeExact(
                target,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endTransformFeedback() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndTransformFeedback);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evaluateDepthValuesARB() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvaluateDepthValuesARB);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Nullable GLsync fenceSync(
        @NativeType("GLenum") int condition,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFenceSync);
        try {
            MemorySegment s = (MemorySegment) hFunction.invokeExact(
                condition,
                flags
            );
            return s.equals(MemorySegment.NULL) ? null : new GLsync(s);
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void finish() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFinish);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void flush() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFlush);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void flushMappedBufferRange(
        @NativeType("GLenum") int target,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFlushMappedBufferRange);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(length)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void flushMappedNamedBufferRange(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFlushMappedNamedBufferRange);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(length)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void flushMappedNamedBufferRangeEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFlushMappedNamedBufferRangeEXT);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(length)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogCoordFormatNV(
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogCoordFormatNV);
        try {
            hFunction.invokeExact(
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fragmentCoverageColorNV(
        @NativeType("GLuint") @Unsigned int color
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFragmentCoverageColorNV);
        try {
            hFunction.invokeExact(
                color
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferDrawBufferEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferDrawBufferEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferDrawBuffersEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLenum") IntPtr bufs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferDrawBuffersEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                n,
                (MemorySegment) (bufs != null ? bufs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferParameteri(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferParameteri);
        try {
            hFunction.invokeExact(
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferParameteriMESA(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferParameteriMESA);
        try {
            hFunction.invokeExact(
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferReadBufferEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferReadBufferEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferRenderbuffer(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int renderbuffertarget,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferRenderbuffer);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                renderbuffertarget,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferSampleLocationsfvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int start,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferSampleLocationsfvARB);
        try {
            hFunction.invokeExact(
                target,
                start,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferSampleLocationsfvNV(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int start,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferSampleLocationsfvNV);
        try {
            hFunction.invokeExact(
                target,
                start,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTexture(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTexture);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTexture1D(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTexture1D);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                textarget,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTexture2D(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTexture2D);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                textarget,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTexture3D(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int zoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTexture3D);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                textarget,
                texture,
                level,
                zoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTextureARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTextureARB);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTextureFaceARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int face
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTextureFaceARB);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                texture,
                level,
                face
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTextureLayer(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int layer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTextureLayer);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                texture,
                level,
                layer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTextureLayerARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int layer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTextureLayerARB);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                texture,
                level,
                layer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTextureMultiviewOVR(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int baseViewIndex,
        @NativeType("GLsizei") int numViews
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTextureMultiviewOVR);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                texture,
                level,
                baseViewIndex,
                numViews
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void frontFace(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFrontFace);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genBuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenBuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genFramebuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr framebuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenFramebuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (framebuffers != null ? framebuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int genPathsNV(
        @NativeType("GLsizei") int range
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenPathsNV);
        try {
            return (int) hFunction.invokeExact(
                range
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genPerfMonitorsAMD(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr monitors
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenPerfMonitorsAMD);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (monitors != null ? monitors.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genProgramPipelines(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pipelines
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenProgramPipelines);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (pipelines != null ? pipelines.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genProgramPipelinesEXT(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pipelines
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenProgramPipelinesEXT);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (pipelines != null ? pipelines.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genQueries(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenQueries);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genRenderbuffers(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr renderbuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenRenderbuffers);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (renderbuffers != null ? renderbuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genSamplers(
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr samplers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenSamplers);
        try {
            hFunction.invokeExact(
                count,
                (MemorySegment) (samplers != null ? samplers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genTextures(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr textures
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenTextures);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (textures != null ? textures.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genTransformFeedbacks(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenTransformFeedbacks);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genVertexArrays(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr arrays
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenVertexArrays);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (arrays != null ? arrays.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void generateMipmap(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenerateMipmap);
        try {
            hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void generateMultiTexMipmapEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenerateMultiTexMipmapEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void generateTextureMipmap(
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenerateTextureMipmap);
        try {
            hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void generateTextureMipmapEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenerateTextureMipmapEXT);
        try {
            hFunction.invokeExact(
                texture,
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveAtomicCounterBufferiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int bufferIndex,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveAtomicCounterBufferiv);
        try {
            hFunction.invokeExact(
                program,
                bufferIndex,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveAttrib(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLint") IntPtr size,
        @Nullable @Pointer(comment="GLenum") IntPtr type,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveAttrib);
        try {
            hFunction.invokeExact(
                program,
                index,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (size != null ? size.segment() : MemorySegment.NULL),
                (MemorySegment) (type != null ? type.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveSubroutineName(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int shadertype,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveSubroutineName);
        try {
            hFunction.invokeExact(
                program,
                shadertype,
                index,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveSubroutineUniformName(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int shadertype,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveSubroutineUniformName);
        try {
            hFunction.invokeExact(
                program,
                shadertype,
                index,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveSubroutineUniformiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int shadertype,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveSubroutineUniformiv);
        try {
            hFunction.invokeExact(
                program,
                shadertype,
                index,
                pname,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveUniform(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLint") IntPtr size,
        @Nullable @Pointer(comment="GLenum") IntPtr type,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveUniform);
        try {
            hFunction.invokeExact(
                program,
                index,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (size != null ? size.segment() : MemorySegment.NULL),
                (MemorySegment) (type != null ? type.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveUniformBlockName(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int uniformBlockIndex,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr uniformBlockName
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveUniformBlockName);
        try {
            hFunction.invokeExact(
                program,
                uniformBlockIndex,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (uniformBlockName != null ? uniformBlockName.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveUniformBlockiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int uniformBlockIndex,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveUniformBlockiv);
        try {
            hFunction.invokeExact(
                program,
                uniformBlockIndex,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveUniformName(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int uniformIndex,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr uniformName
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveUniformName);
        try {
            hFunction.invokeExact(
                program,
                uniformIndex,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (uniformName != null ? uniformName.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveUniformsiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLsizei") int uniformCount,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr uniformIndices,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveUniformsiv);
        try {
            hFunction.invokeExact(
                program,
                uniformCount,
                (MemorySegment) (uniformIndices != null ? uniformIndices.segment() : MemorySegment.NULL),
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getAttachedShaders(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLsizei") int maxCount,
        @Nullable @Pointer(comment="GLsizei") IntPtr count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr shaders
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetAttachedShaders);
        try {
            hFunction.invokeExact(
                program,
                maxCount,
                (MemorySegment) (count != null ? count.segment() : MemorySegment.NULL),
                (MemorySegment) (shaders != null ? shaders.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getAttribLocation(
        @NativeType("GLuint") @Unsigned int program,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetAttribLocation);
        try {
            return (int) hFunction.invokeExact(
                program,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBooleanIndexedvEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLboolean") @Unsigned BytePtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBooleanIndexedvEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBooleani_v(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLboolean") @Unsigned BytePtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBooleani_v);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBooleanv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLboolean") @Unsigned BytePtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBooleanv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBufferParameteri64v(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint64") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBufferParameteri64v);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBufferParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBufferParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBufferParameterui64vNV(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBufferParameterui64vNV);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBufferPointerv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBufferPointerv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBufferSubData(
        @NativeType("GLenum") int target,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBufferSubData);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int getCommandHeaderNV(
        @NativeType("GLenum") int tokenID,
        @NativeType("GLuint") @Unsigned int size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetCommandHeaderNV);
        try {
            return (int) hFunction.invokeExact(
                tokenID,
                size
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getCompressedMultiTexImageEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int lod,
        @Pointer(comment="void*") @NotNull MemorySegment img
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetCompressedMultiTexImageEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                lod,
                img
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getCompressedTexImage(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @Pointer(comment="void*") @NotNull MemorySegment img
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetCompressedTexImage);
        try {
            hFunction.invokeExact(
                target,
                level,
                img
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getCompressedTextureImage(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetCompressedTextureImage);
        try {
            hFunction.invokeExact(
                texture,
                level,
                bufSize,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getCompressedTextureImageEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int lod,
        @Pointer(comment="void*") @NotNull MemorySegment img
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetCompressedTextureImageEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                lod,
                img
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getCompressedTextureSubImage(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetCompressedTextureSubImage);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                bufSize,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getCoverageModulationTableNV(
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetCoverageModulationTableNV);
        try {
            hFunction.invokeExact(
                bufSize,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int getDebugMessageLog(
        @NativeType("GLuint") @Unsigned int count,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLenum") IntPtr sources,
        @Nullable @Pointer(comment="GLenum") IntPtr types,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids,
        @Nullable @Pointer(comment="GLenum") IntPtr severities,
        @Nullable @Pointer(comment="GLsizei") IntPtr lengths,
        @Nullable @Pointer(comment="GLchar") BytePtr messageLog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetDebugMessageLog);
        try {
            return (int) hFunction.invokeExact(
                count,
                bufSize,
                (MemorySegment) (sources != null ? sources.segment() : MemorySegment.NULL),
                (MemorySegment) (types != null ? types.segment() : MemorySegment.NULL),
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL),
                (MemorySegment) (severities != null ? severities.segment() : MemorySegment.NULL),
                (MemorySegment) (lengths != null ? lengths.segment() : MemorySegment.NULL),
                (MemorySegment) (messageLog != null ? messageLog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int getDebugMessageLogARB(
        @NativeType("GLuint") @Unsigned int count,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLenum") IntPtr sources,
        @Nullable @Pointer(comment="GLenum") IntPtr types,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids,
        @Nullable @Pointer(comment="GLenum") IntPtr severities,
        @Nullable @Pointer(comment="GLsizei") IntPtr lengths,
        @Nullable @Pointer(comment="GLchar") BytePtr messageLog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetDebugMessageLogARB);
        try {
            return (int) hFunction.invokeExact(
                count,
                bufSize,
                (MemorySegment) (sources != null ? sources.segment() : MemorySegment.NULL),
                (MemorySegment) (types != null ? types.segment() : MemorySegment.NULL),
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL),
                (MemorySegment) (severities != null ? severities.segment() : MemorySegment.NULL),
                (MemorySegment) (lengths != null ? lengths.segment() : MemorySegment.NULL),
                (MemorySegment) (messageLog != null ? messageLog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int getDebugMessageLogKHR(
        @NativeType("GLuint") @Unsigned int count,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLenum") IntPtr sources,
        @Nullable @Pointer(comment="GLenum") IntPtr types,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids,
        @Nullable @Pointer(comment="GLenum") IntPtr severities,
        @Nullable @Pointer(comment="GLsizei") IntPtr lengths,
        @Nullable @Pointer(comment="GLchar") BytePtr messageLog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetDebugMessageLogKHR);
        try {
            return (int) hFunction.invokeExact(
                count,
                bufSize,
                (MemorySegment) (sources != null ? sources.segment() : MemorySegment.NULL),
                (MemorySegment) (types != null ? types.segment() : MemorySegment.NULL),
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL),
                (MemorySegment) (severities != null ? severities.segment() : MemorySegment.NULL),
                (MemorySegment) (lengths != null ? lengths.segment() : MemorySegment.NULL),
                (MemorySegment) (messageLog != null ? messageLog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getDoubleIndexedvEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetDoubleIndexedvEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getDoublei_v(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetDoublei_v);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getDoublei_vEXT(
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetDoublei_vEXT);
        try {
            hFunction.invokeExact(
                pname,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getDoublev(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetDoublev);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int getError() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetError);
        try {
            return (int) hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFirstPerfQueryIdINTEL(
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr queryId
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFirstPerfQueryIdINTEL);
        try {
            hFunction.invokeExact(
                (MemorySegment) (queryId != null ? queryId.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFloatIndexedvEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFloatIndexedvEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFloati_v(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFloati_v);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFloati_vEXT(
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFloati_vEXT);
        try {
            hFunction.invokeExact(
                pname,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFloatv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFloatv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getFragDataIndex(
        @NativeType("GLuint") @Unsigned int program,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFragDataIndex);
        try {
            return (int) hFunction.invokeExact(
                program,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getFragDataLocation(
        @NativeType("GLuint") @Unsigned int program,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFragDataLocation);
        try {
            return (int) hFunction.invokeExact(
                program,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFramebufferAttachmentParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFramebufferAttachmentParameteriv);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFramebufferParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFramebufferParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFramebufferParameterivEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFramebufferParameterivEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFramebufferParameterivMESA(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFramebufferParameterivMESA);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int getGraphicsResetStatus() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetGraphicsResetStatus);
        try {
            return (int) hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int getGraphicsResetStatusARB() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetGraphicsResetStatusARB);
        try {
            return (int) hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int getGraphicsResetStatusKHR() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetGraphicsResetStatusKHR);
        try {
            return (int) hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint64") @Unsigned long getImageHandleARB(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLboolean") @Unsigned byte layered,
        @NativeType("GLint") int layer,
        @NativeType("GLenum") int format
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetImageHandleARB);
        try {
            return (long) hFunction.invokeExact(
                texture,
                level,
                layered,
                layer,
                format
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint64") @Unsigned long getImageHandleNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLboolean") @Unsigned byte layered,
        @NativeType("GLint") int layer,
        @NativeType("GLenum") int format
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetImageHandleNV);
        try {
            return (long) hFunction.invokeExact(
                texture,
                level,
                layered,
                layer,
                format
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getInteger64i_v(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint64") LongPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetInteger64i_v);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getInteger64v(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint64") LongPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetInteger64v);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getIntegerIndexedvEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetIntegerIndexedvEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getIntegeri_v(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetIntegeri_v);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getIntegerui64i_vNV(
        @NativeType("GLenum") int value,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr result
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetIntegerui64i_vNV);
        try {
            hFunction.invokeExact(
                value,
                index,
                (MemorySegment) (result != null ? result.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getIntegerui64vNV(
        @NativeType("GLenum") int value,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr result
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetIntegerui64vNV);
        try {
            hFunction.invokeExact(
                value,
                (MemorySegment) (result != null ? result.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getIntegerv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetIntegerv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getInternalformatSampleivNV(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int pname,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetInternalformatSampleivNV);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                samples,
                pname,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getInternalformati64v(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLenum") int pname,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetInternalformati64v);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                pname,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getInternalformativ(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLenum") int pname,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetInternalformativ);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                pname,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMemoryObjectDetachedResourcesuivNV(
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMemoryObjectDetachedResourcesuivNV);
        try {
            hFunction.invokeExact(
                memory,
                pname,
                first,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexEnvfvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexEnvfvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexEnvivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexEnvivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexGendvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexGendvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexGenfvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexGenfvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexGenivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexGenivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexImageEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexImageEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexLevelParameterfvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexLevelParameterfvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexLevelParameterivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexLevelParameterivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexParameterIivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexParameterIivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexParameterIuivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexParameterIuivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexParameterfvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexParameterfvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultiTexParameterivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultiTexParameterivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultisamplefv(
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr val
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultisamplefv);
        try {
            hFunction.invokeExact(
                pname,
                index,
                (MemorySegment) (val != null ? val.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedBufferParameteri64v(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint64") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedBufferParameteri64v);
        try {
            hFunction.invokeExact(
                buffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedBufferParameteriv(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedBufferParameteriv);
        try {
            hFunction.invokeExact(
                buffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedBufferParameterivEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedBufferParameterivEXT);
        try {
            hFunction.invokeExact(
                buffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedBufferParameterui64vNV(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedBufferParameterui64vNV);
        try {
            hFunction.invokeExact(
                buffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedBufferPointerv(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedBufferPointerv);
        try {
            hFunction.invokeExact(
                buffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedBufferPointervEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedBufferPointervEXT);
        try {
            hFunction.invokeExact(
                buffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedBufferSubData(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedBufferSubData);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedBufferSubDataEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedBufferSubDataEXT);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedFramebufferAttachmentParameteriv(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedFramebufferAttachmentParameteriv);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedFramebufferAttachmentParameterivEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedFramebufferAttachmentParameterivEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedFramebufferParameteriv(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedFramebufferParameteriv);
        try {
            hFunction.invokeExact(
                framebuffer,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedFramebufferParameterivEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedFramebufferParameterivEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedProgramLocalParameterIivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedProgramLocalParameterIivEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedProgramLocalParameterIuivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedProgramLocalParameterIuivEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedProgramLocalParameterdvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedProgramLocalParameterdvEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedProgramLocalParameterfvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedProgramLocalParameterfvEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedProgramStringEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Pointer(comment="void*") @NotNull MemorySegment string
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedProgramStringEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                pname,
                string
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedProgramivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedProgramivEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedRenderbufferParameteriv(
        @NativeType("GLuint") @Unsigned int renderbuffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedRenderbufferParameteriv);
        try {
            hFunction.invokeExact(
                renderbuffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedRenderbufferParameterivEXT(
        @NativeType("GLuint") @Unsigned int renderbuffer,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedRenderbufferParameterivEXT);
        try {
            hFunction.invokeExact(
                renderbuffer,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedStringARB(
        @NativeType("GLint") int namelen,
        @Nullable @Pointer(comment="GLchar") BytePtr name,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLint") IntPtr stringlen,
        @Nullable @Pointer(comment="GLchar") BytePtr string
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedStringARB);
        try {
            hFunction.invokeExact(
                namelen,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL),
                bufSize,
                (MemorySegment) (stringlen != null ? stringlen.segment() : MemorySegment.NULL),
                (MemorySegment) (string != null ? string.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNamedStringivARB(
        @NativeType("GLint") int namelen,
        @Nullable @Pointer(comment="GLchar") BytePtr name,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNamedStringivARB);
        try {
            hFunction.invokeExact(
                namelen,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL),
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getNextPerfQueryIdINTEL(
        @NativeType("GLuint") @Unsigned int queryId,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr nextQueryId
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetNextPerfQueryIdINTEL);
        try {
            hFunction.invokeExact(
                queryId,
                (MemorySegment) (nextQueryId != null ? nextQueryId.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getObjectLabel(
        @NativeType("GLenum") int identifier,
        @NativeType("GLuint") @Unsigned int name,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetObjectLabel);
        try {
            hFunction.invokeExact(
                identifier,
                name,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getObjectLabelEXT(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int object,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetObjectLabelEXT);
        try {
            hFunction.invokeExact(
                type,
                object,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getObjectLabelKHR(
        @NativeType("GLenum") int identifier,
        @NativeType("GLuint") @Unsigned int name,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetObjectLabelKHR);
        try {
            hFunction.invokeExact(
                identifier,
                name,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getObjectPtrLabel(
        @Pointer(comment="void*") @NotNull MemorySegment ptr,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetObjectPtrLabel);
        try {
            hFunction.invokeExact(
                ptr,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getObjectPtrLabelKHR(
        @Pointer(comment="void*") @NotNull MemorySegment ptr,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetObjectPtrLabelKHR);
        try {
            hFunction.invokeExact(
                ptr,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathCommandsNV(
        @NativeType("GLuint") @Unsigned int path,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr commands
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathCommandsNV);
        try {
            hFunction.invokeExact(
                path,
                (MemorySegment) (commands != null ? commands.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathCoordsNV(
        @NativeType("GLuint") @Unsigned int path,
        @Nullable @Pointer(comment="GLfloat") FloatPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathCoordsNV);
        try {
            hFunction.invokeExact(
                path,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathDashArrayNV(
        @NativeType("GLuint") @Unsigned int path,
        @Nullable @Pointer(comment="GLfloat") FloatPtr dashArray
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathDashArrayNV);
        try {
            hFunction.invokeExact(
                path,
                (MemorySegment) (dashArray != null ? dashArray.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLfloat") float getPathLengthNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLsizei") int startSegment,
        @NativeType("GLsizei") int numSegments
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathLengthNV);
        try {
            return (float) hFunction.invokeExact(
                path,
                startSegment,
                numSegments
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathMetricRangeNV(
        @NativeType("GLbitfield") @Unsigned int metricQueryMask,
        @NativeType("GLuint") @Unsigned int firstPathName,
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLsizei") int stride,
        @Nullable @Pointer(comment="GLfloat") FloatPtr metrics
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathMetricRangeNV);
        try {
            hFunction.invokeExact(
                metricQueryMask,
                firstPathName,
                numPaths,
                stride,
                (MemorySegment) (metrics != null ? metrics.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathMetricsNV(
        @NativeType("GLbitfield") @Unsigned int metricQueryMask,
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLenum") int pathNameType,
        @Pointer(comment="void*") @NotNull MemorySegment paths,
        @NativeType("GLuint") @Unsigned int pathBase,
        @NativeType("GLsizei") int stride,
        @Nullable @Pointer(comment="GLfloat") FloatPtr metrics
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathMetricsNV);
        try {
            hFunction.invokeExact(
                metricQueryMask,
                numPaths,
                pathNameType,
                paths,
                pathBase,
                stride,
                (MemorySegment) (metrics != null ? metrics.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathParameterfvNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathParameterfvNV);
        try {
            hFunction.invokeExact(
                path,
                pname,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathParameterivNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathParameterivNV);
        try {
            hFunction.invokeExact(
                path,
                pname,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathSpacingNV(
        @NativeType("GLenum") int pathListMode,
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLenum") int pathNameType,
        @Pointer(comment="void*") @NotNull MemorySegment paths,
        @NativeType("GLuint") @Unsigned int pathBase,
        @NativeType("GLfloat") float advanceScale,
        @NativeType("GLfloat") float kerningScale,
        @NativeType("GLenum") int transformType,
        @Nullable @Pointer(comment="GLfloat") FloatPtr returnedSpacing
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathSpacingNV);
        try {
            hFunction.invokeExact(
                pathListMode,
                numPaths,
                pathNameType,
                paths,
                pathBase,
                advanceScale,
                kerningScale,
                transformType,
                (MemorySegment) (returnedSpacing != null ? returnedSpacing.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfCounterInfoINTEL(
        @NativeType("GLuint") @Unsigned int queryId,
        @NativeType("GLuint") @Unsigned int counterId,
        @NativeType("GLuint") @Unsigned int counterNameLength,
        @Nullable @Pointer(comment="GLchar") BytePtr counterName,
        @NativeType("GLuint") @Unsigned int counterDescLength,
        @Nullable @Pointer(comment="GLchar") BytePtr counterDesc,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr counterOffset,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr counterDataSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr counterTypeEnum,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr counterDataTypeEnum,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr rawCounterMaxValue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfCounterInfoINTEL);
        try {
            hFunction.invokeExact(
                queryId,
                counterId,
                counterNameLength,
                (MemorySegment) (counterName != null ? counterName.segment() : MemorySegment.NULL),
                counterDescLength,
                (MemorySegment) (counterDesc != null ? counterDesc.segment() : MemorySegment.NULL),
                (MemorySegment) (counterOffset != null ? counterOffset.segment() : MemorySegment.NULL),
                (MemorySegment) (counterDataSize != null ? counterDataSize.segment() : MemorySegment.NULL),
                (MemorySegment) (counterTypeEnum != null ? counterTypeEnum.segment() : MemorySegment.NULL),
                (MemorySegment) (counterDataTypeEnum != null ? counterDataTypeEnum.segment() : MemorySegment.NULL),
                (MemorySegment) (rawCounterMaxValue != null ? rawCounterMaxValue.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfMonitorCounterDataAMD(
        @NativeType("GLuint") @Unsigned int monitor,
        @NativeType("GLenum") int pname,
        @NativeType("GLsizei") int dataSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr data,
        @Nullable @Pointer(comment="GLint") IntPtr bytesWritten
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfMonitorCounterDataAMD);
        try {
            hFunction.invokeExact(
                monitor,
                pname,
                dataSize,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL),
                (MemorySegment) (bytesWritten != null ? bytesWritten.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfMonitorCounterInfoAMD(
        @NativeType("GLuint") @Unsigned int group,
        @NativeType("GLuint") @Unsigned int counter,
        @NativeType("GLenum") int pname,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfMonitorCounterInfoAMD);
        try {
            hFunction.invokeExact(
                group,
                counter,
                pname,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfMonitorCounterStringAMD(
        @NativeType("GLuint") @Unsigned int group,
        @NativeType("GLuint") @Unsigned int counter,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr counterString
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfMonitorCounterStringAMD);
        try {
            hFunction.invokeExact(
                group,
                counter,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (counterString != null ? counterString.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfMonitorCountersAMD(
        @NativeType("GLuint") @Unsigned int group,
        @Nullable @Pointer(comment="GLint") IntPtr numCounters,
        @Nullable @Pointer(comment="GLint") IntPtr maxActiveCounters,
        @NativeType("GLsizei") int counterSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr counters
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfMonitorCountersAMD);
        try {
            hFunction.invokeExact(
                group,
                (MemorySegment) (numCounters != null ? numCounters.segment() : MemorySegment.NULL),
                (MemorySegment) (maxActiveCounters != null ? maxActiveCounters.segment() : MemorySegment.NULL),
                counterSize,
                (MemorySegment) (counters != null ? counters.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfMonitorGroupStringAMD(
        @NativeType("GLuint") @Unsigned int group,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr groupString
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfMonitorGroupStringAMD);
        try {
            hFunction.invokeExact(
                group,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (groupString != null ? groupString.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfMonitorGroupsAMD(
        @Nullable @Pointer(comment="GLint") IntPtr numGroups,
        @NativeType("GLsizei") int groupsSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr groups
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfMonitorGroupsAMD);
        try {
            hFunction.invokeExact(
                (MemorySegment) (numGroups != null ? numGroups.segment() : MemorySegment.NULL),
                groupsSize,
                (MemorySegment) (groups != null ? groups.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfQueryDataINTEL(
        @NativeType("GLuint") @Unsigned int queryHandle,
        @NativeType("GLuint") @Unsigned int flags,
        @NativeType("GLsizei") int dataSize,
        @Pointer(comment="void*") @NotNull MemorySegment data,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr bytesWritten
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfQueryDataINTEL);
        try {
            hFunction.invokeExact(
                queryHandle,
                flags,
                dataSize,
                data,
                (MemorySegment) (bytesWritten != null ? bytesWritten.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfQueryIdByNameINTEL(
        @Nullable @Pointer(comment="GLchar") BytePtr queryName,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr queryId
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfQueryIdByNameINTEL);
        try {
            hFunction.invokeExact(
                (MemorySegment) (queryName != null ? queryName.segment() : MemorySegment.NULL),
                (MemorySegment) (queryId != null ? queryId.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPerfQueryInfoINTEL(
        @NativeType("GLuint") @Unsigned int queryId,
        @NativeType("GLuint") @Unsigned int queryNameLength,
        @Nullable @Pointer(comment="GLchar") BytePtr queryName,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr dataSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr noCounters,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr noInstances,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr capsMask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPerfQueryInfoINTEL);
        try {
            hFunction.invokeExact(
                queryId,
                queryNameLength,
                (MemorySegment) (queryName != null ? queryName.segment() : MemorySegment.NULL),
                (MemorySegment) (dataSize != null ? dataSize.segment() : MemorySegment.NULL),
                (MemorySegment) (noCounters != null ? noCounters.segment() : MemorySegment.NULL),
                (MemorySegment) (noInstances != null ? noInstances.segment() : MemorySegment.NULL),
                (MemorySegment) (capsMask != null ? capsMask.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPointerIndexedvEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable PointerPtr data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPointerIndexedvEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (data != null ? data.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPointeri_vEXT(
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable PointerPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPointeri_vEXT);
        try {
            hFunction.invokeExact(
                pname,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPointerv(
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPointerv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPointervKHR(
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPointervKHR);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramBinary(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLenum") IntPtr binaryFormat,
        @Pointer(comment="void*") @NotNull MemorySegment binary
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramBinary);
        try {
            hFunction.invokeExact(
                program,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (binaryFormat != null ? binaryFormat.segment() : MemorySegment.NULL),
                binary
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramInfoLog(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr infoLog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramInfoLog);
        try {
            hFunction.invokeExact(
                program,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (infoLog != null ? infoLog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramInterfaceiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int programInterface,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramInterfaceiv);
        try {
            hFunction.invokeExact(
                program,
                programInterface,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramPipelineInfoLog(
        @NativeType("GLuint") @Unsigned int pipeline,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr infoLog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramPipelineInfoLog);
        try {
            hFunction.invokeExact(
                pipeline,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (infoLog != null ? infoLog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramPipelineInfoLogEXT(
        @NativeType("GLuint") @Unsigned int pipeline,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr infoLog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramPipelineInfoLogEXT);
        try {
            hFunction.invokeExact(
                pipeline,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (infoLog != null ? infoLog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramPipelineiv(
        @NativeType("GLuint") @Unsigned int pipeline,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramPipelineiv);
        try {
            hFunction.invokeExact(
                pipeline,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramPipelineivEXT(
        @NativeType("GLuint") @Unsigned int pipeline,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramPipelineivEXT);
        try {
            hFunction.invokeExact(
                pipeline,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int getProgramResourceIndex(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int programInterface,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramResourceIndex);
        try {
            return (int) hFunction.invokeExact(
                program,
                programInterface,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getProgramResourceLocation(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int programInterface,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramResourceLocation);
        try {
            return (int) hFunction.invokeExact(
                program,
                programInterface,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getProgramResourceLocationIndex(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int programInterface,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramResourceLocationIndex);
        try {
            return (int) hFunction.invokeExact(
                program,
                programInterface,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramResourceName(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int programInterface,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramResourceName);
        try {
            hFunction.invokeExact(
                program,
                programInterface,
                index,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramResourcefvNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int programInterface,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int propCount,
        @Nullable @Pointer(comment="GLenum") IntPtr props,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramResourcefvNV);
        try {
            hFunction.invokeExact(
                program,
                programInterface,
                index,
                propCount,
                (MemorySegment) (props != null ? props.segment() : MemorySegment.NULL),
                count,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramResourceiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int programInterface,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int propCount,
        @Nullable @Pointer(comment="GLenum") IntPtr props,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramResourceiv);
        try {
            hFunction.invokeExact(
                program,
                programInterface,
                index,
                propCount,
                (MemorySegment) (props != null ? props.segment() : MemorySegment.NULL),
                count,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramStageiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int shadertype,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramStageiv);
        try {
            hFunction.invokeExact(
                program,
                shadertype,
                pname,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramiv);
        try {
            hFunction.invokeExact(
                program,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryBufferObjecti64v(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryBufferObjecti64v);
        try {
            hFunction.invokeExact(
                id,
                buffer,
                pname,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryBufferObjectiv(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryBufferObjectiv);
        try {
            hFunction.invokeExact(
                id,
                buffer,
                pname,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryBufferObjectui64v(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryBufferObjectui64v);
        try {
            hFunction.invokeExact(
                id,
                buffer,
                pname,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryBufferObjectuiv(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int pname,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryBufferObjectuiv);
        try {
            hFunction.invokeExact(
                id,
                buffer,
                pname,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryIndexediv(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryIndexediv);
        try {
            hFunction.invokeExact(
                target,
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryObjecti64v(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint64") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryObjecti64v);
        try {
            hFunction.invokeExact(
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryObjectiv(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryObjectiv);
        try {
            hFunction.invokeExact(
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryObjectui64v(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryObjectui64v);
        try {
            hFunction.invokeExact(
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryObjectuiv(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryObjectuiv);
        try {
            hFunction.invokeExact(
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryiv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryiv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getRenderbufferParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetRenderbufferParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getSamplerParameterIiv(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSamplerParameterIiv);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getSamplerParameterIuiv(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSamplerParameterIuiv);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getSamplerParameterfv(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSamplerParameterfv);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getSamplerParameteriv(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSamplerParameteriv);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getShaderInfoLog(
        @NativeType("GLuint") @Unsigned int shader,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr infoLog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetShaderInfoLog);
        try {
            hFunction.invokeExact(
                shader,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (infoLog != null ? infoLog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getShaderPrecisionFormat(
        @NativeType("GLenum") int shadertype,
        @NativeType("GLenum") int precisiontype,
        @Nullable @Pointer(comment="GLint") IntPtr range,
        @Nullable @Pointer(comment="GLint") IntPtr precision
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetShaderPrecisionFormat);
        try {
            hFunction.invokeExact(
                shadertype,
                precisiontype,
                (MemorySegment) (range != null ? range.segment() : MemorySegment.NULL),
                (MemorySegment) (precision != null ? precision.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getShaderSource(
        @NativeType("GLuint") @Unsigned int shader,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLchar") BytePtr source
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetShaderSource);
        try {
            hFunction.invokeExact(
                shader,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (source != null ? source.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getShaderiv(
        @NativeType("GLuint") @Unsigned int shader,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetShaderiv);
        try {
            hFunction.invokeExact(
                shader,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getShadingRateImagePaletteNV(
        @NativeType("GLuint") @Unsigned int viewport,
        @NativeType("GLuint") @Unsigned int entry,
        @Nullable @Pointer(comment="GLenum") IntPtr rate
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetShadingRateImagePaletteNV);
        try {
            hFunction.invokeExact(
                viewport,
                entry,
                (MemorySegment) (rate != null ? rate.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getShadingRateSampleLocationivNV(
        @NativeType("GLenum") int rate,
        @NativeType("GLuint") @Unsigned int samples,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr location
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetShadingRateSampleLocationivNV);
        try {
            hFunction.invokeExact(
                rate,
                samples,
                index,
                (MemorySegment) (location != null ? location.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLushort") @Unsigned short getStageIndexNV(
        @NativeType("GLenum") int shadertype
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetStageIndexNV);
        try {
            return (short) hFunction.invokeExact(
                shadertype
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr getString(
        @NativeType("GLenum") int name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetString);
        try {
            MemorySegment s = (MemorySegment) hFunction.invokeExact(
                name
            );
            return s.equals(MemorySegment.NULL) ? null : new BytePtr(s);
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr getStringi(
        @NativeType("GLenum") int name,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetStringi);
        try {
            MemorySegment s = (MemorySegment) hFunction.invokeExact(
                name,
                index
            );
            return s.equals(MemorySegment.NULL) ? null : new BytePtr(s);
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int getSubroutineIndex(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int shadertype,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSubroutineIndex);
        try {
            return (int) hFunction.invokeExact(
                program,
                shadertype,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getSubroutineUniformLocation(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int shadertype,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSubroutineUniformLocation);
        try {
            return (int) hFunction.invokeExact(
                program,
                shadertype,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getSynciv(
        @Nullable GLsync sync,
        @NativeType("GLenum") int pname,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLint") IntPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSynciv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (sync != null ? sync.segment() : MemorySegment.NULL),
                pname,
                count,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexImage(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexImage);
        try {
            hFunction.invokeExact(
                target,
                level,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexLevelParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexLevelParameterfv);
        try {
            hFunction.invokeExact(
                target,
                level,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexLevelParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexLevelParameteriv);
        try {
            hFunction.invokeExact(
                target,
                level,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexParameterIiv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexParameterIiv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexParameterIuiv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexParameterIuiv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexParameterfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint64") @Unsigned long getTextureHandleARB(
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureHandleARB);
        try {
            return (long) hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint64") @Unsigned long getTextureHandleNV(
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureHandleNV);
        try {
            return (long) hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureImage(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureImage);
        try {
            hFunction.invokeExact(
                texture,
                level,
                format,
                type,
                bufSize,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureImageEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureImageEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureLevelParameterfv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureLevelParameterfv);
        try {
            hFunction.invokeExact(
                texture,
                level,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureLevelParameterfvEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureLevelParameterfvEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureLevelParameteriv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureLevelParameteriv);
        try {
            hFunction.invokeExact(
                texture,
                level,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureLevelParameterivEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureLevelParameterivEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureParameterIiv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureParameterIiv);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureParameterIivEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureParameterIivEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureParameterIuiv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureParameterIuiv);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureParameterIuivEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureParameterIuivEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureParameterfv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureParameterfv);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureParameterfvEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureParameterfvEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureParameteriv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureParameteriv);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureParameterivEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureParameterivEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint64") @Unsigned long getTextureSamplerHandleARB(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLuint") @Unsigned int sampler
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureSamplerHandleARB);
        try {
            return (long) hFunction.invokeExact(
                texture,
                sampler
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint64") @Unsigned long getTextureSamplerHandleNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLuint") @Unsigned int sampler
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureSamplerHandleNV);
        try {
            return (long) hFunction.invokeExact(
                texture,
                sampler
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTextureSubImage(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTextureSubImage);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                type,
                bufSize,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTransformFeedbackVarying(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLsizei") IntPtr size,
        @Nullable @Pointer(comment="GLenum") IntPtr type,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTransformFeedbackVarying);
        try {
            hFunction.invokeExact(
                program,
                index,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (size != null ? size.segment() : MemorySegment.NULL),
                (MemorySegment) (type != null ? type.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTransformFeedbacki64_v(
        @NativeType("GLuint") @Unsigned int xfb,
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint64") LongPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTransformFeedbacki64_v);
        try {
            hFunction.invokeExact(
                xfb,
                pname,
                index,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTransformFeedbacki_v(
        @NativeType("GLuint") @Unsigned int xfb,
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTransformFeedbacki_v);
        try {
            hFunction.invokeExact(
                xfb,
                pname,
                index,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTransformFeedbackiv(
        @NativeType("GLuint") @Unsigned int xfb,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTransformFeedbackiv);
        try {
            hFunction.invokeExact(
                xfb,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int getUniformBlockIndex(
        @NativeType("GLuint") @Unsigned int program,
        @Nullable @Pointer(comment="GLchar") BytePtr uniformBlockName
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformBlockIndex);
        try {
            return (int) hFunction.invokeExact(
                program,
                (MemorySegment) (uniformBlockName != null ? uniformBlockName.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformIndices(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLsizei") int uniformCount,
        @Nullable PointerPtr uniformNames,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr uniformIndices
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformIndices);
        try {
            hFunction.invokeExact(
                program,
                uniformCount,
                (MemorySegment) (uniformNames != null ? uniformNames.segment() : MemorySegment.NULL),
                (MemorySegment) (uniformIndices != null ? uniformIndices.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getUniformLocation(
        @NativeType("GLuint") @Unsigned int program,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformLocation);
        try {
            return (int) hFunction.invokeExact(
                program,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformSubroutineuiv(
        @NativeType("GLenum") int shadertype,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformSubroutineuiv);
        try {
            hFunction.invokeExact(
                shadertype,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformdv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformdv);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformfv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformfv);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformi64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLint64") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformi64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformiv);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformui64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformui64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformuiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformuiv);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexArrayIndexed64iv(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint64") LongPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexArrayIndexed64iv);
        try {
            hFunction.invokeExact(
                vaobj,
                index,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexArrayIndexediv(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexArrayIndexediv);
        try {
            hFunction.invokeExact(
                vaobj,
                index,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexArrayIntegeri_vEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexArrayIntegeri_vEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                index,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexArrayIntegervEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexArrayIntegervEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexArrayPointeri_vEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexArrayPointeri_vEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                index,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexArrayPointervEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexArrayPointervEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexArrayiv(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexArrayiv);
        try {
            hFunction.invokeExact(
                vaobj,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribIiv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribIiv);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribIuiv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribIuiv);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribLdv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribLdv);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribLi64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribLi64vNV);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribLui64vARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribLui64vARB);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribLui64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribLui64vNV);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribPointerv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribPointerv);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (pointer != null ? pointer.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribdv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribdv);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribfv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribfv);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribiv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribiv);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="GLVULKANPROCNV") @NotNull MemorySegment getVkProcAddrNV(
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVkProcAddrNV);
        try {
            return (MemorySegment) hFunction.invokeExact(
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnCompressedTexImage(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int lod,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnCompressedTexImage);
        try {
            hFunction.invokeExact(
                target,
                lod,
                bufSize,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnCompressedTexImageARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int lod,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment img
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnCompressedTexImageARB);
        try {
            hFunction.invokeExact(
                target,
                lod,
                bufSize,
                img
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnTexImage(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnTexImage);
        try {
            hFunction.invokeExact(
                target,
                level,
                format,
                type,
                bufSize,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnTexImageARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment img
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnTexImageARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                format,
                type,
                bufSize,
                img
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformdv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformdv);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformdvARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformdvARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformfv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformfv);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformfvARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformfvARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformfvKHR(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformfvKHR);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformi64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLint64") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformi64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformiv);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformivARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformivARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformivKHR(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformivKHR);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformui64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformui64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformuiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformuiv);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformuivARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformuivARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnUniformuivKHR(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnUniformuivKHR);
        try {
            hFunction.invokeExact(
                program,
                location,
                bufSize,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void hint(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glHint);
        try {
            hFunction.invokeExact(
                target,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexFormatNV(
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexFormatNV);
        try {
            hFunction.invokeExact(
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void insertEventMarkerEXT(
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr marker
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInsertEventMarkerEXT);
        try {
            hFunction.invokeExact(
                length,
                (MemorySegment) (marker != null ? marker.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void interpolatePathsNV(
        @NativeType("GLuint") @Unsigned int resultPath,
        @NativeType("GLuint") @Unsigned int pathA,
        @NativeType("GLuint") @Unsigned int pathB,
        @NativeType("GLfloat") float weight
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInterpolatePathsNV);
        try {
            hFunction.invokeExact(
                resultPath,
                pathA,
                pathB,
                weight
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void invalidateBufferData(
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInvalidateBufferData);
        try {
            hFunction.invokeExact(
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void invalidateBufferSubData(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInvalidateBufferSubData);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(length)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void invalidateFramebuffer(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int numAttachments,
        @Nullable @Pointer(comment="GLenum") IntPtr attachments
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInvalidateFramebuffer);
        try {
            hFunction.invokeExact(
                target,
                numAttachments,
                (MemorySegment) (attachments != null ? attachments.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void invalidateNamedFramebufferData(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLsizei") int numAttachments,
        @Nullable @Pointer(comment="GLenum") IntPtr attachments
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInvalidateNamedFramebufferData);
        try {
            hFunction.invokeExact(
                framebuffer,
                numAttachments,
                (MemorySegment) (attachments != null ? attachments.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void invalidateNamedFramebufferSubData(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLsizei") int numAttachments,
        @Nullable @Pointer(comment="GLenum") IntPtr attachments,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInvalidateNamedFramebufferSubData);
        try {
            hFunction.invokeExact(
                framebuffer,
                numAttachments,
                (MemorySegment) (attachments != null ? attachments.segment() : MemorySegment.NULL),
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void invalidateSubFramebuffer(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int numAttachments,
        @Nullable @Pointer(comment="GLenum") IntPtr attachments,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInvalidateSubFramebuffer);
        try {
            hFunction.invokeExact(
                target,
                numAttachments,
                (MemorySegment) (attachments != null ? attachments.segment() : MemorySegment.NULL),
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void invalidateTexImage(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInvalidateTexImage);
        try {
            hFunction.invokeExact(
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void invalidateTexSubImage(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInvalidateTexSubImage);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isBuffer(
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsBuffer);
        try {
            return (byte) hFunction.invokeExact(
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isBufferResidentNV(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsBufferResidentNV);
        try {
            return (byte) hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isCommandListNV(
        @NativeType("GLuint") @Unsigned int list
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsCommandListNV);
        try {
            return (byte) hFunction.invokeExact(
                list
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isEnabled(
        @NativeType("GLenum") int cap
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsEnabled);
        try {
            return (byte) hFunction.invokeExact(
                cap
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isEnabledIndexedEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsEnabledIndexedEXT);
        try {
            return (byte) hFunction.invokeExact(
                target,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isEnabledi(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsEnabledi);
        try {
            return (byte) hFunction.invokeExact(
                target,
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isFramebuffer(
        @NativeType("GLuint") @Unsigned int framebuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsFramebuffer);
        try {
            return (byte) hFunction.invokeExact(
                framebuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isImageHandleResidentARB(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsImageHandleResidentARB);
        try {
            return (byte) hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isImageHandleResidentNV(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsImageHandleResidentNV);
        try {
            return (byte) hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isNamedBufferResidentNV(
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsNamedBufferResidentNV);
        try {
            return (byte) hFunction.invokeExact(
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isNamedStringARB(
        @NativeType("GLint") int namelen,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsNamedStringARB);
        try {
            return (byte) hFunction.invokeExact(
                namelen,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isPathNV(
        @NativeType("GLuint") @Unsigned int path
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsPathNV);
        try {
            return (byte) hFunction.invokeExact(
                path
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isPointInFillPathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLuint") @Unsigned int mask,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsPointInFillPathNV);
        try {
            return (byte) hFunction.invokeExact(
                path,
                mask,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isPointInStrokePathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsPointInStrokePathNV);
        try {
            return (byte) hFunction.invokeExact(
                path,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isProgram(
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsProgram);
        try {
            return (byte) hFunction.invokeExact(
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isProgramPipeline(
        @NativeType("GLuint") @Unsigned int pipeline
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsProgramPipeline);
        try {
            return (byte) hFunction.invokeExact(
                pipeline
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isProgramPipelineEXT(
        @NativeType("GLuint") @Unsigned int pipeline
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsProgramPipelineEXT);
        try {
            return (byte) hFunction.invokeExact(
                pipeline
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isQuery(
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsQuery);
        try {
            return (byte) hFunction.invokeExact(
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isRenderbuffer(
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsRenderbuffer);
        try {
            return (byte) hFunction.invokeExact(
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isSampler(
        @NativeType("GLuint") @Unsigned int sampler
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsSampler);
        try {
            return (byte) hFunction.invokeExact(
                sampler
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isShader(
        @NativeType("GLuint") @Unsigned int shader
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsShader);
        try {
            return (byte) hFunction.invokeExact(
                shader
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isStateNV(
        @NativeType("GLuint") @Unsigned int state
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsStateNV);
        try {
            return (byte) hFunction.invokeExact(
                state
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isSync(
        @Nullable GLsync sync
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsSync);
        try {
            return (byte) hFunction.invokeExact(
                (MemorySegment) (sync != null ? sync.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isTexture(
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsTexture);
        try {
            return (byte) hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isTextureHandleResidentARB(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsTextureHandleResidentARB);
        try {
            return (byte) hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isTextureHandleResidentNV(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsTextureHandleResidentNV);
        try {
            return (byte) hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isTransformFeedback(
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsTransformFeedback);
        try {
            return (byte) hFunction.invokeExact(
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isVertexArray(
        @NativeType("GLuint") @Unsigned int array
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsVertexArray);
        try {
            return (byte) hFunction.invokeExact(
                array
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void labelObjectEXT(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int object,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLabelObjectEXT);
        try {
            hFunction.invokeExact(
                type,
                object,
                length,
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lineWidth(
        @NativeType("GLfloat") float width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLineWidth);
        try {
            hFunction.invokeExact(
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void linkProgram(
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLinkProgram);
        try {
            hFunction.invokeExact(
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void listDrawCommandsStatesClientNV(
        @NativeType("GLuint") @Unsigned int list,
        @NativeType("GLuint") @Unsigned int segment,
        @Nullable PointerPtr indirects,
        @Nullable @Pointer(comment="GLsizei") IntPtr sizes,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr states,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr fbos,
        @NativeType("GLuint") @Unsigned int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glListDrawCommandsStatesClientNV);
        try {
            hFunction.invokeExact(
                list,
                segment,
                (MemorySegment) (indirects != null ? indirects.segment() : MemorySegment.NULL),
                (MemorySegment) (sizes != null ? sizes.segment() : MemorySegment.NULL),
                (MemorySegment) (states != null ? states.segment() : MemorySegment.NULL),
                (MemorySegment) (fbos != null ? fbos.segment() : MemorySegment.NULL),
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void logicOp(
        @NativeType("GLenum") int opcode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLogicOp);
        try {
            hFunction.invokeExact(
                opcode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeBufferNonResidentNV(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeBufferNonResidentNV);
        try {
            hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeBufferResidentNV(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeBufferResidentNV);
        try {
            hFunction.invokeExact(
                target,
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeImageHandleNonResidentARB(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeImageHandleNonResidentARB);
        try {
            hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeImageHandleNonResidentNV(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeImageHandleNonResidentNV);
        try {
            hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeImageHandleResidentARB(
        @NativeType("GLuint64") @Unsigned long handle,
        @NativeType("GLenum") int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeImageHandleResidentARB);
        try {
            hFunction.invokeExact(
                handle,
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeImageHandleResidentNV(
        @NativeType("GLuint64") @Unsigned long handle,
        @NativeType("GLenum") int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeImageHandleResidentNV);
        try {
            hFunction.invokeExact(
                handle,
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeNamedBufferNonResidentNV(
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeNamedBufferNonResidentNV);
        try {
            hFunction.invokeExact(
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeNamedBufferResidentNV(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeNamedBufferResidentNV);
        try {
            hFunction.invokeExact(
                buffer,
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeTextureHandleNonResidentARB(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeTextureHandleNonResidentARB);
        try {
            hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeTextureHandleNonResidentNV(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeTextureHandleNonResidentNV);
        try {
            hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeTextureHandleResidentARB(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeTextureHandleResidentARB);
        try {
            hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void makeTextureHandleResidentNV(
        @NativeType("GLuint64") @Unsigned long handle
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMakeTextureHandleResidentNV);
        try {
            hFunction.invokeExact(
                handle
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="void*") @NotNull MemorySegment mapBuffer(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapBuffer);
        try {
            return (MemorySegment) hFunction.invokeExact(
                target,
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="void*") @NotNull MemorySegment mapBufferRange(
        @NativeType("GLenum") int target,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long length,
        @NativeType("GLbitfield") @Unsigned int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapBufferRange);
        try {
            return (MemorySegment) hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(length),
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="void*") @NotNull MemorySegment mapNamedBuffer(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapNamedBuffer);
        try {
            return (MemorySegment) hFunction.invokeExact(
                buffer,
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="void*") @NotNull MemorySegment mapNamedBufferEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapNamedBufferEXT);
        try {
            return (MemorySegment) hFunction.invokeExact(
                buffer,
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="void*") @NotNull MemorySegment mapNamedBufferRange(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long length,
        @NativeType("GLbitfield") @Unsigned int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapNamedBufferRange);
        try {
            return (MemorySegment) hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(length),
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="void*") @NotNull MemorySegment mapNamedBufferRangeEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long length,
        @NativeType("GLbitfield") @Unsigned int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapNamedBufferRangeEXT);
        try {
            return (MemorySegment) hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(length),
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixFrustumEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLdouble") double left,
        @NativeType("GLdouble") double right,
        @NativeType("GLdouble") double bottom,
        @NativeType("GLdouble") double top,
        @NativeType("GLdouble") double zNear,
        @NativeType("GLdouble") double zFar
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixFrustumEXT);
        try {
            hFunction.invokeExact(
                mode,
                left,
                right,
                bottom,
                top,
                zNear,
                zFar
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixLoad3x2fNV(
        @NativeType("GLenum") int matrixMode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixLoad3x2fNV);
        try {
            hFunction.invokeExact(
                matrixMode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixLoad3x3fNV(
        @NativeType("GLenum") int matrixMode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixLoad3x3fNV);
        try {
            hFunction.invokeExact(
                matrixMode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixLoadIdentityEXT(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixLoadIdentityEXT);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixLoadTranspose3x3fNV(
        @NativeType("GLenum") int matrixMode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixLoadTranspose3x3fNV);
        try {
            hFunction.invokeExact(
                matrixMode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixLoadTransposedEXT(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixLoadTransposedEXT);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixLoadTransposefEXT(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixLoadTransposefEXT);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixLoaddEXT(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixLoaddEXT);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixLoadfEXT(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixLoadfEXT);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixMult3x2fNV(
        @NativeType("GLenum") int matrixMode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixMult3x2fNV);
        try {
            hFunction.invokeExact(
                matrixMode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixMult3x3fNV(
        @NativeType("GLenum") int matrixMode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixMult3x3fNV);
        try {
            hFunction.invokeExact(
                matrixMode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixMultTranspose3x3fNV(
        @NativeType("GLenum") int matrixMode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixMultTranspose3x3fNV);
        try {
            hFunction.invokeExact(
                matrixMode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixMultTransposedEXT(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixMultTransposedEXT);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixMultTransposefEXT(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixMultTransposefEXT);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixMultdEXT(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixMultdEXT);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixMultfEXT(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixMultfEXT);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixOrthoEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLdouble") double left,
        @NativeType("GLdouble") double right,
        @NativeType("GLdouble") double bottom,
        @NativeType("GLdouble") double top,
        @NativeType("GLdouble") double zNear,
        @NativeType("GLdouble") double zFar
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixOrthoEXT);
        try {
            hFunction.invokeExact(
                mode,
                left,
                right,
                bottom,
                top,
                zNear,
                zFar
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixPopEXT(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixPopEXT);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixPushEXT(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixPushEXT);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixRotatedEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLdouble") double angle,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixRotatedEXT);
        try {
            hFunction.invokeExact(
                mode,
                angle,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixRotatefEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLfloat") float angle,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixRotatefEXT);
        try {
            hFunction.invokeExact(
                mode,
                angle,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixScaledEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixScaledEXT);
        try {
            hFunction.invokeExact(
                mode,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixScalefEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixScalefEXT);
        try {
            hFunction.invokeExact(
                mode,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixTranslatedEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixTranslatedEXT);
        try {
            hFunction.invokeExact(
                mode,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixTranslatefEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixTranslatefEXT);
        try {
            hFunction.invokeExact(
                mode,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void maxShaderCompilerThreadsARB(
        @NativeType("GLuint") @Unsigned int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMaxShaderCompilerThreadsARB);
        try {
            hFunction.invokeExact(
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void maxShaderCompilerThreadsKHR(
        @NativeType("GLuint") @Unsigned int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMaxShaderCompilerThreadsKHR);
        try {
            hFunction.invokeExact(
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void memoryBarrier(
        @NativeType("GLbitfield") @Unsigned int barriers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMemoryBarrier);
        try {
            hFunction.invokeExact(
                barriers
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void memoryBarrierByRegion(
        @NativeType("GLbitfield") @Unsigned int barriers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMemoryBarrierByRegion);
        try {
            hFunction.invokeExact(
                barriers
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void minSampleShading(
        @NativeType("GLfloat") float value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMinSampleShading);
        try {
            hFunction.invokeExact(
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void minSampleShadingARB(
        @NativeType("GLfloat") float value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMinSampleShadingARB);
        try {
            hFunction.invokeExact(
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawArrays(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLint") IntPtr first,
        @Nullable @Pointer(comment="GLsizei") IntPtr count,
        @NativeType("GLsizei") int drawcount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawArrays);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (first != null ? first.segment() : MemorySegment.NULL),
                (MemorySegment) (count != null ? count.segment() : MemorySegment.NULL),
                drawcount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawArraysIndirect(
        @NativeType("GLenum") int mode,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLsizei") int drawcount,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawArraysIndirect);
        try {
            hFunction.invokeExact(
                mode,
                indirect,
                drawcount,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawArraysIndirectBindlessCountNV(
        @NativeType("GLenum") int mode,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLsizei") int drawCount,
        @NativeType("GLsizei") int maxDrawCount,
        @NativeType("GLsizei") int stride,
        @NativeType("GLint") int vertexBufferCount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawArraysIndirectBindlessCountNV);
        try {
            hFunction.invokeExact(
                mode,
                indirect,
                drawCount,
                maxDrawCount,
                stride,
                vertexBufferCount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawArraysIndirectBindlessNV(
        @NativeType("GLenum") int mode,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLsizei") int drawCount,
        @NativeType("GLsizei") int stride,
        @NativeType("GLint") int vertexBufferCount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawArraysIndirectBindlessNV);
        try {
            hFunction.invokeExact(
                mode,
                indirect,
                drawCount,
                stride,
                vertexBufferCount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawArraysIndirectCount(
        @NativeType("GLenum") int mode,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLintptr") long drawcount,
        @NativeType("GLsizei") int maxdrawcount,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawArraysIndirectCount);
        try {
            hFunction.invokeExact(
                mode,
                indirect,
                MemorySegment.ofAddress(drawcount),
                maxdrawcount,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawArraysIndirectCountARB(
        @NativeType("GLenum") int mode,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLintptr") long drawcount,
        @NativeType("GLsizei") int maxdrawcount,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawArraysIndirectCountARB);
        try {
            hFunction.invokeExact(
                mode,
                indirect,
                MemorySegment.ofAddress(drawcount),
                maxdrawcount,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawElements(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLsizei") IntPtr count,
        @NativeType("GLenum") int type,
        @Nullable PointerPtr indices,
        @NativeType("GLsizei") int drawcount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawElements);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (count != null ? count.segment() : MemorySegment.NULL),
                type,
                (MemorySegment) (indices != null ? indices.segment() : MemorySegment.NULL),
                drawcount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawElementsBaseVertex(
        @NativeType("GLenum") int mode,
        @Nullable @Pointer(comment="GLsizei") IntPtr count,
        @NativeType("GLenum") int type,
        @Nullable PointerPtr indices,
        @NativeType("GLsizei") int drawcount,
        @Nullable @Pointer(comment="GLint") IntPtr basevertex
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawElementsBaseVertex);
        try {
            hFunction.invokeExact(
                mode,
                (MemorySegment) (count != null ? count.segment() : MemorySegment.NULL),
                type,
                (MemorySegment) (indices != null ? indices.segment() : MemorySegment.NULL),
                drawcount,
                (MemorySegment) (basevertex != null ? basevertex.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawElementsIndirect(
        @NativeType("GLenum") int mode,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLsizei") int drawcount,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawElementsIndirect);
        try {
            hFunction.invokeExact(
                mode,
                type,
                indirect,
                drawcount,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawElementsIndirectBindlessCountNV(
        @NativeType("GLenum") int mode,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLsizei") int drawCount,
        @NativeType("GLsizei") int maxDrawCount,
        @NativeType("GLsizei") int stride,
        @NativeType("GLint") int vertexBufferCount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawElementsIndirectBindlessCountNV);
        try {
            hFunction.invokeExact(
                mode,
                type,
                indirect,
                drawCount,
                maxDrawCount,
                stride,
                vertexBufferCount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawElementsIndirectBindlessNV(
        @NativeType("GLenum") int mode,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLsizei") int drawCount,
        @NativeType("GLsizei") int stride,
        @NativeType("GLint") int vertexBufferCount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawElementsIndirectBindlessNV);
        try {
            hFunction.invokeExact(
                mode,
                type,
                indirect,
                drawCount,
                stride,
                vertexBufferCount
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawElementsIndirectCount(
        @NativeType("GLenum") int mode,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLintptr") long drawcount,
        @NativeType("GLsizei") int maxdrawcount,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawElementsIndirectCount);
        try {
            hFunction.invokeExact(
                mode,
                type,
                indirect,
                MemorySegment.ofAddress(drawcount),
                maxdrawcount,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawElementsIndirectCountARB(
        @NativeType("GLenum") int mode,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment indirect,
        @NativeType("GLintptr") long drawcount,
        @NativeType("GLsizei") int maxdrawcount,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawElementsIndirectCountARB);
        try {
            hFunction.invokeExact(
                mode,
                type,
                indirect,
                MemorySegment.ofAddress(drawcount),
                maxdrawcount,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawMeshTasksIndirectCountNV(
        @NativeType("GLintptr") long indirect,
        @NativeType("GLintptr") long drawcount,
        @NativeType("GLsizei") int maxdrawcount,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawMeshTasksIndirectCountNV);
        try {
            hFunction.invokeExact(
                MemorySegment.ofAddress(indirect),
                MemorySegment.ofAddress(drawcount),
                maxdrawcount,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiDrawMeshTasksIndirectNV(
        @NativeType("GLintptr") long indirect,
        @NativeType("GLsizei") int drawcount,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiDrawMeshTasksIndirectNV);
        try {
            hFunction.invokeExact(
                MemorySegment.ofAddress(indirect),
                drawcount,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexBufferEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexBufferEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                internalformat,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordPointerEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordPointerEXT);
        try {
            hFunction.invokeExact(
                texunit,
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexEnvfEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexEnvfEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexEnvfvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexEnvfvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexEnviEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexEnviEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexEnvivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexEnvivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexGendEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @NativeType("GLdouble") double param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexGendEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexGendvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexGendvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexGenfEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexGenfEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexGenfvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexGenfvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexGeniEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexGeniEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexGenivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexGenivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexImage1DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexImage1DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                internalformat,
                width,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexImage2DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexImage2DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                internalformat,
                width,
                height,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexImage3DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexImage3DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                internalformat,
                width,
                height,
                depth,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexParameterIivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexParameterIivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexParameterIuivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexParameterIuivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexParameterfEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexParameterfEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexParameterfvEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexParameterfvEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexParameteriEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexParameteriEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexParameterivEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexParameterivEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexRenderbufferEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexRenderbufferEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexSubImage1DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexSubImage1DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                width,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexSubImage2DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexSubImage2DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexSubImage3DEXT(
        @NativeType("GLenum") int texunit,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexSubImage3DEXT);
        try {
            hFunction.invokeExact(
                texunit,
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferAttachMemoryNV(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferAttachMemoryNV);
        try {
            hFunction.invokeExact(
                buffer,
                memory,
                offset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferData(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data,
        @NativeType("GLenum") int usage
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferData);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(size),
                data,
                usage
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferDataEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data,
        @NativeType("GLenum") int usage
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferDataEXT);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(size),
                data,
                usage
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferPageCommitmentARB(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferPageCommitmentARB);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferPageCommitmentEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferPageCommitmentEXT);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferPageCommitmentMemNV(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long memOffset,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferPageCommitmentMemNV);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                memory,
                memOffset,
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferStorage(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferStorage);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(size),
                data,
                flags
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferStorageEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferStorageEXT);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(size),
                data,
                flags
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferSubData(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferSubData);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferSubDataEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferSubDataEXT);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedCopyBufferSubDataEXT(
        @NativeType("GLuint") @Unsigned int readBuffer,
        @NativeType("GLuint") @Unsigned int writeBuffer,
        @NativeType("GLintptr") long readOffset,
        @NativeType("GLintptr") long writeOffset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedCopyBufferSubDataEXT);
        try {
            hFunction.invokeExact(
                readBuffer,
                writeBuffer,
                MemorySegment.ofAddress(readOffset),
                MemorySegment.ofAddress(writeOffset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferDrawBuffer(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int buf
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferDrawBuffer);
        try {
            hFunction.invokeExact(
                framebuffer,
                buf
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferDrawBuffers(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLenum") IntPtr bufs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferDrawBuffers);
        try {
            hFunction.invokeExact(
                framebuffer,
                n,
                (MemorySegment) (bufs != null ? bufs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferParameteri(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferParameteri);
        try {
            hFunction.invokeExact(
                framebuffer,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferParameteriEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferParameteriEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferReadBuffer(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int src
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferReadBuffer);
        try {
            hFunction.invokeExact(
                framebuffer,
                src
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferRenderbuffer(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int renderbuffertarget,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferRenderbuffer);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                renderbuffertarget,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferRenderbufferEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int renderbuffertarget,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferRenderbufferEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                renderbuffertarget,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferSampleLocationsfvARB(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLuint") @Unsigned int start,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferSampleLocationsfvARB);
        try {
            hFunction.invokeExact(
                framebuffer,
                start,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferSampleLocationsfvNV(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLuint") @Unsigned int start,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferSampleLocationsfvNV);
        try {
            hFunction.invokeExact(
                framebuffer,
                start,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTexture(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTexture);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTexture1DEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTexture1DEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                textarget,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTexture2DEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTexture2DEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                textarget,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTexture3DEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int zoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTexture3DEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                textarget,
                texture,
                level,
                zoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTextureEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTextureEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTextureFaceEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int face
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTextureFaceEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                texture,
                level,
                face
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTextureLayer(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int layer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTextureLayer);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                texture,
                level,
                layer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTextureLayerEXT(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int layer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTextureLayerEXT);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                texture,
                level,
                layer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedFramebufferTextureMultiviewOVR(
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int baseViewIndex,
        @NativeType("GLsizei") int numViews
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedFramebufferTextureMultiviewOVR);
        try {
            hFunction.invokeExact(
                framebuffer,
                attachment,
                texture,
                level,
                baseViewIndex,
                numViews
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameter4dEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameter4dEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameter4dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameter4dvEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameter4fEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameter4fEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameter4fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameter4fvEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameterI4iEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z,
        @NativeType("GLint") int w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameterI4iEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameterI4ivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameterI4ivEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameterI4uiEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x,
        @NativeType("GLuint") @Unsigned int y,
        @NativeType("GLuint") @Unsigned int z,
        @NativeType("GLuint") @Unsigned int w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameterI4uiEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameterI4uivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameterI4uivEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParameters4fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParameters4fvEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParametersI4ivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParametersI4ivEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramLocalParametersI4uivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramLocalParametersI4uivEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                index,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedProgramStringEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int len,
        @Pointer(comment="void*") @NotNull MemorySegment string
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedProgramStringEXT);
        try {
            hFunction.invokeExact(
                program,
                target,
                format,
                len,
                string
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedRenderbufferStorage(
        @NativeType("GLuint") @Unsigned int renderbuffer,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedRenderbufferStorage);
        try {
            hFunction.invokeExact(
                renderbuffer,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedRenderbufferStorageEXT(
        @NativeType("GLuint") @Unsigned int renderbuffer,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedRenderbufferStorageEXT);
        try {
            hFunction.invokeExact(
                renderbuffer,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedRenderbufferStorageMultisample(
        @NativeType("GLuint") @Unsigned int renderbuffer,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedRenderbufferStorageMultisample);
        try {
            hFunction.invokeExact(
                renderbuffer,
                samples,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedRenderbufferStorageMultisampleAdvancedAMD(
        @NativeType("GLuint") @Unsigned int renderbuffer,
        @NativeType("GLsizei") int samples,
        @NativeType("GLsizei") int storageSamples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedRenderbufferStorageMultisampleAdvancedAMD);
        try {
            hFunction.invokeExact(
                renderbuffer,
                samples,
                storageSamples,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedRenderbufferStorageMultisampleCoverageEXT(
        @NativeType("GLuint") @Unsigned int renderbuffer,
        @NativeType("GLsizei") int coverageSamples,
        @NativeType("GLsizei") int colorSamples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedRenderbufferStorageMultisampleCoverageEXT);
        try {
            hFunction.invokeExact(
                renderbuffer,
                coverageSamples,
                colorSamples,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedRenderbufferStorageMultisampleEXT(
        @NativeType("GLuint") @Unsigned int renderbuffer,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedRenderbufferStorageMultisampleEXT);
        try {
            hFunction.invokeExact(
                renderbuffer,
                samples,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedStringARB(
        @NativeType("GLenum") int type,
        @NativeType("GLint") int namelen,
        @Nullable @Pointer(comment="GLchar") BytePtr name,
        @NativeType("GLint") int stringlen,
        @Nullable @Pointer(comment="GLchar") BytePtr string
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedStringARB);
        try {
            hFunction.invokeExact(
                type,
                namelen,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL),
                stringlen,
                (MemorySegment) (string != null ? string.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normalFormatNV(
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormalFormatNV);
        try {
            hFunction.invokeExact(
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void objectLabel(
        @NativeType("GLenum") int identifier,
        @NativeType("GLuint") @Unsigned int name,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glObjectLabel);
        try {
            hFunction.invokeExact(
                identifier,
                name,
                length,
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void objectLabelKHR(
        @NativeType("GLenum") int identifier,
        @NativeType("GLuint") @Unsigned int name,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glObjectLabelKHR);
        try {
            hFunction.invokeExact(
                identifier,
                name,
                length,
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void objectPtrLabel(
        @Pointer(comment="void*") @NotNull MemorySegment ptr,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glObjectPtrLabel);
        try {
            hFunction.invokeExact(
                ptr,
                length,
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void objectPtrLabelKHR(
        @Pointer(comment="void*") @NotNull MemorySegment ptr,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr label
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glObjectPtrLabelKHR);
        try {
            hFunction.invokeExact(
                ptr,
                length,
                (MemorySegment) (label != null ? label.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void patchParameterfv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPatchParameterfv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void patchParameteri(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPatchParameteri);
        try {
            hFunction.invokeExact(
                pname,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathCommandsNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLsizei") int numCommands,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr commands,
        @NativeType("GLsizei") int numCoords,
        @NativeType("GLenum") int coordType,
        @Pointer(comment="void*") @NotNull MemorySegment coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathCommandsNV);
        try {
            hFunction.invokeExact(
                path,
                numCommands,
                (MemorySegment) (commands != null ? commands.segment() : MemorySegment.NULL),
                numCoords,
                coordType,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathCoordsNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLsizei") int numCoords,
        @NativeType("GLenum") int coordType,
        @Pointer(comment="void*") @NotNull MemorySegment coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathCoordsNV);
        try {
            hFunction.invokeExact(
                path,
                numCoords,
                coordType,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathCoverDepthFuncNV(
        @NativeType("GLenum") int func
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathCoverDepthFuncNV);
        try {
            hFunction.invokeExact(
                func
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathDashArrayNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLsizei") int dashCount,
        @Nullable @Pointer(comment="GLfloat") FloatPtr dashArray
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathDashArrayNV);
        try {
            hFunction.invokeExact(
                path,
                dashCount,
                (MemorySegment) (dashArray != null ? dashArray.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int pathGlyphIndexArrayNV(
        @NativeType("GLuint") @Unsigned int firstPathName,
        @NativeType("GLenum") int fontTarget,
        @Pointer(comment="void*") @NotNull MemorySegment fontName,
        @NativeType("GLbitfield") @Unsigned int fontStyle,
        @NativeType("GLuint") @Unsigned int firstGlyphIndex,
        @NativeType("GLsizei") int numGlyphs,
        @NativeType("GLuint") @Unsigned int pathParameterTemplate,
        @NativeType("GLfloat") float emScale
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathGlyphIndexArrayNV);
        try {
            return (int) hFunction.invokeExact(
                firstPathName,
                fontTarget,
                fontName,
                fontStyle,
                firstGlyphIndex,
                numGlyphs,
                pathParameterTemplate,
                emScale
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int pathGlyphIndexRangeNV(
        @NativeType("GLenum") int fontTarget,
        @Pointer(comment="void*") @NotNull MemorySegment fontName,
        @NativeType("GLbitfield") @Unsigned int fontStyle,
        @NativeType("GLuint") @Unsigned int pathParameterTemplate,
        @NativeType("GLfloat") float emScale,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr baseAndCount
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathGlyphIndexRangeNV);
        try {
            return (int) hFunction.invokeExact(
                fontTarget,
                fontName,
                fontStyle,
                pathParameterTemplate,
                emScale,
                (MemorySegment) (baseAndCount != null ? baseAndCount.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathGlyphRangeNV(
        @NativeType("GLuint") @Unsigned int firstPathName,
        @NativeType("GLenum") int fontTarget,
        @Pointer(comment="void*") @NotNull MemorySegment fontName,
        @NativeType("GLbitfield") @Unsigned int fontStyle,
        @NativeType("GLuint") @Unsigned int firstGlyph,
        @NativeType("GLsizei") int numGlyphs,
        @NativeType("GLenum") int handleMissingGlyphs,
        @NativeType("GLuint") @Unsigned int pathParameterTemplate,
        @NativeType("GLfloat") float emScale
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathGlyphRangeNV);
        try {
            hFunction.invokeExact(
                firstPathName,
                fontTarget,
                fontName,
                fontStyle,
                firstGlyph,
                numGlyphs,
                handleMissingGlyphs,
                pathParameterTemplate,
                emScale
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathGlyphsNV(
        @NativeType("GLuint") @Unsigned int firstPathName,
        @NativeType("GLenum") int fontTarget,
        @Pointer(comment="void*") @NotNull MemorySegment fontName,
        @NativeType("GLbitfield") @Unsigned int fontStyle,
        @NativeType("GLsizei") int numGlyphs,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment charcodes,
        @NativeType("GLenum") int handleMissingGlyphs,
        @NativeType("GLuint") @Unsigned int pathParameterTemplate,
        @NativeType("GLfloat") float emScale
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathGlyphsNV);
        try {
            hFunction.invokeExact(
                firstPathName,
                fontTarget,
                fontName,
                fontStyle,
                numGlyphs,
                type,
                charcodes,
                handleMissingGlyphs,
                pathParameterTemplate,
                emScale
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int pathMemoryGlyphIndexArrayNV(
        @NativeType("GLuint") @Unsigned int firstPathName,
        @NativeType("GLenum") int fontTarget,
        @NativeType("GLsizeiptr") long fontSize,
        @Pointer(comment="void*") @NotNull MemorySegment fontData,
        @NativeType("GLsizei") int faceIndex,
        @NativeType("GLuint") @Unsigned int firstGlyphIndex,
        @NativeType("GLsizei") int numGlyphs,
        @NativeType("GLuint") @Unsigned int pathParameterTemplate,
        @NativeType("GLfloat") float emScale
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathMemoryGlyphIndexArrayNV);
        try {
            return (int) hFunction.invokeExact(
                firstPathName,
                fontTarget,
                MemorySegment.ofAddress(fontSize),
                fontData,
                faceIndex,
                firstGlyphIndex,
                numGlyphs,
                pathParameterTemplate,
                emScale
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathParameterfNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathParameterfNV);
        try {
            hFunction.invokeExact(
                path,
                pname,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathParameterfvNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathParameterfvNV);
        try {
            hFunction.invokeExact(
                path,
                pname,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathParameteriNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathParameteriNV);
        try {
            hFunction.invokeExact(
                path,
                pname,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathParameterivNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathParameterivNV);
        try {
            hFunction.invokeExact(
                path,
                pname,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathStencilDepthOffsetNV(
        @NativeType("GLfloat") float factor,
        @NativeType("GLfloat") float units
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathStencilDepthOffsetNV);
        try {
            hFunction.invokeExact(
                factor,
                units
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathStencilFuncNV(
        @NativeType("GLenum") int func,
        @NativeType("GLint") int ref,
        @NativeType("GLuint") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathStencilFuncNV);
        try {
            hFunction.invokeExact(
                func,
                ref,
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathStringNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int length,
        @Pointer(comment="void*") @NotNull MemorySegment pathString
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathStringNV);
        try {
            hFunction.invokeExact(
                path,
                format,
                length,
                pathString
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathSubCommandsNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLsizei") int commandStart,
        @NativeType("GLsizei") int commandsToDelete,
        @NativeType("GLsizei") int numCommands,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr commands,
        @NativeType("GLsizei") int numCoords,
        @NativeType("GLenum") int coordType,
        @Pointer(comment="void*") @NotNull MemorySegment coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathSubCommandsNV);
        try {
            hFunction.invokeExact(
                path,
                commandStart,
                commandsToDelete,
                numCommands,
                (MemorySegment) (commands != null ? commands.segment() : MemorySegment.NULL),
                numCoords,
                coordType,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathSubCoordsNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLsizei") int coordStart,
        @NativeType("GLsizei") int numCoords,
        @NativeType("GLenum") int coordType,
        @Pointer(comment="void*") @NotNull MemorySegment coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathSubCoordsNV);
        try {
            hFunction.invokeExact(
                path,
                coordStart,
                numCoords,
                coordType,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pauseTransformFeedback() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPauseTransformFeedback);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelStoref(
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelStoref);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelStorei(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelStorei);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte pointAlongPathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLsizei") int startSegment,
        @NativeType("GLsizei") int numSegments,
        @NativeType("GLfloat") float distance,
        @Nullable @Pointer(comment="GLfloat") FloatPtr x,
        @Nullable @Pointer(comment="GLfloat") FloatPtr y,
        @Nullable @Pointer(comment="GLfloat") FloatPtr tangentX,
        @Nullable @Pointer(comment="GLfloat") FloatPtr tangentY
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointAlongPathNV);
        try {
            return (byte) hFunction.invokeExact(
                path,
                startSegment,
                numSegments,
                distance,
                (MemorySegment) (x != null ? x.segment() : MemorySegment.NULL),
                (MemorySegment) (y != null ? y.segment() : MemorySegment.NULL),
                (MemorySegment) (tangentX != null ? tangentX.segment() : MemorySegment.NULL),
                (MemorySegment) (tangentY != null ? tangentY.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameterf(
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameterf);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameterfv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameterfv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameteri(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameteri);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameteriv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameteriv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointSize(
        @NativeType("GLfloat") float size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointSize);
        try {
            hFunction.invokeExact(
                size
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void polygonMode(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPolygonMode);
        try {
            hFunction.invokeExact(
                face,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void polygonOffset(
        @NativeType("GLfloat") float factor,
        @NativeType("GLfloat") float units
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPolygonOffset);
        try {
            hFunction.invokeExact(
                factor,
                units
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void polygonOffsetClamp(
        @NativeType("GLfloat") float factor,
        @NativeType("GLfloat") float units,
        @NativeType("GLfloat") float clamp
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPolygonOffsetClamp);
        try {
            hFunction.invokeExact(
                factor,
                units,
                clamp
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void polygonOffsetClampEXT(
        @NativeType("GLfloat") float factor,
        @NativeType("GLfloat") float units,
        @NativeType("GLfloat") float clamp
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPolygonOffsetClampEXT);
        try {
            hFunction.invokeExact(
                factor,
                units,
                clamp
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void popDebugGroup() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPopDebugGroup);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void popDebugGroupKHR() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPopDebugGroupKHR);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void popGroupMarkerEXT() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPopGroupMarkerEXT);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void primitiveBoundingBoxARB(
        @NativeType("GLfloat") float minX,
        @NativeType("GLfloat") float minY,
        @NativeType("GLfloat") float minZ,
        @NativeType("GLfloat") float minW,
        @NativeType("GLfloat") float maxX,
        @NativeType("GLfloat") float maxY,
        @NativeType("GLfloat") float maxZ,
        @NativeType("GLfloat") float maxW
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPrimitiveBoundingBoxARB);
        try {
            hFunction.invokeExact(
                minX,
                minY,
                minZ,
                minW,
                maxX,
                maxY,
                maxZ,
                maxW
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void primitiveRestartIndex(
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPrimitiveRestartIndex);
        try {
            hFunction.invokeExact(
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programBinary(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int binaryFormat,
        @Pointer(comment="void*") @NotNull MemorySegment binary,
        @NativeType("GLsizei") int length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramBinary);
        try {
            hFunction.invokeExact(
                program,
                binaryFormat,
                binary,
                length
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programParameteri(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramParameteri);
        try {
            hFunction.invokeExact(
                program,
                pname,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programParameteriARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramParameteriARB);
        try {
            hFunction.invokeExact(
                program,
                pname,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programPathFragmentInputGenNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLenum") int genMode,
        @NativeType("GLint") int components,
        @Nullable @Pointer(comment="GLfloat") FloatPtr coeffs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramPathFragmentInputGenNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                genMode,
                components,
                (MemorySegment) (coeffs != null ? coeffs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1d(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1d);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1dEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1dEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1f(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1f);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1fEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1fEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1i(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1i);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1i64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint64") long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1i64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1i64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1i64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1iEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1iEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1iv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1iv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1ivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1ivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1ui(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1ui);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1ui64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1ui64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1ui64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1ui64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1uiEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1uiEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1uiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1uiv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1uivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1uivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2d(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double v0,
        @NativeType("GLdouble") double v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2d);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2dEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2dEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2f(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2f);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2fEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2fEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2i(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2i);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2i64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint64") long x,
        @NativeType("GLint64") long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2i64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2i64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2i64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2iEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2iEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2iv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2iv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2ivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2ivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2ui(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2ui);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2ui64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long x,
        @NativeType("GLuint64") @Unsigned long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2ui64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2ui64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2ui64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2uiEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2uiEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2uiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2uiv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2uivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2uivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3d(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double v0,
        @NativeType("GLdouble") double v1,
        @NativeType("GLdouble") double v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3d);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3dEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3dEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3f(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3f);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3fEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3fEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3i(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1,
        @NativeType("GLint") int v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3i);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3i64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint64") long x,
        @NativeType("GLint64") long y,
        @NativeType("GLint64") long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3i64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3i64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3i64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3iEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1,
        @NativeType("GLint") int v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3iEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3iv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3iv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3ivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3ivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3ui(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1,
        @NativeType("GLuint") @Unsigned int v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3ui);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3ui64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long x,
        @NativeType("GLuint64") @Unsigned long y,
        @NativeType("GLuint64") @Unsigned long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3ui64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3ui64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3ui64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3uiEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1,
        @NativeType("GLuint") @Unsigned int v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3uiEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3uiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3uiv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3uivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3uivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4d(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double v0,
        @NativeType("GLdouble") double v1,
        @NativeType("GLdouble") double v2,
        @NativeType("GLdouble") double v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4d);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4dEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4dEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4f(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2,
        @NativeType("GLfloat") float v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4f);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4fEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2,
        @NativeType("GLfloat") float v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4fEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4i(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1,
        @NativeType("GLint") int v2,
        @NativeType("GLint") int v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4i);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4i64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint64") long x,
        @NativeType("GLint64") long y,
        @NativeType("GLint64") long z,
        @NativeType("GLint64") long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4i64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4i64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4i64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4iEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1,
        @NativeType("GLint") int v2,
        @NativeType("GLint") int v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4iEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4iv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4iv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4ivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4ivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4ui(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1,
        @NativeType("GLuint") @Unsigned int v2,
        @NativeType("GLuint") @Unsigned int v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4ui);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4ui64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long x,
        @NativeType("GLuint64") @Unsigned long y,
        @NativeType("GLuint64") @Unsigned long z,
        @NativeType("GLuint64") @Unsigned long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4ui64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4ui64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4ui64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4uiEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1,
        @NativeType("GLuint") @Unsigned int v2,
        @NativeType("GLuint") @Unsigned int v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4uiEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4uiv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4uiv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4uivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4uivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformHandleui64ARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformHandleui64ARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformHandleui64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformHandleui64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformHandleui64vARB(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformHandleui64vARB);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformHandleui64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformHandleui64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2x3dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2x3dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2x3dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2x3dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2x3fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2x3fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2x3fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2x3fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2x4dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2x4dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2x4dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2x4dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2x4fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2x4fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix2x4fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix2x4fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3x2dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3x2dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3x2dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3x2dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3x2fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3x2fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3x2fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3x2fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3x4dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3x4dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3x4dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3x4dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3x4fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3x4fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix3x4fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix3x4fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4x2dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4x2dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4x2dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4x2dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4x2fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4x2fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4x2fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4x2fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4x3dv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4x3dv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4x3dvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4x3dvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4x3fv(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4x3fv);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformMatrix4x3fvEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformMatrix4x3fvEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformui64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformui64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniformui64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniformui64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void provokingVertex(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProvokingVertex);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pushClientAttribDefaultEXT(
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPushClientAttribDefaultEXT);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pushDebugGroup(
        @NativeType("GLenum") int source,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr message
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPushDebugGroup);
        try {
            hFunction.invokeExact(
                source,
                id,
                length,
                (MemorySegment) (message != null ? message.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pushDebugGroupKHR(
        @NativeType("GLenum") int source,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr message
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPushDebugGroupKHR);
        try {
            hFunction.invokeExact(
                source,
                id,
                length,
                (MemorySegment) (message != null ? message.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pushGroupMarkerEXT(
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr marker
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPushGroupMarkerEXT);
        try {
            hFunction.invokeExact(
                length,
                (MemorySegment) (marker != null ? marker.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void queryCounter(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glQueryCounter);
        try {
            hFunction.invokeExact(
                id,
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterSamplesEXT(
        @NativeType("GLuint") @Unsigned int samples,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterSamplesEXT);
        try {
            hFunction.invokeExact(
                samples,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void readBuffer(
        @NativeType("GLenum") int src
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glReadBuffer);
        try {
            hFunction.invokeExact(
                src
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void readPixels(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glReadPixels);
        try {
            hFunction.invokeExact(
                x,
                y,
                width,
                height,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void readnPixels(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glReadnPixels);
        try {
            hFunction.invokeExact(
                x,
                y,
                width,
                height,
                format,
                type,
                bufSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void readnPixelsARB(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glReadnPixelsARB);
        try {
            hFunction.invokeExact(
                x,
                y,
                width,
                height,
                format,
                type,
                bufSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void readnPixelsKHR(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glReadnPixelsKHR);
        try {
            hFunction.invokeExact(
                x,
                y,
                width,
                height,
                format,
                type,
                bufSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void releaseShaderCompiler() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glReleaseShaderCompiler);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void renderbufferStorage(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRenderbufferStorage);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void renderbufferStorageMultisample(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRenderbufferStorageMultisample);
        try {
            hFunction.invokeExact(
                target,
                samples,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void renderbufferStorageMultisampleAdvancedAMD(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLsizei") int storageSamples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRenderbufferStorageMultisampleAdvancedAMD);
        try {
            hFunction.invokeExact(
                target,
                samples,
                storageSamples,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void renderbufferStorageMultisampleCoverageNV(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int coverageSamples,
        @NativeType("GLsizei") int colorSamples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRenderbufferStorageMultisampleCoverageNV);
        try {
            hFunction.invokeExact(
                target,
                coverageSamples,
                colorSamples,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void resetMemoryObjectParameterNV(
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLenum") int pname
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glResetMemoryObjectParameterNV);
        try {
            hFunction.invokeExact(
                memory,
                pname
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void resolveDepthValuesNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glResolveDepthValuesNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void resumeTransformFeedback() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glResumeTransformFeedback);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void sampleCoverage(
        @NativeType("GLfloat") float value,
        @NativeType("GLboolean") @Unsigned byte invert
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSampleCoverage);
        try {
            hFunction.invokeExact(
                value,
                invert
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void sampleMaski(
        @NativeType("GLuint") @Unsigned int maskNumber,
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSampleMaski);
        try {
            hFunction.invokeExact(
                maskNumber,
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void samplerParameterIiv(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSamplerParameterIiv);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void samplerParameterIuiv(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSamplerParameterIuiv);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void samplerParameterf(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSamplerParameterf);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void samplerParameterfv(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSamplerParameterfv);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void samplerParameteri(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSamplerParameteri);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void samplerParameteriv(
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSamplerParameteriv);
        try {
            hFunction.invokeExact(
                sampler,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void scissor(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glScissor);
        try {
            hFunction.invokeExact(
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void scissorArrayv(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glScissorArrayv);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void scissorExclusiveArrayvNV(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glScissorExclusiveArrayvNV);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void scissorExclusiveNV(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glScissorExclusiveNV);
        try {
            hFunction.invokeExact(
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void scissorIndexed(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int left,
        @NativeType("GLint") int bottom,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glScissorIndexed);
        try {
            hFunction.invokeExact(
                index,
                left,
                bottom,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void scissorIndexedv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glScissorIndexedv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColorFormatNV(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColorFormatNV);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void selectPerfMonitorCountersAMD(
        @NativeType("GLuint") @Unsigned int monitor,
        @NativeType("GLboolean") @Unsigned byte enable,
        @NativeType("GLuint") @Unsigned int group,
        @NativeType("GLint") int numCounters,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr counterList
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSelectPerfMonitorCountersAMD);
        try {
            hFunction.invokeExact(
                monitor,
                enable,
                group,
                numCounters,
                (MemorySegment) (counterList != null ? counterList.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shaderBinary(
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr shaders,
        @NativeType("GLenum") int binaryFormat,
        @Pointer(comment="void*") @NotNull MemorySegment binary,
        @NativeType("GLsizei") int length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShaderBinary);
        try {
            hFunction.invokeExact(
                count,
                (MemorySegment) (shaders != null ? shaders.segment() : MemorySegment.NULL),
                binaryFormat,
                binary,
                length
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shaderSource(
        @NativeType("GLuint") @Unsigned int shader,
        @NativeType("GLsizei") int count,
        @Nullable PointerPtr string,
        @Nullable @Pointer(comment="GLint") IntPtr length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShaderSource);
        try {
            hFunction.invokeExact(
                shader,
                count,
                (MemorySegment) (string != null ? string.segment() : MemorySegment.NULL),
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shaderStorageBlockBinding(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int storageBlockIndex,
        @NativeType("GLuint") @Unsigned int storageBlockBinding
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShaderStorageBlockBinding);
        try {
            hFunction.invokeExact(
                program,
                storageBlockIndex,
                storageBlockBinding
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shadingRateImageBarrierNV(
        @NativeType("GLboolean") @Unsigned byte synchronize
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShadingRateImageBarrierNV);
        try {
            hFunction.invokeExact(
                synchronize
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shadingRateImagePaletteNV(
        @NativeType("GLuint") @Unsigned int viewport,
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLenum") IntPtr rates
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShadingRateImagePaletteNV);
        try {
            hFunction.invokeExact(
                viewport,
                first,
                count,
                (MemorySegment) (rates != null ? rates.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shadingRateSampleOrderCustomNV(
        @NativeType("GLenum") int rate,
        @NativeType("GLuint") @Unsigned int samples,
        @Nullable @Pointer(comment="GLint") IntPtr locations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShadingRateSampleOrderCustomNV);
        try {
            hFunction.invokeExact(
                rate,
                samples,
                (MemorySegment) (locations != null ? locations.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shadingRateSampleOrderNV(
        @NativeType("GLenum") int order
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShadingRateSampleOrderNV);
        try {
            hFunction.invokeExact(
                order
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void signalVkFenceNV(
        @NativeType("GLuint64") @Unsigned long vkFence
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSignalVkFenceNV);
        try {
            hFunction.invokeExact(
                vkFence
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void signalVkSemaphoreNV(
        @NativeType("GLuint64") @Unsigned long vkSemaphore
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSignalVkSemaphoreNV);
        try {
            hFunction.invokeExact(
                vkSemaphore
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void specializeShader(
        @NativeType("GLuint") @Unsigned int shader,
        @Nullable @Pointer(comment="GLchar") BytePtr pEntryPoint,
        @NativeType("GLuint") @Unsigned int numSpecializationConstants,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pConstantIndex,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pConstantValue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSpecializeShader);
        try {
            hFunction.invokeExact(
                shader,
                (MemorySegment) (pEntryPoint != null ? pEntryPoint.segment() : MemorySegment.NULL),
                numSpecializationConstants,
                (MemorySegment) (pConstantIndex != null ? pConstantIndex.segment() : MemorySegment.NULL),
                (MemorySegment) (pConstantValue != null ? pConstantValue.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void specializeShaderARB(
        @NativeType("GLuint") @Unsigned int shader,
        @Nullable @Pointer(comment="GLchar") BytePtr pEntryPoint,
        @NativeType("GLuint") @Unsigned int numSpecializationConstants,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pConstantIndex,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr pConstantValue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSpecializeShaderARB);
        try {
            hFunction.invokeExact(
                shader,
                (MemorySegment) (pEntryPoint != null ? pEntryPoint.segment() : MemorySegment.NULL),
                numSpecializationConstants,
                (MemorySegment) (pConstantIndex != null ? pConstantIndex.segment() : MemorySegment.NULL),
                (MemorySegment) (pConstantValue != null ? pConstantValue.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stateCaptureNV(
        @NativeType("GLuint") @Unsigned int state,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStateCaptureNV);
        try {
            hFunction.invokeExact(
                state,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilFillPathInstancedNV(
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLenum") int pathNameType,
        @Pointer(comment="void*") @NotNull MemorySegment paths,
        @NativeType("GLuint") @Unsigned int pathBase,
        @NativeType("GLenum") int fillMode,
        @NativeType("GLuint") @Unsigned int mask,
        @NativeType("GLenum") int transformType,
        @Nullable @Pointer(comment="GLfloat") FloatPtr transformValues
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilFillPathInstancedNV);
        try {
            hFunction.invokeExact(
                numPaths,
                pathNameType,
                paths,
                pathBase,
                fillMode,
                mask,
                transformType,
                (MemorySegment) (transformValues != null ? transformValues.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilFillPathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int fillMode,
        @NativeType("GLuint") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilFillPathNV);
        try {
            hFunction.invokeExact(
                path,
                fillMode,
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilFunc(
        @NativeType("GLenum") int func,
        @NativeType("GLint") int ref,
        @NativeType("GLuint") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilFunc);
        try {
            hFunction.invokeExact(
                func,
                ref,
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilFuncSeparate(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int func,
        @NativeType("GLint") int ref,
        @NativeType("GLuint") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilFuncSeparate);
        try {
            hFunction.invokeExact(
                face,
                func,
                ref,
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilMask(
        @NativeType("GLuint") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilMask);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilMaskSeparate(
        @NativeType("GLenum") int face,
        @NativeType("GLuint") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilMaskSeparate);
        try {
            hFunction.invokeExact(
                face,
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilOp(
        @NativeType("GLenum") int fail,
        @NativeType("GLenum") int zfail,
        @NativeType("GLenum") int zpass
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilOp);
        try {
            hFunction.invokeExact(
                fail,
                zfail,
                zpass
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilOpSeparate(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int sfail,
        @NativeType("GLenum") int dpfail,
        @NativeType("GLenum") int dppass
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilOpSeparate);
        try {
            hFunction.invokeExact(
                face,
                sfail,
                dpfail,
                dppass
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilStrokePathInstancedNV(
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLenum") int pathNameType,
        @Pointer(comment="void*") @NotNull MemorySegment paths,
        @NativeType("GLuint") @Unsigned int pathBase,
        @NativeType("GLint") int reference,
        @NativeType("GLuint") @Unsigned int mask,
        @NativeType("GLenum") int transformType,
        @Nullable @Pointer(comment="GLfloat") FloatPtr transformValues
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilStrokePathInstancedNV);
        try {
            hFunction.invokeExact(
                numPaths,
                pathNameType,
                paths,
                pathBase,
                reference,
                mask,
                transformType,
                (MemorySegment) (transformValues != null ? transformValues.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilStrokePathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLint") int reference,
        @NativeType("GLuint") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilStrokePathNV);
        try {
            hFunction.invokeExact(
                path,
                reference,
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilThenCoverFillPathInstancedNV(
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLenum") int pathNameType,
        @Pointer(comment="void*") @NotNull MemorySegment paths,
        @NativeType("GLuint") @Unsigned int pathBase,
        @NativeType("GLenum") int fillMode,
        @NativeType("GLuint") @Unsigned int mask,
        @NativeType("GLenum") int coverMode,
        @NativeType("GLenum") int transformType,
        @Nullable @Pointer(comment="GLfloat") FloatPtr transformValues
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilThenCoverFillPathInstancedNV);
        try {
            hFunction.invokeExact(
                numPaths,
                pathNameType,
                paths,
                pathBase,
                fillMode,
                mask,
                coverMode,
                transformType,
                (MemorySegment) (transformValues != null ? transformValues.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilThenCoverFillPathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLenum") int fillMode,
        @NativeType("GLuint") @Unsigned int mask,
        @NativeType("GLenum") int coverMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilThenCoverFillPathNV);
        try {
            hFunction.invokeExact(
                path,
                fillMode,
                mask,
                coverMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilThenCoverStrokePathInstancedNV(
        @NativeType("GLsizei") int numPaths,
        @NativeType("GLenum") int pathNameType,
        @Pointer(comment="void*") @NotNull MemorySegment paths,
        @NativeType("GLuint") @Unsigned int pathBase,
        @NativeType("GLint") int reference,
        @NativeType("GLuint") @Unsigned int mask,
        @NativeType("GLenum") int coverMode,
        @NativeType("GLenum") int transformType,
        @Nullable @Pointer(comment="GLfloat") FloatPtr transformValues
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilThenCoverStrokePathInstancedNV);
        try {
            hFunction.invokeExact(
                numPaths,
                pathNameType,
                paths,
                pathBase,
                reference,
                mask,
                coverMode,
                transformType,
                (MemorySegment) (transformValues != null ? transformValues.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilThenCoverStrokePathNV(
        @NativeType("GLuint") @Unsigned int path,
        @NativeType("GLint") int reference,
        @NativeType("GLuint") @Unsigned int mask,
        @NativeType("GLenum") int coverMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilThenCoverStrokePathNV);
        try {
            hFunction.invokeExact(
                path,
                reference,
                mask,
                coverMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void subpixelPrecisionBiasNV(
        @NativeType("GLuint") @Unsigned int xbits,
        @NativeType("GLuint") @Unsigned int ybits
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSubpixelPrecisionBiasNV);
        try {
            hFunction.invokeExact(
                xbits,
                ybits
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texAttachMemoryNV(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexAttachMemoryNV);
        try {
            hFunction.invokeExact(
                target,
                memory,
                offset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texBuffer(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexBuffer);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texBufferARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexBufferARB);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texBufferRange(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexBufferRange);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordFormatNV(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordFormatNV);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texImage1D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexImage1D);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texImage2D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexImage2D);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                height,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texImage2DMultisample(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexImage2DMultisample);
        try {
            hFunction.invokeExact(
                target,
                samples,
                internalformat,
                width,
                height,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texImage3D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexImage3D);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                height,
                depth,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texImage3DMultisample(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexImage3DMultisample);
        try {
            hFunction.invokeExact(
                target,
                samples,
                internalformat,
                width,
                height,
                depth,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texPageCommitmentARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexPageCommitmentARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texPageCommitmentMemNV(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int layer,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long offset,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexPageCommitmentMemNV);
        try {
            hFunction.invokeExact(
                target,
                layer,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                memory,
                offset,
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texParameterIiv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexParameterIiv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texParameterIuiv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexParameterIuiv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texParameterf(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexParameterf);
        try {
            hFunction.invokeExact(
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexParameterfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texParameteri(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexParameteri);
        try {
            hFunction.invokeExact(
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorage1D(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorage1D);
        try {
            hFunction.invokeExact(
                target,
                levels,
                internalformat,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorage1DEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorage1DEXT);
        try {
            hFunction.invokeExact(
                target,
                levels,
                internalformat,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorage2D(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorage2D);
        try {
            hFunction.invokeExact(
                target,
                levels,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorage2DEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorage2DEXT);
        try {
            hFunction.invokeExact(
                target,
                levels,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorage2DMultisample(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorage2DMultisample);
        try {
            hFunction.invokeExact(
                target,
                samples,
                internalformat,
                width,
                height,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorage3D(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorage3D);
        try {
            hFunction.invokeExact(
                target,
                levels,
                internalformat,
                width,
                height,
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorage3DEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorage3DEXT);
        try {
            hFunction.invokeExact(
                target,
                levels,
                internalformat,
                width,
                height,
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorage3DMultisample(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorage3DMultisample);
        try {
            hFunction.invokeExact(
                target,
                samples,
                internalformat,
                width,
                height,
                depth,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texSubImage1D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexSubImage1D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                width,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texSubImage2D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexSubImage2D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texSubImage3D(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexSubImage3D);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureAttachMemoryNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureAttachMemoryNV);
        try {
            hFunction.invokeExact(
                texture,
                memory,
                offset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureBarrier() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureBarrier);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureBarrierNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureBarrierNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureBuffer(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureBuffer);
        try {
            hFunction.invokeExact(
                texture,
                internalformat,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureBufferEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureBufferEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                internalformat,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureBufferRange(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureBufferRange);
        try {
            hFunction.invokeExact(
                texture,
                internalformat,
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureBufferRangeEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureBufferRangeEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                internalformat,
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureImage1DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureImage1DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                internalformat,
                width,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureImage2DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureImage2DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                internalformat,
                width,
                height,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureImage3DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLint") int border,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureImage3DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                internalformat,
                width,
                height,
                depth,
                border,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texturePageCommitmentEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexturePageCommitmentEXT);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texturePageCommitmentMemNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int layer,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long offset,
        @NativeType("GLboolean") @Unsigned byte commit
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexturePageCommitmentMemNV);
        try {
            hFunction.invokeExact(
                texture,
                layer,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                memory,
                offset,
                commit
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterIiv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterIiv);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterIivEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterIivEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterIuiv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterIuiv);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterIuivEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterIuivEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterf(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterf);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterfEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterfEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterfv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterfv);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterfvEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterfvEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameteri(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameteri);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameteriEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameteriEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameteriv(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameteriv);
        try {
            hFunction.invokeExact(
                texture,
                pname,
                (MemorySegment) (param != null ? param.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureParameterivEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureParameterivEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureRenderbufferEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureRenderbufferEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage1D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage1D);
        try {
            hFunction.invokeExact(
                texture,
                levels,
                internalformat,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage1DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage1DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                levels,
                internalformat,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage2D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage2D);
        try {
            hFunction.invokeExact(
                texture,
                levels,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage2DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage2DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                levels,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage2DMultisample(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage2DMultisample);
        try {
            hFunction.invokeExact(
                texture,
                samples,
                internalformat,
                width,
                height,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage2DMultisampleEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage2DMultisampleEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                samples,
                internalformat,
                width,
                height,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage3D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage3D);
        try {
            hFunction.invokeExact(
                texture,
                levels,
                internalformat,
                width,
                height,
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage3DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int levels,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage3DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                levels,
                internalformat,
                width,
                height,
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage3DMultisample(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage3DMultisample);
        try {
            hFunction.invokeExact(
                texture,
                samples,
                internalformat,
                width,
                height,
                depth,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorage3DMultisampleEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte fixedsamplelocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorage3DMultisampleEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                samples,
                internalformat,
                width,
                height,
                depth,
                fixedsamplelocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureSubImage1D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureSubImage1D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                width,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureSubImage1DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureSubImage1DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                width,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureSubImage2D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureSubImage2D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureSubImage2DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureSubImage2DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureSubImage3D(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureSubImage3D);
        try {
            hFunction.invokeExact(
                texture,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureSubImage3DEXT(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureSubImage3DEXT);
        try {
            hFunction.invokeExact(
                texture,
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureView(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int origtexture,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int minlevel,
        @NativeType("GLuint") @Unsigned int numlevels,
        @NativeType("GLuint") @Unsigned int minlayer,
        @NativeType("GLuint") @Unsigned int numlayers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureView);
        try {
            hFunction.invokeExact(
                texture,
                target,
                origtexture,
                internalformat,
                minlevel,
                numlevels,
                minlayer,
                numlayers
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void transformFeedbackBufferBase(
        @NativeType("GLuint") @Unsigned int xfb,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTransformFeedbackBufferBase);
        try {
            hFunction.invokeExact(
                xfb,
                index,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void transformFeedbackBufferRange(
        @NativeType("GLuint") @Unsigned int xfb,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTransformFeedbackBufferRange);
        try {
            hFunction.invokeExact(
                xfb,
                index,
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void transformFeedbackVaryings(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLsizei") int count,
        @Nullable PointerPtr varyings,
        @NativeType("GLenum") int bufferMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTransformFeedbackVaryings);
        try {
            hFunction.invokeExact(
                program,
                count,
                (MemorySegment) (varyings != null ? varyings.segment() : MemorySegment.NULL),
                bufferMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void transformPathNV(
        @NativeType("GLuint") @Unsigned int resultPath,
        @NativeType("GLuint") @Unsigned int srcPath,
        @NativeType("GLenum") int transformType,
        @Nullable @Pointer(comment="GLfloat") FloatPtr transformValues
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTransformPathNV);
        try {
            hFunction.invokeExact(
                resultPath,
                srcPath,
                transformType,
                (MemorySegment) (transformValues != null ? transformValues.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1d(
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1d);
        try {
            hFunction.invokeExact(
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1f(
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1f);
        try {
            hFunction.invokeExact(
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1i(
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1i);
        try {
            hFunction.invokeExact(
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1i64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLint64") long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1i64ARB);
        try {
            hFunction.invokeExact(
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1i64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1i64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1iv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1iv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1ui(
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1ui);
        try {
            hFunction.invokeExact(
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1ui64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1ui64ARB);
        try {
            hFunction.invokeExact(
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1ui64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1ui64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1uiv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1uiv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2d(
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2d);
        try {
            hFunction.invokeExact(
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2f(
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2f);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2i(
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2i);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2i64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLint64") long x,
        @NativeType("GLint64") long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2i64ARB);
        try {
            hFunction.invokeExact(
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2i64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2i64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2iv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2iv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2ui(
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2ui);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2ui64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long x,
        @NativeType("GLuint64") @Unsigned long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2ui64ARB);
        try {
            hFunction.invokeExact(
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2ui64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2ui64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2uiv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2uiv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3d(
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3d);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3f(
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3f);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3i(
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1,
        @NativeType("GLint") int v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3i);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3i64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLint64") long x,
        @NativeType("GLint64") long y,
        @NativeType("GLint64") long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3i64ARB);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3i64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3i64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3iv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3iv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3ui(
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1,
        @NativeType("GLuint") @Unsigned int v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3ui);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3ui64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long x,
        @NativeType("GLuint64") @Unsigned long y,
        @NativeType("GLuint64") @Unsigned long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3ui64ARB);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3ui64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3ui64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3uiv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3uiv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4d(
        @NativeType("GLint") int location,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4d);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4f(
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2,
        @NativeType("GLfloat") float v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4f);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4i(
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1,
        @NativeType("GLint") int v2,
        @NativeType("GLint") int v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4i);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4i64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLint64") long x,
        @NativeType("GLint64") long y,
        @NativeType("GLint64") long z,
        @NativeType("GLint64") long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4i64ARB);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4i64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4i64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4iv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4iv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4ui(
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1,
        @NativeType("GLuint") @Unsigned int v2,
        @NativeType("GLuint") @Unsigned int v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4ui);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4ui64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long x,
        @NativeType("GLuint64") @Unsigned long y,
        @NativeType("GLuint64") @Unsigned long z,
        @NativeType("GLuint64") @Unsigned long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4ui64ARB);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4ui64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4ui64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4uiv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4uiv);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformBlockBinding(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int uniformBlockIndex,
        @NativeType("GLuint") @Unsigned int uniformBlockBinding
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformBlockBinding);
        try {
            hFunction.invokeExact(
                program,
                uniformBlockIndex,
                uniformBlockBinding
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformHandleui64ARB(
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformHandleui64ARB);
        try {
            hFunction.invokeExact(
                location,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformHandleui64NV(
        @NativeType("GLint") int location,
        @NativeType("GLuint64") @Unsigned long value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformHandleui64NV);
        try {
            hFunction.invokeExact(
                location,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformHandleui64vARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformHandleui64vARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformHandleui64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformHandleui64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix2dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix2dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix2fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix2fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix2x3dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix2x3dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix2x3fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix2x3fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix2x4dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix2x4dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix2x4fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix2x4fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix3dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix3dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix3fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix3fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix3x2dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix3x2dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix3x2fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix3x2fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix3x4dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix3x4dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix3x4fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix3x4fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix4dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix4dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix4fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix4fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix4x2dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix4x2dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix4x2fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix4x2fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix4x3dv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLdouble") DoublePtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix4x3dv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix4x3fv(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix4x3fv);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformSubroutinesuiv(
        @NativeType("GLenum") int shadertype,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr indices
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformSubroutinesuiv);
        try {
            hFunction.invokeExact(
                shadertype,
                count,
                (MemorySegment) (indices != null ? indices.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformui64NV(
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformui64NV);
        try {
            hFunction.invokeExact(
                location,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformui64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformui64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte unmapBuffer(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUnmapBuffer);
        try {
            return (byte) hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte unmapNamedBuffer(
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUnmapNamedBuffer);
        try {
            return (byte) hFunction.invokeExact(
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte unmapNamedBufferEXT(
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUnmapNamedBufferEXT);
        try {
            return (byte) hFunction.invokeExact(
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void useProgram(
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUseProgram);
        try {
            hFunction.invokeExact(
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void useProgramStages(
        @NativeType("GLuint") @Unsigned int pipeline,
        @NativeType("GLbitfield") @Unsigned int stages,
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUseProgramStages);
        try {
            hFunction.invokeExact(
                pipeline,
                stages,
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void useProgramStagesEXT(
        @NativeType("GLuint") @Unsigned int pipeline,
        @NativeType("GLbitfield") @Unsigned int stages,
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUseProgramStagesEXT);
        try {
            hFunction.invokeExact(
                pipeline,
                stages,
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void useShaderProgramEXT(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUseShaderProgramEXT);
        try {
            hFunction.invokeExact(
                type,
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void validateProgram(
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glValidateProgram);
        try {
            hFunction.invokeExact(
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void validateProgramPipeline(
        @NativeType("GLuint") @Unsigned int pipeline
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glValidateProgramPipeline);
        try {
            hFunction.invokeExact(
                pipeline
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void validateProgramPipelineEXT(
        @NativeType("GLuint") @Unsigned int pipeline
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glValidateProgramPipelineEXT);
        try {
            hFunction.invokeExact(
                pipeline
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayAttribBinding(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLuint") @Unsigned int bindingindex
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayAttribBinding);
        try {
            hFunction.invokeExact(
                vaobj,
                attribindex,
                bindingindex
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayAttribFormat(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayAttribFormat);
        try {
            hFunction.invokeExact(
                vaobj,
                attribindex,
                size,
                type,
                normalized,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayAttribIFormat(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayAttribIFormat);
        try {
            hFunction.invokeExact(
                vaobj,
                attribindex,
                size,
                type,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayAttribLFormat(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayAttribLFormat);
        try {
            hFunction.invokeExact(
                vaobj,
                attribindex,
                size,
                type,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayBindVertexBufferEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int bindingindex,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayBindVertexBufferEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                bindingindex,
                buffer,
                MemorySegment.ofAddress(offset),
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayBindingDivisor(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int bindingindex,
        @NativeType("GLuint") @Unsigned int divisor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayBindingDivisor);
        try {
            hFunction.invokeExact(
                vaobj,
                bindingindex,
                divisor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayColorOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayColorOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                size,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayEdgeFlagOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayEdgeFlagOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayElementBuffer(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayElementBuffer);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayFogCoordOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayFogCoordOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayIndexOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayIndexOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayMultiTexCoordOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int texunit,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayMultiTexCoordOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                texunit,
                size,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayNormalOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayNormalOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArraySecondaryColorOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArraySecondaryColorOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                size,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayTexCoordOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayTexCoordOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                size,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexAttribBindingEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLuint") @Unsigned int bindingindex
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexAttribBindingEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                attribindex,
                bindingindex
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexAttribDivisorEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int divisor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexAttribDivisorEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                index,
                divisor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexAttribFormatEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexAttribFormatEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                attribindex,
                size,
                type,
                normalized,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexAttribIFormatEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexAttribIFormatEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                attribindex,
                size,
                type,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexAttribIOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexAttribIOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                index,
                size,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexAttribLFormatEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexAttribLFormatEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                attribindex,
                size,
                type,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexAttribLOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexAttribLOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                index,
                size,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexAttribOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexAttribOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                index,
                size,
                type,
                normalized,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexBindingDivisorEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int bindingindex,
        @NativeType("GLuint") @Unsigned int divisor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexBindingDivisorEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                bindingindex,
                divisor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexBuffer(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int bindingindex,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexBuffer);
        try {
            hFunction.invokeExact(
                vaobj,
                bindingindex,
                buffer,
                MemorySegment.ofAddress(offset),
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexBuffers(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers,
        @Nullable @Pointer(comment="GLintptr") PointerPtr offsets,
        @Nullable @Pointer(comment="GLsizei") IntPtr strides
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexBuffers);
        try {
            hFunction.invokeExact(
                vaobj,
                first,
                count,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL),
                (MemorySegment) (offsets != null ? offsets.segment() : MemorySegment.NULL),
                (MemorySegment) (strides != null ? strides.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayVertexOffsetEXT(
        @NativeType("GLuint") @Unsigned int vaobj,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayVertexOffsetEXT);
        try {
            hFunction.invokeExact(
                vaobj,
                buffer,
                size,
                type,
                stride,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1d(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1d);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1dv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1dv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1f(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1f);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1fv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1fv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1s(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLshort") short x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1s);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1sv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1sv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2d(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2d);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2dv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2dv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2f(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2f);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2fv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2fv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2s(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2s);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2sv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2sv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3d(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3d);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3dv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3dv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3f(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3f);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3fv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3fv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3s(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3s);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3sv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3sv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4Nbv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4Nbv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4Niv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4Niv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4Nsv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4Nsv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4Nub(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLubyte") @Unsigned byte x,
        @NativeType("GLubyte") @Unsigned byte y,
        @NativeType("GLubyte") @Unsigned byte z,
        @NativeType("GLubyte") @Unsigned byte w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4Nub);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4Nubv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4Nubv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4Nuiv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4Nuiv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4Nusv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4Nusv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4bv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4bv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4d(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4d);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4dv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4dv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4f(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4f);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4fv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4fv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4iv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4iv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4s(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z,
        @NativeType("GLshort") short w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4s);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4sv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4sv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4ubv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4ubv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4uiv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4uiv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4usv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4usv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribBinding(
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLuint") @Unsigned int bindingindex
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribBinding);
        try {
            hFunction.invokeExact(
                attribindex,
                bindingindex
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribDivisor(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int divisor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribDivisor);
        try {
            hFunction.invokeExact(
                index,
                divisor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribDivisorARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int divisor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribDivisorARB);
        try {
            hFunction.invokeExact(
                index,
                divisor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribFormat(
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribFormat);
        try {
            hFunction.invokeExact(
                attribindex,
                size,
                type,
                normalized,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribFormatNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribFormatNV);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                normalized,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI1i(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI1i);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI1iv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI1iv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI1ui(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI1ui);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI1uiv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI1uiv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI2i(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI2i);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI2iv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI2iv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI2ui(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x,
        @NativeType("GLuint") @Unsigned int y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI2ui);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI2uiv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI2uiv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI3i(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI3i);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI3iv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI3iv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI3ui(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x,
        @NativeType("GLuint") @Unsigned int y,
        @NativeType("GLuint") @Unsigned int z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI3ui);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI3uiv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI3uiv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4bv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4bv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4i(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z,
        @NativeType("GLint") int w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4i);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4iv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4iv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4sv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4sv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4ubv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4ubv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4ui(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x,
        @NativeType("GLuint") @Unsigned int y,
        @NativeType("GLuint") @Unsigned int z,
        @NativeType("GLuint") @Unsigned int w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4ui);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4uiv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4uiv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4usv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4usv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribIFormat(
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribIFormat);
        try {
            hFunction.invokeExact(
                attribindex,
                size,
                type,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribIFormatNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribIFormatNV);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribIPointer(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribIPointer);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1d(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1d);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1dv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1dv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1i64NV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint64EXT") long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1i64NV);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1i64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1i64vNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1ui64ARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint64EXT") @Unsigned long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1ui64ARB);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1ui64NV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint64EXT") @Unsigned long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1ui64NV);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1ui64vARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1ui64vARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1ui64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1ui64vNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL2d(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL2d);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL2dv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL2dv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL2i64NV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL2i64NV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL2i64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL2i64vNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL2ui64NV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL2ui64NV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL2ui64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL2ui64vNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL3d(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL3d);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL3dv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL3dv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL3i64NV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y,
        @NativeType("GLint64EXT") long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL3i64NV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL3i64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL3i64vNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL3ui64NV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y,
        @NativeType("GLuint64EXT") @Unsigned long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL3ui64NV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL3ui64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL3ui64vNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL4d(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL4d);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL4dv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL4dv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL4i64NV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y,
        @NativeType("GLint64EXT") long z,
        @NativeType("GLint64EXT") long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL4i64NV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL4i64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL4i64vNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL4ui64NV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y,
        @NativeType("GLuint64EXT") @Unsigned long z,
        @NativeType("GLuint64EXT") @Unsigned long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL4ui64NV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL4ui64vNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL4ui64vNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribLFormat(
        @NativeType("GLuint") @Unsigned int attribindex,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int relativeoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribLFormat);
        try {
            hFunction.invokeExact(
                attribindex,
                size,
                type,
                relativeoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribLFormatNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribLFormatNV);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribLPointer(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribLPointer);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribP1ui(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLuint") @Unsigned int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribP1ui);
        try {
            hFunction.invokeExact(
                index,
                type,
                normalized,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribP1uiv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribP1uiv);
        try {
            hFunction.invokeExact(
                index,
                type,
                normalized,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribP2ui(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLuint") @Unsigned int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribP2ui);
        try {
            hFunction.invokeExact(
                index,
                type,
                normalized,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribP2uiv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribP2uiv);
        try {
            hFunction.invokeExact(
                index,
                type,
                normalized,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribP3ui(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLuint") @Unsigned int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribP3ui);
        try {
            hFunction.invokeExact(
                index,
                type,
                normalized,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribP3uiv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribP3uiv);
        try {
            hFunction.invokeExact(
                index,
                type,
                normalized,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribP4ui(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLuint") @Unsigned int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribP4ui);
        try {
            hFunction.invokeExact(
                index,
                type,
                normalized,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribP4uiv(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribP4uiv);
        try {
            hFunction.invokeExact(
                index,
                type,
                normalized,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribPointer(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribPointer);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                normalized,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexBindingDivisor(
        @NativeType("GLuint") @Unsigned int bindingindex,
        @NativeType("GLuint") @Unsigned int divisor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexBindingDivisor);
        try {
            hFunction.invokeExact(
                bindingindex,
                divisor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexFormatNV(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexFormatNV);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void viewport(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glViewport);
        try {
            hFunction.invokeExact(
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void viewportArrayv(
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glViewportArrayv);
        try {
            hFunction.invokeExact(
                first,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void viewportIndexedf(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float w,
        @NativeType("GLfloat") float h
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glViewportIndexedf);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                w,
                h
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void viewportIndexedfv(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glViewportIndexedfv);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void viewportPositionWScaleNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float xcoeff,
        @NativeType("GLfloat") float ycoeff
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glViewportPositionWScaleNV);
        try {
            hFunction.invokeExact(
                index,
                xcoeff,
                ycoeff
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void viewportSwizzleNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int swizzlex,
        @NativeType("GLenum") int swizzley,
        @NativeType("GLenum") int swizzlez,
        @NativeType("GLenum") int swizzlew
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glViewportSwizzleNV);
        try {
            hFunction.invokeExact(
                index,
                swizzlex,
                swizzley,
                swizzlez,
                swizzlew
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void waitSync(
        @Nullable GLsync sync,
        @NativeType("GLbitfield") @Unsigned int flags,
        @NativeType("GLuint64") @Unsigned long timeout
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWaitSync);
        try {
            hFunction.invokeExact(
                (MemorySegment) (sync != null ? sync.segment() : MemorySegment.NULL),
                flags,
                timeout
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void waitVkSemaphoreNV(
        @NativeType("GLuint64") @Unsigned long vkSemaphore
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWaitVkSemaphoreNV);
        try {
            hFunction.invokeExact(
                vkSemaphore
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightPathsNV(
        @NativeType("GLuint") @Unsigned int resultPath,
        @NativeType("GLsizei") int numPaths,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr paths,
        @Nullable @Pointer(comment="GLfloat") FloatPtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightPathsNV);
        try {
            hFunction.invokeExact(
                resultPath,
                numPaths,
                (MemorySegment) (paths != null ? paths.segment() : MemorySegment.NULL),
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowRectanglesEXT(
        @NativeType("GLenum") int mode,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr box
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowRectanglesEXT);
        try {
            hFunction.invokeExact(
                mode,
                count,
                (MemorySegment) (box != null ? box.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }
    // endregion

    // region segments and handles
    public final @Nullable MemorySegment SEGMENT$glActiveProgramEXT;
    public final @Nullable MemorySegment SEGMENT$glActiveShaderProgram;
    public final @Nullable MemorySegment SEGMENT$glActiveShaderProgramEXT;
    public final @Nullable MemorySegment SEGMENT$glActiveTexture;
    public final @Nullable MemorySegment SEGMENT$glApplyFramebufferAttachmentCMAAINTEL;
    public final @Nullable MemorySegment SEGMENT$glAttachShader;
    public final @Nullable MemorySegment SEGMENT$glBeginConditionalRender;
    public final @Nullable MemorySegment SEGMENT$glBeginConditionalRenderNV;
    public final @Nullable MemorySegment SEGMENT$glBeginPerfMonitorAMD;
    public final @Nullable MemorySegment SEGMENT$glBeginPerfQueryINTEL;
    public final @Nullable MemorySegment SEGMENT$glBeginQuery;
    public final @Nullable MemorySegment SEGMENT$glBeginQueryIndexed;
    public final @Nullable MemorySegment SEGMENT$glBeginTransformFeedback;
    public final @Nullable MemorySegment SEGMENT$glBindAttribLocation;
    public final @Nullable MemorySegment SEGMENT$glBindBuffer;
    public final @Nullable MemorySegment SEGMENT$glBindBufferBase;
    public final @Nullable MemorySegment SEGMENT$glBindBufferRange;
    public final @Nullable MemorySegment SEGMENT$glBindBuffersBase;
    public final @Nullable MemorySegment SEGMENT$glBindBuffersRange;
    public final @Nullable MemorySegment SEGMENT$glBindFragDataLocation;
    public final @Nullable MemorySegment SEGMENT$glBindFragDataLocationIndexed;
    public final @Nullable MemorySegment SEGMENT$glBindFramebuffer;
    public final @Nullable MemorySegment SEGMENT$glBindImageTexture;
    public final @Nullable MemorySegment SEGMENT$glBindImageTextures;
    public final @Nullable MemorySegment SEGMENT$glBindMultiTextureEXT;
    public final @Nullable MemorySegment SEGMENT$glBindProgramPipeline;
    public final @Nullable MemorySegment SEGMENT$glBindProgramPipelineEXT;
    public final @Nullable MemorySegment SEGMENT$glBindRenderbuffer;
    public final @Nullable MemorySegment SEGMENT$glBindSampler;
    public final @Nullable MemorySegment SEGMENT$glBindSamplers;
    public final @Nullable MemorySegment SEGMENT$glBindShadingRateImageNV;
    public final @Nullable MemorySegment SEGMENT$glBindTexture;
    public final @Nullable MemorySegment SEGMENT$glBindTextureUnit;
    public final @Nullable MemorySegment SEGMENT$glBindTextures;
    public final @Nullable MemorySegment SEGMENT$glBindTransformFeedback;
    public final @Nullable MemorySegment SEGMENT$glBindVertexArray;
    public final @Nullable MemorySegment SEGMENT$glBindVertexBuffer;
    public final @Nullable MemorySegment SEGMENT$glBindVertexBuffers;
    public final @Nullable MemorySegment SEGMENT$glBlendBarrierKHR;
    public final @Nullable MemorySegment SEGMENT$glBlendBarrierNV;
    public final @Nullable MemorySegment SEGMENT$glBlendColor;
    public final @Nullable MemorySegment SEGMENT$glBlendEquation;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationSeparate;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationSeparatei;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationSeparateiARB;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationi;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationiARB;
    public final @Nullable MemorySegment SEGMENT$glBlendFunc;
    public final @Nullable MemorySegment SEGMENT$glBlendFuncSeparate;
    public final @Nullable MemorySegment SEGMENT$glBlendFuncSeparatei;
    public final @Nullable MemorySegment SEGMENT$glBlendFuncSeparateiARB;
    public final @Nullable MemorySegment SEGMENT$glBlendFunci;
    public final @Nullable MemorySegment SEGMENT$glBlendFunciARB;
    public final @Nullable MemorySegment SEGMENT$glBlendParameteriNV;
    public final @Nullable MemorySegment SEGMENT$glBlitFramebuffer;
    public final @Nullable MemorySegment SEGMENT$glBlitNamedFramebuffer;
    public final @Nullable MemorySegment SEGMENT$glBufferAddressRangeNV;
    public final @Nullable MemorySegment SEGMENT$glBufferAttachMemoryNV;
    public final @Nullable MemorySegment SEGMENT$glBufferData;
    public final @Nullable MemorySegment SEGMENT$glBufferPageCommitmentARB;
    public final @Nullable MemorySegment SEGMENT$glBufferPageCommitmentMemNV;
    public final @Nullable MemorySegment SEGMENT$glBufferStorage;
    public final @Nullable MemorySegment SEGMENT$glBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glCallCommandListNV;
    public final @Nullable MemorySegment SEGMENT$glCheckFramebufferStatus;
    public final @Nullable MemorySegment SEGMENT$glCheckNamedFramebufferStatus;
    public final @Nullable MemorySegment SEGMENT$glCheckNamedFramebufferStatusEXT;
    public final @Nullable MemorySegment SEGMENT$glClampColor;
    public final @Nullable MemorySegment SEGMENT$glClear;
    public final @Nullable MemorySegment SEGMENT$glClearBufferData;
    public final @Nullable MemorySegment SEGMENT$glClearBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glClearBufferfi;
    public final @Nullable MemorySegment SEGMENT$glClearBufferfv;
    public final @Nullable MemorySegment SEGMENT$glClearBufferiv;
    public final @Nullable MemorySegment SEGMENT$glClearBufferuiv;
    public final @Nullable MemorySegment SEGMENT$glClearColor;
    public final @Nullable MemorySegment SEGMENT$glClearDepth;
    public final @Nullable MemorySegment SEGMENT$glClearDepthdNV;
    public final @Nullable MemorySegment SEGMENT$glClearDepthf;
    public final @Nullable MemorySegment SEGMENT$glClearNamedBufferData;
    public final @Nullable MemorySegment SEGMENT$glClearNamedBufferDataEXT;
    public final @Nullable MemorySegment SEGMENT$glClearNamedBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glClearNamedBufferSubDataEXT;
    public final @Nullable MemorySegment SEGMENT$glClearNamedFramebufferfi;
    public final @Nullable MemorySegment SEGMENT$glClearNamedFramebufferfv;
    public final @Nullable MemorySegment SEGMENT$glClearNamedFramebufferiv;
    public final @Nullable MemorySegment SEGMENT$glClearNamedFramebufferuiv;
    public final @Nullable MemorySegment SEGMENT$glClearStencil;
    public final @Nullable MemorySegment SEGMENT$glClearTexImage;
    public final @Nullable MemorySegment SEGMENT$glClearTexSubImage;
    public final @Nullable MemorySegment SEGMENT$glClientAttribDefaultEXT;
    public final @Nullable MemorySegment SEGMENT$glClientWaitSync;
    public final @Nullable MemorySegment SEGMENT$glClipControl;
    public final @Nullable MemorySegment SEGMENT$glColorFormatNV;
    public final @Nullable MemorySegment SEGMENT$glColorMask;
    public final @Nullable MemorySegment SEGMENT$glColorMaski;
    public final @Nullable MemorySegment SEGMENT$glCommandListSegmentsNV;
    public final @Nullable MemorySegment SEGMENT$glCompileCommandListNV;
    public final @Nullable MemorySegment SEGMENT$glCompileShader;
    public final @Nullable MemorySegment SEGMENT$glCompileShaderIncludeARB;
    public final @Nullable MemorySegment SEGMENT$glCompressedMultiTexImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedMultiTexImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedMultiTexImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedMultiTexSubImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedMultiTexSubImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedMultiTexSubImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexImage1D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexImage2D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexImage3D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexSubImage1D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexSubImage2D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexSubImage3D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureSubImage1D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureSubImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureSubImage2D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureSubImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureSubImage3D;
    public final @Nullable MemorySegment SEGMENT$glCompressedTextureSubImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glConservativeRasterParameterfNV;
    public final @Nullable MemorySegment SEGMENT$glConservativeRasterParameteriNV;
    public final @Nullable MemorySegment SEGMENT$glCopyBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glCopyImageSubData;
    public final @Nullable MemorySegment SEGMENT$glCopyMultiTexImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyMultiTexImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyMultiTexSubImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyMultiTexSubImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyMultiTexSubImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyNamedBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glCopyPathNV;
    public final @Nullable MemorySegment SEGMENT$glCopyTexImage1D;
    public final @Nullable MemorySegment SEGMENT$glCopyTexImage2D;
    public final @Nullable MemorySegment SEGMENT$glCopyTexSubImage1D;
    public final @Nullable MemorySegment SEGMENT$glCopyTexSubImage2D;
    public final @Nullable MemorySegment SEGMENT$glCopyTexSubImage3D;
    public final @Nullable MemorySegment SEGMENT$glCopyTextureImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyTextureImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyTextureSubImage1D;
    public final @Nullable MemorySegment SEGMENT$glCopyTextureSubImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyTextureSubImage2D;
    public final @Nullable MemorySegment SEGMENT$glCopyTextureSubImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glCopyTextureSubImage3D;
    public final @Nullable MemorySegment SEGMENT$glCopyTextureSubImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glCoverFillPathInstancedNV;
    public final @Nullable MemorySegment SEGMENT$glCoverFillPathNV;
    public final @Nullable MemorySegment SEGMENT$glCoverStrokePathInstancedNV;
    public final @Nullable MemorySegment SEGMENT$glCoverStrokePathNV;
    public final @Nullable MemorySegment SEGMENT$glCoverageModulationNV;
    public final @Nullable MemorySegment SEGMENT$glCoverageModulationTableNV;
    public final @Nullable MemorySegment SEGMENT$glCreateBuffers;
    public final @Nullable MemorySegment SEGMENT$glCreateCommandListsNV;
    public final @Nullable MemorySegment SEGMENT$glCreateFramebuffers;
    public final @Nullable MemorySegment SEGMENT$glCreatePerfQueryINTEL;
    public final @Nullable MemorySegment SEGMENT$glCreateProgram;
    public final @Nullable MemorySegment SEGMENT$glCreateProgramPipelines;
    public final @Nullable MemorySegment SEGMENT$glCreateQueries;
    public final @Nullable MemorySegment SEGMENT$glCreateRenderbuffers;
    public final @Nullable MemorySegment SEGMENT$glCreateSamplers;
    public final @Nullable MemorySegment SEGMENT$glCreateShader;
    public final @Nullable MemorySegment SEGMENT$glCreateShaderProgramEXT;
    public final @Nullable MemorySegment SEGMENT$glCreateShaderProgramv;
    public final @Nullable MemorySegment SEGMENT$glCreateShaderProgramvEXT;
    public final @Nullable MemorySegment SEGMENT$glCreateStatesNV;
    public final @Nullable MemorySegment SEGMENT$glCreateSyncFromCLeventARB;
    public final @Nullable MemorySegment SEGMENT$glCreateTextures;
    public final @Nullable MemorySegment SEGMENT$glCreateTransformFeedbacks;
    public final @Nullable MemorySegment SEGMENT$glCreateVertexArrays;
    public final @Nullable MemorySegment SEGMENT$glCullFace;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageCallback;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageCallbackARB;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageCallbackKHR;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageControl;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageControlARB;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageControlKHR;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageInsert;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageInsertARB;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageInsertKHR;
    public final @Nullable MemorySegment SEGMENT$glDeleteBuffers;
    public final @Nullable MemorySegment SEGMENT$glDeleteCommandListsNV;
    public final @Nullable MemorySegment SEGMENT$glDeleteFramebuffers;
    public final @Nullable MemorySegment SEGMENT$glDeleteNamedStringARB;
    public final @Nullable MemorySegment SEGMENT$glDeletePathsNV;
    public final @Nullable MemorySegment SEGMENT$glDeletePerfMonitorsAMD;
    public final @Nullable MemorySegment SEGMENT$glDeletePerfQueryINTEL;
    public final @Nullable MemorySegment SEGMENT$glDeleteProgram;
    public final @Nullable MemorySegment SEGMENT$glDeleteProgramPipelines;
    public final @Nullable MemorySegment SEGMENT$glDeleteProgramPipelinesEXT;
    public final @Nullable MemorySegment SEGMENT$glDeleteQueries;
    public final @Nullable MemorySegment SEGMENT$glDeleteRenderbuffers;
    public final @Nullable MemorySegment SEGMENT$glDeleteSamplers;
    public final @Nullable MemorySegment SEGMENT$glDeleteShader;
    public final @Nullable MemorySegment SEGMENT$glDeleteStatesNV;
    public final @Nullable MemorySegment SEGMENT$glDeleteSync;
    public final @Nullable MemorySegment SEGMENT$glDeleteTextures;
    public final @Nullable MemorySegment SEGMENT$glDeleteTransformFeedbacks;
    public final @Nullable MemorySegment SEGMENT$glDeleteVertexArrays;
    public final @Nullable MemorySegment SEGMENT$glDepthBoundsdNV;
    public final @Nullable MemorySegment SEGMENT$glDepthFunc;
    public final @Nullable MemorySegment SEGMENT$glDepthMask;
    public final @Nullable MemorySegment SEGMENT$glDepthRange;
    public final @Nullable MemorySegment SEGMENT$glDepthRangeArraydvNV;
    public final @Nullable MemorySegment SEGMENT$glDepthRangeArrayv;
    public final @Nullable MemorySegment SEGMENT$glDepthRangeIndexed;
    public final @Nullable MemorySegment SEGMENT$glDepthRangeIndexeddNV;
    public final @Nullable MemorySegment SEGMENT$glDepthRangedNV;
    public final @Nullable MemorySegment SEGMENT$glDepthRangef;
    public final @Nullable MemorySegment SEGMENT$glDetachShader;
    public final @Nullable MemorySegment SEGMENT$glDisable;
    public final @Nullable MemorySegment SEGMENT$glDisableClientStateIndexedEXT;
    public final @Nullable MemorySegment SEGMENT$glDisableClientStateiEXT;
    public final @Nullable MemorySegment SEGMENT$glDisableIndexedEXT;
    public final @Nullable MemorySegment SEGMENT$glDisableVertexArrayAttrib;
    public final @Nullable MemorySegment SEGMENT$glDisableVertexArrayAttribEXT;
    public final @Nullable MemorySegment SEGMENT$glDisableVertexArrayEXT;
    public final @Nullable MemorySegment SEGMENT$glDisableVertexAttribArray;
    public final @Nullable MemorySegment SEGMENT$glDisablei;
    public final @Nullable MemorySegment SEGMENT$glDispatchCompute;
    public final @Nullable MemorySegment SEGMENT$glDispatchComputeGroupSizeARB;
    public final @Nullable MemorySegment SEGMENT$glDispatchComputeIndirect;
    public final @Nullable MemorySegment SEGMENT$glDrawArrays;
    public final @Nullable MemorySegment SEGMENT$glDrawArraysIndirect;
    public final @Nullable MemorySegment SEGMENT$glDrawArraysInstanced;
    public final @Nullable MemorySegment SEGMENT$glDrawArraysInstancedARB;
    public final @Nullable MemorySegment SEGMENT$glDrawArraysInstancedBaseInstance;
    public final @Nullable MemorySegment SEGMENT$glDrawArraysInstancedEXT;
    public final @Nullable MemorySegment SEGMENT$glDrawBuffer;
    public final @Nullable MemorySegment SEGMENT$glDrawBuffers;
    public final @Nullable MemorySegment SEGMENT$glDrawCommandsAddressNV;
    public final @Nullable MemorySegment SEGMENT$glDrawCommandsNV;
    public final @Nullable MemorySegment SEGMENT$glDrawCommandsStatesAddressNV;
    public final @Nullable MemorySegment SEGMENT$glDrawCommandsStatesNV;
    public final @Nullable MemorySegment SEGMENT$glDrawElements;
    public final @Nullable MemorySegment SEGMENT$glDrawElementsBaseVertex;
    public final @Nullable MemorySegment SEGMENT$glDrawElementsIndirect;
    public final @Nullable MemorySegment SEGMENT$glDrawElementsInstanced;
    public final @Nullable MemorySegment SEGMENT$glDrawElementsInstancedARB;
    public final @Nullable MemorySegment SEGMENT$glDrawElementsInstancedBaseInstance;
    public final @Nullable MemorySegment SEGMENT$glDrawElementsInstancedBaseVertex;
    public final @Nullable MemorySegment SEGMENT$glDrawElementsInstancedBaseVertexBaseInstance;
    public final @Nullable MemorySegment SEGMENT$glDrawElementsInstancedEXT;
    public final @Nullable MemorySegment SEGMENT$glDrawMeshTasksIndirectNV;
    public final @Nullable MemorySegment SEGMENT$glDrawMeshTasksNV;
    public final @Nullable MemorySegment SEGMENT$glDrawRangeElements;
    public final @Nullable MemorySegment SEGMENT$glDrawRangeElementsBaseVertex;
    public final @Nullable MemorySegment SEGMENT$glDrawTransformFeedback;
    public final @Nullable MemorySegment SEGMENT$glDrawTransformFeedbackInstanced;
    public final @Nullable MemorySegment SEGMENT$glDrawTransformFeedbackStream;
    public final @Nullable MemorySegment SEGMENT$glDrawTransformFeedbackStreamInstanced;
    public final @Nullable MemorySegment SEGMENT$glDrawVkImageNV;
    public final @Nullable MemorySegment SEGMENT$glEGLImageTargetTexStorageEXT;
    public final @Nullable MemorySegment SEGMENT$glEGLImageTargetTextureStorageEXT;
    public final @Nullable MemorySegment SEGMENT$glEdgeFlagFormatNV;
    public final @Nullable MemorySegment SEGMENT$glEnable;
    public final @Nullable MemorySegment SEGMENT$glEnableClientStateIndexedEXT;
    public final @Nullable MemorySegment SEGMENT$glEnableClientStateiEXT;
    public final @Nullable MemorySegment SEGMENT$glEnableIndexedEXT;
    public final @Nullable MemorySegment SEGMENT$glEnableVertexArrayAttrib;
    public final @Nullable MemorySegment SEGMENT$glEnableVertexArrayAttribEXT;
    public final @Nullable MemorySegment SEGMENT$glEnableVertexArrayEXT;
    public final @Nullable MemorySegment SEGMENT$glEnableVertexAttribArray;
    public final @Nullable MemorySegment SEGMENT$glEnablei;
    public final @Nullable MemorySegment SEGMENT$glEndConditionalRender;
    public final @Nullable MemorySegment SEGMENT$glEndConditionalRenderNV;
    public final @Nullable MemorySegment SEGMENT$glEndPerfMonitorAMD;
    public final @Nullable MemorySegment SEGMENT$glEndPerfQueryINTEL;
    public final @Nullable MemorySegment SEGMENT$glEndQuery;
    public final @Nullable MemorySegment SEGMENT$glEndQueryIndexed;
    public final @Nullable MemorySegment SEGMENT$glEndTransformFeedback;
    public final @Nullable MemorySegment SEGMENT$glEvaluateDepthValuesARB;
    public final @Nullable MemorySegment SEGMENT$glFenceSync;
    public final @Nullable MemorySegment SEGMENT$glFinish;
    public final @Nullable MemorySegment SEGMENT$glFlush;
    public final @Nullable MemorySegment SEGMENT$glFlushMappedBufferRange;
    public final @Nullable MemorySegment SEGMENT$glFlushMappedNamedBufferRange;
    public final @Nullable MemorySegment SEGMENT$glFlushMappedNamedBufferRangeEXT;
    public final @Nullable MemorySegment SEGMENT$glFogCoordFormatNV;
    public final @Nullable MemorySegment SEGMENT$glFragmentCoverageColorNV;
    public final @Nullable MemorySegment SEGMENT$glFramebufferDrawBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glFramebufferDrawBuffersEXT;
    public final @Nullable MemorySegment SEGMENT$glFramebufferParameteri;
    public final @Nullable MemorySegment SEGMENT$glFramebufferParameteriMESA;
    public final @Nullable MemorySegment SEGMENT$glFramebufferReadBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glFramebufferRenderbuffer;
    public final @Nullable MemorySegment SEGMENT$glFramebufferSampleLocationsfvARB;
    public final @Nullable MemorySegment SEGMENT$glFramebufferSampleLocationsfvNV;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTexture;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTexture1D;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTexture2D;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTexture3D;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTextureARB;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTextureFaceARB;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTextureLayer;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTextureLayerARB;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTextureMultiviewOVR;
    public final @Nullable MemorySegment SEGMENT$glFrontFace;
    public final @Nullable MemorySegment SEGMENT$glGenBuffers;
    public final @Nullable MemorySegment SEGMENT$glGenFramebuffers;
    public final @Nullable MemorySegment SEGMENT$glGenPathsNV;
    public final @Nullable MemorySegment SEGMENT$glGenPerfMonitorsAMD;
    public final @Nullable MemorySegment SEGMENT$glGenProgramPipelines;
    public final @Nullable MemorySegment SEGMENT$glGenProgramPipelinesEXT;
    public final @Nullable MemorySegment SEGMENT$glGenQueries;
    public final @Nullable MemorySegment SEGMENT$glGenRenderbuffers;
    public final @Nullable MemorySegment SEGMENT$glGenSamplers;
    public final @Nullable MemorySegment SEGMENT$glGenTextures;
    public final @Nullable MemorySegment SEGMENT$glGenTransformFeedbacks;
    public final @Nullable MemorySegment SEGMENT$glGenVertexArrays;
    public final @Nullable MemorySegment SEGMENT$glGenerateMipmap;
    public final @Nullable MemorySegment SEGMENT$glGenerateMultiTexMipmapEXT;
    public final @Nullable MemorySegment SEGMENT$glGenerateTextureMipmap;
    public final @Nullable MemorySegment SEGMENT$glGenerateTextureMipmapEXT;
    public final @Nullable MemorySegment SEGMENT$glGetActiveAtomicCounterBufferiv;
    public final @Nullable MemorySegment SEGMENT$glGetActiveAttrib;
    public final @Nullable MemorySegment SEGMENT$glGetActiveSubroutineName;
    public final @Nullable MemorySegment SEGMENT$glGetActiveSubroutineUniformName;
    public final @Nullable MemorySegment SEGMENT$glGetActiveSubroutineUniformiv;
    public final @Nullable MemorySegment SEGMENT$glGetActiveUniform;
    public final @Nullable MemorySegment SEGMENT$glGetActiveUniformBlockName;
    public final @Nullable MemorySegment SEGMENT$glGetActiveUniformBlockiv;
    public final @Nullable MemorySegment SEGMENT$glGetActiveUniformName;
    public final @Nullable MemorySegment SEGMENT$glGetActiveUniformsiv;
    public final @Nullable MemorySegment SEGMENT$glGetAttachedShaders;
    public final @Nullable MemorySegment SEGMENT$glGetAttribLocation;
    public final @Nullable MemorySegment SEGMENT$glGetBooleanIndexedvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetBooleani_v;
    public final @Nullable MemorySegment SEGMENT$glGetBooleanv;
    public final @Nullable MemorySegment SEGMENT$glGetBufferParameteri64v;
    public final @Nullable MemorySegment SEGMENT$glGetBufferParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetBufferParameterui64vNV;
    public final @Nullable MemorySegment SEGMENT$glGetBufferPointerv;
    public final @Nullable MemorySegment SEGMENT$glGetBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glGetCommandHeaderNV;
    public final @Nullable MemorySegment SEGMENT$glGetCompressedMultiTexImageEXT;
    public final @Nullable MemorySegment SEGMENT$glGetCompressedTexImage;
    public final @Nullable MemorySegment SEGMENT$glGetCompressedTextureImage;
    public final @Nullable MemorySegment SEGMENT$glGetCompressedTextureImageEXT;
    public final @Nullable MemorySegment SEGMENT$glGetCompressedTextureSubImage;
    public final @Nullable MemorySegment SEGMENT$glGetCoverageModulationTableNV;
    public final @Nullable MemorySegment SEGMENT$glGetDebugMessageLog;
    public final @Nullable MemorySegment SEGMENT$glGetDebugMessageLogARB;
    public final @Nullable MemorySegment SEGMENT$glGetDebugMessageLogKHR;
    public final @Nullable MemorySegment SEGMENT$glGetDoubleIndexedvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetDoublei_v;
    public final @Nullable MemorySegment SEGMENT$glGetDoublei_vEXT;
    public final @Nullable MemorySegment SEGMENT$glGetDoublev;
    public final @Nullable MemorySegment SEGMENT$glGetError;
    public final @Nullable MemorySegment SEGMENT$glGetFirstPerfQueryIdINTEL;
    public final @Nullable MemorySegment SEGMENT$glGetFloatIndexedvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetFloati_v;
    public final @Nullable MemorySegment SEGMENT$glGetFloati_vEXT;
    public final @Nullable MemorySegment SEGMENT$glGetFloatv;
    public final @Nullable MemorySegment SEGMENT$glGetFragDataIndex;
    public final @Nullable MemorySegment SEGMENT$glGetFragDataLocation;
    public final @Nullable MemorySegment SEGMENT$glGetFramebufferAttachmentParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetFramebufferParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetFramebufferParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetFramebufferParameterivMESA;
    public final @Nullable MemorySegment SEGMENT$glGetGraphicsResetStatus;
    public final @Nullable MemorySegment SEGMENT$glGetGraphicsResetStatusARB;
    public final @Nullable MemorySegment SEGMENT$glGetGraphicsResetStatusKHR;
    public final @Nullable MemorySegment SEGMENT$glGetImageHandleARB;
    public final @Nullable MemorySegment SEGMENT$glGetImageHandleNV;
    public final @Nullable MemorySegment SEGMENT$glGetInteger64i_v;
    public final @Nullable MemorySegment SEGMENT$glGetInteger64v;
    public final @Nullable MemorySegment SEGMENT$glGetIntegerIndexedvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetIntegeri_v;
    public final @Nullable MemorySegment SEGMENT$glGetIntegerui64i_vNV;
    public final @Nullable MemorySegment SEGMENT$glGetIntegerui64vNV;
    public final @Nullable MemorySegment SEGMENT$glGetIntegerv;
    public final @Nullable MemorySegment SEGMENT$glGetInternalformatSampleivNV;
    public final @Nullable MemorySegment SEGMENT$glGetInternalformati64v;
    public final @Nullable MemorySegment SEGMENT$glGetInternalformativ;
    public final @Nullable MemorySegment SEGMENT$glGetMemoryObjectDetachedResourcesuivNV;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexEnvfvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexEnvivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexGendvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexGenfvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexGenivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexImageEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexLevelParameterfvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexLevelParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexParameterIivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexParameterIuivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexParameterfvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultiTexParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetMultisamplefv;
    public final @Nullable MemorySegment SEGMENT$glGetNamedBufferParameteri64v;
    public final @Nullable MemorySegment SEGMENT$glGetNamedBufferParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetNamedBufferParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedBufferParameterui64vNV;
    public final @Nullable MemorySegment SEGMENT$glGetNamedBufferPointerv;
    public final @Nullable MemorySegment SEGMENT$glGetNamedBufferPointervEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glGetNamedBufferSubDataEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedFramebufferAttachmentParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetNamedFramebufferAttachmentParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedFramebufferParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetNamedFramebufferParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedProgramLocalParameterIivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedProgramLocalParameterIuivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedProgramLocalParameterdvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedProgramLocalParameterfvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedProgramStringEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedProgramivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedRenderbufferParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetNamedRenderbufferParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetNamedStringARB;
    public final @Nullable MemorySegment SEGMENT$glGetNamedStringivARB;
    public final @Nullable MemorySegment SEGMENT$glGetNextPerfQueryIdINTEL;
    public final @Nullable MemorySegment SEGMENT$glGetObjectLabel;
    public final @Nullable MemorySegment SEGMENT$glGetObjectLabelEXT;
    public final @Nullable MemorySegment SEGMENT$glGetObjectLabelKHR;
    public final @Nullable MemorySegment SEGMENT$glGetObjectPtrLabel;
    public final @Nullable MemorySegment SEGMENT$glGetObjectPtrLabelKHR;
    public final @Nullable MemorySegment SEGMENT$glGetPathCommandsNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathCoordsNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathDashArrayNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathLengthNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathMetricRangeNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathMetricsNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathParameterfvNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathParameterivNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathSpacingNV;
    public final @Nullable MemorySegment SEGMENT$glGetPerfCounterInfoINTEL;
    public final @Nullable MemorySegment SEGMENT$glGetPerfMonitorCounterDataAMD;
    public final @Nullable MemorySegment SEGMENT$glGetPerfMonitorCounterInfoAMD;
    public final @Nullable MemorySegment SEGMENT$glGetPerfMonitorCounterStringAMD;
    public final @Nullable MemorySegment SEGMENT$glGetPerfMonitorCountersAMD;
    public final @Nullable MemorySegment SEGMENT$glGetPerfMonitorGroupStringAMD;
    public final @Nullable MemorySegment SEGMENT$glGetPerfMonitorGroupsAMD;
    public final @Nullable MemorySegment SEGMENT$glGetPerfQueryDataINTEL;
    public final @Nullable MemorySegment SEGMENT$glGetPerfQueryIdByNameINTEL;
    public final @Nullable MemorySegment SEGMENT$glGetPerfQueryInfoINTEL;
    public final @Nullable MemorySegment SEGMENT$glGetPointerIndexedvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetPointeri_vEXT;
    public final @Nullable MemorySegment SEGMENT$glGetPointerv;
    public final @Nullable MemorySegment SEGMENT$glGetPointervKHR;
    public final @Nullable MemorySegment SEGMENT$glGetProgramBinary;
    public final @Nullable MemorySegment SEGMENT$glGetProgramInfoLog;
    public final @Nullable MemorySegment SEGMENT$glGetProgramInterfaceiv;
    public final @Nullable MemorySegment SEGMENT$glGetProgramPipelineInfoLog;
    public final @Nullable MemorySegment SEGMENT$glGetProgramPipelineInfoLogEXT;
    public final @Nullable MemorySegment SEGMENT$glGetProgramPipelineiv;
    public final @Nullable MemorySegment SEGMENT$glGetProgramPipelineivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetProgramResourceIndex;
    public final @Nullable MemorySegment SEGMENT$glGetProgramResourceLocation;
    public final @Nullable MemorySegment SEGMENT$glGetProgramResourceLocationIndex;
    public final @Nullable MemorySegment SEGMENT$glGetProgramResourceName;
    public final @Nullable MemorySegment SEGMENT$glGetProgramResourcefvNV;
    public final @Nullable MemorySegment SEGMENT$glGetProgramResourceiv;
    public final @Nullable MemorySegment SEGMENT$glGetProgramStageiv;
    public final @Nullable MemorySegment SEGMENT$glGetProgramiv;
    public final @Nullable MemorySegment SEGMENT$glGetQueryBufferObjecti64v;
    public final @Nullable MemorySegment SEGMENT$glGetQueryBufferObjectiv;
    public final @Nullable MemorySegment SEGMENT$glGetQueryBufferObjectui64v;
    public final @Nullable MemorySegment SEGMENT$glGetQueryBufferObjectuiv;
    public final @Nullable MemorySegment SEGMENT$glGetQueryIndexediv;
    public final @Nullable MemorySegment SEGMENT$glGetQueryObjecti64v;
    public final @Nullable MemorySegment SEGMENT$glGetQueryObjectiv;
    public final @Nullable MemorySegment SEGMENT$glGetQueryObjectui64v;
    public final @Nullable MemorySegment SEGMENT$glGetQueryObjectuiv;
    public final @Nullable MemorySegment SEGMENT$glGetQueryiv;
    public final @Nullable MemorySegment SEGMENT$glGetRenderbufferParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetSamplerParameterIiv;
    public final @Nullable MemorySegment SEGMENT$glGetSamplerParameterIuiv;
    public final @Nullable MemorySegment SEGMENT$glGetSamplerParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetSamplerParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetShaderInfoLog;
    public final @Nullable MemorySegment SEGMENT$glGetShaderPrecisionFormat;
    public final @Nullable MemorySegment SEGMENT$glGetShaderSource;
    public final @Nullable MemorySegment SEGMENT$glGetShaderiv;
    public final @Nullable MemorySegment SEGMENT$glGetShadingRateImagePaletteNV;
    public final @Nullable MemorySegment SEGMENT$glGetShadingRateSampleLocationivNV;
    public final @Nullable MemorySegment SEGMENT$glGetStageIndexNV;
    public final @Nullable MemorySegment SEGMENT$glGetString;
    public final @Nullable MemorySegment SEGMENT$glGetStringi;
    public final @Nullable MemorySegment SEGMENT$glGetSubroutineIndex;
    public final @Nullable MemorySegment SEGMENT$glGetSubroutineUniformLocation;
    public final @Nullable MemorySegment SEGMENT$glGetSynciv;
    public final @Nullable MemorySegment SEGMENT$glGetTexImage;
    public final @Nullable MemorySegment SEGMENT$glGetTexLevelParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetTexLevelParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetTexParameterIiv;
    public final @Nullable MemorySegment SEGMENT$glGetTexParameterIuiv;
    public final @Nullable MemorySegment SEGMENT$glGetTexParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetTexParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetTextureHandleARB;
    public final @Nullable MemorySegment SEGMENT$glGetTextureHandleNV;
    public final @Nullable MemorySegment SEGMENT$glGetTextureImage;
    public final @Nullable MemorySegment SEGMENT$glGetTextureImageEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTextureLevelParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetTextureLevelParameterfvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTextureLevelParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetTextureLevelParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTextureParameterIiv;
    public final @Nullable MemorySegment SEGMENT$glGetTextureParameterIivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTextureParameterIuiv;
    public final @Nullable MemorySegment SEGMENT$glGetTextureParameterIuivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTextureParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetTextureParameterfvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTextureParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetTextureParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTextureSamplerHandleARB;
    public final @Nullable MemorySegment SEGMENT$glGetTextureSamplerHandleNV;
    public final @Nullable MemorySegment SEGMENT$glGetTextureSubImage;
    public final @Nullable MemorySegment SEGMENT$glGetTransformFeedbackVarying;
    public final @Nullable MemorySegment SEGMENT$glGetTransformFeedbacki64_v;
    public final @Nullable MemorySegment SEGMENT$glGetTransformFeedbacki_v;
    public final @Nullable MemorySegment SEGMENT$glGetTransformFeedbackiv;
    public final @Nullable MemorySegment SEGMENT$glGetUniformBlockIndex;
    public final @Nullable MemorySegment SEGMENT$glGetUniformIndices;
    public final @Nullable MemorySegment SEGMENT$glGetUniformLocation;
    public final @Nullable MemorySegment SEGMENT$glGetUniformSubroutineuiv;
    public final @Nullable MemorySegment SEGMENT$glGetUniformdv;
    public final @Nullable MemorySegment SEGMENT$glGetUniformfv;
    public final @Nullable MemorySegment SEGMENT$glGetUniformi64vARB;
    public final @Nullable MemorySegment SEGMENT$glGetUniformiv;
    public final @Nullable MemorySegment SEGMENT$glGetUniformui64vARB;
    public final @Nullable MemorySegment SEGMENT$glGetUniformuiv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexArrayIndexed64iv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexArrayIndexediv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexArrayIntegeri_vEXT;
    public final @Nullable MemorySegment SEGMENT$glGetVertexArrayIntegervEXT;
    public final @Nullable MemorySegment SEGMENT$glGetVertexArrayPointeri_vEXT;
    public final @Nullable MemorySegment SEGMENT$glGetVertexArrayPointervEXT;
    public final @Nullable MemorySegment SEGMENT$glGetVertexArrayiv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribIiv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribIuiv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribLdv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribLi64vNV;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribLui64vARB;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribLui64vNV;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribPointerv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribdv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribfv;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribiv;
    public final @Nullable MemorySegment SEGMENT$glGetVkProcAddrNV;
    public final @Nullable MemorySegment SEGMENT$glGetnCompressedTexImage;
    public final @Nullable MemorySegment SEGMENT$glGetnCompressedTexImageARB;
    public final @Nullable MemorySegment SEGMENT$glGetnTexImage;
    public final @Nullable MemorySegment SEGMENT$glGetnTexImageARB;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformdv;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformdvARB;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformfv;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformfvARB;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformfvKHR;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformi64vARB;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformiv;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformivARB;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformivKHR;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformui64vARB;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformuiv;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformuivARB;
    public final @Nullable MemorySegment SEGMENT$glGetnUniformuivKHR;
    public final @Nullable MemorySegment SEGMENT$glHint;
    public final @Nullable MemorySegment SEGMENT$glIndexFormatNV;
    public final @Nullable MemorySegment SEGMENT$glInsertEventMarkerEXT;
    public final @Nullable MemorySegment SEGMENT$glInterpolatePathsNV;
    public final @Nullable MemorySegment SEGMENT$glInvalidateBufferData;
    public final @Nullable MemorySegment SEGMENT$glInvalidateBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glInvalidateFramebuffer;
    public final @Nullable MemorySegment SEGMENT$glInvalidateNamedFramebufferData;
    public final @Nullable MemorySegment SEGMENT$glInvalidateNamedFramebufferSubData;
    public final @Nullable MemorySegment SEGMENT$glInvalidateSubFramebuffer;
    public final @Nullable MemorySegment SEGMENT$glInvalidateTexImage;
    public final @Nullable MemorySegment SEGMENT$glInvalidateTexSubImage;
    public final @Nullable MemorySegment SEGMENT$glIsBuffer;
    public final @Nullable MemorySegment SEGMENT$glIsBufferResidentNV;
    public final @Nullable MemorySegment SEGMENT$glIsCommandListNV;
    public final @Nullable MemorySegment SEGMENT$glIsEnabled;
    public final @Nullable MemorySegment SEGMENT$glIsEnabledIndexedEXT;
    public final @Nullable MemorySegment SEGMENT$glIsEnabledi;
    public final @Nullable MemorySegment SEGMENT$glIsFramebuffer;
    public final @Nullable MemorySegment SEGMENT$glIsImageHandleResidentARB;
    public final @Nullable MemorySegment SEGMENT$glIsImageHandleResidentNV;
    public final @Nullable MemorySegment SEGMENT$glIsNamedBufferResidentNV;
    public final @Nullable MemorySegment SEGMENT$glIsNamedStringARB;
    public final @Nullable MemorySegment SEGMENT$glIsPathNV;
    public final @Nullable MemorySegment SEGMENT$glIsPointInFillPathNV;
    public final @Nullable MemorySegment SEGMENT$glIsPointInStrokePathNV;
    public final @Nullable MemorySegment SEGMENT$glIsProgram;
    public final @Nullable MemorySegment SEGMENT$glIsProgramPipeline;
    public final @Nullable MemorySegment SEGMENT$glIsProgramPipelineEXT;
    public final @Nullable MemorySegment SEGMENT$glIsQuery;
    public final @Nullable MemorySegment SEGMENT$glIsRenderbuffer;
    public final @Nullable MemorySegment SEGMENT$glIsSampler;
    public final @Nullable MemorySegment SEGMENT$glIsShader;
    public final @Nullable MemorySegment SEGMENT$glIsStateNV;
    public final @Nullable MemorySegment SEGMENT$glIsSync;
    public final @Nullable MemorySegment SEGMENT$glIsTexture;
    public final @Nullable MemorySegment SEGMENT$glIsTextureHandleResidentARB;
    public final @Nullable MemorySegment SEGMENT$glIsTextureHandleResidentNV;
    public final @Nullable MemorySegment SEGMENT$glIsTransformFeedback;
    public final @Nullable MemorySegment SEGMENT$glIsVertexArray;
    public final @Nullable MemorySegment SEGMENT$glLabelObjectEXT;
    public final @Nullable MemorySegment SEGMENT$glLineWidth;
    public final @Nullable MemorySegment SEGMENT$glLinkProgram;
    public final @Nullable MemorySegment SEGMENT$glListDrawCommandsStatesClientNV;
    public final @Nullable MemorySegment SEGMENT$glLogicOp;
    public final @Nullable MemorySegment SEGMENT$glMakeBufferNonResidentNV;
    public final @Nullable MemorySegment SEGMENT$glMakeBufferResidentNV;
    public final @Nullable MemorySegment SEGMENT$glMakeImageHandleNonResidentARB;
    public final @Nullable MemorySegment SEGMENT$glMakeImageHandleNonResidentNV;
    public final @Nullable MemorySegment SEGMENT$glMakeImageHandleResidentARB;
    public final @Nullable MemorySegment SEGMENT$glMakeImageHandleResidentNV;
    public final @Nullable MemorySegment SEGMENT$glMakeNamedBufferNonResidentNV;
    public final @Nullable MemorySegment SEGMENT$glMakeNamedBufferResidentNV;
    public final @Nullable MemorySegment SEGMENT$glMakeTextureHandleNonResidentARB;
    public final @Nullable MemorySegment SEGMENT$glMakeTextureHandleNonResidentNV;
    public final @Nullable MemorySegment SEGMENT$glMakeTextureHandleResidentARB;
    public final @Nullable MemorySegment SEGMENT$glMakeTextureHandleResidentNV;
    public final @Nullable MemorySegment SEGMENT$glMapBuffer;
    public final @Nullable MemorySegment SEGMENT$glMapBufferRange;
    public final @Nullable MemorySegment SEGMENT$glMapNamedBuffer;
    public final @Nullable MemorySegment SEGMENT$glMapNamedBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glMapNamedBufferRange;
    public final @Nullable MemorySegment SEGMENT$glMapNamedBufferRangeEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixFrustumEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixLoad3x2fNV;
    public final @Nullable MemorySegment SEGMENT$glMatrixLoad3x3fNV;
    public final @Nullable MemorySegment SEGMENT$glMatrixLoadIdentityEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixLoadTranspose3x3fNV;
    public final @Nullable MemorySegment SEGMENT$glMatrixLoadTransposedEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixLoadTransposefEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixLoaddEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixLoadfEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixMult3x2fNV;
    public final @Nullable MemorySegment SEGMENT$glMatrixMult3x3fNV;
    public final @Nullable MemorySegment SEGMENT$glMatrixMultTranspose3x3fNV;
    public final @Nullable MemorySegment SEGMENT$glMatrixMultTransposedEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixMultTransposefEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixMultdEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixMultfEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixOrthoEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixPopEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixPushEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixRotatedEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixRotatefEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixScaledEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixScalefEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixTranslatedEXT;
    public final @Nullable MemorySegment SEGMENT$glMatrixTranslatefEXT;
    public final @Nullable MemorySegment SEGMENT$glMaxShaderCompilerThreadsARB;
    public final @Nullable MemorySegment SEGMENT$glMaxShaderCompilerThreadsKHR;
    public final @Nullable MemorySegment SEGMENT$glMemoryBarrier;
    public final @Nullable MemorySegment SEGMENT$glMemoryBarrierByRegion;
    public final @Nullable MemorySegment SEGMENT$glMinSampleShading;
    public final @Nullable MemorySegment SEGMENT$glMinSampleShadingARB;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawArrays;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawArraysIndirect;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawArraysIndirectBindlessCountNV;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawArraysIndirectBindlessNV;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawArraysIndirectCount;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawArraysIndirectCountARB;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawElements;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawElementsBaseVertex;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawElementsIndirect;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawElementsIndirectBindlessCountNV;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawElementsIndirectBindlessNV;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawElementsIndirectCount;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawElementsIndirectCountARB;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawMeshTasksIndirectCountNV;
    public final @Nullable MemorySegment SEGMENT$glMultiDrawMeshTasksIndirectNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordPointerEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexEnvfEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexEnvfvEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexEnviEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexEnvivEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexGendEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexGendvEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexGenfEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexGenfvEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexGeniEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexGenivEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexParameterIivEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexParameterIuivEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexParameterfEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexParameterfvEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexParameteriEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexRenderbufferEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexSubImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexSubImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glMultiTexSubImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferAttachMemoryNV;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferData;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferDataEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferPageCommitmentARB;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferPageCommitmentEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferPageCommitmentMemNV;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferStorage;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferStorageEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferSubData;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferSubDataEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedCopyBufferSubDataEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferDrawBuffer;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferDrawBuffers;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferParameteri;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferParameteriEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferReadBuffer;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferRenderbuffer;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferRenderbufferEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferSampleLocationsfvARB;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferSampleLocationsfvNV;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTexture;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTexture1DEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTexture2DEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTexture3DEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTextureEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTextureFaceEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTextureLayer;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTextureLayerEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedFramebufferTextureMultiviewOVR;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameter4dEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameter4dvEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameter4fEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameter4fvEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameterI4iEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameterI4ivEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameterI4uiEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameterI4uivEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParameters4fvEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParametersI4ivEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramLocalParametersI4uivEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedProgramStringEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedRenderbufferStorage;
    public final @Nullable MemorySegment SEGMENT$glNamedRenderbufferStorageEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedRenderbufferStorageMultisample;
    public final @Nullable MemorySegment SEGMENT$glNamedRenderbufferStorageMultisampleAdvancedAMD;
    public final @Nullable MemorySegment SEGMENT$glNamedRenderbufferStorageMultisampleCoverageEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedRenderbufferStorageMultisampleEXT;
    public final @Nullable MemorySegment SEGMENT$glNamedStringARB;
    public final @Nullable MemorySegment SEGMENT$glNormalFormatNV;
    public final @Nullable MemorySegment SEGMENT$glObjectLabel;
    public final @Nullable MemorySegment SEGMENT$glObjectLabelKHR;
    public final @Nullable MemorySegment SEGMENT$glObjectPtrLabel;
    public final @Nullable MemorySegment SEGMENT$glObjectPtrLabelKHR;
    public final @Nullable MemorySegment SEGMENT$glPatchParameterfv;
    public final @Nullable MemorySegment SEGMENT$glPatchParameteri;
    public final @Nullable MemorySegment SEGMENT$glPathCommandsNV;
    public final @Nullable MemorySegment SEGMENT$glPathCoordsNV;
    public final @Nullable MemorySegment SEGMENT$glPathCoverDepthFuncNV;
    public final @Nullable MemorySegment SEGMENT$glPathDashArrayNV;
    public final @Nullable MemorySegment SEGMENT$glPathGlyphIndexArrayNV;
    public final @Nullable MemorySegment SEGMENT$glPathGlyphIndexRangeNV;
    public final @Nullable MemorySegment SEGMENT$glPathGlyphRangeNV;
    public final @Nullable MemorySegment SEGMENT$glPathGlyphsNV;
    public final @Nullable MemorySegment SEGMENT$glPathMemoryGlyphIndexArrayNV;
    public final @Nullable MemorySegment SEGMENT$glPathParameterfNV;
    public final @Nullable MemorySegment SEGMENT$glPathParameterfvNV;
    public final @Nullable MemorySegment SEGMENT$glPathParameteriNV;
    public final @Nullable MemorySegment SEGMENT$glPathParameterivNV;
    public final @Nullable MemorySegment SEGMENT$glPathStencilDepthOffsetNV;
    public final @Nullable MemorySegment SEGMENT$glPathStencilFuncNV;
    public final @Nullable MemorySegment SEGMENT$glPathStringNV;
    public final @Nullable MemorySegment SEGMENT$glPathSubCommandsNV;
    public final @Nullable MemorySegment SEGMENT$glPathSubCoordsNV;
    public final @Nullable MemorySegment SEGMENT$glPauseTransformFeedback;
    public final @Nullable MemorySegment SEGMENT$glPixelStoref;
    public final @Nullable MemorySegment SEGMENT$glPixelStorei;
    public final @Nullable MemorySegment SEGMENT$glPointAlongPathNV;
    public final @Nullable MemorySegment SEGMENT$glPointParameterf;
    public final @Nullable MemorySegment SEGMENT$glPointParameterfv;
    public final @Nullable MemorySegment SEGMENT$glPointParameteri;
    public final @Nullable MemorySegment SEGMENT$glPointParameteriv;
    public final @Nullable MemorySegment SEGMENT$glPointSize;
    public final @Nullable MemorySegment SEGMENT$glPolygonMode;
    public final @Nullable MemorySegment SEGMENT$glPolygonOffset;
    public final @Nullable MemorySegment SEGMENT$glPolygonOffsetClamp;
    public final @Nullable MemorySegment SEGMENT$glPolygonOffsetClampEXT;
    public final @Nullable MemorySegment SEGMENT$glPopDebugGroup;
    public final @Nullable MemorySegment SEGMENT$glPopDebugGroupKHR;
    public final @Nullable MemorySegment SEGMENT$glPopGroupMarkerEXT;
    public final @Nullable MemorySegment SEGMENT$glPrimitiveBoundingBoxARB;
    public final @Nullable MemorySegment SEGMENT$glPrimitiveRestartIndex;
    public final @Nullable MemorySegment SEGMENT$glProgramBinary;
    public final @Nullable MemorySegment SEGMENT$glProgramParameteri;
    public final @Nullable MemorySegment SEGMENT$glProgramParameteriARB;
    public final @Nullable MemorySegment SEGMENT$glProgramPathFragmentInputGenNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1d;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1dEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1f;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1fEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1i;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1i64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1i64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1iEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1iv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1ivEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1ui;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1uiEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1uiv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1uivEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2d;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2dEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2f;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2fEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2i;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2i64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2i64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2iEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2iv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2ivEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2ui;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2uiEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2uiv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2uivEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3d;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3dEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3f;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3fEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3i;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3i64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3i64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3iEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3iv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3ivEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3ui;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3uiEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3uiv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3uivEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4d;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4dEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4f;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4fEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4i;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4i64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4i64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4iEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4iv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4ivEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4ui;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4uiEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4uiv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4uivEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformHandleui64ARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformHandleui64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformHandleui64vARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformHandleui64vNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2x3dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2x3dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2x3fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2x3fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2x4dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2x4dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2x4fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix2x4fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3x2dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3x2dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3x2fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3x2fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3x4dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3x4dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3x4fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix3x4fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4x2dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4x2dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4x2fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4x2fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4x3dv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4x3dvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4x3fv;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformMatrix4x3fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformui64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniformui64vNV;
    public final @Nullable MemorySegment SEGMENT$glProvokingVertex;
    public final @Nullable MemorySegment SEGMENT$glPushClientAttribDefaultEXT;
    public final @Nullable MemorySegment SEGMENT$glPushDebugGroup;
    public final @Nullable MemorySegment SEGMENT$glPushDebugGroupKHR;
    public final @Nullable MemorySegment SEGMENT$glPushGroupMarkerEXT;
    public final @Nullable MemorySegment SEGMENT$glQueryCounter;
    public final @Nullable MemorySegment SEGMENT$glRasterSamplesEXT;
    public final @Nullable MemorySegment SEGMENT$glReadBuffer;
    public final @Nullable MemorySegment SEGMENT$glReadPixels;
    public final @Nullable MemorySegment SEGMENT$glReadnPixels;
    public final @Nullable MemorySegment SEGMENT$glReadnPixelsARB;
    public final @Nullable MemorySegment SEGMENT$glReadnPixelsKHR;
    public final @Nullable MemorySegment SEGMENT$glReleaseShaderCompiler;
    public final @Nullable MemorySegment SEGMENT$glRenderbufferStorage;
    public final @Nullable MemorySegment SEGMENT$glRenderbufferStorageMultisample;
    public final @Nullable MemorySegment SEGMENT$glRenderbufferStorageMultisampleAdvancedAMD;
    public final @Nullable MemorySegment SEGMENT$glRenderbufferStorageMultisampleCoverageNV;
    public final @Nullable MemorySegment SEGMENT$glResetMemoryObjectParameterNV;
    public final @Nullable MemorySegment SEGMENT$glResolveDepthValuesNV;
    public final @Nullable MemorySegment SEGMENT$glResumeTransformFeedback;
    public final @Nullable MemorySegment SEGMENT$glSampleCoverage;
    public final @Nullable MemorySegment SEGMENT$glSampleMaski;
    public final @Nullable MemorySegment SEGMENT$glSamplerParameterIiv;
    public final @Nullable MemorySegment SEGMENT$glSamplerParameterIuiv;
    public final @Nullable MemorySegment SEGMENT$glSamplerParameterf;
    public final @Nullable MemorySegment SEGMENT$glSamplerParameterfv;
    public final @Nullable MemorySegment SEGMENT$glSamplerParameteri;
    public final @Nullable MemorySegment SEGMENT$glSamplerParameteriv;
    public final @Nullable MemorySegment SEGMENT$glScissor;
    public final @Nullable MemorySegment SEGMENT$glScissorArrayv;
    public final @Nullable MemorySegment SEGMENT$glScissorExclusiveArrayvNV;
    public final @Nullable MemorySegment SEGMENT$glScissorExclusiveNV;
    public final @Nullable MemorySegment SEGMENT$glScissorIndexed;
    public final @Nullable MemorySegment SEGMENT$glScissorIndexedv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColorFormatNV;
    public final @Nullable MemorySegment SEGMENT$glSelectPerfMonitorCountersAMD;
    public final @Nullable MemorySegment SEGMENT$glShaderBinary;
    public final @Nullable MemorySegment SEGMENT$glShaderSource;
    public final @Nullable MemorySegment SEGMENT$glShaderStorageBlockBinding;
    public final @Nullable MemorySegment SEGMENT$glShadingRateImageBarrierNV;
    public final @Nullable MemorySegment SEGMENT$glShadingRateImagePaletteNV;
    public final @Nullable MemorySegment SEGMENT$glShadingRateSampleOrderCustomNV;
    public final @Nullable MemorySegment SEGMENT$glShadingRateSampleOrderNV;
    public final @Nullable MemorySegment SEGMENT$glSignalVkFenceNV;
    public final @Nullable MemorySegment SEGMENT$glSignalVkSemaphoreNV;
    public final @Nullable MemorySegment SEGMENT$glSpecializeShader;
    public final @Nullable MemorySegment SEGMENT$glSpecializeShaderARB;
    public final @Nullable MemorySegment SEGMENT$glStateCaptureNV;
    public final @Nullable MemorySegment SEGMENT$glStencilFillPathInstancedNV;
    public final @Nullable MemorySegment SEGMENT$glStencilFillPathNV;
    public final @Nullable MemorySegment SEGMENT$glStencilFunc;
    public final @Nullable MemorySegment SEGMENT$glStencilFuncSeparate;
    public final @Nullable MemorySegment SEGMENT$glStencilMask;
    public final @Nullable MemorySegment SEGMENT$glStencilMaskSeparate;
    public final @Nullable MemorySegment SEGMENT$glStencilOp;
    public final @Nullable MemorySegment SEGMENT$glStencilOpSeparate;
    public final @Nullable MemorySegment SEGMENT$glStencilStrokePathInstancedNV;
    public final @Nullable MemorySegment SEGMENT$glStencilStrokePathNV;
    public final @Nullable MemorySegment SEGMENT$glStencilThenCoverFillPathInstancedNV;
    public final @Nullable MemorySegment SEGMENT$glStencilThenCoverFillPathNV;
    public final @Nullable MemorySegment SEGMENT$glStencilThenCoverStrokePathInstancedNV;
    public final @Nullable MemorySegment SEGMENT$glStencilThenCoverStrokePathNV;
    public final @Nullable MemorySegment SEGMENT$glSubpixelPrecisionBiasNV;
    public final @Nullable MemorySegment SEGMENT$glTexAttachMemoryNV;
    public final @Nullable MemorySegment SEGMENT$glTexBuffer;
    public final @Nullable MemorySegment SEGMENT$glTexBufferARB;
    public final @Nullable MemorySegment SEGMENT$glTexBufferRange;
    public final @Nullable MemorySegment SEGMENT$glTexCoordFormatNV;
    public final @Nullable MemorySegment SEGMENT$glTexImage1D;
    public final @Nullable MemorySegment SEGMENT$glTexImage2D;
    public final @Nullable MemorySegment SEGMENT$glTexImage2DMultisample;
    public final @Nullable MemorySegment SEGMENT$glTexImage3D;
    public final @Nullable MemorySegment SEGMENT$glTexImage3DMultisample;
    public final @Nullable MemorySegment SEGMENT$glTexPageCommitmentARB;
    public final @Nullable MemorySegment SEGMENT$glTexPageCommitmentMemNV;
    public final @Nullable MemorySegment SEGMENT$glTexParameterIiv;
    public final @Nullable MemorySegment SEGMENT$glTexParameterIuiv;
    public final @Nullable MemorySegment SEGMENT$glTexParameterf;
    public final @Nullable MemorySegment SEGMENT$glTexParameterfv;
    public final @Nullable MemorySegment SEGMENT$glTexParameteri;
    public final @Nullable MemorySegment SEGMENT$glTexParameteriv;
    public final @Nullable MemorySegment SEGMENT$glTexStorage1D;
    public final @Nullable MemorySegment SEGMENT$glTexStorage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glTexStorage2D;
    public final @Nullable MemorySegment SEGMENT$glTexStorage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glTexStorage2DMultisample;
    public final @Nullable MemorySegment SEGMENT$glTexStorage3D;
    public final @Nullable MemorySegment SEGMENT$glTexStorage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glTexStorage3DMultisample;
    public final @Nullable MemorySegment SEGMENT$glTexSubImage1D;
    public final @Nullable MemorySegment SEGMENT$glTexSubImage2D;
    public final @Nullable MemorySegment SEGMENT$glTexSubImage3D;
    public final @Nullable MemorySegment SEGMENT$glTextureAttachMemoryNV;
    public final @Nullable MemorySegment SEGMENT$glTextureBarrier;
    public final @Nullable MemorySegment SEGMENT$glTextureBarrierNV;
    public final @Nullable MemorySegment SEGMENT$glTextureBuffer;
    public final @Nullable MemorySegment SEGMENT$glTextureBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureBufferRange;
    public final @Nullable MemorySegment SEGMENT$glTextureBufferRangeEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glTexturePageCommitmentEXT;
    public final @Nullable MemorySegment SEGMENT$glTexturePageCommitmentMemNV;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterIiv;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterIivEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterIuiv;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterIuivEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterf;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterfEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterfv;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterfvEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureParameteri;
    public final @Nullable MemorySegment SEGMENT$glTextureParameteriEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureParameteriv;
    public final @Nullable MemorySegment SEGMENT$glTextureParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureRenderbufferEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage1D;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage2D;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage2DMultisample;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage2DMultisampleEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage3D;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage3DMultisample;
    public final @Nullable MemorySegment SEGMENT$glTextureStorage3DMultisampleEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureSubImage1D;
    public final @Nullable MemorySegment SEGMENT$glTextureSubImage1DEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureSubImage2D;
    public final @Nullable MemorySegment SEGMENT$glTextureSubImage2DEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureSubImage3D;
    public final @Nullable MemorySegment SEGMENT$glTextureSubImage3DEXT;
    public final @Nullable MemorySegment SEGMENT$glTextureView;
    public final @Nullable MemorySegment SEGMENT$glTransformFeedbackBufferBase;
    public final @Nullable MemorySegment SEGMENT$glTransformFeedbackBufferRange;
    public final @Nullable MemorySegment SEGMENT$glTransformFeedbackVaryings;
    public final @Nullable MemorySegment SEGMENT$glTransformPathNV;
    public final @Nullable MemorySegment SEGMENT$glUniform1d;
    public final @Nullable MemorySegment SEGMENT$glUniform1dv;
    public final @Nullable MemorySegment SEGMENT$glUniform1f;
    public final @Nullable MemorySegment SEGMENT$glUniform1fv;
    public final @Nullable MemorySegment SEGMENT$glUniform1i;
    public final @Nullable MemorySegment SEGMENT$glUniform1i64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniform1i64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniform1iv;
    public final @Nullable MemorySegment SEGMENT$glUniform1ui;
    public final @Nullable MemorySegment SEGMENT$glUniform1ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniform1ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniform1uiv;
    public final @Nullable MemorySegment SEGMENT$glUniform2d;
    public final @Nullable MemorySegment SEGMENT$glUniform2dv;
    public final @Nullable MemorySegment SEGMENT$glUniform2f;
    public final @Nullable MemorySegment SEGMENT$glUniform2fv;
    public final @Nullable MemorySegment SEGMENT$glUniform2i;
    public final @Nullable MemorySegment SEGMENT$glUniform2i64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniform2i64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniform2iv;
    public final @Nullable MemorySegment SEGMENT$glUniform2ui;
    public final @Nullable MemorySegment SEGMENT$glUniform2ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniform2ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniform2uiv;
    public final @Nullable MemorySegment SEGMENT$glUniform3d;
    public final @Nullable MemorySegment SEGMENT$glUniform3dv;
    public final @Nullable MemorySegment SEGMENT$glUniform3f;
    public final @Nullable MemorySegment SEGMENT$glUniform3fv;
    public final @Nullable MemorySegment SEGMENT$glUniform3i;
    public final @Nullable MemorySegment SEGMENT$glUniform3i64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniform3i64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniform3iv;
    public final @Nullable MemorySegment SEGMENT$glUniform3ui;
    public final @Nullable MemorySegment SEGMENT$glUniform3ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniform3ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniform3uiv;
    public final @Nullable MemorySegment SEGMENT$glUniform4d;
    public final @Nullable MemorySegment SEGMENT$glUniform4dv;
    public final @Nullable MemorySegment SEGMENT$glUniform4f;
    public final @Nullable MemorySegment SEGMENT$glUniform4fv;
    public final @Nullable MemorySegment SEGMENT$glUniform4i;
    public final @Nullable MemorySegment SEGMENT$glUniform4i64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniform4i64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniform4iv;
    public final @Nullable MemorySegment SEGMENT$glUniform4ui;
    public final @Nullable MemorySegment SEGMENT$glUniform4ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniform4ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniform4uiv;
    public final @Nullable MemorySegment SEGMENT$glUniformBlockBinding;
    public final @Nullable MemorySegment SEGMENT$glUniformHandleui64ARB;
    public final @Nullable MemorySegment SEGMENT$glUniformHandleui64NV;
    public final @Nullable MemorySegment SEGMENT$glUniformHandleui64vARB;
    public final @Nullable MemorySegment SEGMENT$glUniformHandleui64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix2dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix2fv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix2x3dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix2x3fv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix2x4dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix2x4fv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix3dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix3fv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix3x2dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix3x2fv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix3x4dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix3x4fv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix4dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix4fv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix4x2dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix4x2fv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix4x3dv;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix4x3fv;
    public final @Nullable MemorySegment SEGMENT$glUniformSubroutinesuiv;
    public final @Nullable MemorySegment SEGMENT$glUniformui64NV;
    public final @Nullable MemorySegment SEGMENT$glUniformui64vNV;
    public final @Nullable MemorySegment SEGMENT$glUnmapBuffer;
    public final @Nullable MemorySegment SEGMENT$glUnmapNamedBuffer;
    public final @Nullable MemorySegment SEGMENT$glUnmapNamedBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glUseProgram;
    public final @Nullable MemorySegment SEGMENT$glUseProgramStages;
    public final @Nullable MemorySegment SEGMENT$glUseProgramStagesEXT;
    public final @Nullable MemorySegment SEGMENT$glUseShaderProgramEXT;
    public final @Nullable MemorySegment SEGMENT$glValidateProgram;
    public final @Nullable MemorySegment SEGMENT$glValidateProgramPipeline;
    public final @Nullable MemorySegment SEGMENT$glValidateProgramPipelineEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayAttribBinding;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayAttribFormat;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayAttribIFormat;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayAttribLFormat;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayBindVertexBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayBindingDivisor;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayColorOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayEdgeFlagOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayElementBuffer;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayFogCoordOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayIndexOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayMultiTexCoordOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayNormalOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArraySecondaryColorOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayTexCoordOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexAttribBindingEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexAttribDivisorEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexAttribFormatEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexAttribIFormatEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexAttribIOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexAttribLFormatEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexAttribLOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexAttribOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexBindingDivisorEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexBuffer;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexBuffers;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayVertexOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1d;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1dv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1f;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1fv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1s;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1sv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2d;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2dv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2f;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2fv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2s;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2sv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3d;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3dv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3f;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3fv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3s;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3sv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4Nbv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4Niv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4Nsv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4Nub;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4Nubv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4Nuiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4Nusv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4bv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4d;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4dv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4f;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4fv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4iv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4s;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4sv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4ubv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4usv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribBinding;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribDivisor;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribDivisorARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribFormat;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribFormatNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI1i;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI1iv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI1ui;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI1uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI2i;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI2iv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI2ui;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI2uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI3i;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI3iv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI3ui;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI3uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4bv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4i;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4iv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4sv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4ubv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4ui;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4usv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribIFormat;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribIFormatNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribIPointer;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1d;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1dv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1i64NV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1i64vNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1ui64ARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1ui64NV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1ui64vARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL2d;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL2dv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL2i64NV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL2i64vNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL2ui64NV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL2ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL3d;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL3dv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL3i64NV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL3i64vNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL3ui64NV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL3ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL4d;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL4dv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL4i64NV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL4i64vNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL4ui64NV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL4ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribLFormat;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribLFormatNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribLPointer;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribP1ui;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribP1uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribP2ui;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribP2uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribP3ui;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribP3uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribP4ui;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribP4uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribPointer;
    public final @Nullable MemorySegment SEGMENT$glVertexBindingDivisor;
    public final @Nullable MemorySegment SEGMENT$glVertexFormatNV;
    public final @Nullable MemorySegment SEGMENT$glViewport;
    public final @Nullable MemorySegment SEGMENT$glViewportArrayv;
    public final @Nullable MemorySegment SEGMENT$glViewportIndexedf;
    public final @Nullable MemorySegment SEGMENT$glViewportIndexedfv;
    public final @Nullable MemorySegment SEGMENT$glViewportPositionWScaleNV;
    public final @Nullable MemorySegment SEGMENT$glViewportSwizzleNV;
    public final @Nullable MemorySegment SEGMENT$glWaitSync;
    public final @Nullable MemorySegment SEGMENT$glWaitVkSemaphoreNV;
    public final @Nullable MemorySegment SEGMENT$glWeightPathsNV;
    public final @Nullable MemorySegment SEGMENT$glWindowRectanglesEXT;
    public final @Nullable MethodHandle HANDLE$glActiveProgramEXT;
    public final @Nullable MethodHandle HANDLE$glActiveShaderProgram;
    public final @Nullable MethodHandle HANDLE$glActiveShaderProgramEXT;
    public final @Nullable MethodHandle HANDLE$glActiveTexture;
    public final @Nullable MethodHandle HANDLE$glApplyFramebufferAttachmentCMAAINTEL;
    public final @Nullable MethodHandle HANDLE$glAttachShader;
    public final @Nullable MethodHandle HANDLE$glBeginConditionalRender;
    public final @Nullable MethodHandle HANDLE$glBeginConditionalRenderNV;
    public final @Nullable MethodHandle HANDLE$glBeginPerfMonitorAMD;
    public final @Nullable MethodHandle HANDLE$glBeginPerfQueryINTEL;
    public final @Nullable MethodHandle HANDLE$glBeginQuery;
    public final @Nullable MethodHandle HANDLE$glBeginQueryIndexed;
    public final @Nullable MethodHandle HANDLE$glBeginTransformFeedback;
    public final @Nullable MethodHandle HANDLE$glBindAttribLocation;
    public final @Nullable MethodHandle HANDLE$glBindBuffer;
    public final @Nullable MethodHandle HANDLE$glBindBufferBase;
    public final @Nullable MethodHandle HANDLE$glBindBufferRange;
    public final @Nullable MethodHandle HANDLE$glBindBuffersBase;
    public final @Nullable MethodHandle HANDLE$glBindBuffersRange;
    public final @Nullable MethodHandle HANDLE$glBindFragDataLocation;
    public final @Nullable MethodHandle HANDLE$glBindFragDataLocationIndexed;
    public final @Nullable MethodHandle HANDLE$glBindFramebuffer;
    public final @Nullable MethodHandle HANDLE$glBindImageTexture;
    public final @Nullable MethodHandle HANDLE$glBindImageTextures;
    public final @Nullable MethodHandle HANDLE$glBindMultiTextureEXT;
    public final @Nullable MethodHandle HANDLE$glBindProgramPipeline;
    public final @Nullable MethodHandle HANDLE$glBindProgramPipelineEXT;
    public final @Nullable MethodHandle HANDLE$glBindRenderbuffer;
    public final @Nullable MethodHandle HANDLE$glBindSampler;
    public final @Nullable MethodHandle HANDLE$glBindSamplers;
    public final @Nullable MethodHandle HANDLE$glBindShadingRateImageNV;
    public final @Nullable MethodHandle HANDLE$glBindTexture;
    public final @Nullable MethodHandle HANDLE$glBindTextureUnit;
    public final @Nullable MethodHandle HANDLE$glBindTextures;
    public final @Nullable MethodHandle HANDLE$glBindTransformFeedback;
    public final @Nullable MethodHandle HANDLE$glBindVertexArray;
    public final @Nullable MethodHandle HANDLE$glBindVertexBuffer;
    public final @Nullable MethodHandle HANDLE$glBindVertexBuffers;
    public final @Nullable MethodHandle HANDLE$glBlendBarrierKHR;
    public final @Nullable MethodHandle HANDLE$glBlendBarrierNV;
    public final @Nullable MethodHandle HANDLE$glBlendColor;
    public final @Nullable MethodHandle HANDLE$glBlendEquation;
    public final @Nullable MethodHandle HANDLE$glBlendEquationSeparate;
    public final @Nullable MethodHandle HANDLE$glBlendEquationSeparatei;
    public final @Nullable MethodHandle HANDLE$glBlendEquationSeparateiARB;
    public final @Nullable MethodHandle HANDLE$glBlendEquationi;
    public final @Nullable MethodHandle HANDLE$glBlendEquationiARB;
    public final @Nullable MethodHandle HANDLE$glBlendFunc;
    public final @Nullable MethodHandle HANDLE$glBlendFuncSeparate;
    public final @Nullable MethodHandle HANDLE$glBlendFuncSeparatei;
    public final @Nullable MethodHandle HANDLE$glBlendFuncSeparateiARB;
    public final @Nullable MethodHandle HANDLE$glBlendFunci;
    public final @Nullable MethodHandle HANDLE$glBlendFunciARB;
    public final @Nullable MethodHandle HANDLE$glBlendParameteriNV;
    public final @Nullable MethodHandle HANDLE$glBlitFramebuffer;
    public final @Nullable MethodHandle HANDLE$glBlitNamedFramebuffer;
    public final @Nullable MethodHandle HANDLE$glBufferAddressRangeNV;
    public final @Nullable MethodHandle HANDLE$glBufferAttachMemoryNV;
    public final @Nullable MethodHandle HANDLE$glBufferData;
    public final @Nullable MethodHandle HANDLE$glBufferPageCommitmentARB;
    public final @Nullable MethodHandle HANDLE$glBufferPageCommitmentMemNV;
    public final @Nullable MethodHandle HANDLE$glBufferStorage;
    public final @Nullable MethodHandle HANDLE$glBufferSubData;
    public final @Nullable MethodHandle HANDLE$glCallCommandListNV;
    public final @Nullable MethodHandle HANDLE$glCheckFramebufferStatus;
    public final @Nullable MethodHandle HANDLE$glCheckNamedFramebufferStatus;
    public final @Nullable MethodHandle HANDLE$glCheckNamedFramebufferStatusEXT;
    public final @Nullable MethodHandle HANDLE$glClampColor;
    public final @Nullable MethodHandle HANDLE$glClear;
    public final @Nullable MethodHandle HANDLE$glClearBufferData;
    public final @Nullable MethodHandle HANDLE$glClearBufferSubData;
    public final @Nullable MethodHandle HANDLE$glClearBufferfi;
    public final @Nullable MethodHandle HANDLE$glClearBufferfv;
    public final @Nullable MethodHandle HANDLE$glClearBufferiv;
    public final @Nullable MethodHandle HANDLE$glClearBufferuiv;
    public final @Nullable MethodHandle HANDLE$glClearColor;
    public final @Nullable MethodHandle HANDLE$glClearDepth;
    public final @Nullable MethodHandle HANDLE$glClearDepthdNV;
    public final @Nullable MethodHandle HANDLE$glClearDepthf;
    public final @Nullable MethodHandle HANDLE$glClearNamedBufferData;
    public final @Nullable MethodHandle HANDLE$glClearNamedBufferDataEXT;
    public final @Nullable MethodHandle HANDLE$glClearNamedBufferSubData;
    public final @Nullable MethodHandle HANDLE$glClearNamedBufferSubDataEXT;
    public final @Nullable MethodHandle HANDLE$glClearNamedFramebufferfi;
    public final @Nullable MethodHandle HANDLE$glClearNamedFramebufferfv;
    public final @Nullable MethodHandle HANDLE$glClearNamedFramebufferiv;
    public final @Nullable MethodHandle HANDLE$glClearNamedFramebufferuiv;
    public final @Nullable MethodHandle HANDLE$glClearStencil;
    public final @Nullable MethodHandle HANDLE$glClearTexImage;
    public final @Nullable MethodHandle HANDLE$glClearTexSubImage;
    public final @Nullable MethodHandle HANDLE$glClientAttribDefaultEXT;
    public final @Nullable MethodHandle HANDLE$glClientWaitSync;
    public final @Nullable MethodHandle HANDLE$glClipControl;
    public final @Nullable MethodHandle HANDLE$glColorFormatNV;
    public final @Nullable MethodHandle HANDLE$glColorMask;
    public final @Nullable MethodHandle HANDLE$glColorMaski;
    public final @Nullable MethodHandle HANDLE$glCommandListSegmentsNV;
    public final @Nullable MethodHandle HANDLE$glCompileCommandListNV;
    public final @Nullable MethodHandle HANDLE$glCompileShader;
    public final @Nullable MethodHandle HANDLE$glCompileShaderIncludeARB;
    public final @Nullable MethodHandle HANDLE$glCompressedMultiTexImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedMultiTexImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedMultiTexImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedMultiTexSubImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedMultiTexSubImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedMultiTexSubImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedTexImage1D;
    public final @Nullable MethodHandle HANDLE$glCompressedTexImage2D;
    public final @Nullable MethodHandle HANDLE$glCompressedTexImage3D;
    public final @Nullable MethodHandle HANDLE$glCompressedTexSubImage1D;
    public final @Nullable MethodHandle HANDLE$glCompressedTexSubImage2D;
    public final @Nullable MethodHandle HANDLE$glCompressedTexSubImage3D;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureSubImage1D;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureSubImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureSubImage2D;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureSubImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureSubImage3D;
    public final @Nullable MethodHandle HANDLE$glCompressedTextureSubImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glConservativeRasterParameterfNV;
    public final @Nullable MethodHandle HANDLE$glConservativeRasterParameteriNV;
    public final @Nullable MethodHandle HANDLE$glCopyBufferSubData;
    public final @Nullable MethodHandle HANDLE$glCopyImageSubData;
    public final @Nullable MethodHandle HANDLE$glCopyMultiTexImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyMultiTexImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyMultiTexSubImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyMultiTexSubImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyMultiTexSubImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyNamedBufferSubData;
    public final @Nullable MethodHandle HANDLE$glCopyPathNV;
    public final @Nullable MethodHandle HANDLE$glCopyTexImage1D;
    public final @Nullable MethodHandle HANDLE$glCopyTexImage2D;
    public final @Nullable MethodHandle HANDLE$glCopyTexSubImage1D;
    public final @Nullable MethodHandle HANDLE$glCopyTexSubImage2D;
    public final @Nullable MethodHandle HANDLE$glCopyTexSubImage3D;
    public final @Nullable MethodHandle HANDLE$glCopyTextureImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyTextureImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyTextureSubImage1D;
    public final @Nullable MethodHandle HANDLE$glCopyTextureSubImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyTextureSubImage2D;
    public final @Nullable MethodHandle HANDLE$glCopyTextureSubImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glCopyTextureSubImage3D;
    public final @Nullable MethodHandle HANDLE$glCopyTextureSubImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glCoverFillPathInstancedNV;
    public final @Nullable MethodHandle HANDLE$glCoverFillPathNV;
    public final @Nullable MethodHandle HANDLE$glCoverStrokePathInstancedNV;
    public final @Nullable MethodHandle HANDLE$glCoverStrokePathNV;
    public final @Nullable MethodHandle HANDLE$glCoverageModulationNV;
    public final @Nullable MethodHandle HANDLE$glCoverageModulationTableNV;
    public final @Nullable MethodHandle HANDLE$glCreateBuffers;
    public final @Nullable MethodHandle HANDLE$glCreateCommandListsNV;
    public final @Nullable MethodHandle HANDLE$glCreateFramebuffers;
    public final @Nullable MethodHandle HANDLE$glCreatePerfQueryINTEL;
    public final @Nullable MethodHandle HANDLE$glCreateProgram;
    public final @Nullable MethodHandle HANDLE$glCreateProgramPipelines;
    public final @Nullable MethodHandle HANDLE$glCreateQueries;
    public final @Nullable MethodHandle HANDLE$glCreateRenderbuffers;
    public final @Nullable MethodHandle HANDLE$glCreateSamplers;
    public final @Nullable MethodHandle HANDLE$glCreateShader;
    public final @Nullable MethodHandle HANDLE$glCreateShaderProgramEXT;
    public final @Nullable MethodHandle HANDLE$glCreateShaderProgramv;
    public final @Nullable MethodHandle HANDLE$glCreateShaderProgramvEXT;
    public final @Nullable MethodHandle HANDLE$glCreateStatesNV;
    public final @Nullable MethodHandle HANDLE$glCreateSyncFromCLeventARB;
    public final @Nullable MethodHandle HANDLE$glCreateTextures;
    public final @Nullable MethodHandle HANDLE$glCreateTransformFeedbacks;
    public final @Nullable MethodHandle HANDLE$glCreateVertexArrays;
    public final @Nullable MethodHandle HANDLE$glCullFace;
    public final @Nullable MethodHandle HANDLE$glDebugMessageCallback;
    public final @Nullable MethodHandle HANDLE$glDebugMessageCallbackARB;
    public final @Nullable MethodHandle HANDLE$glDebugMessageCallbackKHR;
    public final @Nullable MethodHandle HANDLE$glDebugMessageControl;
    public final @Nullable MethodHandle HANDLE$glDebugMessageControlARB;
    public final @Nullable MethodHandle HANDLE$glDebugMessageControlKHR;
    public final @Nullable MethodHandle HANDLE$glDebugMessageInsert;
    public final @Nullable MethodHandle HANDLE$glDebugMessageInsertARB;
    public final @Nullable MethodHandle HANDLE$glDebugMessageInsertKHR;
    public final @Nullable MethodHandle HANDLE$glDeleteBuffers;
    public final @Nullable MethodHandle HANDLE$glDeleteCommandListsNV;
    public final @Nullable MethodHandle HANDLE$glDeleteFramebuffers;
    public final @Nullable MethodHandle HANDLE$glDeleteNamedStringARB;
    public final @Nullable MethodHandle HANDLE$glDeletePathsNV;
    public final @Nullable MethodHandle HANDLE$glDeletePerfMonitorsAMD;
    public final @Nullable MethodHandle HANDLE$glDeletePerfQueryINTEL;
    public final @Nullable MethodHandle HANDLE$glDeleteProgram;
    public final @Nullable MethodHandle HANDLE$glDeleteProgramPipelines;
    public final @Nullable MethodHandle HANDLE$glDeleteProgramPipelinesEXT;
    public final @Nullable MethodHandle HANDLE$glDeleteQueries;
    public final @Nullable MethodHandle HANDLE$glDeleteRenderbuffers;
    public final @Nullable MethodHandle HANDLE$glDeleteSamplers;
    public final @Nullable MethodHandle HANDLE$glDeleteShader;
    public final @Nullable MethodHandle HANDLE$glDeleteStatesNV;
    public final @Nullable MethodHandle HANDLE$glDeleteSync;
    public final @Nullable MethodHandle HANDLE$glDeleteTextures;
    public final @Nullable MethodHandle HANDLE$glDeleteTransformFeedbacks;
    public final @Nullable MethodHandle HANDLE$glDeleteVertexArrays;
    public final @Nullable MethodHandle HANDLE$glDepthBoundsdNV;
    public final @Nullable MethodHandle HANDLE$glDepthFunc;
    public final @Nullable MethodHandle HANDLE$glDepthMask;
    public final @Nullable MethodHandle HANDLE$glDepthRange;
    public final @Nullable MethodHandle HANDLE$glDepthRangeArraydvNV;
    public final @Nullable MethodHandle HANDLE$glDepthRangeArrayv;
    public final @Nullable MethodHandle HANDLE$glDepthRangeIndexed;
    public final @Nullable MethodHandle HANDLE$glDepthRangeIndexeddNV;
    public final @Nullable MethodHandle HANDLE$glDepthRangedNV;
    public final @Nullable MethodHandle HANDLE$glDepthRangef;
    public final @Nullable MethodHandle HANDLE$glDetachShader;
    public final @Nullable MethodHandle HANDLE$glDisable;
    public final @Nullable MethodHandle HANDLE$glDisableClientStateIndexedEXT;
    public final @Nullable MethodHandle HANDLE$glDisableClientStateiEXT;
    public final @Nullable MethodHandle HANDLE$glDisableIndexedEXT;
    public final @Nullable MethodHandle HANDLE$glDisableVertexArrayAttrib;
    public final @Nullable MethodHandle HANDLE$glDisableVertexArrayAttribEXT;
    public final @Nullable MethodHandle HANDLE$glDisableVertexArrayEXT;
    public final @Nullable MethodHandle HANDLE$glDisableVertexAttribArray;
    public final @Nullable MethodHandle HANDLE$glDisablei;
    public final @Nullable MethodHandle HANDLE$glDispatchCompute;
    public final @Nullable MethodHandle HANDLE$glDispatchComputeGroupSizeARB;
    public final @Nullable MethodHandle HANDLE$glDispatchComputeIndirect;
    public final @Nullable MethodHandle HANDLE$glDrawArrays;
    public final @Nullable MethodHandle HANDLE$glDrawArraysIndirect;
    public final @Nullable MethodHandle HANDLE$glDrawArraysInstanced;
    public final @Nullable MethodHandle HANDLE$glDrawArraysInstancedARB;
    public final @Nullable MethodHandle HANDLE$glDrawArraysInstancedBaseInstance;
    public final @Nullable MethodHandle HANDLE$glDrawArraysInstancedEXT;
    public final @Nullable MethodHandle HANDLE$glDrawBuffer;
    public final @Nullable MethodHandle HANDLE$glDrawBuffers;
    public final @Nullable MethodHandle HANDLE$glDrawCommandsAddressNV;
    public final @Nullable MethodHandle HANDLE$glDrawCommandsNV;
    public final @Nullable MethodHandle HANDLE$glDrawCommandsStatesAddressNV;
    public final @Nullable MethodHandle HANDLE$glDrawCommandsStatesNV;
    public final @Nullable MethodHandle HANDLE$glDrawElements;
    public final @Nullable MethodHandle HANDLE$glDrawElementsBaseVertex;
    public final @Nullable MethodHandle HANDLE$glDrawElementsIndirect;
    public final @Nullable MethodHandle HANDLE$glDrawElementsInstanced;
    public final @Nullable MethodHandle HANDLE$glDrawElementsInstancedARB;
    public final @Nullable MethodHandle HANDLE$glDrawElementsInstancedBaseInstance;
    public final @Nullable MethodHandle HANDLE$glDrawElementsInstancedBaseVertex;
    public final @Nullable MethodHandle HANDLE$glDrawElementsInstancedBaseVertexBaseInstance;
    public final @Nullable MethodHandle HANDLE$glDrawElementsInstancedEXT;
    public final @Nullable MethodHandle HANDLE$glDrawMeshTasksIndirectNV;
    public final @Nullable MethodHandle HANDLE$glDrawMeshTasksNV;
    public final @Nullable MethodHandle HANDLE$glDrawRangeElements;
    public final @Nullable MethodHandle HANDLE$glDrawRangeElementsBaseVertex;
    public final @Nullable MethodHandle HANDLE$glDrawTransformFeedback;
    public final @Nullable MethodHandle HANDLE$glDrawTransformFeedbackInstanced;
    public final @Nullable MethodHandle HANDLE$glDrawTransformFeedbackStream;
    public final @Nullable MethodHandle HANDLE$glDrawTransformFeedbackStreamInstanced;
    public final @Nullable MethodHandle HANDLE$glDrawVkImageNV;
    public final @Nullable MethodHandle HANDLE$glEGLImageTargetTexStorageEXT;
    public final @Nullable MethodHandle HANDLE$glEGLImageTargetTextureStorageEXT;
    public final @Nullable MethodHandle HANDLE$glEdgeFlagFormatNV;
    public final @Nullable MethodHandle HANDLE$glEnable;
    public final @Nullable MethodHandle HANDLE$glEnableClientStateIndexedEXT;
    public final @Nullable MethodHandle HANDLE$glEnableClientStateiEXT;
    public final @Nullable MethodHandle HANDLE$glEnableIndexedEXT;
    public final @Nullable MethodHandle HANDLE$glEnableVertexArrayAttrib;
    public final @Nullable MethodHandle HANDLE$glEnableVertexArrayAttribEXT;
    public final @Nullable MethodHandle HANDLE$glEnableVertexArrayEXT;
    public final @Nullable MethodHandle HANDLE$glEnableVertexAttribArray;
    public final @Nullable MethodHandle HANDLE$glEnablei;
    public final @Nullable MethodHandle HANDLE$glEndConditionalRender;
    public final @Nullable MethodHandle HANDLE$glEndConditionalRenderNV;
    public final @Nullable MethodHandle HANDLE$glEndPerfMonitorAMD;
    public final @Nullable MethodHandle HANDLE$glEndPerfQueryINTEL;
    public final @Nullable MethodHandle HANDLE$glEndQuery;
    public final @Nullable MethodHandle HANDLE$glEndQueryIndexed;
    public final @Nullable MethodHandle HANDLE$glEndTransformFeedback;
    public final @Nullable MethodHandle HANDLE$glEvaluateDepthValuesARB;
    public final @Nullable MethodHandle HANDLE$glFenceSync;
    public final @Nullable MethodHandle HANDLE$glFinish;
    public final @Nullable MethodHandle HANDLE$glFlush;
    public final @Nullable MethodHandle HANDLE$glFlushMappedBufferRange;
    public final @Nullable MethodHandle HANDLE$glFlushMappedNamedBufferRange;
    public final @Nullable MethodHandle HANDLE$glFlushMappedNamedBufferRangeEXT;
    public final @Nullable MethodHandle HANDLE$glFogCoordFormatNV;
    public final @Nullable MethodHandle HANDLE$glFragmentCoverageColorNV;
    public final @Nullable MethodHandle HANDLE$glFramebufferDrawBufferEXT;
    public final @Nullable MethodHandle HANDLE$glFramebufferDrawBuffersEXT;
    public final @Nullable MethodHandle HANDLE$glFramebufferParameteri;
    public final @Nullable MethodHandle HANDLE$glFramebufferParameteriMESA;
    public final @Nullable MethodHandle HANDLE$glFramebufferReadBufferEXT;
    public final @Nullable MethodHandle HANDLE$glFramebufferRenderbuffer;
    public final @Nullable MethodHandle HANDLE$glFramebufferSampleLocationsfvARB;
    public final @Nullable MethodHandle HANDLE$glFramebufferSampleLocationsfvNV;
    public final @Nullable MethodHandle HANDLE$glFramebufferTexture;
    public final @Nullable MethodHandle HANDLE$glFramebufferTexture1D;
    public final @Nullable MethodHandle HANDLE$glFramebufferTexture2D;
    public final @Nullable MethodHandle HANDLE$glFramebufferTexture3D;
    public final @Nullable MethodHandle HANDLE$glFramebufferTextureARB;
    public final @Nullable MethodHandle HANDLE$glFramebufferTextureFaceARB;
    public final @Nullable MethodHandle HANDLE$glFramebufferTextureLayer;
    public final @Nullable MethodHandle HANDLE$glFramebufferTextureLayerARB;
    public final @Nullable MethodHandle HANDLE$glFramebufferTextureMultiviewOVR;
    public final @Nullable MethodHandle HANDLE$glFrontFace;
    public final @Nullable MethodHandle HANDLE$glGenBuffers;
    public final @Nullable MethodHandle HANDLE$glGenFramebuffers;
    public final @Nullable MethodHandle HANDLE$glGenPathsNV;
    public final @Nullable MethodHandle HANDLE$glGenPerfMonitorsAMD;
    public final @Nullable MethodHandle HANDLE$glGenProgramPipelines;
    public final @Nullable MethodHandle HANDLE$glGenProgramPipelinesEXT;
    public final @Nullable MethodHandle HANDLE$glGenQueries;
    public final @Nullable MethodHandle HANDLE$glGenRenderbuffers;
    public final @Nullable MethodHandle HANDLE$glGenSamplers;
    public final @Nullable MethodHandle HANDLE$glGenTextures;
    public final @Nullable MethodHandle HANDLE$glGenTransformFeedbacks;
    public final @Nullable MethodHandle HANDLE$glGenVertexArrays;
    public final @Nullable MethodHandle HANDLE$glGenerateMipmap;
    public final @Nullable MethodHandle HANDLE$glGenerateMultiTexMipmapEXT;
    public final @Nullable MethodHandle HANDLE$glGenerateTextureMipmap;
    public final @Nullable MethodHandle HANDLE$glGenerateTextureMipmapEXT;
    public final @Nullable MethodHandle HANDLE$glGetActiveAtomicCounterBufferiv;
    public final @Nullable MethodHandle HANDLE$glGetActiveAttrib;
    public final @Nullable MethodHandle HANDLE$glGetActiveSubroutineName;
    public final @Nullable MethodHandle HANDLE$glGetActiveSubroutineUniformName;
    public final @Nullable MethodHandle HANDLE$glGetActiveSubroutineUniformiv;
    public final @Nullable MethodHandle HANDLE$glGetActiveUniform;
    public final @Nullable MethodHandle HANDLE$glGetActiveUniformBlockName;
    public final @Nullable MethodHandle HANDLE$glGetActiveUniformBlockiv;
    public final @Nullable MethodHandle HANDLE$glGetActiveUniformName;
    public final @Nullable MethodHandle HANDLE$glGetActiveUniformsiv;
    public final @Nullable MethodHandle HANDLE$glGetAttachedShaders;
    public final @Nullable MethodHandle HANDLE$glGetAttribLocation;
    public final @Nullable MethodHandle HANDLE$glGetBooleanIndexedvEXT;
    public final @Nullable MethodHandle HANDLE$glGetBooleani_v;
    public final @Nullable MethodHandle HANDLE$glGetBooleanv;
    public final @Nullable MethodHandle HANDLE$glGetBufferParameteri64v;
    public final @Nullable MethodHandle HANDLE$glGetBufferParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetBufferParameterui64vNV;
    public final @Nullable MethodHandle HANDLE$glGetBufferPointerv;
    public final @Nullable MethodHandle HANDLE$glGetBufferSubData;
    public final @Nullable MethodHandle HANDLE$glGetCommandHeaderNV;
    public final @Nullable MethodHandle HANDLE$glGetCompressedMultiTexImageEXT;
    public final @Nullable MethodHandle HANDLE$glGetCompressedTexImage;
    public final @Nullable MethodHandle HANDLE$glGetCompressedTextureImage;
    public final @Nullable MethodHandle HANDLE$glGetCompressedTextureImageEXT;
    public final @Nullable MethodHandle HANDLE$glGetCompressedTextureSubImage;
    public final @Nullable MethodHandle HANDLE$glGetCoverageModulationTableNV;
    public final @Nullable MethodHandle HANDLE$glGetDebugMessageLog;
    public final @Nullable MethodHandle HANDLE$glGetDebugMessageLogARB;
    public final @Nullable MethodHandle HANDLE$glGetDebugMessageLogKHR;
    public final @Nullable MethodHandle HANDLE$glGetDoubleIndexedvEXT;
    public final @Nullable MethodHandle HANDLE$glGetDoublei_v;
    public final @Nullable MethodHandle HANDLE$glGetDoublei_vEXT;
    public final @Nullable MethodHandle HANDLE$glGetDoublev;
    public final @Nullable MethodHandle HANDLE$glGetError;
    public final @Nullable MethodHandle HANDLE$glGetFirstPerfQueryIdINTEL;
    public final @Nullable MethodHandle HANDLE$glGetFloatIndexedvEXT;
    public final @Nullable MethodHandle HANDLE$glGetFloati_v;
    public final @Nullable MethodHandle HANDLE$glGetFloati_vEXT;
    public final @Nullable MethodHandle HANDLE$glGetFloatv;
    public final @Nullable MethodHandle HANDLE$glGetFragDataIndex;
    public final @Nullable MethodHandle HANDLE$glGetFragDataLocation;
    public final @Nullable MethodHandle HANDLE$glGetFramebufferAttachmentParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetFramebufferParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetFramebufferParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetFramebufferParameterivMESA;
    public final @Nullable MethodHandle HANDLE$glGetGraphicsResetStatus;
    public final @Nullable MethodHandle HANDLE$glGetGraphicsResetStatusARB;
    public final @Nullable MethodHandle HANDLE$glGetGraphicsResetStatusKHR;
    public final @Nullable MethodHandle HANDLE$glGetImageHandleARB;
    public final @Nullable MethodHandle HANDLE$glGetImageHandleNV;
    public final @Nullable MethodHandle HANDLE$glGetInteger64i_v;
    public final @Nullable MethodHandle HANDLE$glGetInteger64v;
    public final @Nullable MethodHandle HANDLE$glGetIntegerIndexedvEXT;
    public final @Nullable MethodHandle HANDLE$glGetIntegeri_v;
    public final @Nullable MethodHandle HANDLE$glGetIntegerui64i_vNV;
    public final @Nullable MethodHandle HANDLE$glGetIntegerui64vNV;
    public final @Nullable MethodHandle HANDLE$glGetIntegerv;
    public final @Nullable MethodHandle HANDLE$glGetInternalformatSampleivNV;
    public final @Nullable MethodHandle HANDLE$glGetInternalformati64v;
    public final @Nullable MethodHandle HANDLE$glGetInternalformativ;
    public final @Nullable MethodHandle HANDLE$glGetMemoryObjectDetachedResourcesuivNV;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexEnvfvEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexEnvivEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexGendvEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexGenfvEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexGenivEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexImageEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexLevelParameterfvEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexLevelParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexParameterIivEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexParameterIuivEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexParameterfvEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultiTexParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetMultisamplefv;
    public final @Nullable MethodHandle HANDLE$glGetNamedBufferParameteri64v;
    public final @Nullable MethodHandle HANDLE$glGetNamedBufferParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetNamedBufferParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedBufferParameterui64vNV;
    public final @Nullable MethodHandle HANDLE$glGetNamedBufferPointerv;
    public final @Nullable MethodHandle HANDLE$glGetNamedBufferPointervEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedBufferSubData;
    public final @Nullable MethodHandle HANDLE$glGetNamedBufferSubDataEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedFramebufferAttachmentParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetNamedFramebufferAttachmentParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedFramebufferParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetNamedFramebufferParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedProgramLocalParameterIivEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedProgramLocalParameterIuivEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedProgramLocalParameterdvEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedProgramLocalParameterfvEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedProgramStringEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedProgramivEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedRenderbufferParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetNamedRenderbufferParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetNamedStringARB;
    public final @Nullable MethodHandle HANDLE$glGetNamedStringivARB;
    public final @Nullable MethodHandle HANDLE$glGetNextPerfQueryIdINTEL;
    public final @Nullable MethodHandle HANDLE$glGetObjectLabel;
    public final @Nullable MethodHandle HANDLE$glGetObjectLabelEXT;
    public final @Nullable MethodHandle HANDLE$glGetObjectLabelKHR;
    public final @Nullable MethodHandle HANDLE$glGetObjectPtrLabel;
    public final @Nullable MethodHandle HANDLE$glGetObjectPtrLabelKHR;
    public final @Nullable MethodHandle HANDLE$glGetPathCommandsNV;
    public final @Nullable MethodHandle HANDLE$glGetPathCoordsNV;
    public final @Nullable MethodHandle HANDLE$glGetPathDashArrayNV;
    public final @Nullable MethodHandle HANDLE$glGetPathLengthNV;
    public final @Nullable MethodHandle HANDLE$glGetPathMetricRangeNV;
    public final @Nullable MethodHandle HANDLE$glGetPathMetricsNV;
    public final @Nullable MethodHandle HANDLE$glGetPathParameterfvNV;
    public final @Nullable MethodHandle HANDLE$glGetPathParameterivNV;
    public final @Nullable MethodHandle HANDLE$glGetPathSpacingNV;
    public final @Nullable MethodHandle HANDLE$glGetPerfCounterInfoINTEL;
    public final @Nullable MethodHandle HANDLE$glGetPerfMonitorCounterDataAMD;
    public final @Nullable MethodHandle HANDLE$glGetPerfMonitorCounterInfoAMD;
    public final @Nullable MethodHandle HANDLE$glGetPerfMonitorCounterStringAMD;
    public final @Nullable MethodHandle HANDLE$glGetPerfMonitorCountersAMD;
    public final @Nullable MethodHandle HANDLE$glGetPerfMonitorGroupStringAMD;
    public final @Nullable MethodHandle HANDLE$glGetPerfMonitorGroupsAMD;
    public final @Nullable MethodHandle HANDLE$glGetPerfQueryDataINTEL;
    public final @Nullable MethodHandle HANDLE$glGetPerfQueryIdByNameINTEL;
    public final @Nullable MethodHandle HANDLE$glGetPerfQueryInfoINTEL;
    public final @Nullable MethodHandle HANDLE$glGetPointerIndexedvEXT;
    public final @Nullable MethodHandle HANDLE$glGetPointeri_vEXT;
    public final @Nullable MethodHandle HANDLE$glGetPointerv;
    public final @Nullable MethodHandle HANDLE$glGetPointervKHR;
    public final @Nullable MethodHandle HANDLE$glGetProgramBinary;
    public final @Nullable MethodHandle HANDLE$glGetProgramInfoLog;
    public final @Nullable MethodHandle HANDLE$glGetProgramInterfaceiv;
    public final @Nullable MethodHandle HANDLE$glGetProgramPipelineInfoLog;
    public final @Nullable MethodHandle HANDLE$glGetProgramPipelineInfoLogEXT;
    public final @Nullable MethodHandle HANDLE$glGetProgramPipelineiv;
    public final @Nullable MethodHandle HANDLE$glGetProgramPipelineivEXT;
    public final @Nullable MethodHandle HANDLE$glGetProgramResourceIndex;
    public final @Nullable MethodHandle HANDLE$glGetProgramResourceLocation;
    public final @Nullable MethodHandle HANDLE$glGetProgramResourceLocationIndex;
    public final @Nullable MethodHandle HANDLE$glGetProgramResourceName;
    public final @Nullable MethodHandle HANDLE$glGetProgramResourcefvNV;
    public final @Nullable MethodHandle HANDLE$glGetProgramResourceiv;
    public final @Nullable MethodHandle HANDLE$glGetProgramStageiv;
    public final @Nullable MethodHandle HANDLE$glGetProgramiv;
    public final @Nullable MethodHandle HANDLE$glGetQueryBufferObjecti64v;
    public final @Nullable MethodHandle HANDLE$glGetQueryBufferObjectiv;
    public final @Nullable MethodHandle HANDLE$glGetQueryBufferObjectui64v;
    public final @Nullable MethodHandle HANDLE$glGetQueryBufferObjectuiv;
    public final @Nullable MethodHandle HANDLE$glGetQueryIndexediv;
    public final @Nullable MethodHandle HANDLE$glGetQueryObjecti64v;
    public final @Nullable MethodHandle HANDLE$glGetQueryObjectiv;
    public final @Nullable MethodHandle HANDLE$glGetQueryObjectui64v;
    public final @Nullable MethodHandle HANDLE$glGetQueryObjectuiv;
    public final @Nullable MethodHandle HANDLE$glGetQueryiv;
    public final @Nullable MethodHandle HANDLE$glGetRenderbufferParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetSamplerParameterIiv;
    public final @Nullable MethodHandle HANDLE$glGetSamplerParameterIuiv;
    public final @Nullable MethodHandle HANDLE$glGetSamplerParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetSamplerParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetShaderInfoLog;
    public final @Nullable MethodHandle HANDLE$glGetShaderPrecisionFormat;
    public final @Nullable MethodHandle HANDLE$glGetShaderSource;
    public final @Nullable MethodHandle HANDLE$glGetShaderiv;
    public final @Nullable MethodHandle HANDLE$glGetShadingRateImagePaletteNV;
    public final @Nullable MethodHandle HANDLE$glGetShadingRateSampleLocationivNV;
    public final @Nullable MethodHandle HANDLE$glGetStageIndexNV;
    public final @Nullable MethodHandle HANDLE$glGetString;
    public final @Nullable MethodHandle HANDLE$glGetStringi;
    public final @Nullable MethodHandle HANDLE$glGetSubroutineIndex;
    public final @Nullable MethodHandle HANDLE$glGetSubroutineUniformLocation;
    public final @Nullable MethodHandle HANDLE$glGetSynciv;
    public final @Nullable MethodHandle HANDLE$glGetTexImage;
    public final @Nullable MethodHandle HANDLE$glGetTexLevelParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetTexLevelParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetTexParameterIiv;
    public final @Nullable MethodHandle HANDLE$glGetTexParameterIuiv;
    public final @Nullable MethodHandle HANDLE$glGetTexParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetTexParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetTextureHandleARB;
    public final @Nullable MethodHandle HANDLE$glGetTextureHandleNV;
    public final @Nullable MethodHandle HANDLE$glGetTextureImage;
    public final @Nullable MethodHandle HANDLE$glGetTextureImageEXT;
    public final @Nullable MethodHandle HANDLE$glGetTextureLevelParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetTextureLevelParameterfvEXT;
    public final @Nullable MethodHandle HANDLE$glGetTextureLevelParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetTextureLevelParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetTextureParameterIiv;
    public final @Nullable MethodHandle HANDLE$glGetTextureParameterIivEXT;
    public final @Nullable MethodHandle HANDLE$glGetTextureParameterIuiv;
    public final @Nullable MethodHandle HANDLE$glGetTextureParameterIuivEXT;
    public final @Nullable MethodHandle HANDLE$glGetTextureParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetTextureParameterfvEXT;
    public final @Nullable MethodHandle HANDLE$glGetTextureParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetTextureParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetTextureSamplerHandleARB;
    public final @Nullable MethodHandle HANDLE$glGetTextureSamplerHandleNV;
    public final @Nullable MethodHandle HANDLE$glGetTextureSubImage;
    public final @Nullable MethodHandle HANDLE$glGetTransformFeedbackVarying;
    public final @Nullable MethodHandle HANDLE$glGetTransformFeedbacki64_v;
    public final @Nullable MethodHandle HANDLE$glGetTransformFeedbacki_v;
    public final @Nullable MethodHandle HANDLE$glGetTransformFeedbackiv;
    public final @Nullable MethodHandle HANDLE$glGetUniformBlockIndex;
    public final @Nullable MethodHandle HANDLE$glGetUniformIndices;
    public final @Nullable MethodHandle HANDLE$glGetUniformLocation;
    public final @Nullable MethodHandle HANDLE$glGetUniformSubroutineuiv;
    public final @Nullable MethodHandle HANDLE$glGetUniformdv;
    public final @Nullable MethodHandle HANDLE$glGetUniformfv;
    public final @Nullable MethodHandle HANDLE$glGetUniformi64vARB;
    public final @Nullable MethodHandle HANDLE$glGetUniformiv;
    public final @Nullable MethodHandle HANDLE$glGetUniformui64vARB;
    public final @Nullable MethodHandle HANDLE$glGetUniformuiv;
    public final @Nullable MethodHandle HANDLE$glGetVertexArrayIndexed64iv;
    public final @Nullable MethodHandle HANDLE$glGetVertexArrayIndexediv;
    public final @Nullable MethodHandle HANDLE$glGetVertexArrayIntegeri_vEXT;
    public final @Nullable MethodHandle HANDLE$glGetVertexArrayIntegervEXT;
    public final @Nullable MethodHandle HANDLE$glGetVertexArrayPointeri_vEXT;
    public final @Nullable MethodHandle HANDLE$glGetVertexArrayPointervEXT;
    public final @Nullable MethodHandle HANDLE$glGetVertexArrayiv;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribIiv;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribIuiv;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribLdv;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribLi64vNV;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribLui64vARB;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribLui64vNV;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribPointerv;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribdv;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribfv;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribiv;
    public final @Nullable MethodHandle HANDLE$glGetVkProcAddrNV;
    public final @Nullable MethodHandle HANDLE$glGetnCompressedTexImage;
    public final @Nullable MethodHandle HANDLE$glGetnCompressedTexImageARB;
    public final @Nullable MethodHandle HANDLE$glGetnTexImage;
    public final @Nullable MethodHandle HANDLE$glGetnTexImageARB;
    public final @Nullable MethodHandle HANDLE$glGetnUniformdv;
    public final @Nullable MethodHandle HANDLE$glGetnUniformdvARB;
    public final @Nullable MethodHandle HANDLE$glGetnUniformfv;
    public final @Nullable MethodHandle HANDLE$glGetnUniformfvARB;
    public final @Nullable MethodHandle HANDLE$glGetnUniformfvKHR;
    public final @Nullable MethodHandle HANDLE$glGetnUniformi64vARB;
    public final @Nullable MethodHandle HANDLE$glGetnUniformiv;
    public final @Nullable MethodHandle HANDLE$glGetnUniformivARB;
    public final @Nullable MethodHandle HANDLE$glGetnUniformivKHR;
    public final @Nullable MethodHandle HANDLE$glGetnUniformui64vARB;
    public final @Nullable MethodHandle HANDLE$glGetnUniformuiv;
    public final @Nullable MethodHandle HANDLE$glGetnUniformuivARB;
    public final @Nullable MethodHandle HANDLE$glGetnUniformuivKHR;
    public final @Nullable MethodHandle HANDLE$glHint;
    public final @Nullable MethodHandle HANDLE$glIndexFormatNV;
    public final @Nullable MethodHandle HANDLE$glInsertEventMarkerEXT;
    public final @Nullable MethodHandle HANDLE$glInterpolatePathsNV;
    public final @Nullable MethodHandle HANDLE$glInvalidateBufferData;
    public final @Nullable MethodHandle HANDLE$glInvalidateBufferSubData;
    public final @Nullable MethodHandle HANDLE$glInvalidateFramebuffer;
    public final @Nullable MethodHandle HANDLE$glInvalidateNamedFramebufferData;
    public final @Nullable MethodHandle HANDLE$glInvalidateNamedFramebufferSubData;
    public final @Nullable MethodHandle HANDLE$glInvalidateSubFramebuffer;
    public final @Nullable MethodHandle HANDLE$glInvalidateTexImage;
    public final @Nullable MethodHandle HANDLE$glInvalidateTexSubImage;
    public final @Nullable MethodHandle HANDLE$glIsBuffer;
    public final @Nullable MethodHandle HANDLE$glIsBufferResidentNV;
    public final @Nullable MethodHandle HANDLE$glIsCommandListNV;
    public final @Nullable MethodHandle HANDLE$glIsEnabled;
    public final @Nullable MethodHandle HANDLE$glIsEnabledIndexedEXT;
    public final @Nullable MethodHandle HANDLE$glIsEnabledi;
    public final @Nullable MethodHandle HANDLE$glIsFramebuffer;
    public final @Nullable MethodHandle HANDLE$glIsImageHandleResidentARB;
    public final @Nullable MethodHandle HANDLE$glIsImageHandleResidentNV;
    public final @Nullable MethodHandle HANDLE$glIsNamedBufferResidentNV;
    public final @Nullable MethodHandle HANDLE$glIsNamedStringARB;
    public final @Nullable MethodHandle HANDLE$glIsPathNV;
    public final @Nullable MethodHandle HANDLE$glIsPointInFillPathNV;
    public final @Nullable MethodHandle HANDLE$glIsPointInStrokePathNV;
    public final @Nullable MethodHandle HANDLE$glIsProgram;
    public final @Nullable MethodHandle HANDLE$glIsProgramPipeline;
    public final @Nullable MethodHandle HANDLE$glIsProgramPipelineEXT;
    public final @Nullable MethodHandle HANDLE$glIsQuery;
    public final @Nullable MethodHandle HANDLE$glIsRenderbuffer;
    public final @Nullable MethodHandle HANDLE$glIsSampler;
    public final @Nullable MethodHandle HANDLE$glIsShader;
    public final @Nullable MethodHandle HANDLE$glIsStateNV;
    public final @Nullable MethodHandle HANDLE$glIsSync;
    public final @Nullable MethodHandle HANDLE$glIsTexture;
    public final @Nullable MethodHandle HANDLE$glIsTextureHandleResidentARB;
    public final @Nullable MethodHandle HANDLE$glIsTextureHandleResidentNV;
    public final @Nullable MethodHandle HANDLE$glIsTransformFeedback;
    public final @Nullable MethodHandle HANDLE$glIsVertexArray;
    public final @Nullable MethodHandle HANDLE$glLabelObjectEXT;
    public final @Nullable MethodHandle HANDLE$glLineWidth;
    public final @Nullable MethodHandle HANDLE$glLinkProgram;
    public final @Nullable MethodHandle HANDLE$glListDrawCommandsStatesClientNV;
    public final @Nullable MethodHandle HANDLE$glLogicOp;
    public final @Nullable MethodHandle HANDLE$glMakeBufferNonResidentNV;
    public final @Nullable MethodHandle HANDLE$glMakeBufferResidentNV;
    public final @Nullable MethodHandle HANDLE$glMakeImageHandleNonResidentARB;
    public final @Nullable MethodHandle HANDLE$glMakeImageHandleNonResidentNV;
    public final @Nullable MethodHandle HANDLE$glMakeImageHandleResidentARB;
    public final @Nullable MethodHandle HANDLE$glMakeImageHandleResidentNV;
    public final @Nullable MethodHandle HANDLE$glMakeNamedBufferNonResidentNV;
    public final @Nullable MethodHandle HANDLE$glMakeNamedBufferResidentNV;
    public final @Nullable MethodHandle HANDLE$glMakeTextureHandleNonResidentARB;
    public final @Nullable MethodHandle HANDLE$glMakeTextureHandleNonResidentNV;
    public final @Nullable MethodHandle HANDLE$glMakeTextureHandleResidentARB;
    public final @Nullable MethodHandle HANDLE$glMakeTextureHandleResidentNV;
    public final @Nullable MethodHandle HANDLE$glMapBuffer;
    public final @Nullable MethodHandle HANDLE$glMapBufferRange;
    public final @Nullable MethodHandle HANDLE$glMapNamedBuffer;
    public final @Nullable MethodHandle HANDLE$glMapNamedBufferEXT;
    public final @Nullable MethodHandle HANDLE$glMapNamedBufferRange;
    public final @Nullable MethodHandle HANDLE$glMapNamedBufferRangeEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixFrustumEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixLoad3x2fNV;
    public final @Nullable MethodHandle HANDLE$glMatrixLoad3x3fNV;
    public final @Nullable MethodHandle HANDLE$glMatrixLoadIdentityEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixLoadTranspose3x3fNV;
    public final @Nullable MethodHandle HANDLE$glMatrixLoadTransposedEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixLoadTransposefEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixLoaddEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixLoadfEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixMult3x2fNV;
    public final @Nullable MethodHandle HANDLE$glMatrixMult3x3fNV;
    public final @Nullable MethodHandle HANDLE$glMatrixMultTranspose3x3fNV;
    public final @Nullable MethodHandle HANDLE$glMatrixMultTransposedEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixMultTransposefEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixMultdEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixMultfEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixOrthoEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixPopEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixPushEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixRotatedEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixRotatefEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixScaledEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixScalefEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixTranslatedEXT;
    public final @Nullable MethodHandle HANDLE$glMatrixTranslatefEXT;
    public final @Nullable MethodHandle HANDLE$glMaxShaderCompilerThreadsARB;
    public final @Nullable MethodHandle HANDLE$glMaxShaderCompilerThreadsKHR;
    public final @Nullable MethodHandle HANDLE$glMemoryBarrier;
    public final @Nullable MethodHandle HANDLE$glMemoryBarrierByRegion;
    public final @Nullable MethodHandle HANDLE$glMinSampleShading;
    public final @Nullable MethodHandle HANDLE$glMinSampleShadingARB;
    public final @Nullable MethodHandle HANDLE$glMultiDrawArrays;
    public final @Nullable MethodHandle HANDLE$glMultiDrawArraysIndirect;
    public final @Nullable MethodHandle HANDLE$glMultiDrawArraysIndirectBindlessCountNV;
    public final @Nullable MethodHandle HANDLE$glMultiDrawArraysIndirectBindlessNV;
    public final @Nullable MethodHandle HANDLE$glMultiDrawArraysIndirectCount;
    public final @Nullable MethodHandle HANDLE$glMultiDrawArraysIndirectCountARB;
    public final @Nullable MethodHandle HANDLE$glMultiDrawElements;
    public final @Nullable MethodHandle HANDLE$glMultiDrawElementsBaseVertex;
    public final @Nullable MethodHandle HANDLE$glMultiDrawElementsIndirect;
    public final @Nullable MethodHandle HANDLE$glMultiDrawElementsIndirectBindlessCountNV;
    public final @Nullable MethodHandle HANDLE$glMultiDrawElementsIndirectBindlessNV;
    public final @Nullable MethodHandle HANDLE$glMultiDrawElementsIndirectCount;
    public final @Nullable MethodHandle HANDLE$glMultiDrawElementsIndirectCountARB;
    public final @Nullable MethodHandle HANDLE$glMultiDrawMeshTasksIndirectCountNV;
    public final @Nullable MethodHandle HANDLE$glMultiDrawMeshTasksIndirectNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexBufferEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordPointerEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexEnvfEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexEnvfvEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexEnviEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexEnvivEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexGendEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexGendvEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexGenfEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexGenfvEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexGeniEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexGenivEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexParameterIivEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexParameterIuivEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexParameterfEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexParameterfvEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexParameteriEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexRenderbufferEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexSubImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexSubImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glMultiTexSubImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glNamedBufferAttachMemoryNV;
    public final @Nullable MethodHandle HANDLE$glNamedBufferData;
    public final @Nullable MethodHandle HANDLE$glNamedBufferDataEXT;
    public final @Nullable MethodHandle HANDLE$glNamedBufferPageCommitmentARB;
    public final @Nullable MethodHandle HANDLE$glNamedBufferPageCommitmentEXT;
    public final @Nullable MethodHandle HANDLE$glNamedBufferPageCommitmentMemNV;
    public final @Nullable MethodHandle HANDLE$glNamedBufferStorage;
    public final @Nullable MethodHandle HANDLE$glNamedBufferStorageEXT;
    public final @Nullable MethodHandle HANDLE$glNamedBufferSubData;
    public final @Nullable MethodHandle HANDLE$glNamedBufferSubDataEXT;
    public final @Nullable MethodHandle HANDLE$glNamedCopyBufferSubDataEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferDrawBuffer;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferDrawBuffers;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferParameteri;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferParameteriEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferReadBuffer;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferRenderbuffer;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferRenderbufferEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferSampleLocationsfvARB;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferSampleLocationsfvNV;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTexture;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTexture1DEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTexture2DEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTexture3DEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTextureEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTextureFaceEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTextureLayer;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTextureLayerEXT;
    public final @Nullable MethodHandle HANDLE$glNamedFramebufferTextureMultiviewOVR;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameter4dEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameter4dvEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameter4fEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameter4fvEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameterI4iEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameterI4ivEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameterI4uiEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameterI4uivEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParameters4fvEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParametersI4ivEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramLocalParametersI4uivEXT;
    public final @Nullable MethodHandle HANDLE$glNamedProgramStringEXT;
    public final @Nullable MethodHandle HANDLE$glNamedRenderbufferStorage;
    public final @Nullable MethodHandle HANDLE$glNamedRenderbufferStorageEXT;
    public final @Nullable MethodHandle HANDLE$glNamedRenderbufferStorageMultisample;
    public final @Nullable MethodHandle HANDLE$glNamedRenderbufferStorageMultisampleAdvancedAMD;
    public final @Nullable MethodHandle HANDLE$glNamedRenderbufferStorageMultisampleCoverageEXT;
    public final @Nullable MethodHandle HANDLE$glNamedRenderbufferStorageMultisampleEXT;
    public final @Nullable MethodHandle HANDLE$glNamedStringARB;
    public final @Nullable MethodHandle HANDLE$glNormalFormatNV;
    public final @Nullable MethodHandle HANDLE$glObjectLabel;
    public final @Nullable MethodHandle HANDLE$glObjectLabelKHR;
    public final @Nullable MethodHandle HANDLE$glObjectPtrLabel;
    public final @Nullable MethodHandle HANDLE$glObjectPtrLabelKHR;
    public final @Nullable MethodHandle HANDLE$glPatchParameterfv;
    public final @Nullable MethodHandle HANDLE$glPatchParameteri;
    public final @Nullable MethodHandle HANDLE$glPathCommandsNV;
    public final @Nullable MethodHandle HANDLE$glPathCoordsNV;
    public final @Nullable MethodHandle HANDLE$glPathCoverDepthFuncNV;
    public final @Nullable MethodHandle HANDLE$glPathDashArrayNV;
    public final @Nullable MethodHandle HANDLE$glPathGlyphIndexArrayNV;
    public final @Nullable MethodHandle HANDLE$glPathGlyphIndexRangeNV;
    public final @Nullable MethodHandle HANDLE$glPathGlyphRangeNV;
    public final @Nullable MethodHandle HANDLE$glPathGlyphsNV;
    public final @Nullable MethodHandle HANDLE$glPathMemoryGlyphIndexArrayNV;
    public final @Nullable MethodHandle HANDLE$glPathParameterfNV;
    public final @Nullable MethodHandle HANDLE$glPathParameterfvNV;
    public final @Nullable MethodHandle HANDLE$glPathParameteriNV;
    public final @Nullable MethodHandle HANDLE$glPathParameterivNV;
    public final @Nullable MethodHandle HANDLE$glPathStencilDepthOffsetNV;
    public final @Nullable MethodHandle HANDLE$glPathStencilFuncNV;
    public final @Nullable MethodHandle HANDLE$glPathStringNV;
    public final @Nullable MethodHandle HANDLE$glPathSubCommandsNV;
    public final @Nullable MethodHandle HANDLE$glPathSubCoordsNV;
    public final @Nullable MethodHandle HANDLE$glPauseTransformFeedback;
    public final @Nullable MethodHandle HANDLE$glPixelStoref;
    public final @Nullable MethodHandle HANDLE$glPixelStorei;
    public final @Nullable MethodHandle HANDLE$glPointAlongPathNV;
    public final @Nullable MethodHandle HANDLE$glPointParameterf;
    public final @Nullable MethodHandle HANDLE$glPointParameterfv;
    public final @Nullable MethodHandle HANDLE$glPointParameteri;
    public final @Nullable MethodHandle HANDLE$glPointParameteriv;
    public final @Nullable MethodHandle HANDLE$glPointSize;
    public final @Nullable MethodHandle HANDLE$glPolygonMode;
    public final @Nullable MethodHandle HANDLE$glPolygonOffset;
    public final @Nullable MethodHandle HANDLE$glPolygonOffsetClamp;
    public final @Nullable MethodHandle HANDLE$glPolygonOffsetClampEXT;
    public final @Nullable MethodHandle HANDLE$glPopDebugGroup;
    public final @Nullable MethodHandle HANDLE$glPopDebugGroupKHR;
    public final @Nullable MethodHandle HANDLE$glPopGroupMarkerEXT;
    public final @Nullable MethodHandle HANDLE$glPrimitiveBoundingBoxARB;
    public final @Nullable MethodHandle HANDLE$glPrimitiveRestartIndex;
    public final @Nullable MethodHandle HANDLE$glProgramBinary;
    public final @Nullable MethodHandle HANDLE$glProgramParameteri;
    public final @Nullable MethodHandle HANDLE$glProgramParameteriARB;
    public final @Nullable MethodHandle HANDLE$glProgramPathFragmentInputGenNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1d;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1dEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1f;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1fEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1i;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1i64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1i64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1iEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1iv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1ivEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1ui;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1ui64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1ui64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1uiEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1uiv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1uivEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2d;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2dEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2f;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2fEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2i;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2i64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2i64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2iEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2iv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2ivEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2ui;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2ui64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2ui64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2uiEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2uiv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2uivEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3d;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3dEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3f;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3fEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3i;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3i64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3i64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3iEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3iv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3ivEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3ui;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3ui64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3ui64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3uiEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3uiv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3uivEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4d;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4dEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4f;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4fEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4i;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4i64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4i64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4iEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4iv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4ivEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4ui;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4ui64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4ui64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4uiEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4uiv;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4uivEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformHandleui64ARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniformHandleui64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniformHandleui64vARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniformHandleui64vNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2x3dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2x3dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2x3fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2x3fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2x4dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2x4dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2x4fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix2x4fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3x2dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3x2dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3x2fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3x2fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3x4dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3x4dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3x4fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix3x4fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4x2dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4x2dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4x2fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4x2fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4x3dv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4x3dvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4x3fv;
    public final @Nullable MethodHandle HANDLE$glProgramUniformMatrix4x3fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramUniformui64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniformui64vNV;
    public final @Nullable MethodHandle HANDLE$glProvokingVertex;
    public final @Nullable MethodHandle HANDLE$glPushClientAttribDefaultEXT;
    public final @Nullable MethodHandle HANDLE$glPushDebugGroup;
    public final @Nullable MethodHandle HANDLE$glPushDebugGroupKHR;
    public final @Nullable MethodHandle HANDLE$glPushGroupMarkerEXT;
    public final @Nullable MethodHandle HANDLE$glQueryCounter;
    public final @Nullable MethodHandle HANDLE$glRasterSamplesEXT;
    public final @Nullable MethodHandle HANDLE$glReadBuffer;
    public final @Nullable MethodHandle HANDLE$glReadPixels;
    public final @Nullable MethodHandle HANDLE$glReadnPixels;
    public final @Nullable MethodHandle HANDLE$glReadnPixelsARB;
    public final @Nullable MethodHandle HANDLE$glReadnPixelsKHR;
    public final @Nullable MethodHandle HANDLE$glReleaseShaderCompiler;
    public final @Nullable MethodHandle HANDLE$glRenderbufferStorage;
    public final @Nullable MethodHandle HANDLE$glRenderbufferStorageMultisample;
    public final @Nullable MethodHandle HANDLE$glRenderbufferStorageMultisampleAdvancedAMD;
    public final @Nullable MethodHandle HANDLE$glRenderbufferStorageMultisampleCoverageNV;
    public final @Nullable MethodHandle HANDLE$glResetMemoryObjectParameterNV;
    public final @Nullable MethodHandle HANDLE$glResolveDepthValuesNV;
    public final @Nullable MethodHandle HANDLE$glResumeTransformFeedback;
    public final @Nullable MethodHandle HANDLE$glSampleCoverage;
    public final @Nullable MethodHandle HANDLE$glSampleMaski;
    public final @Nullable MethodHandle HANDLE$glSamplerParameterIiv;
    public final @Nullable MethodHandle HANDLE$glSamplerParameterIuiv;
    public final @Nullable MethodHandle HANDLE$glSamplerParameterf;
    public final @Nullable MethodHandle HANDLE$glSamplerParameterfv;
    public final @Nullable MethodHandle HANDLE$glSamplerParameteri;
    public final @Nullable MethodHandle HANDLE$glSamplerParameteriv;
    public final @Nullable MethodHandle HANDLE$glScissor;
    public final @Nullable MethodHandle HANDLE$glScissorArrayv;
    public final @Nullable MethodHandle HANDLE$glScissorExclusiveArrayvNV;
    public final @Nullable MethodHandle HANDLE$glScissorExclusiveNV;
    public final @Nullable MethodHandle HANDLE$glScissorIndexed;
    public final @Nullable MethodHandle HANDLE$glScissorIndexedv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColorFormatNV;
    public final @Nullable MethodHandle HANDLE$glSelectPerfMonitorCountersAMD;
    public final @Nullable MethodHandle HANDLE$glShaderBinary;
    public final @Nullable MethodHandle HANDLE$glShaderSource;
    public final @Nullable MethodHandle HANDLE$glShaderStorageBlockBinding;
    public final @Nullable MethodHandle HANDLE$glShadingRateImageBarrierNV;
    public final @Nullable MethodHandle HANDLE$glShadingRateImagePaletteNV;
    public final @Nullable MethodHandle HANDLE$glShadingRateSampleOrderCustomNV;
    public final @Nullable MethodHandle HANDLE$glShadingRateSampleOrderNV;
    public final @Nullable MethodHandle HANDLE$glSignalVkFenceNV;
    public final @Nullable MethodHandle HANDLE$glSignalVkSemaphoreNV;
    public final @Nullable MethodHandle HANDLE$glSpecializeShader;
    public final @Nullable MethodHandle HANDLE$glSpecializeShaderARB;
    public final @Nullable MethodHandle HANDLE$glStateCaptureNV;
    public final @Nullable MethodHandle HANDLE$glStencilFillPathInstancedNV;
    public final @Nullable MethodHandle HANDLE$glStencilFillPathNV;
    public final @Nullable MethodHandle HANDLE$glStencilFunc;
    public final @Nullable MethodHandle HANDLE$glStencilFuncSeparate;
    public final @Nullable MethodHandle HANDLE$glStencilMask;
    public final @Nullable MethodHandle HANDLE$glStencilMaskSeparate;
    public final @Nullable MethodHandle HANDLE$glStencilOp;
    public final @Nullable MethodHandle HANDLE$glStencilOpSeparate;
    public final @Nullable MethodHandle HANDLE$glStencilStrokePathInstancedNV;
    public final @Nullable MethodHandle HANDLE$glStencilStrokePathNV;
    public final @Nullable MethodHandle HANDLE$glStencilThenCoverFillPathInstancedNV;
    public final @Nullable MethodHandle HANDLE$glStencilThenCoverFillPathNV;
    public final @Nullable MethodHandle HANDLE$glStencilThenCoverStrokePathInstancedNV;
    public final @Nullable MethodHandle HANDLE$glStencilThenCoverStrokePathNV;
    public final @Nullable MethodHandle HANDLE$glSubpixelPrecisionBiasNV;
    public final @Nullable MethodHandle HANDLE$glTexAttachMemoryNV;
    public final @Nullable MethodHandle HANDLE$glTexBuffer;
    public final @Nullable MethodHandle HANDLE$glTexBufferARB;
    public final @Nullable MethodHandle HANDLE$glTexBufferRange;
    public final @Nullable MethodHandle HANDLE$glTexCoordFormatNV;
    public final @Nullable MethodHandle HANDLE$glTexImage1D;
    public final @Nullable MethodHandle HANDLE$glTexImage2D;
    public final @Nullable MethodHandle HANDLE$glTexImage2DMultisample;
    public final @Nullable MethodHandle HANDLE$glTexImage3D;
    public final @Nullable MethodHandle HANDLE$glTexImage3DMultisample;
    public final @Nullable MethodHandle HANDLE$glTexPageCommitmentARB;
    public final @Nullable MethodHandle HANDLE$glTexPageCommitmentMemNV;
    public final @Nullable MethodHandle HANDLE$glTexParameterIiv;
    public final @Nullable MethodHandle HANDLE$glTexParameterIuiv;
    public final @Nullable MethodHandle HANDLE$glTexParameterf;
    public final @Nullable MethodHandle HANDLE$glTexParameterfv;
    public final @Nullable MethodHandle HANDLE$glTexParameteri;
    public final @Nullable MethodHandle HANDLE$glTexParameteriv;
    public final @Nullable MethodHandle HANDLE$glTexStorage1D;
    public final @Nullable MethodHandle HANDLE$glTexStorage1DEXT;
    public final @Nullable MethodHandle HANDLE$glTexStorage2D;
    public final @Nullable MethodHandle HANDLE$glTexStorage2DEXT;
    public final @Nullable MethodHandle HANDLE$glTexStorage2DMultisample;
    public final @Nullable MethodHandle HANDLE$glTexStorage3D;
    public final @Nullable MethodHandle HANDLE$glTexStorage3DEXT;
    public final @Nullable MethodHandle HANDLE$glTexStorage3DMultisample;
    public final @Nullable MethodHandle HANDLE$glTexSubImage1D;
    public final @Nullable MethodHandle HANDLE$glTexSubImage2D;
    public final @Nullable MethodHandle HANDLE$glTexSubImage3D;
    public final @Nullable MethodHandle HANDLE$glTextureAttachMemoryNV;
    public final @Nullable MethodHandle HANDLE$glTextureBarrier;
    public final @Nullable MethodHandle HANDLE$glTextureBarrierNV;
    public final @Nullable MethodHandle HANDLE$glTextureBuffer;
    public final @Nullable MethodHandle HANDLE$glTextureBufferEXT;
    public final @Nullable MethodHandle HANDLE$glTextureBufferRange;
    public final @Nullable MethodHandle HANDLE$glTextureBufferRangeEXT;
    public final @Nullable MethodHandle HANDLE$glTextureImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glTextureImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glTextureImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glTexturePageCommitmentEXT;
    public final @Nullable MethodHandle HANDLE$glTexturePageCommitmentMemNV;
    public final @Nullable MethodHandle HANDLE$glTextureParameterIiv;
    public final @Nullable MethodHandle HANDLE$glTextureParameterIivEXT;
    public final @Nullable MethodHandle HANDLE$glTextureParameterIuiv;
    public final @Nullable MethodHandle HANDLE$glTextureParameterIuivEXT;
    public final @Nullable MethodHandle HANDLE$glTextureParameterf;
    public final @Nullable MethodHandle HANDLE$glTextureParameterfEXT;
    public final @Nullable MethodHandle HANDLE$glTextureParameterfv;
    public final @Nullable MethodHandle HANDLE$glTextureParameterfvEXT;
    public final @Nullable MethodHandle HANDLE$glTextureParameteri;
    public final @Nullable MethodHandle HANDLE$glTextureParameteriEXT;
    public final @Nullable MethodHandle HANDLE$glTextureParameteriv;
    public final @Nullable MethodHandle HANDLE$glTextureParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glTextureRenderbufferEXT;
    public final @Nullable MethodHandle HANDLE$glTextureStorage1D;
    public final @Nullable MethodHandle HANDLE$glTextureStorage1DEXT;
    public final @Nullable MethodHandle HANDLE$glTextureStorage2D;
    public final @Nullable MethodHandle HANDLE$glTextureStorage2DEXT;
    public final @Nullable MethodHandle HANDLE$glTextureStorage2DMultisample;
    public final @Nullable MethodHandle HANDLE$glTextureStorage2DMultisampleEXT;
    public final @Nullable MethodHandle HANDLE$glTextureStorage3D;
    public final @Nullable MethodHandle HANDLE$glTextureStorage3DEXT;
    public final @Nullable MethodHandle HANDLE$glTextureStorage3DMultisample;
    public final @Nullable MethodHandle HANDLE$glTextureStorage3DMultisampleEXT;
    public final @Nullable MethodHandle HANDLE$glTextureSubImage1D;
    public final @Nullable MethodHandle HANDLE$glTextureSubImage1DEXT;
    public final @Nullable MethodHandle HANDLE$glTextureSubImage2D;
    public final @Nullable MethodHandle HANDLE$glTextureSubImage2DEXT;
    public final @Nullable MethodHandle HANDLE$glTextureSubImage3D;
    public final @Nullable MethodHandle HANDLE$glTextureSubImage3DEXT;
    public final @Nullable MethodHandle HANDLE$glTextureView;
    public final @Nullable MethodHandle HANDLE$glTransformFeedbackBufferBase;
    public final @Nullable MethodHandle HANDLE$glTransformFeedbackBufferRange;
    public final @Nullable MethodHandle HANDLE$glTransformFeedbackVaryings;
    public final @Nullable MethodHandle HANDLE$glTransformPathNV;
    public final @Nullable MethodHandle HANDLE$glUniform1d;
    public final @Nullable MethodHandle HANDLE$glUniform1dv;
    public final @Nullable MethodHandle HANDLE$glUniform1f;
    public final @Nullable MethodHandle HANDLE$glUniform1fv;
    public final @Nullable MethodHandle HANDLE$glUniform1i;
    public final @Nullable MethodHandle HANDLE$glUniform1i64ARB;
    public final @Nullable MethodHandle HANDLE$glUniform1i64vARB;
    public final @Nullable MethodHandle HANDLE$glUniform1iv;
    public final @Nullable MethodHandle HANDLE$glUniform1ui;
    public final @Nullable MethodHandle HANDLE$glUniform1ui64ARB;
    public final @Nullable MethodHandle HANDLE$glUniform1ui64vARB;
    public final @Nullable MethodHandle HANDLE$glUniform1uiv;
    public final @Nullable MethodHandle HANDLE$glUniform2d;
    public final @Nullable MethodHandle HANDLE$glUniform2dv;
    public final @Nullable MethodHandle HANDLE$glUniform2f;
    public final @Nullable MethodHandle HANDLE$glUniform2fv;
    public final @Nullable MethodHandle HANDLE$glUniform2i;
    public final @Nullable MethodHandle HANDLE$glUniform2i64ARB;
    public final @Nullable MethodHandle HANDLE$glUniform2i64vARB;
    public final @Nullable MethodHandle HANDLE$glUniform2iv;
    public final @Nullable MethodHandle HANDLE$glUniform2ui;
    public final @Nullable MethodHandle HANDLE$glUniform2ui64ARB;
    public final @Nullable MethodHandle HANDLE$glUniform2ui64vARB;
    public final @Nullable MethodHandle HANDLE$glUniform2uiv;
    public final @Nullable MethodHandle HANDLE$glUniform3d;
    public final @Nullable MethodHandle HANDLE$glUniform3dv;
    public final @Nullable MethodHandle HANDLE$glUniform3f;
    public final @Nullable MethodHandle HANDLE$glUniform3fv;
    public final @Nullable MethodHandle HANDLE$glUniform3i;
    public final @Nullable MethodHandle HANDLE$glUniform3i64ARB;
    public final @Nullable MethodHandle HANDLE$glUniform3i64vARB;
    public final @Nullable MethodHandle HANDLE$glUniform3iv;
    public final @Nullable MethodHandle HANDLE$glUniform3ui;
    public final @Nullable MethodHandle HANDLE$glUniform3ui64ARB;
    public final @Nullable MethodHandle HANDLE$glUniform3ui64vARB;
    public final @Nullable MethodHandle HANDLE$glUniform3uiv;
    public final @Nullable MethodHandle HANDLE$glUniform4d;
    public final @Nullable MethodHandle HANDLE$glUniform4dv;
    public final @Nullable MethodHandle HANDLE$glUniform4f;
    public final @Nullable MethodHandle HANDLE$glUniform4fv;
    public final @Nullable MethodHandle HANDLE$glUniform4i;
    public final @Nullable MethodHandle HANDLE$glUniform4i64ARB;
    public final @Nullable MethodHandle HANDLE$glUniform4i64vARB;
    public final @Nullable MethodHandle HANDLE$glUniform4iv;
    public final @Nullable MethodHandle HANDLE$glUniform4ui;
    public final @Nullable MethodHandle HANDLE$glUniform4ui64ARB;
    public final @Nullable MethodHandle HANDLE$glUniform4ui64vARB;
    public final @Nullable MethodHandle HANDLE$glUniform4uiv;
    public final @Nullable MethodHandle HANDLE$glUniformBlockBinding;
    public final @Nullable MethodHandle HANDLE$glUniformHandleui64ARB;
    public final @Nullable MethodHandle HANDLE$glUniformHandleui64NV;
    public final @Nullable MethodHandle HANDLE$glUniformHandleui64vARB;
    public final @Nullable MethodHandle HANDLE$glUniformHandleui64vNV;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix2dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix2fv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix2x3dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix2x3fv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix2x4dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix2x4fv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix3dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix3fv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix3x2dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix3x2fv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix3x4dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix3x4fv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix4dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix4fv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix4x2dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix4x2fv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix4x3dv;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix4x3fv;
    public final @Nullable MethodHandle HANDLE$glUniformSubroutinesuiv;
    public final @Nullable MethodHandle HANDLE$glUniformui64NV;
    public final @Nullable MethodHandle HANDLE$glUniformui64vNV;
    public final @Nullable MethodHandle HANDLE$glUnmapBuffer;
    public final @Nullable MethodHandle HANDLE$glUnmapNamedBuffer;
    public final @Nullable MethodHandle HANDLE$glUnmapNamedBufferEXT;
    public final @Nullable MethodHandle HANDLE$glUseProgram;
    public final @Nullable MethodHandle HANDLE$glUseProgramStages;
    public final @Nullable MethodHandle HANDLE$glUseProgramStagesEXT;
    public final @Nullable MethodHandle HANDLE$glUseShaderProgramEXT;
    public final @Nullable MethodHandle HANDLE$glValidateProgram;
    public final @Nullable MethodHandle HANDLE$glValidateProgramPipeline;
    public final @Nullable MethodHandle HANDLE$glValidateProgramPipelineEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayAttribBinding;
    public final @Nullable MethodHandle HANDLE$glVertexArrayAttribFormat;
    public final @Nullable MethodHandle HANDLE$glVertexArrayAttribIFormat;
    public final @Nullable MethodHandle HANDLE$glVertexArrayAttribLFormat;
    public final @Nullable MethodHandle HANDLE$glVertexArrayBindVertexBufferEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayBindingDivisor;
    public final @Nullable MethodHandle HANDLE$glVertexArrayColorOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayEdgeFlagOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayElementBuffer;
    public final @Nullable MethodHandle HANDLE$glVertexArrayFogCoordOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayIndexOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayMultiTexCoordOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayNormalOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArraySecondaryColorOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayTexCoordOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexAttribBindingEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexAttribDivisorEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexAttribFormatEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexAttribIFormatEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexAttribIOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexAttribLFormatEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexAttribLOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexAttribOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexBindingDivisorEXT;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexBuffer;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexBuffers;
    public final @Nullable MethodHandle HANDLE$glVertexArrayVertexOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1d;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1dv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1f;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1fv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1s;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1sv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2d;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2dv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2f;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2fv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2s;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2sv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3d;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3dv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3f;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3fv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3s;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3sv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4Nbv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4Niv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4Nsv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4Nub;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4Nubv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4Nuiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4Nusv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4bv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4d;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4dv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4f;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4fv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4iv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4s;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4sv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4ubv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4usv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribBinding;
    public final @Nullable MethodHandle HANDLE$glVertexAttribDivisor;
    public final @Nullable MethodHandle HANDLE$glVertexAttribDivisorARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttribFormat;
    public final @Nullable MethodHandle HANDLE$glVertexAttribFormatNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI1i;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI1iv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI1ui;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI1uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI2i;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI2iv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI2ui;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI2uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI3i;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI3iv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI3ui;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI3uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4bv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4i;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4iv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4sv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4ubv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4ui;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4usv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribIFormat;
    public final @Nullable MethodHandle HANDLE$glVertexAttribIFormatNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribIPointer;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1d;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1dv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1i64NV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1i64vNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1ui64ARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1ui64NV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1ui64vARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1ui64vNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL2d;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL2dv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL2i64NV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL2i64vNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL2ui64NV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL2ui64vNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL3d;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL3dv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL3i64NV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL3i64vNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL3ui64NV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL3ui64vNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL4d;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL4dv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL4i64NV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL4i64vNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL4ui64NV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL4ui64vNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribLFormat;
    public final @Nullable MethodHandle HANDLE$glVertexAttribLFormatNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribLPointer;
    public final @Nullable MethodHandle HANDLE$glVertexAttribP1ui;
    public final @Nullable MethodHandle HANDLE$glVertexAttribP1uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribP2ui;
    public final @Nullable MethodHandle HANDLE$glVertexAttribP2uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribP3ui;
    public final @Nullable MethodHandle HANDLE$glVertexAttribP3uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribP4ui;
    public final @Nullable MethodHandle HANDLE$glVertexAttribP4uiv;
    public final @Nullable MethodHandle HANDLE$glVertexAttribPointer;
    public final @Nullable MethodHandle HANDLE$glVertexBindingDivisor;
    public final @Nullable MethodHandle HANDLE$glVertexFormatNV;
    public final @Nullable MethodHandle HANDLE$glViewport;
    public final @Nullable MethodHandle HANDLE$glViewportArrayv;
    public final @Nullable MethodHandle HANDLE$glViewportIndexedf;
    public final @Nullable MethodHandle HANDLE$glViewportIndexedfv;
    public final @Nullable MethodHandle HANDLE$glViewportPositionWScaleNV;
    public final @Nullable MethodHandle HANDLE$glViewportSwizzleNV;
    public final @Nullable MethodHandle HANDLE$glWaitSync;
    public final @Nullable MethodHandle HANDLE$glWaitVkSemaphoreNV;
    public final @Nullable MethodHandle HANDLE$glWeightPathsNV;
    public final @Nullable MethodHandle HANDLE$glWindowRectanglesEXT;
    // endregion

    public static final class Descriptors {
        public static final FunctionDescriptor DESCRIPTOR$glActiveProgramEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glActiveShaderProgram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glActiveShaderProgramEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glActiveTexture = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glApplyFramebufferAttachmentCMAAINTEL = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glAttachShader = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginConditionalRender = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginConditionalRenderNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginPerfMonitorAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginPerfQueryINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginQuery = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginQueryIndexed = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginTransformFeedback = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindAttribLocation = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferBase = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferRange = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBuffersBase = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBuffersRange = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(NativeLayout.C_SIZE_T),
            ValueLayout.ADDRESS.withTargetLayout(NativeLayout.C_SIZE_T)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindFragDataLocation = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindFragDataLocationIndexed = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindFramebuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindImageTexture = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindImageTextures = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindMultiTextureEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindProgramPipeline = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindProgramPipelineEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindRenderbuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindSampler = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindSamplers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindShadingRateImageNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindTexture = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindTextureUnit = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindTextures = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindTransformFeedback = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindVertexArray = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindVertexBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindVertexBuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(NativeLayout.C_SIZE_T),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendBarrierKHR = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendBarrierNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendColor = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquation = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationSeparate = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationSeparatei = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationSeparateiARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationi = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationiARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFunc = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFuncSeparate = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFuncSeparatei = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFuncSeparateiARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFunci = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFunciARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendParameteriNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlitFramebuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlitNamedFramebuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferAddressRangeNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferAttachMemoryNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferPageCommitmentARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferPageCommitmentMemNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferStorage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCallCommandListNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCheckFramebufferStatus = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCheckNamedFramebufferStatus = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCheckNamedFramebufferStatusEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClampColor = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClear = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearBufferData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearBufferfi = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearBufferfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearBufferiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearBufferuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearColor = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearDepth = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearDepthdNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearDepthf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearNamedBufferData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearNamedBufferDataEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearNamedBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearNamedBufferSubDataEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearNamedFramebufferfi = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearNamedFramebufferfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearNamedFramebufferiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearNamedFramebufferuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearStencil = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearTexImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearTexSubImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glClientAttribDefaultEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClientWaitSync = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glClipControl = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorMask = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorMaski = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glCommandListSegmentsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompileCommandListNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompileShader = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompileShaderIncludeARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedMultiTexImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedMultiTexImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedMultiTexImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedMultiTexSubImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedMultiTexSubImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedMultiTexSubImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexImage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexSubImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexSubImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexSubImage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureSubImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureSubImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureSubImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureSubImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureSubImage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTextureSubImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glConservativeRasterParameterfNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glConservativeRasterParameteriNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyImageSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyMultiTexImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyMultiTexImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyMultiTexSubImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyMultiTexSubImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyMultiTexSubImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyNamedBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyPathNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTexImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTexImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTexSubImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTexSubImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTexSubImage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTextureImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTextureImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTextureSubImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTextureSubImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTextureSubImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTextureSubImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTextureSubImage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyTextureSubImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCoverFillPathInstancedNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCoverFillPathNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCoverStrokePathInstancedNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCoverStrokePathNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCoverageModulationNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCoverageModulationTableNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateBuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateCommandListsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateFramebuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreatePerfQueryINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateProgram = FunctionDescriptor.of(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateProgramPipelines = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateQueries = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateRenderbuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateSamplers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateShader = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateShaderProgramEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateShaderProgramv = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE))
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateShaderProgramvEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE))
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateStatesNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateSyncFromCLeventARB = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateTextures = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateTransformFeedbacks = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateVertexArrays = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCullFace = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageCallback = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageCallbackARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageCallbackKHR = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageControl = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageControlARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageControlKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageInsert = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageInsertARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageInsertKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteBuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteCommandListsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteFramebuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteNamedStringARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeletePathsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeletePerfMonitorsAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeletePerfQueryINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteProgram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteProgramPipelines = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteProgramPipelinesEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteQueries = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteRenderbuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteSamplers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteShader = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteStatesNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteSync = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteTextures = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteTransformFeedbacks = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteVertexArrays = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthBoundsdNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthFunc = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthMask = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthRange = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthRangeArraydvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthRangeArrayv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthRangeIndexed = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthRangeIndexeddNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthRangedNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthRangef = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDetachShader = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisable = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableClientStateIndexedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableClientStateiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableIndexedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableVertexArrayAttrib = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableVertexArrayAttribEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableVertexArrayEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableVertexAttribArray = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisablei = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDispatchCompute = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDispatchComputeGroupSizeARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDispatchComputeIndirect = FunctionDescriptor.ofVoid(
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawArrays = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawArraysIndirect = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawArraysInstanced = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawArraysInstancedARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawArraysInstancedBaseInstance = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawArraysInstancedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawBuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawCommandsAddressNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawCommandsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(NativeLayout.C_SIZE_T),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawCommandsStatesAddressNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawCommandsStatesNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(NativeLayout.C_SIZE_T),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElements = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElementsBaseVertex = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElementsIndirect = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElementsInstanced = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElementsInstancedARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElementsInstancedBaseInstance = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElementsInstancedBaseVertex = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElementsInstancedBaseVertexBaseInstance = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawElementsInstancedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawMeshTasksIndirectNV = FunctionDescriptor.ofVoid(
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawMeshTasksNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawRangeElements = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawRangeElementsBaseVertex = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawTransformFeedback = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawTransformFeedbackInstanced = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawTransformFeedbackStream = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawTransformFeedbackStreamInstanced = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawVkImageNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEGLImageTargetTexStorageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glEGLImageTargetTextureStorageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glEdgeFlagFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnable = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableClientStateIndexedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableClientStateiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableIndexedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableVertexArrayAttrib = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableVertexArrayAttribEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableVertexArrayEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableVertexAttribArray = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnablei = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndConditionalRender = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndConditionalRenderNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndPerfMonitorAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndPerfQueryINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndQuery = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndQueryIndexed = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndTransformFeedback = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvaluateDepthValuesARB = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glFenceSync = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFinish = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glFlush = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glFlushMappedBufferRange = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glFlushMappedNamedBufferRange = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glFlushMappedNamedBufferRangeEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogCoordFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFragmentCoverageColorNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferDrawBufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferDrawBuffersEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferParameteriMESA = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferReadBufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferRenderbuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferSampleLocationsfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferSampleLocationsfvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTexture = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTexture1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTexture2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTexture3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTextureARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTextureFaceARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTextureLayer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTextureLayerARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTextureMultiviewOVR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFrontFace = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenBuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenFramebuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenPathsNV = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenPerfMonitorsAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenProgramPipelines = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenProgramPipelinesEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenQueries = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenRenderbuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenSamplers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenTextures = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenTransformFeedbacks = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenVertexArrays = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenerateMipmap = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenerateMultiTexMipmapEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenerateTextureMipmap = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenerateTextureMipmapEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveAtomicCounterBufferiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveAttrib = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveSubroutineName = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveSubroutineUniformName = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveSubroutineUniformiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveUniform = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveUniformBlockName = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveUniformBlockiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveUniformName = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveUniformsiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetAttachedShaders = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetAttribLocation = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBooleanIndexedvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBooleani_v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBooleanv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBufferParameteri64v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBufferParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBufferParameterui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBufferPointerv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetCommandHeaderNV = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetCompressedMultiTexImageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetCompressedTexImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetCompressedTextureImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetCompressedTextureImageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetCompressedTextureSubImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetCoverageModulationTableNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetDebugMessageLog = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetDebugMessageLogARB = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetDebugMessageLogKHR = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetDoubleIndexedvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetDoublei_v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetDoublei_vEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetDoublev = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetError = FunctionDescriptor.of(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFirstPerfQueryIdINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFloatIndexedvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFloati_v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFloati_vEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFloatv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFragDataIndex = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFragDataLocation = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFramebufferAttachmentParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFramebufferParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFramebufferParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFramebufferParameterivMESA = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetGraphicsResetStatus = FunctionDescriptor.of(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetGraphicsResetStatusARB = FunctionDescriptor.of(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetGraphicsResetStatusKHR = FunctionDescriptor.of(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetImageHandleARB = FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetImageHandleNV = FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetInteger64i_v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetInteger64v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetIntegerIndexedvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetIntegeri_v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetIntegerui64i_vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetIntegerui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetIntegerv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetInternalformatSampleivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetInternalformati64v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetInternalformativ = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMemoryObjectDetachedResourcesuivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexEnvfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexEnvivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexGendvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexGenfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexGenivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexImageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexLevelParameterfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexLevelParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexParameterIivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexParameterIuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexParameterfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultiTexParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultisamplefv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedBufferParameteri64v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedBufferParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedBufferParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedBufferParameterui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedBufferPointerv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedBufferPointervEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedBufferSubDataEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedFramebufferAttachmentParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedFramebufferAttachmentParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedFramebufferParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedFramebufferParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedProgramLocalParameterIivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedProgramLocalParameterIuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedProgramLocalParameterdvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedProgramLocalParameterfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedProgramStringEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedProgramivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedRenderbufferParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedRenderbufferParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedStringARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNamedStringivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetNextPerfQueryIdINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetObjectLabel = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetObjectLabelEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetObjectLabelKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetObjectPtrLabel = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetObjectPtrLabelKHR = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathCommandsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathCoordsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathDashArrayNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathLengthNV = FunctionDescriptor.of(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathMetricRangeNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathMetricsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathParameterfvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathParameterivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathSpacingNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfCounterInfoINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfMonitorCounterDataAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfMonitorCounterInfoAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfMonitorCounterStringAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfMonitorCountersAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfMonitorGroupStringAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfMonitorGroupsAMD = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfQueryDataINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfQueryIdByNameINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPerfQueryInfoINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPointerIndexedvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPointeri_vEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPointerv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPointervKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramBinary = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramInfoLog = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramInterfaceiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramPipelineInfoLog = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramPipelineInfoLogEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramPipelineiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramPipelineivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramResourceIndex = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramResourceLocation = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramResourceLocationIndex = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramResourceName = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramResourcefvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramResourceiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramStageiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryBufferObjecti64v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryBufferObjectiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryBufferObjectui64v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryBufferObjectuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryIndexediv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryObjecti64v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryObjectiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryObjectui64v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryObjectuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetRenderbufferParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSamplerParameterIiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSamplerParameterIuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSamplerParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSamplerParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetShaderInfoLog = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetShaderPrecisionFormat = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetShaderSource = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetShaderiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetShadingRateImagePaletteNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetShadingRateSampleLocationivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetStageIndexNV = FunctionDescriptor.of(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetString = FunctionDescriptor.of(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetStringi = FunctionDescriptor.of(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSubroutineIndex = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSubroutineUniformLocation = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSynciv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexLevelParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexLevelParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexParameterIiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexParameterIuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureHandleARB = FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureHandleNV = FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureImageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureLevelParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureLevelParameterfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureLevelParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureLevelParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureParameterIiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureParameterIivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureParameterIuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureParameterIuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureParameterfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureSamplerHandleARB = FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureSamplerHandleNV = FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTextureSubImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTransformFeedbackVarying = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTransformFeedbacki64_v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTransformFeedbacki_v = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTransformFeedbackiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformBlockIndex = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformIndices = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformLocation = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformSubroutineuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformdv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformi64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexArrayIndexed64iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexArrayIndexediv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexArrayIntegeri_vEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexArrayIntegervEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexArrayPointeri_vEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexArrayPointervEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexArrayiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribIiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribIuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribLdv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribLi64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribLui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribLui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribPointerv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribdv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVkProcAddrNV = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnCompressedTexImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnCompressedTexImageARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnTexImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnTexImageARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformdv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformdvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformfvKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformi64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformivKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformuivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnUniformuivKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glHint = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glInsertEventMarkerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glInterpolatePathsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glInvalidateBufferData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glInvalidateBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glInvalidateFramebuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glInvalidateNamedFramebufferData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glInvalidateNamedFramebufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glInvalidateSubFramebuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glInvalidateTexImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glInvalidateTexSubImage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsBuffer = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsBufferResidentNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsCommandListNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsEnabled = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsEnabledIndexedEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsEnabledi = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsFramebuffer = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsImageHandleResidentARB = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsImageHandleResidentNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsNamedBufferResidentNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsNamedStringARB = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsPathNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsPointInFillPathNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsPointInStrokePathNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsProgram = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsProgramPipeline = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsProgramPipelineEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsQuery = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsRenderbuffer = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsSampler = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsShader = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsStateNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsSync = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsTexture = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsTextureHandleResidentARB = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsTextureHandleResidentNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsTransformFeedback = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsVertexArray = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLabelObjectEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLineWidth = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLinkProgram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glListDrawCommandsStatesClientNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLogicOp = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeBufferNonResidentNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeBufferResidentNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeImageHandleNonResidentARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeImageHandleNonResidentNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeImageHandleResidentARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeImageHandleResidentNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeNamedBufferNonResidentNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeNamedBufferResidentNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeTextureHandleNonResidentARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeTextureHandleNonResidentNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeTextureHandleResidentARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glMakeTextureHandleResidentNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapBuffer = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapBufferRange = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapNamedBuffer = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapNamedBufferEXT = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapNamedBufferRange = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapNamedBufferRangeEXT = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixFrustumEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixLoad3x2fNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixLoad3x3fNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixLoadIdentityEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixLoadTranspose3x3fNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixLoadTransposedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixLoadTransposefEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixLoaddEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixLoadfEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixMult3x2fNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixMult3x3fNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixMultTranspose3x3fNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixMultTransposedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixMultTransposefEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixMultdEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixMultfEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixOrthoEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixPopEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixPushEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixRotatedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixRotatefEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixScaledEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixScalefEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixTranslatedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixTranslatefEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMaxShaderCompilerThreadsARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMaxShaderCompilerThreadsKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMemoryBarrier = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMemoryBarrierByRegion = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMinSampleShading = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMinSampleShadingARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawArrays = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawArraysIndirect = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawArraysIndirectBindlessCountNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawArraysIndirectBindlessNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawArraysIndirectCount = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawArraysIndirectCountARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawElements = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawElementsBaseVertex = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawElementsIndirect = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawElementsIndirectBindlessCountNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawElementsIndirectBindlessNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawElementsIndirectCount = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawElementsIndirectCountARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawMeshTasksIndirectCountNV = FunctionDescriptor.ofVoid(
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiDrawMeshTasksIndirectNV = FunctionDescriptor.ofVoid(
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexBufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordPointerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexEnvfEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexEnvfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexEnviEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexEnvivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexGendEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexGendvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexGenfEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexGenfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexGeniEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexGenivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexParameterIivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexParameterIuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexParameterfEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexParameterfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexParameteriEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexRenderbufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexSubImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexSubImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexSubImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferAttachMemoryNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferDataEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferPageCommitmentARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferPageCommitmentEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferPageCommitmentMemNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferStorage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferStorageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferSubData = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferSubDataEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedCopyBufferSubDataEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferDrawBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferDrawBuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferParameteriEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferReadBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferRenderbuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferRenderbufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferSampleLocationsfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferSampleLocationsfvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTexture = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTexture1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTexture2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTexture3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTextureEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTextureFaceEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTextureLayer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTextureLayerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedFramebufferTextureMultiviewOVR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameter4dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameter4dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameter4fEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameter4fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameterI4iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameterI4ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameterI4uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameterI4uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParameters4fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParametersI4ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramLocalParametersI4uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedProgramStringEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedRenderbufferStorage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedRenderbufferStorageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedRenderbufferStorageMultisample = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedRenderbufferStorageMultisampleAdvancedAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedRenderbufferStorageMultisampleCoverageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedRenderbufferStorageMultisampleEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedStringARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormalFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glObjectLabel = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glObjectLabelKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glObjectPtrLabel = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glObjectPtrLabelKHR = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPatchParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPatchParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathCommandsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathCoordsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathCoverDepthFuncNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathDashArrayNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathGlyphIndexArrayNV = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathGlyphIndexRangeNV = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathGlyphRangeNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathGlyphsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathMemoryGlyphIndexArrayNV = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathParameterfNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathParameterfvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathParameteriNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathParameterivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathStencilDepthOffsetNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathStencilFuncNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathStringNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathSubCommandsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathSubCoordsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glPauseTransformFeedback = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelStoref = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelStorei = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointAlongPathNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameterf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointSize = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPolygonMode = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPolygonOffset = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPolygonOffsetClamp = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPolygonOffsetClampEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPopDebugGroup = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPopDebugGroupKHR = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPopGroupMarkerEXT = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPrimitiveBoundingBoxARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPrimitiveRestartIndex = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramBinary = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramParameteriARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramPathFragmentInputGenNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1fEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1i64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1i64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2fEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2i64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2i64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3fEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3i64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3i64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4fEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4i64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4i64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformHandleui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformHandleui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformHandleui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformHandleui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2x3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2x3dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2x3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2x3fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2x4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2x4dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2x4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix2x4fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3x2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3x2dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3x2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3x2fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3x4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3x4dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3x4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix3x4fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4x2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4x2dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4x2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4x2fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4x3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4x3dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4x3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformMatrix4x3fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniformui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProvokingVertex = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPushClientAttribDefaultEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPushDebugGroup = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPushDebugGroupKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPushGroupMarkerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glQueryCounter = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterSamplesEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glReadBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glReadPixels = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glReadnPixels = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glReadnPixelsARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glReadnPixelsKHR = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glReleaseShaderCompiler = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glRenderbufferStorage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRenderbufferStorageMultisample = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRenderbufferStorageMultisampleAdvancedAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRenderbufferStorageMultisampleCoverageNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glResetMemoryObjectParameterNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glResolveDepthValuesNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glResumeTransformFeedback = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glSampleCoverage = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glSampleMaski = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSamplerParameterIiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSamplerParameterIuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSamplerParameterf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSamplerParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSamplerParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSamplerParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glScissor = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glScissorArrayv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glScissorExclusiveArrayvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glScissorExclusiveNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glScissorIndexed = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glScissorIndexedv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColorFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSelectPerfMonitorCountersAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glShaderBinary = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glShaderSource = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glShaderStorageBlockBinding = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glShadingRateImageBarrierNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glShadingRateImagePaletteNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glShadingRateSampleOrderCustomNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glShadingRateSampleOrderNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSignalVkFenceNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glSignalVkSemaphoreNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glSpecializeShader = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSpecializeShaderARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glStateCaptureNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilFillPathInstancedNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilFillPathNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilFunc = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilFuncSeparate = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilMask = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilMaskSeparate = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilOp = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilOpSeparate = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilStrokePathInstancedNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilStrokePathNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilThenCoverFillPathInstancedNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilThenCoverFillPathNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilThenCoverStrokePathInstancedNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilThenCoverStrokePathNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSubpixelPrecisionBiasNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexAttachMemoryNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexBufferARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexBufferRange = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexImage2DMultisample = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexImage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexImage3DMultisample = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexPageCommitmentARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexPageCommitmentMemNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexParameterIiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexParameterIuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexParameterf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorage2DMultisample = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorage3DMultisample = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexSubImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexSubImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexSubImage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureAttachMemoryNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureBarrier = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureBarrierNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureBufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureBufferRange = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureBufferRangeEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexturePageCommitmentEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexturePageCommitmentMemNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterIiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterIivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterIuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterIuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterfEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameteriEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureRenderbufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage2DMultisample = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage2DMultisampleEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage3DMultisample = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorage3DMultisampleEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureSubImage1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureSubImage1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureSubImage2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureSubImage2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureSubImage3D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureSubImage3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureView = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTransformFeedbackBufferBase = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTransformFeedbackBufferRange = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glTransformFeedbackVaryings = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTransformPathNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1i64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1i64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2i64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2i64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3i64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3i64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4i64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4i64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformBlockBinding = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformHandleui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformHandleui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformHandleui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformHandleui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix2x3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix2x3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix2x4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix2x4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix3x2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix3x2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix3x4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix3x4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix4x2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix4x2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix4x3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix4x3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformSubroutinesuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUnmapBuffer = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUnmapNamedBuffer = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUnmapNamedBufferEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUseProgram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUseProgramStages = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUseProgramStagesEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUseShaderProgramEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glValidateProgram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glValidateProgramPipeline = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glValidateProgramPipelineEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayAttribBinding = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayAttribFormat = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayAttribIFormat = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayAttribLFormat = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayBindVertexBufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayBindingDivisor = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayColorOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayEdgeFlagOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayElementBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayFogCoordOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayIndexOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayMultiTexCoordOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayNormalOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArraySecondaryColorOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayTexCoordOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexAttribBindingEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexAttribDivisorEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexAttribFormatEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexAttribIFormatEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexAttribIOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexAttribLFormatEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexAttribLOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexAttribOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexBindingDivisorEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexBuffers = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(NativeLayout.C_SIZE_T),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayVertexOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4Nbv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4Niv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4Nsv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4Nub = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4Nubv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4Nuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4Nusv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4bv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4ubv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4usv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribBinding = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribDivisor = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribDivisorARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribFormat = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI1i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI1iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI1ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI1uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI2i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI2iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI2ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI2uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI3iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4bv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4ubv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4usv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribIFormat = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribIFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribIPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1ui64ARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1ui64vARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL2i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL2i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL2ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL2ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL3i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL3i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL3ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL3ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL4i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL4i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL4ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL4ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribLFormat = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribLFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribLPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribP1ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribP1uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribP2ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribP2uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribP3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribP3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribP4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribP4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexBindingDivisor = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexFormatNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glViewport = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glViewportArrayv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glViewportIndexedf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glViewportIndexedfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glViewportPositionWScaleNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glViewportSwizzleNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWaitSync = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glWaitVkSemaphoreNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightPathsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowRectanglesEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        /// Constructing this class is nonsense so the constructor is made private.
        private Descriptors() {}
    }
}
