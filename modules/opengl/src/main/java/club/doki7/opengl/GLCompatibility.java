package club.doki7.opengl;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.util.Objects;

import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import club.doki7.ffm.NativeLayout;
import club.doki7.ffm.RawFunctionLoader;
import club.doki7.ffm.annotation.*;
import club.doki7.ffm.ptr.*;
import club.doki7.opengl.handle.*;

public final class GLCompatibility extends GL {
    public GLCompatibility(RawFunctionLoader loader) {
    super(loader);
        SEGMENT$glAccum = loader.apply("glAccum");
        HANDLE$glAccum = RawFunctionLoader.link(SEGMENT$glAccum, Descriptors.DESCRIPTOR$glAccum);
        SEGMENT$glAcquireKeyedMutexWin32EXT = loader.apply("glAcquireKeyedMutexWin32EXT");
        HANDLE$glAcquireKeyedMutexWin32EXT = RawFunctionLoader.link(SEGMENT$glAcquireKeyedMutexWin32EXT, Descriptors.DESCRIPTOR$glAcquireKeyedMutexWin32EXT);
        SEGMENT$glActiveStencilFaceEXT = loader.apply("glActiveStencilFaceEXT");
        HANDLE$glActiveStencilFaceEXT = RawFunctionLoader.link(SEGMENT$glActiveStencilFaceEXT, Descriptors.DESCRIPTOR$glActiveStencilFaceEXT);
        SEGMENT$glActiveTextureARB = loader.apply("glActiveTextureARB");
        HANDLE$glActiveTextureARB = RawFunctionLoader.link(SEGMENT$glActiveTextureARB, Descriptors.DESCRIPTOR$glActiveTextureARB);
        SEGMENT$glActiveVaryingNV = loader.apply("glActiveVaryingNV");
        HANDLE$glActiveVaryingNV = RawFunctionLoader.link(SEGMENT$glActiveVaryingNV, Descriptors.DESCRIPTOR$glActiveVaryingNV);
        SEGMENT$glAlphaFunc = loader.apply("glAlphaFunc");
        HANDLE$glAlphaFunc = RawFunctionLoader.link(SEGMENT$glAlphaFunc, Descriptors.DESCRIPTOR$glAlphaFunc);
        SEGMENT$glAlphaToCoverageDitherControlNV = loader.apply("glAlphaToCoverageDitherControlNV");
        HANDLE$glAlphaToCoverageDitherControlNV = RawFunctionLoader.link(SEGMENT$glAlphaToCoverageDitherControlNV, Descriptors.DESCRIPTOR$glAlphaToCoverageDitherControlNV);
        SEGMENT$glAreTexturesResident = loader.apply("glAreTexturesResident");
        HANDLE$glAreTexturesResident = RawFunctionLoader.link(SEGMENT$glAreTexturesResident, Descriptors.DESCRIPTOR$glAreTexturesResident);
        SEGMENT$glArrayElement = loader.apply("glArrayElement");
        HANDLE$glArrayElement = RawFunctionLoader.link(SEGMENT$glArrayElement, Descriptors.DESCRIPTOR$glArrayElement);
        SEGMENT$glAsyncCopyBufferSubDataNVX = loader.apply("glAsyncCopyBufferSubDataNVX");
        HANDLE$glAsyncCopyBufferSubDataNVX = RawFunctionLoader.link(SEGMENT$glAsyncCopyBufferSubDataNVX, Descriptors.DESCRIPTOR$glAsyncCopyBufferSubDataNVX);
        SEGMENT$glAsyncCopyImageSubDataNVX = loader.apply("glAsyncCopyImageSubDataNVX");
        HANDLE$glAsyncCopyImageSubDataNVX = RawFunctionLoader.link(SEGMENT$glAsyncCopyImageSubDataNVX, Descriptors.DESCRIPTOR$glAsyncCopyImageSubDataNVX);
        SEGMENT$glAttachObjectARB = loader.apply("glAttachObjectARB");
        HANDLE$glAttachObjectARB = RawFunctionLoader.link(SEGMENT$glAttachObjectARB, Descriptors.DESCRIPTOR$glAttachObjectARB);
        SEGMENT$glBegin = loader.apply("glBegin");
        HANDLE$glBegin = RawFunctionLoader.link(SEGMENT$glBegin, Descriptors.DESCRIPTOR$glBegin);
        SEGMENT$glBeginConditionalRenderNVX = loader.apply("glBeginConditionalRenderNVX");
        HANDLE$glBeginConditionalRenderNVX = RawFunctionLoader.link(SEGMENT$glBeginConditionalRenderNVX, Descriptors.DESCRIPTOR$glBeginConditionalRenderNVX);
        SEGMENT$glBeginQueryARB = loader.apply("glBeginQueryARB");
        HANDLE$glBeginQueryARB = RawFunctionLoader.link(SEGMENT$glBeginQueryARB, Descriptors.DESCRIPTOR$glBeginQueryARB);
        SEGMENT$glBeginTransformFeedbackEXT = loader.apply("glBeginTransformFeedbackEXT");
        HANDLE$glBeginTransformFeedbackEXT = RawFunctionLoader.link(SEGMENT$glBeginTransformFeedbackEXT, Descriptors.DESCRIPTOR$glBeginTransformFeedbackEXT);
        SEGMENT$glBeginTransformFeedbackNV = loader.apply("glBeginTransformFeedbackNV");
        HANDLE$glBeginTransformFeedbackNV = RawFunctionLoader.link(SEGMENT$glBeginTransformFeedbackNV, Descriptors.DESCRIPTOR$glBeginTransformFeedbackNV);
        SEGMENT$glBindAttribLocationARB = loader.apply("glBindAttribLocationARB");
        HANDLE$glBindAttribLocationARB = RawFunctionLoader.link(SEGMENT$glBindAttribLocationARB, Descriptors.DESCRIPTOR$glBindAttribLocationARB);
        SEGMENT$glBindBufferARB = loader.apply("glBindBufferARB");
        HANDLE$glBindBufferARB = RawFunctionLoader.link(SEGMENT$glBindBufferARB, Descriptors.DESCRIPTOR$glBindBufferARB);
        SEGMENT$glBindBufferBaseEXT = loader.apply("glBindBufferBaseEXT");
        HANDLE$glBindBufferBaseEXT = RawFunctionLoader.link(SEGMENT$glBindBufferBaseEXT, Descriptors.DESCRIPTOR$glBindBufferBaseEXT);
        SEGMENT$glBindBufferBaseNV = loader.apply("glBindBufferBaseNV");
        HANDLE$glBindBufferBaseNV = RawFunctionLoader.link(SEGMENT$glBindBufferBaseNV, Descriptors.DESCRIPTOR$glBindBufferBaseNV);
        SEGMENT$glBindBufferOffsetEXT = loader.apply("glBindBufferOffsetEXT");
        HANDLE$glBindBufferOffsetEXT = RawFunctionLoader.link(SEGMENT$glBindBufferOffsetEXT, Descriptors.DESCRIPTOR$glBindBufferOffsetEXT);
        SEGMENT$glBindBufferOffsetNV = loader.apply("glBindBufferOffsetNV");
        HANDLE$glBindBufferOffsetNV = RawFunctionLoader.link(SEGMENT$glBindBufferOffsetNV, Descriptors.DESCRIPTOR$glBindBufferOffsetNV);
        SEGMENT$glBindBufferRangeEXT = loader.apply("glBindBufferRangeEXT");
        HANDLE$glBindBufferRangeEXT = RawFunctionLoader.link(SEGMENT$glBindBufferRangeEXT, Descriptors.DESCRIPTOR$glBindBufferRangeEXT);
        SEGMENT$glBindBufferRangeNV = loader.apply("glBindBufferRangeNV");
        HANDLE$glBindBufferRangeNV = RawFunctionLoader.link(SEGMENT$glBindBufferRangeNV, Descriptors.DESCRIPTOR$glBindBufferRangeNV);
        SEGMENT$glBindFragDataLocationEXT = loader.apply("glBindFragDataLocationEXT");
        HANDLE$glBindFragDataLocationEXT = RawFunctionLoader.link(SEGMENT$glBindFragDataLocationEXT, Descriptors.DESCRIPTOR$glBindFragDataLocationEXT);
        SEGMENT$glBindFramebufferEXT = loader.apply("glBindFramebufferEXT");
        HANDLE$glBindFramebufferEXT = RawFunctionLoader.link(SEGMENT$glBindFramebufferEXT, Descriptors.DESCRIPTOR$glBindFramebufferEXT);
        SEGMENT$glBindImageTextureEXT = loader.apply("glBindImageTextureEXT");
        HANDLE$glBindImageTextureEXT = RawFunctionLoader.link(SEGMENT$glBindImageTextureEXT, Descriptors.DESCRIPTOR$glBindImageTextureEXT);
        SEGMENT$glBindProgramARB = loader.apply("glBindProgramARB");
        HANDLE$glBindProgramARB = RawFunctionLoader.link(SEGMENT$glBindProgramARB, Descriptors.DESCRIPTOR$glBindProgramARB);
        SEGMENT$glBindRenderbufferEXT = loader.apply("glBindRenderbufferEXT");
        HANDLE$glBindRenderbufferEXT = RawFunctionLoader.link(SEGMENT$glBindRenderbufferEXT, Descriptors.DESCRIPTOR$glBindRenderbufferEXT);
        SEGMENT$glBindTransformFeedbackNV = loader.apply("glBindTransformFeedbackNV");
        HANDLE$glBindTransformFeedbackNV = RawFunctionLoader.link(SEGMENT$glBindTransformFeedbackNV, Descriptors.DESCRIPTOR$glBindTransformFeedbackNV);
        SEGMENT$glBitmap = loader.apply("glBitmap");
        HANDLE$glBitmap = RawFunctionLoader.link(SEGMENT$glBitmap, Descriptors.DESCRIPTOR$glBitmap);
        SEGMENT$glBlendColorEXT = loader.apply("glBlendColorEXT");
        HANDLE$glBlendColorEXT = RawFunctionLoader.link(SEGMENT$glBlendColorEXT, Descriptors.DESCRIPTOR$glBlendColorEXT);
        SEGMENT$glBlendEquationEXT = loader.apply("glBlendEquationEXT");
        HANDLE$glBlendEquationEXT = RawFunctionLoader.link(SEGMENT$glBlendEquationEXT, Descriptors.DESCRIPTOR$glBlendEquationEXT);
        SEGMENT$glBlendEquationIndexedAMD = loader.apply("glBlendEquationIndexedAMD");
        HANDLE$glBlendEquationIndexedAMD = RawFunctionLoader.link(SEGMENT$glBlendEquationIndexedAMD, Descriptors.DESCRIPTOR$glBlendEquationIndexedAMD);
        SEGMENT$glBlendEquationSeparateEXT = loader.apply("glBlendEquationSeparateEXT");
        HANDLE$glBlendEquationSeparateEXT = RawFunctionLoader.link(SEGMENT$glBlendEquationSeparateEXT, Descriptors.DESCRIPTOR$glBlendEquationSeparateEXT);
        SEGMENT$glBlendEquationSeparateIndexedAMD = loader.apply("glBlendEquationSeparateIndexedAMD");
        HANDLE$glBlendEquationSeparateIndexedAMD = RawFunctionLoader.link(SEGMENT$glBlendEquationSeparateIndexedAMD, Descriptors.DESCRIPTOR$glBlendEquationSeparateIndexedAMD);
        SEGMENT$glBlendFuncIndexedAMD = loader.apply("glBlendFuncIndexedAMD");
        HANDLE$glBlendFuncIndexedAMD = RawFunctionLoader.link(SEGMENT$glBlendFuncIndexedAMD, Descriptors.DESCRIPTOR$glBlendFuncIndexedAMD);
        SEGMENT$glBlendFuncSeparateEXT = loader.apply("glBlendFuncSeparateEXT");
        HANDLE$glBlendFuncSeparateEXT = RawFunctionLoader.link(SEGMENT$glBlendFuncSeparateEXT, Descriptors.DESCRIPTOR$glBlendFuncSeparateEXT);
        SEGMENT$glBlendFuncSeparateIndexedAMD = loader.apply("glBlendFuncSeparateIndexedAMD");
        HANDLE$glBlendFuncSeparateIndexedAMD = RawFunctionLoader.link(SEGMENT$glBlendFuncSeparateIndexedAMD, Descriptors.DESCRIPTOR$glBlendFuncSeparateIndexedAMD);
        SEGMENT$glBlitFramebufferEXT = loader.apply("glBlitFramebufferEXT");
        HANDLE$glBlitFramebufferEXT = RawFunctionLoader.link(SEGMENT$glBlitFramebufferEXT, Descriptors.DESCRIPTOR$glBlitFramebufferEXT);
        SEGMENT$glBlitFramebufferLayerEXT = loader.apply("glBlitFramebufferLayerEXT");
        HANDLE$glBlitFramebufferLayerEXT = RawFunctionLoader.link(SEGMENT$glBlitFramebufferLayerEXT, Descriptors.DESCRIPTOR$glBlitFramebufferLayerEXT);
        SEGMENT$glBlitFramebufferLayersEXT = loader.apply("glBlitFramebufferLayersEXT");
        HANDLE$glBlitFramebufferLayersEXT = RawFunctionLoader.link(SEGMENT$glBlitFramebufferLayersEXT, Descriptors.DESCRIPTOR$glBlitFramebufferLayersEXT);
        SEGMENT$glBufferDataARB = loader.apply("glBufferDataARB");
        HANDLE$glBufferDataARB = RawFunctionLoader.link(SEGMENT$glBufferDataARB, Descriptors.DESCRIPTOR$glBufferDataARB);
        SEGMENT$glBufferStorageExternalEXT = loader.apply("glBufferStorageExternalEXT");
        HANDLE$glBufferStorageExternalEXT = RawFunctionLoader.link(SEGMENT$glBufferStorageExternalEXT, Descriptors.DESCRIPTOR$glBufferStorageExternalEXT);
        SEGMENT$glBufferSubDataARB = loader.apply("glBufferSubDataARB");
        HANDLE$glBufferSubDataARB = RawFunctionLoader.link(SEGMENT$glBufferSubDataARB, Descriptors.DESCRIPTOR$glBufferSubDataARB);
        SEGMENT$glCallList = loader.apply("glCallList");
        HANDLE$glCallList = RawFunctionLoader.link(SEGMENT$glCallList, Descriptors.DESCRIPTOR$glCallList);
        SEGMENT$glCallLists = loader.apply("glCallLists");
        HANDLE$glCallLists = RawFunctionLoader.link(SEGMENT$glCallLists, Descriptors.DESCRIPTOR$glCallLists);
        SEGMENT$glCheckFramebufferStatusEXT = loader.apply("glCheckFramebufferStatusEXT");
        HANDLE$glCheckFramebufferStatusEXT = RawFunctionLoader.link(SEGMENT$glCheckFramebufferStatusEXT, Descriptors.DESCRIPTOR$glCheckFramebufferStatusEXT);
        SEGMENT$glClampColorARB = loader.apply("glClampColorARB");
        HANDLE$glClampColorARB = RawFunctionLoader.link(SEGMENT$glClampColorARB, Descriptors.DESCRIPTOR$glClampColorARB);
        SEGMENT$glClearAccum = loader.apply("glClearAccum");
        HANDLE$glClearAccum = RawFunctionLoader.link(SEGMENT$glClearAccum, Descriptors.DESCRIPTOR$glClearAccum);
        SEGMENT$glClearColorIiEXT = loader.apply("glClearColorIiEXT");
        HANDLE$glClearColorIiEXT = RawFunctionLoader.link(SEGMENT$glClearColorIiEXT, Descriptors.DESCRIPTOR$glClearColorIiEXT);
        SEGMENT$glClearColorIuiEXT = loader.apply("glClearColorIuiEXT");
        HANDLE$glClearColorIuiEXT = RawFunctionLoader.link(SEGMENT$glClearColorIuiEXT, Descriptors.DESCRIPTOR$glClearColorIuiEXT);
        SEGMENT$glClearIndex = loader.apply("glClearIndex");
        HANDLE$glClearIndex = RawFunctionLoader.link(SEGMENT$glClearIndex, Descriptors.DESCRIPTOR$glClearIndex);
        SEGMENT$glClientActiveTexture = loader.apply("glClientActiveTexture");
        HANDLE$glClientActiveTexture = RawFunctionLoader.link(SEGMENT$glClientActiveTexture, Descriptors.DESCRIPTOR$glClientActiveTexture);
        SEGMENT$glClientActiveTextureARB = loader.apply("glClientActiveTextureARB");
        HANDLE$glClientActiveTextureARB = RawFunctionLoader.link(SEGMENT$glClientActiveTextureARB, Descriptors.DESCRIPTOR$glClientActiveTextureARB);
        SEGMENT$glClientWaitSemaphoreui64NVX = loader.apply("glClientWaitSemaphoreui64NVX");
        HANDLE$glClientWaitSemaphoreui64NVX = RawFunctionLoader.link(SEGMENT$glClientWaitSemaphoreui64NVX, Descriptors.DESCRIPTOR$glClientWaitSemaphoreui64NVX);
        SEGMENT$glClipPlane = loader.apply("glClipPlane");
        HANDLE$glClipPlane = RawFunctionLoader.link(SEGMENT$glClipPlane, Descriptors.DESCRIPTOR$glClipPlane);
        SEGMENT$glColor3b = loader.apply("glColor3b");
        HANDLE$glColor3b = RawFunctionLoader.link(SEGMENT$glColor3b, Descriptors.DESCRIPTOR$glColor3b);
        SEGMENT$glColor3bv = loader.apply("glColor3bv");
        HANDLE$glColor3bv = RawFunctionLoader.link(SEGMENT$glColor3bv, Descriptors.DESCRIPTOR$glColor3bv);
        SEGMENT$glColor3d = loader.apply("glColor3d");
        HANDLE$glColor3d = RawFunctionLoader.link(SEGMENT$glColor3d, Descriptors.DESCRIPTOR$glColor3d);
        SEGMENT$glColor3dv = loader.apply("glColor3dv");
        HANDLE$glColor3dv = RawFunctionLoader.link(SEGMENT$glColor3dv, Descriptors.DESCRIPTOR$glColor3dv);
        SEGMENT$glColor3f = loader.apply("glColor3f");
        HANDLE$glColor3f = RawFunctionLoader.link(SEGMENT$glColor3f, Descriptors.DESCRIPTOR$glColor3f);
        SEGMENT$glColor3fv = loader.apply("glColor3fv");
        HANDLE$glColor3fv = RawFunctionLoader.link(SEGMENT$glColor3fv, Descriptors.DESCRIPTOR$glColor3fv);
        SEGMENT$glColor3hNV = loader.apply("glColor3hNV");
        HANDLE$glColor3hNV = RawFunctionLoader.link(SEGMENT$glColor3hNV, Descriptors.DESCRIPTOR$glColor3hNV);
        SEGMENT$glColor3hvNV = loader.apply("glColor3hvNV");
        HANDLE$glColor3hvNV = RawFunctionLoader.link(SEGMENT$glColor3hvNV, Descriptors.DESCRIPTOR$glColor3hvNV);
        SEGMENT$glColor3i = loader.apply("glColor3i");
        HANDLE$glColor3i = RawFunctionLoader.link(SEGMENT$glColor3i, Descriptors.DESCRIPTOR$glColor3i);
        SEGMENT$glColor3iv = loader.apply("glColor3iv");
        HANDLE$glColor3iv = RawFunctionLoader.link(SEGMENT$glColor3iv, Descriptors.DESCRIPTOR$glColor3iv);
        SEGMENT$glColor3s = loader.apply("glColor3s");
        HANDLE$glColor3s = RawFunctionLoader.link(SEGMENT$glColor3s, Descriptors.DESCRIPTOR$glColor3s);
        SEGMENT$glColor3sv = loader.apply("glColor3sv");
        HANDLE$glColor3sv = RawFunctionLoader.link(SEGMENT$glColor3sv, Descriptors.DESCRIPTOR$glColor3sv);
        SEGMENT$glColor3ub = loader.apply("glColor3ub");
        HANDLE$glColor3ub = RawFunctionLoader.link(SEGMENT$glColor3ub, Descriptors.DESCRIPTOR$glColor3ub);
        SEGMENT$glColor3ubv = loader.apply("glColor3ubv");
        HANDLE$glColor3ubv = RawFunctionLoader.link(SEGMENT$glColor3ubv, Descriptors.DESCRIPTOR$glColor3ubv);
        SEGMENT$glColor3ui = loader.apply("glColor3ui");
        HANDLE$glColor3ui = RawFunctionLoader.link(SEGMENT$glColor3ui, Descriptors.DESCRIPTOR$glColor3ui);
        SEGMENT$glColor3uiv = loader.apply("glColor3uiv");
        HANDLE$glColor3uiv = RawFunctionLoader.link(SEGMENT$glColor3uiv, Descriptors.DESCRIPTOR$glColor3uiv);
        SEGMENT$glColor3us = loader.apply("glColor3us");
        HANDLE$glColor3us = RawFunctionLoader.link(SEGMENT$glColor3us, Descriptors.DESCRIPTOR$glColor3us);
        SEGMENT$glColor3usv = loader.apply("glColor3usv");
        HANDLE$glColor3usv = RawFunctionLoader.link(SEGMENT$glColor3usv, Descriptors.DESCRIPTOR$glColor3usv);
        SEGMENT$glColor4b = loader.apply("glColor4b");
        HANDLE$glColor4b = RawFunctionLoader.link(SEGMENT$glColor4b, Descriptors.DESCRIPTOR$glColor4b);
        SEGMENT$glColor4bv = loader.apply("glColor4bv");
        HANDLE$glColor4bv = RawFunctionLoader.link(SEGMENT$glColor4bv, Descriptors.DESCRIPTOR$glColor4bv);
        SEGMENT$glColor4d = loader.apply("glColor4d");
        HANDLE$glColor4d = RawFunctionLoader.link(SEGMENT$glColor4d, Descriptors.DESCRIPTOR$glColor4d);
        SEGMENT$glColor4dv = loader.apply("glColor4dv");
        HANDLE$glColor4dv = RawFunctionLoader.link(SEGMENT$glColor4dv, Descriptors.DESCRIPTOR$glColor4dv);
        SEGMENT$glColor4f = loader.apply("glColor4f");
        HANDLE$glColor4f = RawFunctionLoader.link(SEGMENT$glColor4f, Descriptors.DESCRIPTOR$glColor4f);
        SEGMENT$glColor4fv = loader.apply("glColor4fv");
        HANDLE$glColor4fv = RawFunctionLoader.link(SEGMENT$glColor4fv, Descriptors.DESCRIPTOR$glColor4fv);
        SEGMENT$glColor4hNV = loader.apply("glColor4hNV");
        HANDLE$glColor4hNV = RawFunctionLoader.link(SEGMENT$glColor4hNV, Descriptors.DESCRIPTOR$glColor4hNV);
        SEGMENT$glColor4hvNV = loader.apply("glColor4hvNV");
        HANDLE$glColor4hvNV = RawFunctionLoader.link(SEGMENT$glColor4hvNV, Descriptors.DESCRIPTOR$glColor4hvNV);
        SEGMENT$glColor4i = loader.apply("glColor4i");
        HANDLE$glColor4i = RawFunctionLoader.link(SEGMENT$glColor4i, Descriptors.DESCRIPTOR$glColor4i);
        SEGMENT$glColor4iv = loader.apply("glColor4iv");
        HANDLE$glColor4iv = RawFunctionLoader.link(SEGMENT$glColor4iv, Descriptors.DESCRIPTOR$glColor4iv);
        SEGMENT$glColor4s = loader.apply("glColor4s");
        HANDLE$glColor4s = RawFunctionLoader.link(SEGMENT$glColor4s, Descriptors.DESCRIPTOR$glColor4s);
        SEGMENT$glColor4sv = loader.apply("glColor4sv");
        HANDLE$glColor4sv = RawFunctionLoader.link(SEGMENT$glColor4sv, Descriptors.DESCRIPTOR$glColor4sv);
        SEGMENT$glColor4ub = loader.apply("glColor4ub");
        HANDLE$glColor4ub = RawFunctionLoader.link(SEGMENT$glColor4ub, Descriptors.DESCRIPTOR$glColor4ub);
        SEGMENT$glColor4ubv = loader.apply("glColor4ubv");
        HANDLE$glColor4ubv = RawFunctionLoader.link(SEGMENT$glColor4ubv, Descriptors.DESCRIPTOR$glColor4ubv);
        SEGMENT$glColor4ui = loader.apply("glColor4ui");
        HANDLE$glColor4ui = RawFunctionLoader.link(SEGMENT$glColor4ui, Descriptors.DESCRIPTOR$glColor4ui);
        SEGMENT$glColor4uiv = loader.apply("glColor4uiv");
        HANDLE$glColor4uiv = RawFunctionLoader.link(SEGMENT$glColor4uiv, Descriptors.DESCRIPTOR$glColor4uiv);
        SEGMENT$glColor4us = loader.apply("glColor4us");
        HANDLE$glColor4us = RawFunctionLoader.link(SEGMENT$glColor4us, Descriptors.DESCRIPTOR$glColor4us);
        SEGMENT$glColor4usv = loader.apply("glColor4usv");
        HANDLE$glColor4usv = RawFunctionLoader.link(SEGMENT$glColor4usv, Descriptors.DESCRIPTOR$glColor4usv);
        SEGMENT$glColorMaskIndexedEXT = loader.apply("glColorMaskIndexedEXT");
        HANDLE$glColorMaskIndexedEXT = RawFunctionLoader.link(SEGMENT$glColorMaskIndexedEXT, Descriptors.DESCRIPTOR$glColorMaskIndexedEXT);
        SEGMENT$glColorMaterial = loader.apply("glColorMaterial");
        HANDLE$glColorMaterial = RawFunctionLoader.link(SEGMENT$glColorMaterial, Descriptors.DESCRIPTOR$glColorMaterial);
        SEGMENT$glColorP3ui = loader.apply("glColorP3ui");
        HANDLE$glColorP3ui = RawFunctionLoader.link(SEGMENT$glColorP3ui, Descriptors.DESCRIPTOR$glColorP3ui);
        SEGMENT$glColorP3uiv = loader.apply("glColorP3uiv");
        HANDLE$glColorP3uiv = RawFunctionLoader.link(SEGMENT$glColorP3uiv, Descriptors.DESCRIPTOR$glColorP3uiv);
        SEGMENT$glColorP4ui = loader.apply("glColorP4ui");
        HANDLE$glColorP4ui = RawFunctionLoader.link(SEGMENT$glColorP4ui, Descriptors.DESCRIPTOR$glColorP4ui);
        SEGMENT$glColorP4uiv = loader.apply("glColorP4uiv");
        HANDLE$glColorP4uiv = RawFunctionLoader.link(SEGMENT$glColorP4uiv, Descriptors.DESCRIPTOR$glColorP4uiv);
        SEGMENT$glColorPointer = loader.apply("glColorPointer");
        HANDLE$glColorPointer = RawFunctionLoader.link(SEGMENT$glColorPointer, Descriptors.DESCRIPTOR$glColorPointer);
        SEGMENT$glColorSubTable = loader.apply("glColorSubTable");
        HANDLE$glColorSubTable = RawFunctionLoader.link(SEGMENT$glColorSubTable, Descriptors.DESCRIPTOR$glColorSubTable);
        SEGMENT$glColorTable = loader.apply("glColorTable");
        HANDLE$glColorTable = RawFunctionLoader.link(SEGMENT$glColorTable, Descriptors.DESCRIPTOR$glColorTable);
        SEGMENT$glColorTableParameterfv = loader.apply("glColorTableParameterfv");
        HANDLE$glColorTableParameterfv = RawFunctionLoader.link(SEGMENT$glColorTableParameterfv, Descriptors.DESCRIPTOR$glColorTableParameterfv);
        SEGMENT$glColorTableParameteriv = loader.apply("glColorTableParameteriv");
        HANDLE$glColorTableParameteriv = RawFunctionLoader.link(SEGMENT$glColorTableParameteriv, Descriptors.DESCRIPTOR$glColorTableParameteriv);
        SEGMENT$glCompileShaderARB = loader.apply("glCompileShaderARB");
        HANDLE$glCompileShaderARB = RawFunctionLoader.link(SEGMENT$glCompileShaderARB, Descriptors.DESCRIPTOR$glCompileShaderARB);
        SEGMENT$glCompressedTexImage1DARB = loader.apply("glCompressedTexImage1DARB");
        HANDLE$glCompressedTexImage1DARB = RawFunctionLoader.link(SEGMENT$glCompressedTexImage1DARB, Descriptors.DESCRIPTOR$glCompressedTexImage1DARB);
        SEGMENT$glCompressedTexImage2DARB = loader.apply("glCompressedTexImage2DARB");
        HANDLE$glCompressedTexImage2DARB = RawFunctionLoader.link(SEGMENT$glCompressedTexImage2DARB, Descriptors.DESCRIPTOR$glCompressedTexImage2DARB);
        SEGMENT$glCompressedTexImage3DARB = loader.apply("glCompressedTexImage3DARB");
        HANDLE$glCompressedTexImage3DARB = RawFunctionLoader.link(SEGMENT$glCompressedTexImage3DARB, Descriptors.DESCRIPTOR$glCompressedTexImage3DARB);
        SEGMENT$glCompressedTexSubImage1DARB = loader.apply("glCompressedTexSubImage1DARB");
        HANDLE$glCompressedTexSubImage1DARB = RawFunctionLoader.link(SEGMENT$glCompressedTexSubImage1DARB, Descriptors.DESCRIPTOR$glCompressedTexSubImage1DARB);
        SEGMENT$glCompressedTexSubImage2DARB = loader.apply("glCompressedTexSubImage2DARB");
        HANDLE$glCompressedTexSubImage2DARB = RawFunctionLoader.link(SEGMENT$glCompressedTexSubImage2DARB, Descriptors.DESCRIPTOR$glCompressedTexSubImage2DARB);
        SEGMENT$glCompressedTexSubImage3DARB = loader.apply("glCompressedTexSubImage3DARB");
        HANDLE$glCompressedTexSubImage3DARB = RawFunctionLoader.link(SEGMENT$glCompressedTexSubImage3DARB, Descriptors.DESCRIPTOR$glCompressedTexSubImage3DARB);
        SEGMENT$glConvolutionFilter1D = loader.apply("glConvolutionFilter1D");
        HANDLE$glConvolutionFilter1D = RawFunctionLoader.link(SEGMENT$glConvolutionFilter1D, Descriptors.DESCRIPTOR$glConvolutionFilter1D);
        SEGMENT$glConvolutionFilter2D = loader.apply("glConvolutionFilter2D");
        HANDLE$glConvolutionFilter2D = RawFunctionLoader.link(SEGMENT$glConvolutionFilter2D, Descriptors.DESCRIPTOR$glConvolutionFilter2D);
        SEGMENT$glConvolutionParameterf = loader.apply("glConvolutionParameterf");
        HANDLE$glConvolutionParameterf = RawFunctionLoader.link(SEGMENT$glConvolutionParameterf, Descriptors.DESCRIPTOR$glConvolutionParameterf);
        SEGMENT$glConvolutionParameterfv = loader.apply("glConvolutionParameterfv");
        HANDLE$glConvolutionParameterfv = RawFunctionLoader.link(SEGMENT$glConvolutionParameterfv, Descriptors.DESCRIPTOR$glConvolutionParameterfv);
        SEGMENT$glConvolutionParameteri = loader.apply("glConvolutionParameteri");
        HANDLE$glConvolutionParameteri = RawFunctionLoader.link(SEGMENT$glConvolutionParameteri, Descriptors.DESCRIPTOR$glConvolutionParameteri);
        SEGMENT$glConvolutionParameteriv = loader.apply("glConvolutionParameteriv");
        HANDLE$glConvolutionParameteriv = RawFunctionLoader.link(SEGMENT$glConvolutionParameteriv, Descriptors.DESCRIPTOR$glConvolutionParameteriv);
        SEGMENT$glCopyColorSubTable = loader.apply("glCopyColorSubTable");
        HANDLE$glCopyColorSubTable = RawFunctionLoader.link(SEGMENT$glCopyColorSubTable, Descriptors.DESCRIPTOR$glCopyColorSubTable);
        SEGMENT$glCopyColorTable = loader.apply("glCopyColorTable");
        HANDLE$glCopyColorTable = RawFunctionLoader.link(SEGMENT$glCopyColorTable, Descriptors.DESCRIPTOR$glCopyColorTable);
        SEGMENT$glCopyConvolutionFilter1D = loader.apply("glCopyConvolutionFilter1D");
        HANDLE$glCopyConvolutionFilter1D = RawFunctionLoader.link(SEGMENT$glCopyConvolutionFilter1D, Descriptors.DESCRIPTOR$glCopyConvolutionFilter1D);
        SEGMENT$glCopyConvolutionFilter2D = loader.apply("glCopyConvolutionFilter2D");
        HANDLE$glCopyConvolutionFilter2D = RawFunctionLoader.link(SEGMENT$glCopyConvolutionFilter2D, Descriptors.DESCRIPTOR$glCopyConvolutionFilter2D);
        SEGMENT$glCopyImageSubDataNV = loader.apply("glCopyImageSubDataNV");
        HANDLE$glCopyImageSubDataNV = RawFunctionLoader.link(SEGMENT$glCopyImageSubDataNV, Descriptors.DESCRIPTOR$glCopyImageSubDataNV);
        SEGMENT$glCopyPixels = loader.apply("glCopyPixels");
        HANDLE$glCopyPixels = RawFunctionLoader.link(SEGMENT$glCopyPixels, Descriptors.DESCRIPTOR$glCopyPixels);
        SEGMENT$glCreateProgramObjectARB = loader.apply("glCreateProgramObjectARB");
        HANDLE$glCreateProgramObjectARB = RawFunctionLoader.link(SEGMENT$glCreateProgramObjectARB, Descriptors.DESCRIPTOR$glCreateProgramObjectARB);
        SEGMENT$glCreateProgressFenceNVX = loader.apply("glCreateProgressFenceNVX");
        HANDLE$glCreateProgressFenceNVX = RawFunctionLoader.link(SEGMENT$glCreateProgressFenceNVX, Descriptors.DESCRIPTOR$glCreateProgressFenceNVX);
        SEGMENT$glCreateSemaphoresNV = loader.apply("glCreateSemaphoresNV");
        HANDLE$glCreateSemaphoresNV = RawFunctionLoader.link(SEGMENT$glCreateSemaphoresNV, Descriptors.DESCRIPTOR$glCreateSemaphoresNV);
        SEGMENT$glCreateShaderObjectARB = loader.apply("glCreateShaderObjectARB");
        HANDLE$glCreateShaderObjectARB = RawFunctionLoader.link(SEGMENT$glCreateShaderObjectARB, Descriptors.DESCRIPTOR$glCreateShaderObjectARB);
        SEGMENT$glCurrentPaletteMatrixARB = loader.apply("glCurrentPaletteMatrixARB");
        HANDLE$glCurrentPaletteMatrixARB = RawFunctionLoader.link(SEGMENT$glCurrentPaletteMatrixARB, Descriptors.DESCRIPTOR$glCurrentPaletteMatrixARB);
        SEGMENT$glDebugMessageCallbackAMD = loader.apply("glDebugMessageCallbackAMD");
        HANDLE$glDebugMessageCallbackAMD = RawFunctionLoader.link(SEGMENT$glDebugMessageCallbackAMD, Descriptors.DESCRIPTOR$glDebugMessageCallbackAMD);
        SEGMENT$glDebugMessageEnableAMD = loader.apply("glDebugMessageEnableAMD");
        HANDLE$glDebugMessageEnableAMD = RawFunctionLoader.link(SEGMENT$glDebugMessageEnableAMD, Descriptors.DESCRIPTOR$glDebugMessageEnableAMD);
        SEGMENT$glDebugMessageInsertAMD = loader.apply("glDebugMessageInsertAMD");
        HANDLE$glDebugMessageInsertAMD = RawFunctionLoader.link(SEGMENT$glDebugMessageInsertAMD, Descriptors.DESCRIPTOR$glDebugMessageInsertAMD);
        SEGMENT$glDeleteBuffersARB = loader.apply("glDeleteBuffersARB");
        HANDLE$glDeleteBuffersARB = RawFunctionLoader.link(SEGMENT$glDeleteBuffersARB, Descriptors.DESCRIPTOR$glDeleteBuffersARB);
        SEGMENT$glDeleteFencesNV = loader.apply("glDeleteFencesNV");
        HANDLE$glDeleteFencesNV = RawFunctionLoader.link(SEGMENT$glDeleteFencesNV, Descriptors.DESCRIPTOR$glDeleteFencesNV);
        SEGMENT$glDeleteFramebuffersEXT = loader.apply("glDeleteFramebuffersEXT");
        HANDLE$glDeleteFramebuffersEXT = RawFunctionLoader.link(SEGMENT$glDeleteFramebuffersEXT, Descriptors.DESCRIPTOR$glDeleteFramebuffersEXT);
        SEGMENT$glDeleteLists = loader.apply("glDeleteLists");
        HANDLE$glDeleteLists = RawFunctionLoader.link(SEGMENT$glDeleteLists, Descriptors.DESCRIPTOR$glDeleteLists);
        SEGMENT$glDeleteObjectARB = loader.apply("glDeleteObjectARB");
        HANDLE$glDeleteObjectARB = RawFunctionLoader.link(SEGMENT$glDeleteObjectARB, Descriptors.DESCRIPTOR$glDeleteObjectARB);
        SEGMENT$glDeleteProgramsARB = loader.apply("glDeleteProgramsARB");
        HANDLE$glDeleteProgramsARB = RawFunctionLoader.link(SEGMENT$glDeleteProgramsARB, Descriptors.DESCRIPTOR$glDeleteProgramsARB);
        SEGMENT$glDeleteQueriesARB = loader.apply("glDeleteQueriesARB");
        HANDLE$glDeleteQueriesARB = RawFunctionLoader.link(SEGMENT$glDeleteQueriesARB, Descriptors.DESCRIPTOR$glDeleteQueriesARB);
        SEGMENT$glDeleteQueryResourceTagNV = loader.apply("glDeleteQueryResourceTagNV");
        HANDLE$glDeleteQueryResourceTagNV = RawFunctionLoader.link(SEGMENT$glDeleteQueryResourceTagNV, Descriptors.DESCRIPTOR$glDeleteQueryResourceTagNV);
        SEGMENT$glDeleteRenderbuffersEXT = loader.apply("glDeleteRenderbuffersEXT");
        HANDLE$glDeleteRenderbuffersEXT = RawFunctionLoader.link(SEGMENT$glDeleteRenderbuffersEXT, Descriptors.DESCRIPTOR$glDeleteRenderbuffersEXT);
        SEGMENT$glDeleteTransformFeedbacksNV = loader.apply("glDeleteTransformFeedbacksNV");
        HANDLE$glDeleteTransformFeedbacksNV = RawFunctionLoader.link(SEGMENT$glDeleteTransformFeedbacksNV, Descriptors.DESCRIPTOR$glDeleteTransformFeedbacksNV);
        SEGMENT$glDepthBoundsEXT = loader.apply("glDepthBoundsEXT");
        HANDLE$glDepthBoundsEXT = RawFunctionLoader.link(SEGMENT$glDepthBoundsEXT, Descriptors.DESCRIPTOR$glDepthBoundsEXT);
        SEGMENT$glDetachObjectARB = loader.apply("glDetachObjectARB");
        HANDLE$glDetachObjectARB = RawFunctionLoader.link(SEGMENT$glDetachObjectARB, Descriptors.DESCRIPTOR$glDetachObjectARB);
        SEGMENT$glDisableClientState = loader.apply("glDisableClientState");
        HANDLE$glDisableClientState = RawFunctionLoader.link(SEGMENT$glDisableClientState, Descriptors.DESCRIPTOR$glDisableClientState);
        SEGMENT$glDisableVertexAttribArrayARB = loader.apply("glDisableVertexAttribArrayARB");
        HANDLE$glDisableVertexAttribArrayARB = RawFunctionLoader.link(SEGMENT$glDisableVertexAttribArrayARB, Descriptors.DESCRIPTOR$glDisableVertexAttribArrayARB);
        SEGMENT$glDrawBuffersARB = loader.apply("glDrawBuffersARB");
        HANDLE$glDrawBuffersARB = RawFunctionLoader.link(SEGMENT$glDrawBuffersARB, Descriptors.DESCRIPTOR$glDrawBuffersARB);
        SEGMENT$glDrawPixels = loader.apply("glDrawPixels");
        HANDLE$glDrawPixels = RawFunctionLoader.link(SEGMENT$glDrawPixels, Descriptors.DESCRIPTOR$glDrawPixels);
        SEGMENT$glDrawTextureNV = loader.apply("glDrawTextureNV");
        HANDLE$glDrawTextureNV = RawFunctionLoader.link(SEGMENT$glDrawTextureNV, Descriptors.DESCRIPTOR$glDrawTextureNV);
        SEGMENT$glDrawTransformFeedbackNV = loader.apply("glDrawTransformFeedbackNV");
        HANDLE$glDrawTransformFeedbackNV = RawFunctionLoader.link(SEGMENT$glDrawTransformFeedbackNV, Descriptors.DESCRIPTOR$glDrawTransformFeedbackNV);
        SEGMENT$glEdgeFlag = loader.apply("glEdgeFlag");
        HANDLE$glEdgeFlag = RawFunctionLoader.link(SEGMENT$glEdgeFlag, Descriptors.DESCRIPTOR$glEdgeFlag);
        SEGMENT$glEdgeFlagPointer = loader.apply("glEdgeFlagPointer");
        HANDLE$glEdgeFlagPointer = RawFunctionLoader.link(SEGMENT$glEdgeFlagPointer, Descriptors.DESCRIPTOR$glEdgeFlagPointer);
        SEGMENT$glEdgeFlagv = loader.apply("glEdgeFlagv");
        HANDLE$glEdgeFlagv = RawFunctionLoader.link(SEGMENT$glEdgeFlagv, Descriptors.DESCRIPTOR$glEdgeFlagv);
        SEGMENT$glEnableClientState = loader.apply("glEnableClientState");
        HANDLE$glEnableClientState = RawFunctionLoader.link(SEGMENT$glEnableClientState, Descriptors.DESCRIPTOR$glEnableClientState);
        SEGMENT$glEnableVertexAttribArrayARB = loader.apply("glEnableVertexAttribArrayARB");
        HANDLE$glEnableVertexAttribArrayARB = RawFunctionLoader.link(SEGMENT$glEnableVertexAttribArrayARB, Descriptors.DESCRIPTOR$glEnableVertexAttribArrayARB);
        SEGMENT$glEnd = loader.apply("glEnd");
        HANDLE$glEnd = RawFunctionLoader.link(SEGMENT$glEnd, Descriptors.DESCRIPTOR$glEnd);
        SEGMENT$glEndConditionalRenderNVX = loader.apply("glEndConditionalRenderNVX");
        HANDLE$glEndConditionalRenderNVX = RawFunctionLoader.link(SEGMENT$glEndConditionalRenderNVX, Descriptors.DESCRIPTOR$glEndConditionalRenderNVX);
        SEGMENT$glEndList = loader.apply("glEndList");
        HANDLE$glEndList = RawFunctionLoader.link(SEGMENT$glEndList, Descriptors.DESCRIPTOR$glEndList);
        SEGMENT$glEndQueryARB = loader.apply("glEndQueryARB");
        HANDLE$glEndQueryARB = RawFunctionLoader.link(SEGMENT$glEndQueryARB, Descriptors.DESCRIPTOR$glEndQueryARB);
        SEGMENT$glEndTransformFeedbackEXT = loader.apply("glEndTransformFeedbackEXT");
        HANDLE$glEndTransformFeedbackEXT = RawFunctionLoader.link(SEGMENT$glEndTransformFeedbackEXT, Descriptors.DESCRIPTOR$glEndTransformFeedbackEXT);
        SEGMENT$glEndTransformFeedbackNV = loader.apply("glEndTransformFeedbackNV");
        HANDLE$glEndTransformFeedbackNV = RawFunctionLoader.link(SEGMENT$glEndTransformFeedbackNV, Descriptors.DESCRIPTOR$glEndTransformFeedbackNV);
        SEGMENT$glEvalCoord1d = loader.apply("glEvalCoord1d");
        HANDLE$glEvalCoord1d = RawFunctionLoader.link(SEGMENT$glEvalCoord1d, Descriptors.DESCRIPTOR$glEvalCoord1d);
        SEGMENT$glEvalCoord1dv = loader.apply("glEvalCoord1dv");
        HANDLE$glEvalCoord1dv = RawFunctionLoader.link(SEGMENT$glEvalCoord1dv, Descriptors.DESCRIPTOR$glEvalCoord1dv);
        SEGMENT$glEvalCoord1f = loader.apply("glEvalCoord1f");
        HANDLE$glEvalCoord1f = RawFunctionLoader.link(SEGMENT$glEvalCoord1f, Descriptors.DESCRIPTOR$glEvalCoord1f);
        SEGMENT$glEvalCoord1fv = loader.apply("glEvalCoord1fv");
        HANDLE$glEvalCoord1fv = RawFunctionLoader.link(SEGMENT$glEvalCoord1fv, Descriptors.DESCRIPTOR$glEvalCoord1fv);
        SEGMENT$glEvalCoord2d = loader.apply("glEvalCoord2d");
        HANDLE$glEvalCoord2d = RawFunctionLoader.link(SEGMENT$glEvalCoord2d, Descriptors.DESCRIPTOR$glEvalCoord2d);
        SEGMENT$glEvalCoord2dv = loader.apply("glEvalCoord2dv");
        HANDLE$glEvalCoord2dv = RawFunctionLoader.link(SEGMENT$glEvalCoord2dv, Descriptors.DESCRIPTOR$glEvalCoord2dv);
        SEGMENT$glEvalCoord2f = loader.apply("glEvalCoord2f");
        HANDLE$glEvalCoord2f = RawFunctionLoader.link(SEGMENT$glEvalCoord2f, Descriptors.DESCRIPTOR$glEvalCoord2f);
        SEGMENT$glEvalCoord2fv = loader.apply("glEvalCoord2fv");
        HANDLE$glEvalCoord2fv = RawFunctionLoader.link(SEGMENT$glEvalCoord2fv, Descriptors.DESCRIPTOR$glEvalCoord2fv);
        SEGMENT$glEvalMesh1 = loader.apply("glEvalMesh1");
        HANDLE$glEvalMesh1 = RawFunctionLoader.link(SEGMENT$glEvalMesh1, Descriptors.DESCRIPTOR$glEvalMesh1);
        SEGMENT$glEvalMesh2 = loader.apply("glEvalMesh2");
        HANDLE$glEvalMesh2 = RawFunctionLoader.link(SEGMENT$glEvalMesh2, Descriptors.DESCRIPTOR$glEvalMesh2);
        SEGMENT$glEvalPoint1 = loader.apply("glEvalPoint1");
        HANDLE$glEvalPoint1 = RawFunctionLoader.link(SEGMENT$glEvalPoint1, Descriptors.DESCRIPTOR$glEvalPoint1);
        SEGMENT$glEvalPoint2 = loader.apply("glEvalPoint2");
        HANDLE$glEvalPoint2 = RawFunctionLoader.link(SEGMENT$glEvalPoint2, Descriptors.DESCRIPTOR$glEvalPoint2);
        SEGMENT$glFeedbackBuffer = loader.apply("glFeedbackBuffer");
        HANDLE$glFeedbackBuffer = RawFunctionLoader.link(SEGMENT$glFeedbackBuffer, Descriptors.DESCRIPTOR$glFeedbackBuffer);
        SEGMENT$glFinishFenceNV = loader.apply("glFinishFenceNV");
        HANDLE$glFinishFenceNV = RawFunctionLoader.link(SEGMENT$glFinishFenceNV, Descriptors.DESCRIPTOR$glFinishFenceNV);
        SEGMENT$glFlushPixelDataRangeNV = loader.apply("glFlushPixelDataRangeNV");
        HANDLE$glFlushPixelDataRangeNV = RawFunctionLoader.link(SEGMENT$glFlushPixelDataRangeNV, Descriptors.DESCRIPTOR$glFlushPixelDataRangeNV);
        SEGMENT$glFlushVertexArrayRangeNV = loader.apply("glFlushVertexArrayRangeNV");
        HANDLE$glFlushVertexArrayRangeNV = RawFunctionLoader.link(SEGMENT$glFlushVertexArrayRangeNV, Descriptors.DESCRIPTOR$glFlushVertexArrayRangeNV);
        SEGMENT$glFogCoordPointer = loader.apply("glFogCoordPointer");
        HANDLE$glFogCoordPointer = RawFunctionLoader.link(SEGMENT$glFogCoordPointer, Descriptors.DESCRIPTOR$glFogCoordPointer);
        SEGMENT$glFogCoordd = loader.apply("glFogCoordd");
        HANDLE$glFogCoordd = RawFunctionLoader.link(SEGMENT$glFogCoordd, Descriptors.DESCRIPTOR$glFogCoordd);
        SEGMENT$glFogCoorddv = loader.apply("glFogCoorddv");
        HANDLE$glFogCoorddv = RawFunctionLoader.link(SEGMENT$glFogCoorddv, Descriptors.DESCRIPTOR$glFogCoorddv);
        SEGMENT$glFogCoordf = loader.apply("glFogCoordf");
        HANDLE$glFogCoordf = RawFunctionLoader.link(SEGMENT$glFogCoordf, Descriptors.DESCRIPTOR$glFogCoordf);
        SEGMENT$glFogCoordfv = loader.apply("glFogCoordfv");
        HANDLE$glFogCoordfv = RawFunctionLoader.link(SEGMENT$glFogCoordfv, Descriptors.DESCRIPTOR$glFogCoordfv);
        SEGMENT$glFogCoordhNV = loader.apply("glFogCoordhNV");
        HANDLE$glFogCoordhNV = RawFunctionLoader.link(SEGMENT$glFogCoordhNV, Descriptors.DESCRIPTOR$glFogCoordhNV);
        SEGMENT$glFogCoordhvNV = loader.apply("glFogCoordhvNV");
        HANDLE$glFogCoordhvNV = RawFunctionLoader.link(SEGMENT$glFogCoordhvNV, Descriptors.DESCRIPTOR$glFogCoordhvNV);
        SEGMENT$glFogf = loader.apply("glFogf");
        HANDLE$glFogf = RawFunctionLoader.link(SEGMENT$glFogf, Descriptors.DESCRIPTOR$glFogf);
        SEGMENT$glFogfv = loader.apply("glFogfv");
        HANDLE$glFogfv = RawFunctionLoader.link(SEGMENT$glFogfv, Descriptors.DESCRIPTOR$glFogfv);
        SEGMENT$glFogi = loader.apply("glFogi");
        HANDLE$glFogi = RawFunctionLoader.link(SEGMENT$glFogi, Descriptors.DESCRIPTOR$glFogi);
        SEGMENT$glFogiv = loader.apply("glFogiv");
        HANDLE$glFogiv = RawFunctionLoader.link(SEGMENT$glFogiv, Descriptors.DESCRIPTOR$glFogiv);
        SEGMENT$glFrameTerminatorGREMEDY = loader.apply("glFrameTerminatorGREMEDY");
        HANDLE$glFrameTerminatorGREMEDY = RawFunctionLoader.link(SEGMENT$glFrameTerminatorGREMEDY, Descriptors.DESCRIPTOR$glFrameTerminatorGREMEDY);
        SEGMENT$glFramebufferRenderbufferEXT = loader.apply("glFramebufferRenderbufferEXT");
        HANDLE$glFramebufferRenderbufferEXT = RawFunctionLoader.link(SEGMENT$glFramebufferRenderbufferEXT, Descriptors.DESCRIPTOR$glFramebufferRenderbufferEXT);
        SEGMENT$glFramebufferTexture1DEXT = loader.apply("glFramebufferTexture1DEXT");
        HANDLE$glFramebufferTexture1DEXT = RawFunctionLoader.link(SEGMENT$glFramebufferTexture1DEXT, Descriptors.DESCRIPTOR$glFramebufferTexture1DEXT);
        SEGMENT$glFramebufferTexture2DEXT = loader.apply("glFramebufferTexture2DEXT");
        HANDLE$glFramebufferTexture2DEXT = RawFunctionLoader.link(SEGMENT$glFramebufferTexture2DEXT, Descriptors.DESCRIPTOR$glFramebufferTexture2DEXT);
        SEGMENT$glFramebufferTexture3DEXT = loader.apply("glFramebufferTexture3DEXT");
        HANDLE$glFramebufferTexture3DEXT = RawFunctionLoader.link(SEGMENT$glFramebufferTexture3DEXT, Descriptors.DESCRIPTOR$glFramebufferTexture3DEXT);
        SEGMENT$glFramebufferTextureLayerEXT = loader.apply("glFramebufferTextureLayerEXT");
        HANDLE$glFramebufferTextureLayerEXT = RawFunctionLoader.link(SEGMENT$glFramebufferTextureLayerEXT, Descriptors.DESCRIPTOR$glFramebufferTextureLayerEXT);
        SEGMENT$glFrustum = loader.apply("glFrustum");
        HANDLE$glFrustum = RawFunctionLoader.link(SEGMENT$glFrustum, Descriptors.DESCRIPTOR$glFrustum);
        SEGMENT$glGenBuffersARB = loader.apply("glGenBuffersARB");
        HANDLE$glGenBuffersARB = RawFunctionLoader.link(SEGMENT$glGenBuffersARB, Descriptors.DESCRIPTOR$glGenBuffersARB);
        SEGMENT$glGenFencesNV = loader.apply("glGenFencesNV");
        HANDLE$glGenFencesNV = RawFunctionLoader.link(SEGMENT$glGenFencesNV, Descriptors.DESCRIPTOR$glGenFencesNV);
        SEGMENT$glGenFramebuffersEXT = loader.apply("glGenFramebuffersEXT");
        HANDLE$glGenFramebuffersEXT = RawFunctionLoader.link(SEGMENT$glGenFramebuffersEXT, Descriptors.DESCRIPTOR$glGenFramebuffersEXT);
        SEGMENT$glGenLists = loader.apply("glGenLists");
        HANDLE$glGenLists = RawFunctionLoader.link(SEGMENT$glGenLists, Descriptors.DESCRIPTOR$glGenLists);
        SEGMENT$glGenProgramsARB = loader.apply("glGenProgramsARB");
        HANDLE$glGenProgramsARB = RawFunctionLoader.link(SEGMENT$glGenProgramsARB, Descriptors.DESCRIPTOR$glGenProgramsARB);
        SEGMENT$glGenQueriesARB = loader.apply("glGenQueriesARB");
        HANDLE$glGenQueriesARB = RawFunctionLoader.link(SEGMENT$glGenQueriesARB, Descriptors.DESCRIPTOR$glGenQueriesARB);
        SEGMENT$glGenQueryResourceTagNV = loader.apply("glGenQueryResourceTagNV");
        HANDLE$glGenQueryResourceTagNV = RawFunctionLoader.link(SEGMENT$glGenQueryResourceTagNV, Descriptors.DESCRIPTOR$glGenQueryResourceTagNV);
        SEGMENT$glGenRenderbuffersEXT = loader.apply("glGenRenderbuffersEXT");
        HANDLE$glGenRenderbuffersEXT = RawFunctionLoader.link(SEGMENT$glGenRenderbuffersEXT, Descriptors.DESCRIPTOR$glGenRenderbuffersEXT);
        SEGMENT$glGenTransformFeedbacksNV = loader.apply("glGenTransformFeedbacksNV");
        HANDLE$glGenTransformFeedbacksNV = RawFunctionLoader.link(SEGMENT$glGenTransformFeedbacksNV, Descriptors.DESCRIPTOR$glGenTransformFeedbacksNV);
        SEGMENT$glGenerateMipmapEXT = loader.apply("glGenerateMipmapEXT");
        HANDLE$glGenerateMipmapEXT = RawFunctionLoader.link(SEGMENT$glGenerateMipmapEXT, Descriptors.DESCRIPTOR$glGenerateMipmapEXT);
        SEGMENT$glGetActiveAttribARB = loader.apply("glGetActiveAttribARB");
        HANDLE$glGetActiveAttribARB = RawFunctionLoader.link(SEGMENT$glGetActiveAttribARB, Descriptors.DESCRIPTOR$glGetActiveAttribARB);
        SEGMENT$glGetActiveUniformARB = loader.apply("glGetActiveUniformARB");
        HANDLE$glGetActiveUniformARB = RawFunctionLoader.link(SEGMENT$glGetActiveUniformARB, Descriptors.DESCRIPTOR$glGetActiveUniformARB);
        SEGMENT$glGetActiveVaryingNV = loader.apply("glGetActiveVaryingNV");
        HANDLE$glGetActiveVaryingNV = RawFunctionLoader.link(SEGMENT$glGetActiveVaryingNV, Descriptors.DESCRIPTOR$glGetActiveVaryingNV);
        SEGMENT$glGetAttachedObjectsARB = loader.apply("glGetAttachedObjectsARB");
        HANDLE$glGetAttachedObjectsARB = RawFunctionLoader.link(SEGMENT$glGetAttachedObjectsARB, Descriptors.DESCRIPTOR$glGetAttachedObjectsARB);
        SEGMENT$glGetAttribLocationARB = loader.apply("glGetAttribLocationARB");
        HANDLE$glGetAttribLocationARB = RawFunctionLoader.link(SEGMENT$glGetAttribLocationARB, Descriptors.DESCRIPTOR$glGetAttribLocationARB);
        SEGMENT$glGetBufferParameterivARB = loader.apply("glGetBufferParameterivARB");
        HANDLE$glGetBufferParameterivARB = RawFunctionLoader.link(SEGMENT$glGetBufferParameterivARB, Descriptors.DESCRIPTOR$glGetBufferParameterivARB);
        SEGMENT$glGetBufferPointervARB = loader.apply("glGetBufferPointervARB");
        HANDLE$glGetBufferPointervARB = RawFunctionLoader.link(SEGMENT$glGetBufferPointervARB, Descriptors.DESCRIPTOR$glGetBufferPointervARB);
        SEGMENT$glGetBufferSubDataARB = loader.apply("glGetBufferSubDataARB");
        HANDLE$glGetBufferSubDataARB = RawFunctionLoader.link(SEGMENT$glGetBufferSubDataARB, Descriptors.DESCRIPTOR$glGetBufferSubDataARB);
        SEGMENT$glGetClipPlane = loader.apply("glGetClipPlane");
        HANDLE$glGetClipPlane = RawFunctionLoader.link(SEGMENT$glGetClipPlane, Descriptors.DESCRIPTOR$glGetClipPlane);
        SEGMENT$glGetColorTable = loader.apply("glGetColorTable");
        HANDLE$glGetColorTable = RawFunctionLoader.link(SEGMENT$glGetColorTable, Descriptors.DESCRIPTOR$glGetColorTable);
        SEGMENT$glGetColorTableParameterfv = loader.apply("glGetColorTableParameterfv");
        HANDLE$glGetColorTableParameterfv = RawFunctionLoader.link(SEGMENT$glGetColorTableParameterfv, Descriptors.DESCRIPTOR$glGetColorTableParameterfv);
        SEGMENT$glGetColorTableParameteriv = loader.apply("glGetColorTableParameteriv");
        HANDLE$glGetColorTableParameteriv = RawFunctionLoader.link(SEGMENT$glGetColorTableParameteriv, Descriptors.DESCRIPTOR$glGetColorTableParameteriv);
        SEGMENT$glGetCompressedTexImageARB = loader.apply("glGetCompressedTexImageARB");
        HANDLE$glGetCompressedTexImageARB = RawFunctionLoader.link(SEGMENT$glGetCompressedTexImageARB, Descriptors.DESCRIPTOR$glGetCompressedTexImageARB);
        SEGMENT$glGetConvolutionFilter = loader.apply("glGetConvolutionFilter");
        HANDLE$glGetConvolutionFilter = RawFunctionLoader.link(SEGMENT$glGetConvolutionFilter, Descriptors.DESCRIPTOR$glGetConvolutionFilter);
        SEGMENT$glGetConvolutionParameterfv = loader.apply("glGetConvolutionParameterfv");
        HANDLE$glGetConvolutionParameterfv = RawFunctionLoader.link(SEGMENT$glGetConvolutionParameterfv, Descriptors.DESCRIPTOR$glGetConvolutionParameterfv);
        SEGMENT$glGetConvolutionParameteriv = loader.apply("glGetConvolutionParameteriv");
        HANDLE$glGetConvolutionParameteriv = RawFunctionLoader.link(SEGMENT$glGetConvolutionParameteriv, Descriptors.DESCRIPTOR$glGetConvolutionParameteriv);
        SEGMENT$glGetDebugMessageLogAMD = loader.apply("glGetDebugMessageLogAMD");
        HANDLE$glGetDebugMessageLogAMD = RawFunctionLoader.link(SEGMENT$glGetDebugMessageLogAMD, Descriptors.DESCRIPTOR$glGetDebugMessageLogAMD);
        SEGMENT$glGetFenceivNV = loader.apply("glGetFenceivNV");
        HANDLE$glGetFenceivNV = RawFunctionLoader.link(SEGMENT$glGetFenceivNV, Descriptors.DESCRIPTOR$glGetFenceivNV);
        SEGMENT$glGetFragDataLocationEXT = loader.apply("glGetFragDataLocationEXT");
        HANDLE$glGetFragDataLocationEXT = RawFunctionLoader.link(SEGMENT$glGetFragDataLocationEXT, Descriptors.DESCRIPTOR$glGetFragDataLocationEXT);
        SEGMENT$glGetFramebufferAttachmentParameterivEXT = loader.apply("glGetFramebufferAttachmentParameterivEXT");
        HANDLE$glGetFramebufferAttachmentParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetFramebufferAttachmentParameterivEXT, Descriptors.DESCRIPTOR$glGetFramebufferAttachmentParameterivEXT);
        SEGMENT$glGetHandleARB = loader.apply("glGetHandleARB");
        HANDLE$glGetHandleARB = RawFunctionLoader.link(SEGMENT$glGetHandleARB, Descriptors.DESCRIPTOR$glGetHandleARB);
        SEGMENT$glGetHistogram = loader.apply("glGetHistogram");
        HANDLE$glGetHistogram = RawFunctionLoader.link(SEGMENT$glGetHistogram, Descriptors.DESCRIPTOR$glGetHistogram);
        SEGMENT$glGetHistogramParameterfv = loader.apply("glGetHistogramParameterfv");
        HANDLE$glGetHistogramParameterfv = RawFunctionLoader.link(SEGMENT$glGetHistogramParameterfv, Descriptors.DESCRIPTOR$glGetHistogramParameterfv);
        SEGMENT$glGetHistogramParameteriv = loader.apply("glGetHistogramParameteriv");
        HANDLE$glGetHistogramParameteriv = RawFunctionLoader.link(SEGMENT$glGetHistogramParameteriv, Descriptors.DESCRIPTOR$glGetHistogramParameteriv);
        SEGMENT$glGetInfoLogARB = loader.apply("glGetInfoLogARB");
        HANDLE$glGetInfoLogARB = RawFunctionLoader.link(SEGMENT$glGetInfoLogARB, Descriptors.DESCRIPTOR$glGetInfoLogARB);
        SEGMENT$glGetLightfv = loader.apply("glGetLightfv");
        HANDLE$glGetLightfv = RawFunctionLoader.link(SEGMENT$glGetLightfv, Descriptors.DESCRIPTOR$glGetLightfv);
        SEGMENT$glGetLightiv = loader.apply("glGetLightiv");
        HANDLE$glGetLightiv = RawFunctionLoader.link(SEGMENT$glGetLightiv, Descriptors.DESCRIPTOR$glGetLightiv);
        SEGMENT$glGetMapdv = loader.apply("glGetMapdv");
        HANDLE$glGetMapdv = RawFunctionLoader.link(SEGMENT$glGetMapdv, Descriptors.DESCRIPTOR$glGetMapdv);
        SEGMENT$glGetMapfv = loader.apply("glGetMapfv");
        HANDLE$glGetMapfv = RawFunctionLoader.link(SEGMENT$glGetMapfv, Descriptors.DESCRIPTOR$glGetMapfv);
        SEGMENT$glGetMapiv = loader.apply("glGetMapiv");
        HANDLE$glGetMapiv = RawFunctionLoader.link(SEGMENT$glGetMapiv, Descriptors.DESCRIPTOR$glGetMapiv);
        SEGMENT$glGetMaterialfv = loader.apply("glGetMaterialfv");
        HANDLE$glGetMaterialfv = RawFunctionLoader.link(SEGMENT$glGetMaterialfv, Descriptors.DESCRIPTOR$glGetMaterialfv);
        SEGMENT$glGetMaterialiv = loader.apply("glGetMaterialiv");
        HANDLE$glGetMaterialiv = RawFunctionLoader.link(SEGMENT$glGetMaterialiv, Descriptors.DESCRIPTOR$glGetMaterialiv);
        SEGMENT$glGetMinmax = loader.apply("glGetMinmax");
        HANDLE$glGetMinmax = RawFunctionLoader.link(SEGMENT$glGetMinmax, Descriptors.DESCRIPTOR$glGetMinmax);
        SEGMENT$glGetMinmaxParameterfv = loader.apply("glGetMinmaxParameterfv");
        HANDLE$glGetMinmaxParameterfv = RawFunctionLoader.link(SEGMENT$glGetMinmaxParameterfv, Descriptors.DESCRIPTOR$glGetMinmaxParameterfv);
        SEGMENT$glGetMinmaxParameteriv = loader.apply("glGetMinmaxParameteriv");
        HANDLE$glGetMinmaxParameteriv = RawFunctionLoader.link(SEGMENT$glGetMinmaxParameteriv, Descriptors.DESCRIPTOR$glGetMinmaxParameteriv);
        SEGMENT$glGetMultisamplefvNV = loader.apply("glGetMultisamplefvNV");
        HANDLE$glGetMultisamplefvNV = RawFunctionLoader.link(SEGMENT$glGetMultisamplefvNV, Descriptors.DESCRIPTOR$glGetMultisamplefvNV);
        SEGMENT$glGetObjectParameterfvARB = loader.apply("glGetObjectParameterfvARB");
        HANDLE$glGetObjectParameterfvARB = RawFunctionLoader.link(SEGMENT$glGetObjectParameterfvARB, Descriptors.DESCRIPTOR$glGetObjectParameterfvARB);
        SEGMENT$glGetObjectParameterivARB = loader.apply("glGetObjectParameterivARB");
        HANDLE$glGetObjectParameterivARB = RawFunctionLoader.link(SEGMENT$glGetObjectParameterivARB, Descriptors.DESCRIPTOR$glGetObjectParameterivARB);
        SEGMENT$glGetPathColorGenfvNV = loader.apply("glGetPathColorGenfvNV");
        HANDLE$glGetPathColorGenfvNV = RawFunctionLoader.link(SEGMENT$glGetPathColorGenfvNV, Descriptors.DESCRIPTOR$glGetPathColorGenfvNV);
        SEGMENT$glGetPathColorGenivNV = loader.apply("glGetPathColorGenivNV");
        HANDLE$glGetPathColorGenivNV = RawFunctionLoader.link(SEGMENT$glGetPathColorGenivNV, Descriptors.DESCRIPTOR$glGetPathColorGenivNV);
        SEGMENT$glGetPathTexGenfvNV = loader.apply("glGetPathTexGenfvNV");
        HANDLE$glGetPathTexGenfvNV = RawFunctionLoader.link(SEGMENT$glGetPathTexGenfvNV, Descriptors.DESCRIPTOR$glGetPathTexGenfvNV);
        SEGMENT$glGetPathTexGenivNV = loader.apply("glGetPathTexGenivNV");
        HANDLE$glGetPathTexGenivNV = RawFunctionLoader.link(SEGMENT$glGetPathTexGenivNV, Descriptors.DESCRIPTOR$glGetPathTexGenivNV);
        SEGMENT$glGetPixelMapfv = loader.apply("glGetPixelMapfv");
        HANDLE$glGetPixelMapfv = RawFunctionLoader.link(SEGMENT$glGetPixelMapfv, Descriptors.DESCRIPTOR$glGetPixelMapfv);
        SEGMENT$glGetPixelMapuiv = loader.apply("glGetPixelMapuiv");
        HANDLE$glGetPixelMapuiv = RawFunctionLoader.link(SEGMENT$glGetPixelMapuiv, Descriptors.DESCRIPTOR$glGetPixelMapuiv);
        SEGMENT$glGetPixelMapusv = loader.apply("glGetPixelMapusv");
        HANDLE$glGetPixelMapusv = RawFunctionLoader.link(SEGMENT$glGetPixelMapusv, Descriptors.DESCRIPTOR$glGetPixelMapusv);
        SEGMENT$glGetPolygonStipple = loader.apply("glGetPolygonStipple");
        HANDLE$glGetPolygonStipple = RawFunctionLoader.link(SEGMENT$glGetPolygonStipple, Descriptors.DESCRIPTOR$glGetPolygonStipple);
        SEGMENT$glGetProgramEnvParameterdvARB = loader.apply("glGetProgramEnvParameterdvARB");
        HANDLE$glGetProgramEnvParameterdvARB = RawFunctionLoader.link(SEGMENT$glGetProgramEnvParameterdvARB, Descriptors.DESCRIPTOR$glGetProgramEnvParameterdvARB);
        SEGMENT$glGetProgramEnvParameterfvARB = loader.apply("glGetProgramEnvParameterfvARB");
        HANDLE$glGetProgramEnvParameterfvARB = RawFunctionLoader.link(SEGMENT$glGetProgramEnvParameterfvARB, Descriptors.DESCRIPTOR$glGetProgramEnvParameterfvARB);
        SEGMENT$glGetProgramLocalParameterdvARB = loader.apply("glGetProgramLocalParameterdvARB");
        HANDLE$glGetProgramLocalParameterdvARB = RawFunctionLoader.link(SEGMENT$glGetProgramLocalParameterdvARB, Descriptors.DESCRIPTOR$glGetProgramLocalParameterdvARB);
        SEGMENT$glGetProgramLocalParameterfvARB = loader.apply("glGetProgramLocalParameterfvARB");
        HANDLE$glGetProgramLocalParameterfvARB = RawFunctionLoader.link(SEGMENT$glGetProgramLocalParameterfvARB, Descriptors.DESCRIPTOR$glGetProgramLocalParameterfvARB);
        SEGMENT$glGetProgramStringARB = loader.apply("glGetProgramStringARB");
        HANDLE$glGetProgramStringARB = RawFunctionLoader.link(SEGMENT$glGetProgramStringARB, Descriptors.DESCRIPTOR$glGetProgramStringARB);
        SEGMENT$glGetProgramivARB = loader.apply("glGetProgramivARB");
        HANDLE$glGetProgramivARB = RawFunctionLoader.link(SEGMENT$glGetProgramivARB, Descriptors.DESCRIPTOR$glGetProgramivARB);
        SEGMENT$glGetQueryObjecti64vEXT = loader.apply("glGetQueryObjecti64vEXT");
        HANDLE$glGetQueryObjecti64vEXT = RawFunctionLoader.link(SEGMENT$glGetQueryObjecti64vEXT, Descriptors.DESCRIPTOR$glGetQueryObjecti64vEXT);
        SEGMENT$glGetQueryObjectivARB = loader.apply("glGetQueryObjectivARB");
        HANDLE$glGetQueryObjectivARB = RawFunctionLoader.link(SEGMENT$glGetQueryObjectivARB, Descriptors.DESCRIPTOR$glGetQueryObjectivARB);
        SEGMENT$glGetQueryObjectui64vEXT = loader.apply("glGetQueryObjectui64vEXT");
        HANDLE$glGetQueryObjectui64vEXT = RawFunctionLoader.link(SEGMENT$glGetQueryObjectui64vEXT, Descriptors.DESCRIPTOR$glGetQueryObjectui64vEXT);
        SEGMENT$glGetQueryObjectuivARB = loader.apply("glGetQueryObjectuivARB");
        HANDLE$glGetQueryObjectuivARB = RawFunctionLoader.link(SEGMENT$glGetQueryObjectuivARB, Descriptors.DESCRIPTOR$glGetQueryObjectuivARB);
        SEGMENT$glGetQueryivARB = loader.apply("glGetQueryivARB");
        HANDLE$glGetQueryivARB = RawFunctionLoader.link(SEGMENT$glGetQueryivARB, Descriptors.DESCRIPTOR$glGetQueryivARB);
        SEGMENT$glGetRenderbufferParameterivEXT = loader.apply("glGetRenderbufferParameterivEXT");
        HANDLE$glGetRenderbufferParameterivEXT = RawFunctionLoader.link(SEGMENT$glGetRenderbufferParameterivEXT, Descriptors.DESCRIPTOR$glGetRenderbufferParameterivEXT);
        SEGMENT$glGetSemaphoreParameterivNV = loader.apply("glGetSemaphoreParameterivNV");
        HANDLE$glGetSemaphoreParameterivNV = RawFunctionLoader.link(SEGMENT$glGetSemaphoreParameterivNV, Descriptors.DESCRIPTOR$glGetSemaphoreParameterivNV);
        SEGMENT$glGetSeparableFilter = loader.apply("glGetSeparableFilter");
        HANDLE$glGetSeparableFilter = RawFunctionLoader.link(SEGMENT$glGetSeparableFilter, Descriptors.DESCRIPTOR$glGetSeparableFilter);
        SEGMENT$glGetShaderSourceARB = loader.apply("glGetShaderSourceARB");
        HANDLE$glGetShaderSourceARB = RawFunctionLoader.link(SEGMENT$glGetShaderSourceARB, Descriptors.DESCRIPTOR$glGetShaderSourceARB);
        SEGMENT$glGetTexEnvfv = loader.apply("glGetTexEnvfv");
        HANDLE$glGetTexEnvfv = RawFunctionLoader.link(SEGMENT$glGetTexEnvfv, Descriptors.DESCRIPTOR$glGetTexEnvfv);
        SEGMENT$glGetTexEnviv = loader.apply("glGetTexEnviv");
        HANDLE$glGetTexEnviv = RawFunctionLoader.link(SEGMENT$glGetTexEnviv, Descriptors.DESCRIPTOR$glGetTexEnviv);
        SEGMENT$glGetTexGendv = loader.apply("glGetTexGendv");
        HANDLE$glGetTexGendv = RawFunctionLoader.link(SEGMENT$glGetTexGendv, Descriptors.DESCRIPTOR$glGetTexGendv);
        SEGMENT$glGetTexGenfv = loader.apply("glGetTexGenfv");
        HANDLE$glGetTexGenfv = RawFunctionLoader.link(SEGMENT$glGetTexGenfv, Descriptors.DESCRIPTOR$glGetTexGenfv);
        SEGMENT$glGetTexGeniv = loader.apply("glGetTexGeniv");
        HANDLE$glGetTexGeniv = RawFunctionLoader.link(SEGMENT$glGetTexGeniv, Descriptors.DESCRIPTOR$glGetTexGeniv);
        SEGMENT$glGetTexParameterIivEXT = loader.apply("glGetTexParameterIivEXT");
        HANDLE$glGetTexParameterIivEXT = RawFunctionLoader.link(SEGMENT$glGetTexParameterIivEXT, Descriptors.DESCRIPTOR$glGetTexParameterIivEXT);
        SEGMENT$glGetTexParameterIuivEXT = loader.apply("glGetTexParameterIuivEXT");
        HANDLE$glGetTexParameterIuivEXT = RawFunctionLoader.link(SEGMENT$glGetTexParameterIuivEXT, Descriptors.DESCRIPTOR$glGetTexParameterIuivEXT);
        SEGMENT$glGetTransformFeedbackVaryingEXT = loader.apply("glGetTransformFeedbackVaryingEXT");
        HANDLE$glGetTransformFeedbackVaryingEXT = RawFunctionLoader.link(SEGMENT$glGetTransformFeedbackVaryingEXT, Descriptors.DESCRIPTOR$glGetTransformFeedbackVaryingEXT);
        SEGMENT$glGetTransformFeedbackVaryingNV = loader.apply("glGetTransformFeedbackVaryingNV");
        HANDLE$glGetTransformFeedbackVaryingNV = RawFunctionLoader.link(SEGMENT$glGetTransformFeedbackVaryingNV, Descriptors.DESCRIPTOR$glGetTransformFeedbackVaryingNV);
        SEGMENT$glGetUniformBufferSizeEXT = loader.apply("glGetUniformBufferSizeEXT");
        HANDLE$glGetUniformBufferSizeEXT = RawFunctionLoader.link(SEGMENT$glGetUniformBufferSizeEXT, Descriptors.DESCRIPTOR$glGetUniformBufferSizeEXT);
        SEGMENT$glGetUniformLocationARB = loader.apply("glGetUniformLocationARB");
        HANDLE$glGetUniformLocationARB = RawFunctionLoader.link(SEGMENT$glGetUniformLocationARB, Descriptors.DESCRIPTOR$glGetUniformLocationARB);
        SEGMENT$glGetUniformOffsetEXT = loader.apply("glGetUniformOffsetEXT");
        HANDLE$glGetUniformOffsetEXT = RawFunctionLoader.link(SEGMENT$glGetUniformOffsetEXT, Descriptors.DESCRIPTOR$glGetUniformOffsetEXT);
        SEGMENT$glGetUniformfvARB = loader.apply("glGetUniformfvARB");
        HANDLE$glGetUniformfvARB = RawFunctionLoader.link(SEGMENT$glGetUniformfvARB, Descriptors.DESCRIPTOR$glGetUniformfvARB);
        SEGMENT$glGetUniformi64vNV = loader.apply("glGetUniformi64vNV");
        HANDLE$glGetUniformi64vNV = RawFunctionLoader.link(SEGMENT$glGetUniformi64vNV, Descriptors.DESCRIPTOR$glGetUniformi64vNV);
        SEGMENT$glGetUniformivARB = loader.apply("glGetUniformivARB");
        HANDLE$glGetUniformivARB = RawFunctionLoader.link(SEGMENT$glGetUniformivARB, Descriptors.DESCRIPTOR$glGetUniformivARB);
        SEGMENT$glGetUniformui64vNV = loader.apply("glGetUniformui64vNV");
        HANDLE$glGetUniformui64vNV = RawFunctionLoader.link(SEGMENT$glGetUniformui64vNV, Descriptors.DESCRIPTOR$glGetUniformui64vNV);
        SEGMENT$glGetUniformuivEXT = loader.apply("glGetUniformuivEXT");
        HANDLE$glGetUniformuivEXT = RawFunctionLoader.link(SEGMENT$glGetUniformuivEXT, Descriptors.DESCRIPTOR$glGetUniformuivEXT);
        SEGMENT$glGetVaryingLocationNV = loader.apply("glGetVaryingLocationNV");
        HANDLE$glGetVaryingLocationNV = RawFunctionLoader.link(SEGMENT$glGetVaryingLocationNV, Descriptors.DESCRIPTOR$glGetVaryingLocationNV);
        SEGMENT$glGetVertexAttribIivEXT = loader.apply("glGetVertexAttribIivEXT");
        HANDLE$glGetVertexAttribIivEXT = RawFunctionLoader.link(SEGMENT$glGetVertexAttribIivEXT, Descriptors.DESCRIPTOR$glGetVertexAttribIivEXT);
        SEGMENT$glGetVertexAttribIuivEXT = loader.apply("glGetVertexAttribIuivEXT");
        HANDLE$glGetVertexAttribIuivEXT = RawFunctionLoader.link(SEGMENT$glGetVertexAttribIuivEXT, Descriptors.DESCRIPTOR$glGetVertexAttribIuivEXT);
        SEGMENT$glGetVertexAttribLdvEXT = loader.apply("glGetVertexAttribLdvEXT");
        HANDLE$glGetVertexAttribLdvEXT = RawFunctionLoader.link(SEGMENT$glGetVertexAttribLdvEXT, Descriptors.DESCRIPTOR$glGetVertexAttribLdvEXT);
        SEGMENT$glGetVertexAttribPointervARB = loader.apply("glGetVertexAttribPointervARB");
        HANDLE$glGetVertexAttribPointervARB = RawFunctionLoader.link(SEGMENT$glGetVertexAttribPointervARB, Descriptors.DESCRIPTOR$glGetVertexAttribPointervARB);
        SEGMENT$glGetVertexAttribdvARB = loader.apply("glGetVertexAttribdvARB");
        HANDLE$glGetVertexAttribdvARB = RawFunctionLoader.link(SEGMENT$glGetVertexAttribdvARB, Descriptors.DESCRIPTOR$glGetVertexAttribdvARB);
        SEGMENT$glGetVertexAttribfvARB = loader.apply("glGetVertexAttribfvARB");
        HANDLE$glGetVertexAttribfvARB = RawFunctionLoader.link(SEGMENT$glGetVertexAttribfvARB, Descriptors.DESCRIPTOR$glGetVertexAttribfvARB);
        SEGMENT$glGetVertexAttribivARB = loader.apply("glGetVertexAttribivARB");
        HANDLE$glGetVertexAttribivARB = RawFunctionLoader.link(SEGMENT$glGetVertexAttribivARB, Descriptors.DESCRIPTOR$glGetVertexAttribivARB);
        SEGMENT$glGetnColorTable = loader.apply("glGetnColorTable");
        HANDLE$glGetnColorTable = RawFunctionLoader.link(SEGMENT$glGetnColorTable, Descriptors.DESCRIPTOR$glGetnColorTable);
        SEGMENT$glGetnColorTableARB = loader.apply("glGetnColorTableARB");
        HANDLE$glGetnColorTableARB = RawFunctionLoader.link(SEGMENT$glGetnColorTableARB, Descriptors.DESCRIPTOR$glGetnColorTableARB);
        SEGMENT$glGetnConvolutionFilter = loader.apply("glGetnConvolutionFilter");
        HANDLE$glGetnConvolutionFilter = RawFunctionLoader.link(SEGMENT$glGetnConvolutionFilter, Descriptors.DESCRIPTOR$glGetnConvolutionFilter);
        SEGMENT$glGetnConvolutionFilterARB = loader.apply("glGetnConvolutionFilterARB");
        HANDLE$glGetnConvolutionFilterARB = RawFunctionLoader.link(SEGMENT$glGetnConvolutionFilterARB, Descriptors.DESCRIPTOR$glGetnConvolutionFilterARB);
        SEGMENT$glGetnHistogram = loader.apply("glGetnHistogram");
        HANDLE$glGetnHistogram = RawFunctionLoader.link(SEGMENT$glGetnHistogram, Descriptors.DESCRIPTOR$glGetnHistogram);
        SEGMENT$glGetnHistogramARB = loader.apply("glGetnHistogramARB");
        HANDLE$glGetnHistogramARB = RawFunctionLoader.link(SEGMENT$glGetnHistogramARB, Descriptors.DESCRIPTOR$glGetnHistogramARB);
        SEGMENT$glGetnMapdv = loader.apply("glGetnMapdv");
        HANDLE$glGetnMapdv = RawFunctionLoader.link(SEGMENT$glGetnMapdv, Descriptors.DESCRIPTOR$glGetnMapdv);
        SEGMENT$glGetnMapdvARB = loader.apply("glGetnMapdvARB");
        HANDLE$glGetnMapdvARB = RawFunctionLoader.link(SEGMENT$glGetnMapdvARB, Descriptors.DESCRIPTOR$glGetnMapdvARB);
        SEGMENT$glGetnMapfv = loader.apply("glGetnMapfv");
        HANDLE$glGetnMapfv = RawFunctionLoader.link(SEGMENT$glGetnMapfv, Descriptors.DESCRIPTOR$glGetnMapfv);
        SEGMENT$glGetnMapfvARB = loader.apply("glGetnMapfvARB");
        HANDLE$glGetnMapfvARB = RawFunctionLoader.link(SEGMENT$glGetnMapfvARB, Descriptors.DESCRIPTOR$glGetnMapfvARB);
        SEGMENT$glGetnMapiv = loader.apply("glGetnMapiv");
        HANDLE$glGetnMapiv = RawFunctionLoader.link(SEGMENT$glGetnMapiv, Descriptors.DESCRIPTOR$glGetnMapiv);
        SEGMENT$glGetnMapivARB = loader.apply("glGetnMapivARB");
        HANDLE$glGetnMapivARB = RawFunctionLoader.link(SEGMENT$glGetnMapivARB, Descriptors.DESCRIPTOR$glGetnMapivARB);
        SEGMENT$glGetnMinmax = loader.apply("glGetnMinmax");
        HANDLE$glGetnMinmax = RawFunctionLoader.link(SEGMENT$glGetnMinmax, Descriptors.DESCRIPTOR$glGetnMinmax);
        SEGMENT$glGetnMinmaxARB = loader.apply("glGetnMinmaxARB");
        HANDLE$glGetnMinmaxARB = RawFunctionLoader.link(SEGMENT$glGetnMinmaxARB, Descriptors.DESCRIPTOR$glGetnMinmaxARB);
        SEGMENT$glGetnPixelMapfv = loader.apply("glGetnPixelMapfv");
        HANDLE$glGetnPixelMapfv = RawFunctionLoader.link(SEGMENT$glGetnPixelMapfv, Descriptors.DESCRIPTOR$glGetnPixelMapfv);
        SEGMENT$glGetnPixelMapfvARB = loader.apply("glGetnPixelMapfvARB");
        HANDLE$glGetnPixelMapfvARB = RawFunctionLoader.link(SEGMENT$glGetnPixelMapfvARB, Descriptors.DESCRIPTOR$glGetnPixelMapfvARB);
        SEGMENT$glGetnPixelMapuiv = loader.apply("glGetnPixelMapuiv");
        HANDLE$glGetnPixelMapuiv = RawFunctionLoader.link(SEGMENT$glGetnPixelMapuiv, Descriptors.DESCRIPTOR$glGetnPixelMapuiv);
        SEGMENT$glGetnPixelMapuivARB = loader.apply("glGetnPixelMapuivARB");
        HANDLE$glGetnPixelMapuivARB = RawFunctionLoader.link(SEGMENT$glGetnPixelMapuivARB, Descriptors.DESCRIPTOR$glGetnPixelMapuivARB);
        SEGMENT$glGetnPixelMapusv = loader.apply("glGetnPixelMapusv");
        HANDLE$glGetnPixelMapusv = RawFunctionLoader.link(SEGMENT$glGetnPixelMapusv, Descriptors.DESCRIPTOR$glGetnPixelMapusv);
        SEGMENT$glGetnPixelMapusvARB = loader.apply("glGetnPixelMapusvARB");
        HANDLE$glGetnPixelMapusvARB = RawFunctionLoader.link(SEGMENT$glGetnPixelMapusvARB, Descriptors.DESCRIPTOR$glGetnPixelMapusvARB);
        SEGMENT$glGetnPolygonStipple = loader.apply("glGetnPolygonStipple");
        HANDLE$glGetnPolygonStipple = RawFunctionLoader.link(SEGMENT$glGetnPolygonStipple, Descriptors.DESCRIPTOR$glGetnPolygonStipple);
        SEGMENT$glGetnPolygonStippleARB = loader.apply("glGetnPolygonStippleARB");
        HANDLE$glGetnPolygonStippleARB = RawFunctionLoader.link(SEGMENT$glGetnPolygonStippleARB, Descriptors.DESCRIPTOR$glGetnPolygonStippleARB);
        SEGMENT$glGetnSeparableFilter = loader.apply("glGetnSeparableFilter");
        HANDLE$glGetnSeparableFilter = RawFunctionLoader.link(SEGMENT$glGetnSeparableFilter, Descriptors.DESCRIPTOR$glGetnSeparableFilter);
        SEGMENT$glGetnSeparableFilterARB = loader.apply("glGetnSeparableFilterARB");
        HANDLE$glGetnSeparableFilterARB = RawFunctionLoader.link(SEGMENT$glGetnSeparableFilterARB, Descriptors.DESCRIPTOR$glGetnSeparableFilterARB);
        SEGMENT$glHistogram = loader.apply("glHistogram");
        HANDLE$glHistogram = RawFunctionLoader.link(SEGMENT$glHistogram, Descriptors.DESCRIPTOR$glHistogram);
        SEGMENT$glImportSyncEXT = loader.apply("glImportSyncEXT");
        HANDLE$glImportSyncEXT = RawFunctionLoader.link(SEGMENT$glImportSyncEXT, Descriptors.DESCRIPTOR$glImportSyncEXT);
        SEGMENT$glIndexMask = loader.apply("glIndexMask");
        HANDLE$glIndexMask = RawFunctionLoader.link(SEGMENT$glIndexMask, Descriptors.DESCRIPTOR$glIndexMask);
        SEGMENT$glIndexPointer = loader.apply("glIndexPointer");
        HANDLE$glIndexPointer = RawFunctionLoader.link(SEGMENT$glIndexPointer, Descriptors.DESCRIPTOR$glIndexPointer);
        SEGMENT$glIndexd = loader.apply("glIndexd");
        HANDLE$glIndexd = RawFunctionLoader.link(SEGMENT$glIndexd, Descriptors.DESCRIPTOR$glIndexd);
        SEGMENT$glIndexdv = loader.apply("glIndexdv");
        HANDLE$glIndexdv = RawFunctionLoader.link(SEGMENT$glIndexdv, Descriptors.DESCRIPTOR$glIndexdv);
        SEGMENT$glIndexf = loader.apply("glIndexf");
        HANDLE$glIndexf = RawFunctionLoader.link(SEGMENT$glIndexf, Descriptors.DESCRIPTOR$glIndexf);
        SEGMENT$glIndexfv = loader.apply("glIndexfv");
        HANDLE$glIndexfv = RawFunctionLoader.link(SEGMENT$glIndexfv, Descriptors.DESCRIPTOR$glIndexfv);
        SEGMENT$glIndexi = loader.apply("glIndexi");
        HANDLE$glIndexi = RawFunctionLoader.link(SEGMENT$glIndexi, Descriptors.DESCRIPTOR$glIndexi);
        SEGMENT$glIndexiv = loader.apply("glIndexiv");
        HANDLE$glIndexiv = RawFunctionLoader.link(SEGMENT$glIndexiv, Descriptors.DESCRIPTOR$glIndexiv);
        SEGMENT$glIndexs = loader.apply("glIndexs");
        HANDLE$glIndexs = RawFunctionLoader.link(SEGMENT$glIndexs, Descriptors.DESCRIPTOR$glIndexs);
        SEGMENT$glIndexsv = loader.apply("glIndexsv");
        HANDLE$glIndexsv = RawFunctionLoader.link(SEGMENT$glIndexsv, Descriptors.DESCRIPTOR$glIndexsv);
        SEGMENT$glIndexub = loader.apply("glIndexub");
        HANDLE$glIndexub = RawFunctionLoader.link(SEGMENT$glIndexub, Descriptors.DESCRIPTOR$glIndexub);
        SEGMENT$glIndexubv = loader.apply("glIndexubv");
        HANDLE$glIndexubv = RawFunctionLoader.link(SEGMENT$glIndexubv, Descriptors.DESCRIPTOR$glIndexubv);
        SEGMENT$glInitNames = loader.apply("glInitNames");
        HANDLE$glInitNames = RawFunctionLoader.link(SEGMENT$glInitNames, Descriptors.DESCRIPTOR$glInitNames);
        SEGMENT$glInterleavedArrays = loader.apply("glInterleavedArrays");
        HANDLE$glInterleavedArrays = RawFunctionLoader.link(SEGMENT$glInterleavedArrays, Descriptors.DESCRIPTOR$glInterleavedArrays);
        SEGMENT$glIsBufferARB = loader.apply("glIsBufferARB");
        HANDLE$glIsBufferARB = RawFunctionLoader.link(SEGMENT$glIsBufferARB, Descriptors.DESCRIPTOR$glIsBufferARB);
        SEGMENT$glIsFenceNV = loader.apply("glIsFenceNV");
        HANDLE$glIsFenceNV = RawFunctionLoader.link(SEGMENT$glIsFenceNV, Descriptors.DESCRIPTOR$glIsFenceNV);
        SEGMENT$glIsFramebufferEXT = loader.apply("glIsFramebufferEXT");
        HANDLE$glIsFramebufferEXT = RawFunctionLoader.link(SEGMENT$glIsFramebufferEXT, Descriptors.DESCRIPTOR$glIsFramebufferEXT);
        SEGMENT$glIsList = loader.apply("glIsList");
        HANDLE$glIsList = RawFunctionLoader.link(SEGMENT$glIsList, Descriptors.DESCRIPTOR$glIsList);
        SEGMENT$glIsProgramARB = loader.apply("glIsProgramARB");
        HANDLE$glIsProgramARB = RawFunctionLoader.link(SEGMENT$glIsProgramARB, Descriptors.DESCRIPTOR$glIsProgramARB);
        SEGMENT$glIsQueryARB = loader.apply("glIsQueryARB");
        HANDLE$glIsQueryARB = RawFunctionLoader.link(SEGMENT$glIsQueryARB, Descriptors.DESCRIPTOR$glIsQueryARB);
        SEGMENT$glIsRenderbufferEXT = loader.apply("glIsRenderbufferEXT");
        HANDLE$glIsRenderbufferEXT = RawFunctionLoader.link(SEGMENT$glIsRenderbufferEXT, Descriptors.DESCRIPTOR$glIsRenderbufferEXT);
        SEGMENT$glIsTransformFeedbackNV = loader.apply("glIsTransformFeedbackNV");
        HANDLE$glIsTransformFeedbackNV = RawFunctionLoader.link(SEGMENT$glIsTransformFeedbackNV, Descriptors.DESCRIPTOR$glIsTransformFeedbackNV);
        SEGMENT$glLightModelf = loader.apply("glLightModelf");
        HANDLE$glLightModelf = RawFunctionLoader.link(SEGMENT$glLightModelf, Descriptors.DESCRIPTOR$glLightModelf);
        SEGMENT$glLightModelfv = loader.apply("glLightModelfv");
        HANDLE$glLightModelfv = RawFunctionLoader.link(SEGMENT$glLightModelfv, Descriptors.DESCRIPTOR$glLightModelfv);
        SEGMENT$glLightModeli = loader.apply("glLightModeli");
        HANDLE$glLightModeli = RawFunctionLoader.link(SEGMENT$glLightModeli, Descriptors.DESCRIPTOR$glLightModeli);
        SEGMENT$glLightModeliv = loader.apply("glLightModeliv");
        HANDLE$glLightModeliv = RawFunctionLoader.link(SEGMENT$glLightModeliv, Descriptors.DESCRIPTOR$glLightModeliv);
        SEGMENT$glLightf = loader.apply("glLightf");
        HANDLE$glLightf = RawFunctionLoader.link(SEGMENT$glLightf, Descriptors.DESCRIPTOR$glLightf);
        SEGMENT$glLightfv = loader.apply("glLightfv");
        HANDLE$glLightfv = RawFunctionLoader.link(SEGMENT$glLightfv, Descriptors.DESCRIPTOR$glLightfv);
        SEGMENT$glLighti = loader.apply("glLighti");
        HANDLE$glLighti = RawFunctionLoader.link(SEGMENT$glLighti, Descriptors.DESCRIPTOR$glLighti);
        SEGMENT$glLightiv = loader.apply("glLightiv");
        HANDLE$glLightiv = RawFunctionLoader.link(SEGMENT$glLightiv, Descriptors.DESCRIPTOR$glLightiv);
        SEGMENT$glLineStipple = loader.apply("glLineStipple");
        HANDLE$glLineStipple = RawFunctionLoader.link(SEGMENT$glLineStipple, Descriptors.DESCRIPTOR$glLineStipple);
        SEGMENT$glLinkProgramARB = loader.apply("glLinkProgramARB");
        HANDLE$glLinkProgramARB = RawFunctionLoader.link(SEGMENT$glLinkProgramARB, Descriptors.DESCRIPTOR$glLinkProgramARB);
        SEGMENT$glListBase = loader.apply("glListBase");
        HANDLE$glListBase = RawFunctionLoader.link(SEGMENT$glListBase, Descriptors.DESCRIPTOR$glListBase);
        SEGMENT$glLoadIdentity = loader.apply("glLoadIdentity");
        HANDLE$glLoadIdentity = RawFunctionLoader.link(SEGMENT$glLoadIdentity, Descriptors.DESCRIPTOR$glLoadIdentity);
        SEGMENT$glLoadMatrixd = loader.apply("glLoadMatrixd");
        HANDLE$glLoadMatrixd = RawFunctionLoader.link(SEGMENT$glLoadMatrixd, Descriptors.DESCRIPTOR$glLoadMatrixd);
        SEGMENT$glLoadMatrixf = loader.apply("glLoadMatrixf");
        HANDLE$glLoadMatrixf = RawFunctionLoader.link(SEGMENT$glLoadMatrixf, Descriptors.DESCRIPTOR$glLoadMatrixf);
        SEGMENT$glLoadName = loader.apply("glLoadName");
        HANDLE$glLoadName = RawFunctionLoader.link(SEGMENT$glLoadName, Descriptors.DESCRIPTOR$glLoadName);
        SEGMENT$glLoadTransposeMatrixd = loader.apply("glLoadTransposeMatrixd");
        HANDLE$glLoadTransposeMatrixd = RawFunctionLoader.link(SEGMENT$glLoadTransposeMatrixd, Descriptors.DESCRIPTOR$glLoadTransposeMatrixd);
        SEGMENT$glLoadTransposeMatrixdARB = loader.apply("glLoadTransposeMatrixdARB");
        HANDLE$glLoadTransposeMatrixdARB = RawFunctionLoader.link(SEGMENT$glLoadTransposeMatrixdARB, Descriptors.DESCRIPTOR$glLoadTransposeMatrixdARB);
        SEGMENT$glLoadTransposeMatrixf = loader.apply("glLoadTransposeMatrixf");
        HANDLE$glLoadTransposeMatrixf = RawFunctionLoader.link(SEGMENT$glLoadTransposeMatrixf, Descriptors.DESCRIPTOR$glLoadTransposeMatrixf);
        SEGMENT$glLoadTransposeMatrixfARB = loader.apply("glLoadTransposeMatrixfARB");
        HANDLE$glLoadTransposeMatrixfARB = RawFunctionLoader.link(SEGMENT$glLoadTransposeMatrixfARB, Descriptors.DESCRIPTOR$glLoadTransposeMatrixfARB);
        SEGMENT$glLockArraysEXT = loader.apply("glLockArraysEXT");
        HANDLE$glLockArraysEXT = RawFunctionLoader.link(SEGMENT$glLockArraysEXT, Descriptors.DESCRIPTOR$glLockArraysEXT);
        SEGMENT$glMap1d = loader.apply("glMap1d");
        HANDLE$glMap1d = RawFunctionLoader.link(SEGMENT$glMap1d, Descriptors.DESCRIPTOR$glMap1d);
        SEGMENT$glMap1f = loader.apply("glMap1f");
        HANDLE$glMap1f = RawFunctionLoader.link(SEGMENT$glMap1f, Descriptors.DESCRIPTOR$glMap1f);
        SEGMENT$glMap2d = loader.apply("glMap2d");
        HANDLE$glMap2d = RawFunctionLoader.link(SEGMENT$glMap2d, Descriptors.DESCRIPTOR$glMap2d);
        SEGMENT$glMap2f = loader.apply("glMap2f");
        HANDLE$glMap2f = RawFunctionLoader.link(SEGMENT$glMap2f, Descriptors.DESCRIPTOR$glMap2f);
        SEGMENT$glMapBufferARB = loader.apply("glMapBufferARB");
        HANDLE$glMapBufferARB = RawFunctionLoader.link(SEGMENT$glMapBufferARB, Descriptors.DESCRIPTOR$glMapBufferARB);
        SEGMENT$glMapGrid1d = loader.apply("glMapGrid1d");
        HANDLE$glMapGrid1d = RawFunctionLoader.link(SEGMENT$glMapGrid1d, Descriptors.DESCRIPTOR$glMapGrid1d);
        SEGMENT$glMapGrid1f = loader.apply("glMapGrid1f");
        HANDLE$glMapGrid1f = RawFunctionLoader.link(SEGMENT$glMapGrid1f, Descriptors.DESCRIPTOR$glMapGrid1f);
        SEGMENT$glMapGrid2d = loader.apply("glMapGrid2d");
        HANDLE$glMapGrid2d = RawFunctionLoader.link(SEGMENT$glMapGrid2d, Descriptors.DESCRIPTOR$glMapGrid2d);
        SEGMENT$glMapGrid2f = loader.apply("glMapGrid2f");
        HANDLE$glMapGrid2f = RawFunctionLoader.link(SEGMENT$glMapGrid2f, Descriptors.DESCRIPTOR$glMapGrid2f);
        SEGMENT$glMapTexture2DINTEL = loader.apply("glMapTexture2DINTEL");
        HANDLE$glMapTexture2DINTEL = RawFunctionLoader.link(SEGMENT$glMapTexture2DINTEL, Descriptors.DESCRIPTOR$glMapTexture2DINTEL);
        SEGMENT$glMaterialf = loader.apply("glMaterialf");
        HANDLE$glMaterialf = RawFunctionLoader.link(SEGMENT$glMaterialf, Descriptors.DESCRIPTOR$glMaterialf);
        SEGMENT$glMaterialfv = loader.apply("glMaterialfv");
        HANDLE$glMaterialfv = RawFunctionLoader.link(SEGMENT$glMaterialfv, Descriptors.DESCRIPTOR$glMaterialfv);
        SEGMENT$glMateriali = loader.apply("glMateriali");
        HANDLE$glMateriali = RawFunctionLoader.link(SEGMENT$glMateriali, Descriptors.DESCRIPTOR$glMateriali);
        SEGMENT$glMaterialiv = loader.apply("glMaterialiv");
        HANDLE$glMaterialiv = RawFunctionLoader.link(SEGMENT$glMaterialiv, Descriptors.DESCRIPTOR$glMaterialiv);
        SEGMENT$glMatrixIndexPointerARB = loader.apply("glMatrixIndexPointerARB");
        HANDLE$glMatrixIndexPointerARB = RawFunctionLoader.link(SEGMENT$glMatrixIndexPointerARB, Descriptors.DESCRIPTOR$glMatrixIndexPointerARB);
        SEGMENT$glMatrixIndexubvARB = loader.apply("glMatrixIndexubvARB");
        HANDLE$glMatrixIndexubvARB = RawFunctionLoader.link(SEGMENT$glMatrixIndexubvARB, Descriptors.DESCRIPTOR$glMatrixIndexubvARB);
        SEGMENT$glMatrixIndexuivARB = loader.apply("glMatrixIndexuivARB");
        HANDLE$glMatrixIndexuivARB = RawFunctionLoader.link(SEGMENT$glMatrixIndexuivARB, Descriptors.DESCRIPTOR$glMatrixIndexuivARB);
        SEGMENT$glMatrixIndexusvARB = loader.apply("glMatrixIndexusvARB");
        HANDLE$glMatrixIndexusvARB = RawFunctionLoader.link(SEGMENT$glMatrixIndexusvARB, Descriptors.DESCRIPTOR$glMatrixIndexusvARB);
        SEGMENT$glMatrixMode = loader.apply("glMatrixMode");
        HANDLE$glMatrixMode = RawFunctionLoader.link(SEGMENT$glMatrixMode, Descriptors.DESCRIPTOR$glMatrixMode);
        SEGMENT$glMemoryBarrierEXT = loader.apply("glMemoryBarrierEXT");
        HANDLE$glMemoryBarrierEXT = RawFunctionLoader.link(SEGMENT$glMemoryBarrierEXT, Descriptors.DESCRIPTOR$glMemoryBarrierEXT);
        SEGMENT$glMinmax = loader.apply("glMinmax");
        HANDLE$glMinmax = RawFunctionLoader.link(SEGMENT$glMinmax, Descriptors.DESCRIPTOR$glMinmax);
        SEGMENT$glMultMatrixd = loader.apply("glMultMatrixd");
        HANDLE$glMultMatrixd = RawFunctionLoader.link(SEGMENT$glMultMatrixd, Descriptors.DESCRIPTOR$glMultMatrixd);
        SEGMENT$glMultMatrixf = loader.apply("glMultMatrixf");
        HANDLE$glMultMatrixf = RawFunctionLoader.link(SEGMENT$glMultMatrixf, Descriptors.DESCRIPTOR$glMultMatrixf);
        SEGMENT$glMultTransposeMatrixd = loader.apply("glMultTransposeMatrixd");
        HANDLE$glMultTransposeMatrixd = RawFunctionLoader.link(SEGMENT$glMultTransposeMatrixd, Descriptors.DESCRIPTOR$glMultTransposeMatrixd);
        SEGMENT$glMultTransposeMatrixdARB = loader.apply("glMultTransposeMatrixdARB");
        HANDLE$glMultTransposeMatrixdARB = RawFunctionLoader.link(SEGMENT$glMultTransposeMatrixdARB, Descriptors.DESCRIPTOR$glMultTransposeMatrixdARB);
        SEGMENT$glMultTransposeMatrixf = loader.apply("glMultTransposeMatrixf");
        HANDLE$glMultTransposeMatrixf = RawFunctionLoader.link(SEGMENT$glMultTransposeMatrixf, Descriptors.DESCRIPTOR$glMultTransposeMatrixf);
        SEGMENT$glMultTransposeMatrixfARB = loader.apply("glMultTransposeMatrixfARB");
        HANDLE$glMultTransposeMatrixfARB = RawFunctionLoader.link(SEGMENT$glMultTransposeMatrixfARB, Descriptors.DESCRIPTOR$glMultTransposeMatrixfARB);
        SEGMENT$glMultiTexCoord1d = loader.apply("glMultiTexCoord1d");
        HANDLE$glMultiTexCoord1d = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1d, Descriptors.DESCRIPTOR$glMultiTexCoord1d);
        SEGMENT$glMultiTexCoord1dARB = loader.apply("glMultiTexCoord1dARB");
        HANDLE$glMultiTexCoord1dARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1dARB, Descriptors.DESCRIPTOR$glMultiTexCoord1dARB);
        SEGMENT$glMultiTexCoord1dv = loader.apply("glMultiTexCoord1dv");
        HANDLE$glMultiTexCoord1dv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1dv, Descriptors.DESCRIPTOR$glMultiTexCoord1dv);
        SEGMENT$glMultiTexCoord1dvARB = loader.apply("glMultiTexCoord1dvARB");
        HANDLE$glMultiTexCoord1dvARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1dvARB, Descriptors.DESCRIPTOR$glMultiTexCoord1dvARB);
        SEGMENT$glMultiTexCoord1f = loader.apply("glMultiTexCoord1f");
        HANDLE$glMultiTexCoord1f = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1f, Descriptors.DESCRIPTOR$glMultiTexCoord1f);
        SEGMENT$glMultiTexCoord1fARB = loader.apply("glMultiTexCoord1fARB");
        HANDLE$glMultiTexCoord1fARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1fARB, Descriptors.DESCRIPTOR$glMultiTexCoord1fARB);
        SEGMENT$glMultiTexCoord1fv = loader.apply("glMultiTexCoord1fv");
        HANDLE$glMultiTexCoord1fv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1fv, Descriptors.DESCRIPTOR$glMultiTexCoord1fv);
        SEGMENT$glMultiTexCoord1fvARB = loader.apply("glMultiTexCoord1fvARB");
        HANDLE$glMultiTexCoord1fvARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1fvARB, Descriptors.DESCRIPTOR$glMultiTexCoord1fvARB);
        SEGMENT$glMultiTexCoord1hNV = loader.apply("glMultiTexCoord1hNV");
        HANDLE$glMultiTexCoord1hNV = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1hNV, Descriptors.DESCRIPTOR$glMultiTexCoord1hNV);
        SEGMENT$glMultiTexCoord1hvNV = loader.apply("glMultiTexCoord1hvNV");
        HANDLE$glMultiTexCoord1hvNV = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1hvNV, Descriptors.DESCRIPTOR$glMultiTexCoord1hvNV);
        SEGMENT$glMultiTexCoord1i = loader.apply("glMultiTexCoord1i");
        HANDLE$glMultiTexCoord1i = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1i, Descriptors.DESCRIPTOR$glMultiTexCoord1i);
        SEGMENT$glMultiTexCoord1iARB = loader.apply("glMultiTexCoord1iARB");
        HANDLE$glMultiTexCoord1iARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1iARB, Descriptors.DESCRIPTOR$glMultiTexCoord1iARB);
        SEGMENT$glMultiTexCoord1iv = loader.apply("glMultiTexCoord1iv");
        HANDLE$glMultiTexCoord1iv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1iv, Descriptors.DESCRIPTOR$glMultiTexCoord1iv);
        SEGMENT$glMultiTexCoord1ivARB = loader.apply("glMultiTexCoord1ivARB");
        HANDLE$glMultiTexCoord1ivARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1ivARB, Descriptors.DESCRIPTOR$glMultiTexCoord1ivARB);
        SEGMENT$glMultiTexCoord1s = loader.apply("glMultiTexCoord1s");
        HANDLE$glMultiTexCoord1s = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1s, Descriptors.DESCRIPTOR$glMultiTexCoord1s);
        SEGMENT$glMultiTexCoord1sARB = loader.apply("glMultiTexCoord1sARB");
        HANDLE$glMultiTexCoord1sARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1sARB, Descriptors.DESCRIPTOR$glMultiTexCoord1sARB);
        SEGMENT$glMultiTexCoord1sv = loader.apply("glMultiTexCoord1sv");
        HANDLE$glMultiTexCoord1sv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1sv, Descriptors.DESCRIPTOR$glMultiTexCoord1sv);
        SEGMENT$glMultiTexCoord1svARB = loader.apply("glMultiTexCoord1svARB");
        HANDLE$glMultiTexCoord1svARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord1svARB, Descriptors.DESCRIPTOR$glMultiTexCoord1svARB);
        SEGMENT$glMultiTexCoord2d = loader.apply("glMultiTexCoord2d");
        HANDLE$glMultiTexCoord2d = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2d, Descriptors.DESCRIPTOR$glMultiTexCoord2d);
        SEGMENT$glMultiTexCoord2dARB = loader.apply("glMultiTexCoord2dARB");
        HANDLE$glMultiTexCoord2dARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2dARB, Descriptors.DESCRIPTOR$glMultiTexCoord2dARB);
        SEGMENT$glMultiTexCoord2dv = loader.apply("glMultiTexCoord2dv");
        HANDLE$glMultiTexCoord2dv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2dv, Descriptors.DESCRIPTOR$glMultiTexCoord2dv);
        SEGMENT$glMultiTexCoord2dvARB = loader.apply("glMultiTexCoord2dvARB");
        HANDLE$glMultiTexCoord2dvARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2dvARB, Descriptors.DESCRIPTOR$glMultiTexCoord2dvARB);
        SEGMENT$glMultiTexCoord2f = loader.apply("glMultiTexCoord2f");
        HANDLE$glMultiTexCoord2f = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2f, Descriptors.DESCRIPTOR$glMultiTexCoord2f);
        SEGMENT$glMultiTexCoord2fARB = loader.apply("glMultiTexCoord2fARB");
        HANDLE$glMultiTexCoord2fARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2fARB, Descriptors.DESCRIPTOR$glMultiTexCoord2fARB);
        SEGMENT$glMultiTexCoord2fv = loader.apply("glMultiTexCoord2fv");
        HANDLE$glMultiTexCoord2fv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2fv, Descriptors.DESCRIPTOR$glMultiTexCoord2fv);
        SEGMENT$glMultiTexCoord2fvARB = loader.apply("glMultiTexCoord2fvARB");
        HANDLE$glMultiTexCoord2fvARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2fvARB, Descriptors.DESCRIPTOR$glMultiTexCoord2fvARB);
        SEGMENT$glMultiTexCoord2hNV = loader.apply("glMultiTexCoord2hNV");
        HANDLE$glMultiTexCoord2hNV = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2hNV, Descriptors.DESCRIPTOR$glMultiTexCoord2hNV);
        SEGMENT$glMultiTexCoord2hvNV = loader.apply("glMultiTexCoord2hvNV");
        HANDLE$glMultiTexCoord2hvNV = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2hvNV, Descriptors.DESCRIPTOR$glMultiTexCoord2hvNV);
        SEGMENT$glMultiTexCoord2i = loader.apply("glMultiTexCoord2i");
        HANDLE$glMultiTexCoord2i = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2i, Descriptors.DESCRIPTOR$glMultiTexCoord2i);
        SEGMENT$glMultiTexCoord2iARB = loader.apply("glMultiTexCoord2iARB");
        HANDLE$glMultiTexCoord2iARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2iARB, Descriptors.DESCRIPTOR$glMultiTexCoord2iARB);
        SEGMENT$glMultiTexCoord2iv = loader.apply("glMultiTexCoord2iv");
        HANDLE$glMultiTexCoord2iv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2iv, Descriptors.DESCRIPTOR$glMultiTexCoord2iv);
        SEGMENT$glMultiTexCoord2ivARB = loader.apply("glMultiTexCoord2ivARB");
        HANDLE$glMultiTexCoord2ivARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2ivARB, Descriptors.DESCRIPTOR$glMultiTexCoord2ivARB);
        SEGMENT$glMultiTexCoord2s = loader.apply("glMultiTexCoord2s");
        HANDLE$glMultiTexCoord2s = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2s, Descriptors.DESCRIPTOR$glMultiTexCoord2s);
        SEGMENT$glMultiTexCoord2sARB = loader.apply("glMultiTexCoord2sARB");
        HANDLE$glMultiTexCoord2sARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2sARB, Descriptors.DESCRIPTOR$glMultiTexCoord2sARB);
        SEGMENT$glMultiTexCoord2sv = loader.apply("glMultiTexCoord2sv");
        HANDLE$glMultiTexCoord2sv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2sv, Descriptors.DESCRIPTOR$glMultiTexCoord2sv);
        SEGMENT$glMultiTexCoord2svARB = loader.apply("glMultiTexCoord2svARB");
        HANDLE$glMultiTexCoord2svARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord2svARB, Descriptors.DESCRIPTOR$glMultiTexCoord2svARB);
        SEGMENT$glMultiTexCoord3d = loader.apply("glMultiTexCoord3d");
        HANDLE$glMultiTexCoord3d = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3d, Descriptors.DESCRIPTOR$glMultiTexCoord3d);
        SEGMENT$glMultiTexCoord3dARB = loader.apply("glMultiTexCoord3dARB");
        HANDLE$glMultiTexCoord3dARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3dARB, Descriptors.DESCRIPTOR$glMultiTexCoord3dARB);
        SEGMENT$glMultiTexCoord3dv = loader.apply("glMultiTexCoord3dv");
        HANDLE$glMultiTexCoord3dv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3dv, Descriptors.DESCRIPTOR$glMultiTexCoord3dv);
        SEGMENT$glMultiTexCoord3dvARB = loader.apply("glMultiTexCoord3dvARB");
        HANDLE$glMultiTexCoord3dvARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3dvARB, Descriptors.DESCRIPTOR$glMultiTexCoord3dvARB);
        SEGMENT$glMultiTexCoord3f = loader.apply("glMultiTexCoord3f");
        HANDLE$glMultiTexCoord3f = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3f, Descriptors.DESCRIPTOR$glMultiTexCoord3f);
        SEGMENT$glMultiTexCoord3fARB = loader.apply("glMultiTexCoord3fARB");
        HANDLE$glMultiTexCoord3fARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3fARB, Descriptors.DESCRIPTOR$glMultiTexCoord3fARB);
        SEGMENT$glMultiTexCoord3fv = loader.apply("glMultiTexCoord3fv");
        HANDLE$glMultiTexCoord3fv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3fv, Descriptors.DESCRIPTOR$glMultiTexCoord3fv);
        SEGMENT$glMultiTexCoord3fvARB = loader.apply("glMultiTexCoord3fvARB");
        HANDLE$glMultiTexCoord3fvARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3fvARB, Descriptors.DESCRIPTOR$glMultiTexCoord3fvARB);
        SEGMENT$glMultiTexCoord3hNV = loader.apply("glMultiTexCoord3hNV");
        HANDLE$glMultiTexCoord3hNV = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3hNV, Descriptors.DESCRIPTOR$glMultiTexCoord3hNV);
        SEGMENT$glMultiTexCoord3hvNV = loader.apply("glMultiTexCoord3hvNV");
        HANDLE$glMultiTexCoord3hvNV = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3hvNV, Descriptors.DESCRIPTOR$glMultiTexCoord3hvNV);
        SEGMENT$glMultiTexCoord3i = loader.apply("glMultiTexCoord3i");
        HANDLE$glMultiTexCoord3i = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3i, Descriptors.DESCRIPTOR$glMultiTexCoord3i);
        SEGMENT$glMultiTexCoord3iARB = loader.apply("glMultiTexCoord3iARB");
        HANDLE$glMultiTexCoord3iARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3iARB, Descriptors.DESCRIPTOR$glMultiTexCoord3iARB);
        SEGMENT$glMultiTexCoord3iv = loader.apply("glMultiTexCoord3iv");
        HANDLE$glMultiTexCoord3iv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3iv, Descriptors.DESCRIPTOR$glMultiTexCoord3iv);
        SEGMENT$glMultiTexCoord3ivARB = loader.apply("glMultiTexCoord3ivARB");
        HANDLE$glMultiTexCoord3ivARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3ivARB, Descriptors.DESCRIPTOR$glMultiTexCoord3ivARB);
        SEGMENT$glMultiTexCoord3s = loader.apply("glMultiTexCoord3s");
        HANDLE$glMultiTexCoord3s = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3s, Descriptors.DESCRIPTOR$glMultiTexCoord3s);
        SEGMENT$glMultiTexCoord3sARB = loader.apply("glMultiTexCoord3sARB");
        HANDLE$glMultiTexCoord3sARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3sARB, Descriptors.DESCRIPTOR$glMultiTexCoord3sARB);
        SEGMENT$glMultiTexCoord3sv = loader.apply("glMultiTexCoord3sv");
        HANDLE$glMultiTexCoord3sv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3sv, Descriptors.DESCRIPTOR$glMultiTexCoord3sv);
        SEGMENT$glMultiTexCoord3svARB = loader.apply("glMultiTexCoord3svARB");
        HANDLE$glMultiTexCoord3svARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord3svARB, Descriptors.DESCRIPTOR$glMultiTexCoord3svARB);
        SEGMENT$glMultiTexCoord4d = loader.apply("glMultiTexCoord4d");
        HANDLE$glMultiTexCoord4d = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4d, Descriptors.DESCRIPTOR$glMultiTexCoord4d);
        SEGMENT$glMultiTexCoord4dARB = loader.apply("glMultiTexCoord4dARB");
        HANDLE$glMultiTexCoord4dARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4dARB, Descriptors.DESCRIPTOR$glMultiTexCoord4dARB);
        SEGMENT$glMultiTexCoord4dv = loader.apply("glMultiTexCoord4dv");
        HANDLE$glMultiTexCoord4dv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4dv, Descriptors.DESCRIPTOR$glMultiTexCoord4dv);
        SEGMENT$glMultiTexCoord4dvARB = loader.apply("glMultiTexCoord4dvARB");
        HANDLE$glMultiTexCoord4dvARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4dvARB, Descriptors.DESCRIPTOR$glMultiTexCoord4dvARB);
        SEGMENT$glMultiTexCoord4f = loader.apply("glMultiTexCoord4f");
        HANDLE$glMultiTexCoord4f = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4f, Descriptors.DESCRIPTOR$glMultiTexCoord4f);
        SEGMENT$glMultiTexCoord4fARB = loader.apply("glMultiTexCoord4fARB");
        HANDLE$glMultiTexCoord4fARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4fARB, Descriptors.DESCRIPTOR$glMultiTexCoord4fARB);
        SEGMENT$glMultiTexCoord4fv = loader.apply("glMultiTexCoord4fv");
        HANDLE$glMultiTexCoord4fv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4fv, Descriptors.DESCRIPTOR$glMultiTexCoord4fv);
        SEGMENT$glMultiTexCoord4fvARB = loader.apply("glMultiTexCoord4fvARB");
        HANDLE$glMultiTexCoord4fvARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4fvARB, Descriptors.DESCRIPTOR$glMultiTexCoord4fvARB);
        SEGMENT$glMultiTexCoord4hNV = loader.apply("glMultiTexCoord4hNV");
        HANDLE$glMultiTexCoord4hNV = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4hNV, Descriptors.DESCRIPTOR$glMultiTexCoord4hNV);
        SEGMENT$glMultiTexCoord4hvNV = loader.apply("glMultiTexCoord4hvNV");
        HANDLE$glMultiTexCoord4hvNV = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4hvNV, Descriptors.DESCRIPTOR$glMultiTexCoord4hvNV);
        SEGMENT$glMultiTexCoord4i = loader.apply("glMultiTexCoord4i");
        HANDLE$glMultiTexCoord4i = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4i, Descriptors.DESCRIPTOR$glMultiTexCoord4i);
        SEGMENT$glMultiTexCoord4iARB = loader.apply("glMultiTexCoord4iARB");
        HANDLE$glMultiTexCoord4iARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4iARB, Descriptors.DESCRIPTOR$glMultiTexCoord4iARB);
        SEGMENT$glMultiTexCoord4iv = loader.apply("glMultiTexCoord4iv");
        HANDLE$glMultiTexCoord4iv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4iv, Descriptors.DESCRIPTOR$glMultiTexCoord4iv);
        SEGMENT$glMultiTexCoord4ivARB = loader.apply("glMultiTexCoord4ivARB");
        HANDLE$glMultiTexCoord4ivARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4ivARB, Descriptors.DESCRIPTOR$glMultiTexCoord4ivARB);
        SEGMENT$glMultiTexCoord4s = loader.apply("glMultiTexCoord4s");
        HANDLE$glMultiTexCoord4s = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4s, Descriptors.DESCRIPTOR$glMultiTexCoord4s);
        SEGMENT$glMultiTexCoord4sARB = loader.apply("glMultiTexCoord4sARB");
        HANDLE$glMultiTexCoord4sARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4sARB, Descriptors.DESCRIPTOR$glMultiTexCoord4sARB);
        SEGMENT$glMultiTexCoord4sv = loader.apply("glMultiTexCoord4sv");
        HANDLE$glMultiTexCoord4sv = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4sv, Descriptors.DESCRIPTOR$glMultiTexCoord4sv);
        SEGMENT$glMultiTexCoord4svARB = loader.apply("glMultiTexCoord4svARB");
        HANDLE$glMultiTexCoord4svARB = RawFunctionLoader.link(SEGMENT$glMultiTexCoord4svARB, Descriptors.DESCRIPTOR$glMultiTexCoord4svARB);
        SEGMENT$glMultiTexCoordP1ui = loader.apply("glMultiTexCoordP1ui");
        HANDLE$glMultiTexCoordP1ui = RawFunctionLoader.link(SEGMENT$glMultiTexCoordP1ui, Descriptors.DESCRIPTOR$glMultiTexCoordP1ui);
        SEGMENT$glMultiTexCoordP1uiv = loader.apply("glMultiTexCoordP1uiv");
        HANDLE$glMultiTexCoordP1uiv = RawFunctionLoader.link(SEGMENT$glMultiTexCoordP1uiv, Descriptors.DESCRIPTOR$glMultiTexCoordP1uiv);
        SEGMENT$glMultiTexCoordP2ui = loader.apply("glMultiTexCoordP2ui");
        HANDLE$glMultiTexCoordP2ui = RawFunctionLoader.link(SEGMENT$glMultiTexCoordP2ui, Descriptors.DESCRIPTOR$glMultiTexCoordP2ui);
        SEGMENT$glMultiTexCoordP2uiv = loader.apply("glMultiTexCoordP2uiv");
        HANDLE$glMultiTexCoordP2uiv = RawFunctionLoader.link(SEGMENT$glMultiTexCoordP2uiv, Descriptors.DESCRIPTOR$glMultiTexCoordP2uiv);
        SEGMENT$glMultiTexCoordP3ui = loader.apply("glMultiTexCoordP3ui");
        HANDLE$glMultiTexCoordP3ui = RawFunctionLoader.link(SEGMENT$glMultiTexCoordP3ui, Descriptors.DESCRIPTOR$glMultiTexCoordP3ui);
        SEGMENT$glMultiTexCoordP3uiv = loader.apply("glMultiTexCoordP3uiv");
        HANDLE$glMultiTexCoordP3uiv = RawFunctionLoader.link(SEGMENT$glMultiTexCoordP3uiv, Descriptors.DESCRIPTOR$glMultiTexCoordP3uiv);
        SEGMENT$glMultiTexCoordP4ui = loader.apply("glMultiTexCoordP4ui");
        HANDLE$glMultiTexCoordP4ui = RawFunctionLoader.link(SEGMENT$glMultiTexCoordP4ui, Descriptors.DESCRIPTOR$glMultiTexCoordP4ui);
        SEGMENT$glMultiTexCoordP4uiv = loader.apply("glMultiTexCoordP4uiv");
        HANDLE$glMultiTexCoordP4uiv = RawFunctionLoader.link(SEGMENT$glMultiTexCoordP4uiv, Descriptors.DESCRIPTOR$glMultiTexCoordP4uiv);
        SEGMENT$glMulticastBarrierNV = loader.apply("glMulticastBarrierNV");
        HANDLE$glMulticastBarrierNV = RawFunctionLoader.link(SEGMENT$glMulticastBarrierNV, Descriptors.DESCRIPTOR$glMulticastBarrierNV);
        SEGMENT$glMulticastBlitFramebufferNV = loader.apply("glMulticastBlitFramebufferNV");
        HANDLE$glMulticastBlitFramebufferNV = RawFunctionLoader.link(SEGMENT$glMulticastBlitFramebufferNV, Descriptors.DESCRIPTOR$glMulticastBlitFramebufferNV);
        SEGMENT$glMulticastBufferSubDataNV = loader.apply("glMulticastBufferSubDataNV");
        HANDLE$glMulticastBufferSubDataNV = RawFunctionLoader.link(SEGMENT$glMulticastBufferSubDataNV, Descriptors.DESCRIPTOR$glMulticastBufferSubDataNV);
        SEGMENT$glMulticastCopyBufferSubDataNV = loader.apply("glMulticastCopyBufferSubDataNV");
        HANDLE$glMulticastCopyBufferSubDataNV = RawFunctionLoader.link(SEGMENT$glMulticastCopyBufferSubDataNV, Descriptors.DESCRIPTOR$glMulticastCopyBufferSubDataNV);
        SEGMENT$glMulticastCopyImageSubDataNV = loader.apply("glMulticastCopyImageSubDataNV");
        HANDLE$glMulticastCopyImageSubDataNV = RawFunctionLoader.link(SEGMENT$glMulticastCopyImageSubDataNV, Descriptors.DESCRIPTOR$glMulticastCopyImageSubDataNV);
        SEGMENT$glMulticastFramebufferSampleLocationsfvNV = loader.apply("glMulticastFramebufferSampleLocationsfvNV");
        HANDLE$glMulticastFramebufferSampleLocationsfvNV = RawFunctionLoader.link(SEGMENT$glMulticastFramebufferSampleLocationsfvNV, Descriptors.DESCRIPTOR$glMulticastFramebufferSampleLocationsfvNV);
        SEGMENT$glMulticastGetQueryObjecti64vNV = loader.apply("glMulticastGetQueryObjecti64vNV");
        HANDLE$glMulticastGetQueryObjecti64vNV = RawFunctionLoader.link(SEGMENT$glMulticastGetQueryObjecti64vNV, Descriptors.DESCRIPTOR$glMulticastGetQueryObjecti64vNV);
        SEGMENT$glMulticastGetQueryObjectivNV = loader.apply("glMulticastGetQueryObjectivNV");
        HANDLE$glMulticastGetQueryObjectivNV = RawFunctionLoader.link(SEGMENT$glMulticastGetQueryObjectivNV, Descriptors.DESCRIPTOR$glMulticastGetQueryObjectivNV);
        SEGMENT$glMulticastGetQueryObjectui64vNV = loader.apply("glMulticastGetQueryObjectui64vNV");
        HANDLE$glMulticastGetQueryObjectui64vNV = RawFunctionLoader.link(SEGMENT$glMulticastGetQueryObjectui64vNV, Descriptors.DESCRIPTOR$glMulticastGetQueryObjectui64vNV);
        SEGMENT$glMulticastGetQueryObjectuivNV = loader.apply("glMulticastGetQueryObjectuivNV");
        HANDLE$glMulticastGetQueryObjectuivNV = RawFunctionLoader.link(SEGMENT$glMulticastGetQueryObjectuivNV, Descriptors.DESCRIPTOR$glMulticastGetQueryObjectuivNV);
        SEGMENT$glMulticastScissorArrayvNVX = loader.apply("glMulticastScissorArrayvNVX");
        HANDLE$glMulticastScissorArrayvNVX = RawFunctionLoader.link(SEGMENT$glMulticastScissorArrayvNVX, Descriptors.DESCRIPTOR$glMulticastScissorArrayvNVX);
        SEGMENT$glMulticastViewportArrayvNVX = loader.apply("glMulticastViewportArrayvNVX");
        HANDLE$glMulticastViewportArrayvNVX = RawFunctionLoader.link(SEGMENT$glMulticastViewportArrayvNVX, Descriptors.DESCRIPTOR$glMulticastViewportArrayvNVX);
        SEGMENT$glMulticastViewportPositionWScaleNVX = loader.apply("glMulticastViewportPositionWScaleNVX");
        HANDLE$glMulticastViewportPositionWScaleNVX = RawFunctionLoader.link(SEGMENT$glMulticastViewportPositionWScaleNVX, Descriptors.DESCRIPTOR$glMulticastViewportPositionWScaleNVX);
        SEGMENT$glMulticastWaitSyncNV = loader.apply("glMulticastWaitSyncNV");
        HANDLE$glMulticastWaitSyncNV = RawFunctionLoader.link(SEGMENT$glMulticastWaitSyncNV, Descriptors.DESCRIPTOR$glMulticastWaitSyncNV);
        SEGMENT$glNamedBufferStorageExternalEXT = loader.apply("glNamedBufferStorageExternalEXT");
        HANDLE$glNamedBufferStorageExternalEXT = RawFunctionLoader.link(SEGMENT$glNamedBufferStorageExternalEXT, Descriptors.DESCRIPTOR$glNamedBufferStorageExternalEXT);
        SEGMENT$glNewList = loader.apply("glNewList");
        HANDLE$glNewList = RawFunctionLoader.link(SEGMENT$glNewList, Descriptors.DESCRIPTOR$glNewList);
        SEGMENT$glNormal3b = loader.apply("glNormal3b");
        HANDLE$glNormal3b = RawFunctionLoader.link(SEGMENT$glNormal3b, Descriptors.DESCRIPTOR$glNormal3b);
        SEGMENT$glNormal3bv = loader.apply("glNormal3bv");
        HANDLE$glNormal3bv = RawFunctionLoader.link(SEGMENT$glNormal3bv, Descriptors.DESCRIPTOR$glNormal3bv);
        SEGMENT$glNormal3d = loader.apply("glNormal3d");
        HANDLE$glNormal3d = RawFunctionLoader.link(SEGMENT$glNormal3d, Descriptors.DESCRIPTOR$glNormal3d);
        SEGMENT$glNormal3dv = loader.apply("glNormal3dv");
        HANDLE$glNormal3dv = RawFunctionLoader.link(SEGMENT$glNormal3dv, Descriptors.DESCRIPTOR$glNormal3dv);
        SEGMENT$glNormal3f = loader.apply("glNormal3f");
        HANDLE$glNormal3f = RawFunctionLoader.link(SEGMENT$glNormal3f, Descriptors.DESCRIPTOR$glNormal3f);
        SEGMENT$glNormal3fv = loader.apply("glNormal3fv");
        HANDLE$glNormal3fv = RawFunctionLoader.link(SEGMENT$glNormal3fv, Descriptors.DESCRIPTOR$glNormal3fv);
        SEGMENT$glNormal3hNV = loader.apply("glNormal3hNV");
        HANDLE$glNormal3hNV = RawFunctionLoader.link(SEGMENT$glNormal3hNV, Descriptors.DESCRIPTOR$glNormal3hNV);
        SEGMENT$glNormal3hvNV = loader.apply("glNormal3hvNV");
        HANDLE$glNormal3hvNV = RawFunctionLoader.link(SEGMENT$glNormal3hvNV, Descriptors.DESCRIPTOR$glNormal3hvNV);
        SEGMENT$glNormal3i = loader.apply("glNormal3i");
        HANDLE$glNormal3i = RawFunctionLoader.link(SEGMENT$glNormal3i, Descriptors.DESCRIPTOR$glNormal3i);
        SEGMENT$glNormal3iv = loader.apply("glNormal3iv");
        HANDLE$glNormal3iv = RawFunctionLoader.link(SEGMENT$glNormal3iv, Descriptors.DESCRIPTOR$glNormal3iv);
        SEGMENT$glNormal3s = loader.apply("glNormal3s");
        HANDLE$glNormal3s = RawFunctionLoader.link(SEGMENT$glNormal3s, Descriptors.DESCRIPTOR$glNormal3s);
        SEGMENT$glNormal3sv = loader.apply("glNormal3sv");
        HANDLE$glNormal3sv = RawFunctionLoader.link(SEGMENT$glNormal3sv, Descriptors.DESCRIPTOR$glNormal3sv);
        SEGMENT$glNormalP3ui = loader.apply("glNormalP3ui");
        HANDLE$glNormalP3ui = RawFunctionLoader.link(SEGMENT$glNormalP3ui, Descriptors.DESCRIPTOR$glNormalP3ui);
        SEGMENT$glNormalP3uiv = loader.apply("glNormalP3uiv");
        HANDLE$glNormalP3uiv = RawFunctionLoader.link(SEGMENT$glNormalP3uiv, Descriptors.DESCRIPTOR$glNormalP3uiv);
        SEGMENT$glNormalPointer = loader.apply("glNormalPointer");
        HANDLE$glNormalPointer = RawFunctionLoader.link(SEGMENT$glNormalPointer, Descriptors.DESCRIPTOR$glNormalPointer);
        SEGMENT$glOrtho = loader.apply("glOrtho");
        HANDLE$glOrtho = RawFunctionLoader.link(SEGMENT$glOrtho, Descriptors.DESCRIPTOR$glOrtho);
        SEGMENT$glPassThrough = loader.apply("glPassThrough");
        HANDLE$glPassThrough = RawFunctionLoader.link(SEGMENT$glPassThrough, Descriptors.DESCRIPTOR$glPassThrough);
        SEGMENT$glPathColorGenNV = loader.apply("glPathColorGenNV");
        HANDLE$glPathColorGenNV = RawFunctionLoader.link(SEGMENT$glPathColorGenNV, Descriptors.DESCRIPTOR$glPathColorGenNV);
        SEGMENT$glPathFogGenNV = loader.apply("glPathFogGenNV");
        HANDLE$glPathFogGenNV = RawFunctionLoader.link(SEGMENT$glPathFogGenNV, Descriptors.DESCRIPTOR$glPathFogGenNV);
        SEGMENT$glPathTexGenNV = loader.apply("glPathTexGenNV");
        HANDLE$glPathTexGenNV = RawFunctionLoader.link(SEGMENT$glPathTexGenNV, Descriptors.DESCRIPTOR$glPathTexGenNV);
        SEGMENT$glPauseTransformFeedbackNV = loader.apply("glPauseTransformFeedbackNV");
        HANDLE$glPauseTransformFeedbackNV = RawFunctionLoader.link(SEGMENT$glPauseTransformFeedbackNV, Descriptors.DESCRIPTOR$glPauseTransformFeedbackNV);
        SEGMENT$glPixelDataRangeNV = loader.apply("glPixelDataRangeNV");
        HANDLE$glPixelDataRangeNV = RawFunctionLoader.link(SEGMENT$glPixelDataRangeNV, Descriptors.DESCRIPTOR$glPixelDataRangeNV);
        SEGMENT$glPixelMapfv = loader.apply("glPixelMapfv");
        HANDLE$glPixelMapfv = RawFunctionLoader.link(SEGMENT$glPixelMapfv, Descriptors.DESCRIPTOR$glPixelMapfv);
        SEGMENT$glPixelMapuiv = loader.apply("glPixelMapuiv");
        HANDLE$glPixelMapuiv = RawFunctionLoader.link(SEGMENT$glPixelMapuiv, Descriptors.DESCRIPTOR$glPixelMapuiv);
        SEGMENT$glPixelMapusv = loader.apply("glPixelMapusv");
        HANDLE$glPixelMapusv = RawFunctionLoader.link(SEGMENT$glPixelMapusv, Descriptors.DESCRIPTOR$glPixelMapusv);
        SEGMENT$glPixelTransferf = loader.apply("glPixelTransferf");
        HANDLE$glPixelTransferf = RawFunctionLoader.link(SEGMENT$glPixelTransferf, Descriptors.DESCRIPTOR$glPixelTransferf);
        SEGMENT$glPixelTransferi = loader.apply("glPixelTransferi");
        HANDLE$glPixelTransferi = RawFunctionLoader.link(SEGMENT$glPixelTransferi, Descriptors.DESCRIPTOR$glPixelTransferi);
        SEGMENT$glPixelZoom = loader.apply("glPixelZoom");
        HANDLE$glPixelZoom = RawFunctionLoader.link(SEGMENT$glPixelZoom, Descriptors.DESCRIPTOR$glPixelZoom);
        SEGMENT$glPointParameterfARB = loader.apply("glPointParameterfARB");
        HANDLE$glPointParameterfARB = RawFunctionLoader.link(SEGMENT$glPointParameterfARB, Descriptors.DESCRIPTOR$glPointParameterfARB);
        SEGMENT$glPointParameterfEXT = loader.apply("glPointParameterfEXT");
        HANDLE$glPointParameterfEXT = RawFunctionLoader.link(SEGMENT$glPointParameterfEXT, Descriptors.DESCRIPTOR$glPointParameterfEXT);
        SEGMENT$glPointParameterfvARB = loader.apply("glPointParameterfvARB");
        HANDLE$glPointParameterfvARB = RawFunctionLoader.link(SEGMENT$glPointParameterfvARB, Descriptors.DESCRIPTOR$glPointParameterfvARB);
        SEGMENT$glPointParameterfvEXT = loader.apply("glPointParameterfvEXT");
        HANDLE$glPointParameterfvEXT = RawFunctionLoader.link(SEGMENT$glPointParameterfvEXT, Descriptors.DESCRIPTOR$glPointParameterfvEXT);
        SEGMENT$glPointParameteriNV = loader.apply("glPointParameteriNV");
        HANDLE$glPointParameteriNV = RawFunctionLoader.link(SEGMENT$glPointParameteriNV, Descriptors.DESCRIPTOR$glPointParameteriNV);
        SEGMENT$glPointParameterivNV = loader.apply("glPointParameterivNV");
        HANDLE$glPointParameterivNV = RawFunctionLoader.link(SEGMENT$glPointParameterivNV, Descriptors.DESCRIPTOR$glPointParameterivNV);
        SEGMENT$glPolygonStipple = loader.apply("glPolygonStipple");
        HANDLE$glPolygonStipple = RawFunctionLoader.link(SEGMENT$glPolygonStipple, Descriptors.DESCRIPTOR$glPolygonStipple);
        SEGMENT$glPopAttrib = loader.apply("glPopAttrib");
        HANDLE$glPopAttrib = RawFunctionLoader.link(SEGMENT$glPopAttrib, Descriptors.DESCRIPTOR$glPopAttrib);
        SEGMENT$glPopClientAttrib = loader.apply("glPopClientAttrib");
        HANDLE$glPopClientAttrib = RawFunctionLoader.link(SEGMENT$glPopClientAttrib, Descriptors.DESCRIPTOR$glPopClientAttrib);
        SEGMENT$glPopMatrix = loader.apply("glPopMatrix");
        HANDLE$glPopMatrix = RawFunctionLoader.link(SEGMENT$glPopMatrix, Descriptors.DESCRIPTOR$glPopMatrix);
        SEGMENT$glPopName = loader.apply("glPopName");
        HANDLE$glPopName = RawFunctionLoader.link(SEGMENT$glPopName, Descriptors.DESCRIPTOR$glPopName);
        SEGMENT$glPrimitiveRestartIndexNV = loader.apply("glPrimitiveRestartIndexNV");
        HANDLE$glPrimitiveRestartIndexNV = RawFunctionLoader.link(SEGMENT$glPrimitiveRestartIndexNV, Descriptors.DESCRIPTOR$glPrimitiveRestartIndexNV);
        SEGMENT$glPrimitiveRestartNV = loader.apply("glPrimitiveRestartNV");
        HANDLE$glPrimitiveRestartNV = RawFunctionLoader.link(SEGMENT$glPrimitiveRestartNV, Descriptors.DESCRIPTOR$glPrimitiveRestartNV);
        SEGMENT$glPrioritizeTextures = loader.apply("glPrioritizeTextures");
        HANDLE$glPrioritizeTextures = RawFunctionLoader.link(SEGMENT$glPrioritizeTextures, Descriptors.DESCRIPTOR$glPrioritizeTextures);
        SEGMENT$glProgramEnvParameter4dARB = loader.apply("glProgramEnvParameter4dARB");
        HANDLE$glProgramEnvParameter4dARB = RawFunctionLoader.link(SEGMENT$glProgramEnvParameter4dARB, Descriptors.DESCRIPTOR$glProgramEnvParameter4dARB);
        SEGMENT$glProgramEnvParameter4dvARB = loader.apply("glProgramEnvParameter4dvARB");
        HANDLE$glProgramEnvParameter4dvARB = RawFunctionLoader.link(SEGMENT$glProgramEnvParameter4dvARB, Descriptors.DESCRIPTOR$glProgramEnvParameter4dvARB);
        SEGMENT$glProgramEnvParameter4fARB = loader.apply("glProgramEnvParameter4fARB");
        HANDLE$glProgramEnvParameter4fARB = RawFunctionLoader.link(SEGMENT$glProgramEnvParameter4fARB, Descriptors.DESCRIPTOR$glProgramEnvParameter4fARB);
        SEGMENT$glProgramEnvParameter4fvARB = loader.apply("glProgramEnvParameter4fvARB");
        HANDLE$glProgramEnvParameter4fvARB = RawFunctionLoader.link(SEGMENT$glProgramEnvParameter4fvARB, Descriptors.DESCRIPTOR$glProgramEnvParameter4fvARB);
        SEGMENT$glProgramEnvParameters4fvEXT = loader.apply("glProgramEnvParameters4fvEXT");
        HANDLE$glProgramEnvParameters4fvEXT = RawFunctionLoader.link(SEGMENT$glProgramEnvParameters4fvEXT, Descriptors.DESCRIPTOR$glProgramEnvParameters4fvEXT);
        SEGMENT$glProgramLocalParameter4dARB = loader.apply("glProgramLocalParameter4dARB");
        HANDLE$glProgramLocalParameter4dARB = RawFunctionLoader.link(SEGMENT$glProgramLocalParameter4dARB, Descriptors.DESCRIPTOR$glProgramLocalParameter4dARB);
        SEGMENT$glProgramLocalParameter4dvARB = loader.apply("glProgramLocalParameter4dvARB");
        HANDLE$glProgramLocalParameter4dvARB = RawFunctionLoader.link(SEGMENT$glProgramLocalParameter4dvARB, Descriptors.DESCRIPTOR$glProgramLocalParameter4dvARB);
        SEGMENT$glProgramLocalParameter4fARB = loader.apply("glProgramLocalParameter4fARB");
        HANDLE$glProgramLocalParameter4fARB = RawFunctionLoader.link(SEGMENT$glProgramLocalParameter4fARB, Descriptors.DESCRIPTOR$glProgramLocalParameter4fARB);
        SEGMENT$glProgramLocalParameter4fvARB = loader.apply("glProgramLocalParameter4fvARB");
        HANDLE$glProgramLocalParameter4fvARB = RawFunctionLoader.link(SEGMENT$glProgramLocalParameter4fvARB, Descriptors.DESCRIPTOR$glProgramLocalParameter4fvARB);
        SEGMENT$glProgramLocalParameters4fvEXT = loader.apply("glProgramLocalParameters4fvEXT");
        HANDLE$glProgramLocalParameters4fvEXT = RawFunctionLoader.link(SEGMENT$glProgramLocalParameters4fvEXT, Descriptors.DESCRIPTOR$glProgramLocalParameters4fvEXT);
        SEGMENT$glProgramParameteriEXT = loader.apply("glProgramParameteriEXT");
        HANDLE$glProgramParameteriEXT = RawFunctionLoader.link(SEGMENT$glProgramParameteriEXT, Descriptors.DESCRIPTOR$glProgramParameteriEXT);
        SEGMENT$glProgramStringARB = loader.apply("glProgramStringARB");
        HANDLE$glProgramStringARB = RawFunctionLoader.link(SEGMENT$glProgramStringARB, Descriptors.DESCRIPTOR$glProgramStringARB);
        SEGMENT$glProgramUniform1i64NV = loader.apply("glProgramUniform1i64NV");
        HANDLE$glProgramUniform1i64NV = RawFunctionLoader.link(SEGMENT$glProgramUniform1i64NV, Descriptors.DESCRIPTOR$glProgramUniform1i64NV);
        SEGMENT$glProgramUniform1i64vNV = loader.apply("glProgramUniform1i64vNV");
        HANDLE$glProgramUniform1i64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniform1i64vNV, Descriptors.DESCRIPTOR$glProgramUniform1i64vNV);
        SEGMENT$glProgramUniform1ui64NV = loader.apply("glProgramUniform1ui64NV");
        HANDLE$glProgramUniform1ui64NV = RawFunctionLoader.link(SEGMENT$glProgramUniform1ui64NV, Descriptors.DESCRIPTOR$glProgramUniform1ui64NV);
        SEGMENT$glProgramUniform1ui64vNV = loader.apply("glProgramUniform1ui64vNV");
        HANDLE$glProgramUniform1ui64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniform1ui64vNV, Descriptors.DESCRIPTOR$glProgramUniform1ui64vNV);
        SEGMENT$glProgramUniform2i64NV = loader.apply("glProgramUniform2i64NV");
        HANDLE$glProgramUniform2i64NV = RawFunctionLoader.link(SEGMENT$glProgramUniform2i64NV, Descriptors.DESCRIPTOR$glProgramUniform2i64NV);
        SEGMENT$glProgramUniform2i64vNV = loader.apply("glProgramUniform2i64vNV");
        HANDLE$glProgramUniform2i64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniform2i64vNV, Descriptors.DESCRIPTOR$glProgramUniform2i64vNV);
        SEGMENT$glProgramUniform2ui64NV = loader.apply("glProgramUniform2ui64NV");
        HANDLE$glProgramUniform2ui64NV = RawFunctionLoader.link(SEGMENT$glProgramUniform2ui64NV, Descriptors.DESCRIPTOR$glProgramUniform2ui64NV);
        SEGMENT$glProgramUniform2ui64vNV = loader.apply("glProgramUniform2ui64vNV");
        HANDLE$glProgramUniform2ui64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniform2ui64vNV, Descriptors.DESCRIPTOR$glProgramUniform2ui64vNV);
        SEGMENT$glProgramUniform3i64NV = loader.apply("glProgramUniform3i64NV");
        HANDLE$glProgramUniform3i64NV = RawFunctionLoader.link(SEGMENT$glProgramUniform3i64NV, Descriptors.DESCRIPTOR$glProgramUniform3i64NV);
        SEGMENT$glProgramUniform3i64vNV = loader.apply("glProgramUniform3i64vNV");
        HANDLE$glProgramUniform3i64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniform3i64vNV, Descriptors.DESCRIPTOR$glProgramUniform3i64vNV);
        SEGMENT$glProgramUniform3ui64NV = loader.apply("glProgramUniform3ui64NV");
        HANDLE$glProgramUniform3ui64NV = RawFunctionLoader.link(SEGMENT$glProgramUniform3ui64NV, Descriptors.DESCRIPTOR$glProgramUniform3ui64NV);
        SEGMENT$glProgramUniform3ui64vNV = loader.apply("glProgramUniform3ui64vNV");
        HANDLE$glProgramUniform3ui64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniform3ui64vNV, Descriptors.DESCRIPTOR$glProgramUniform3ui64vNV);
        SEGMENT$glProgramUniform4i64NV = loader.apply("glProgramUniform4i64NV");
        HANDLE$glProgramUniform4i64NV = RawFunctionLoader.link(SEGMENT$glProgramUniform4i64NV, Descriptors.DESCRIPTOR$glProgramUniform4i64NV);
        SEGMENT$glProgramUniform4i64vNV = loader.apply("glProgramUniform4i64vNV");
        HANDLE$glProgramUniform4i64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniform4i64vNV, Descriptors.DESCRIPTOR$glProgramUniform4i64vNV);
        SEGMENT$glProgramUniform4ui64NV = loader.apply("glProgramUniform4ui64NV");
        HANDLE$glProgramUniform4ui64NV = RawFunctionLoader.link(SEGMENT$glProgramUniform4ui64NV, Descriptors.DESCRIPTOR$glProgramUniform4ui64NV);
        SEGMENT$glProgramUniform4ui64vNV = loader.apply("glProgramUniform4ui64vNV");
        HANDLE$glProgramUniform4ui64vNV = RawFunctionLoader.link(SEGMENT$glProgramUniform4ui64vNV, Descriptors.DESCRIPTOR$glProgramUniform4ui64vNV);
        SEGMENT$glProvokingVertexEXT = loader.apply("glProvokingVertexEXT");
        HANDLE$glProvokingVertexEXT = RawFunctionLoader.link(SEGMENT$glProvokingVertexEXT, Descriptors.DESCRIPTOR$glProvokingVertexEXT);
        SEGMENT$glPushAttrib = loader.apply("glPushAttrib");
        HANDLE$glPushAttrib = RawFunctionLoader.link(SEGMENT$glPushAttrib, Descriptors.DESCRIPTOR$glPushAttrib);
        SEGMENT$glPushClientAttrib = loader.apply("glPushClientAttrib");
        HANDLE$glPushClientAttrib = RawFunctionLoader.link(SEGMENT$glPushClientAttrib, Descriptors.DESCRIPTOR$glPushClientAttrib);
        SEGMENT$glPushMatrix = loader.apply("glPushMatrix");
        HANDLE$glPushMatrix = RawFunctionLoader.link(SEGMENT$glPushMatrix, Descriptors.DESCRIPTOR$glPushMatrix);
        SEGMENT$glPushName = loader.apply("glPushName");
        HANDLE$glPushName = RawFunctionLoader.link(SEGMENT$glPushName, Descriptors.DESCRIPTOR$glPushName);
        SEGMENT$glQueryObjectParameteruiAMD = loader.apply("glQueryObjectParameteruiAMD");
        HANDLE$glQueryObjectParameteruiAMD = RawFunctionLoader.link(SEGMENT$glQueryObjectParameteruiAMD, Descriptors.DESCRIPTOR$glQueryObjectParameteruiAMD);
        SEGMENT$glQueryResourceNV = loader.apply("glQueryResourceNV");
        HANDLE$glQueryResourceNV = RawFunctionLoader.link(SEGMENT$glQueryResourceNV, Descriptors.DESCRIPTOR$glQueryResourceNV);
        SEGMENT$glQueryResourceTagNV = loader.apply("glQueryResourceTagNV");
        HANDLE$glQueryResourceTagNV = RawFunctionLoader.link(SEGMENT$glQueryResourceTagNV, Descriptors.DESCRIPTOR$glQueryResourceTagNV);
        SEGMENT$glRasterPos2d = loader.apply("glRasterPos2d");
        HANDLE$glRasterPos2d = RawFunctionLoader.link(SEGMENT$glRasterPos2d, Descriptors.DESCRIPTOR$glRasterPos2d);
        SEGMENT$glRasterPos2dv = loader.apply("glRasterPos2dv");
        HANDLE$glRasterPos2dv = RawFunctionLoader.link(SEGMENT$glRasterPos2dv, Descriptors.DESCRIPTOR$glRasterPos2dv);
        SEGMENT$glRasterPos2f = loader.apply("glRasterPos2f");
        HANDLE$glRasterPos2f = RawFunctionLoader.link(SEGMENT$glRasterPos2f, Descriptors.DESCRIPTOR$glRasterPos2f);
        SEGMENT$glRasterPos2fv = loader.apply("glRasterPos2fv");
        HANDLE$glRasterPos2fv = RawFunctionLoader.link(SEGMENT$glRasterPos2fv, Descriptors.DESCRIPTOR$glRasterPos2fv);
        SEGMENT$glRasterPos2i = loader.apply("glRasterPos2i");
        HANDLE$glRasterPos2i = RawFunctionLoader.link(SEGMENT$glRasterPos2i, Descriptors.DESCRIPTOR$glRasterPos2i);
        SEGMENT$glRasterPos2iv = loader.apply("glRasterPos2iv");
        HANDLE$glRasterPos2iv = RawFunctionLoader.link(SEGMENT$glRasterPos2iv, Descriptors.DESCRIPTOR$glRasterPos2iv);
        SEGMENT$glRasterPos2s = loader.apply("glRasterPos2s");
        HANDLE$glRasterPos2s = RawFunctionLoader.link(SEGMENT$glRasterPos2s, Descriptors.DESCRIPTOR$glRasterPos2s);
        SEGMENT$glRasterPos2sv = loader.apply("glRasterPos2sv");
        HANDLE$glRasterPos2sv = RawFunctionLoader.link(SEGMENT$glRasterPos2sv, Descriptors.DESCRIPTOR$glRasterPos2sv);
        SEGMENT$glRasterPos3d = loader.apply("glRasterPos3d");
        HANDLE$glRasterPos3d = RawFunctionLoader.link(SEGMENT$glRasterPos3d, Descriptors.DESCRIPTOR$glRasterPos3d);
        SEGMENT$glRasterPos3dv = loader.apply("glRasterPos3dv");
        HANDLE$glRasterPos3dv = RawFunctionLoader.link(SEGMENT$glRasterPos3dv, Descriptors.DESCRIPTOR$glRasterPos3dv);
        SEGMENT$glRasterPos3f = loader.apply("glRasterPos3f");
        HANDLE$glRasterPos3f = RawFunctionLoader.link(SEGMENT$glRasterPos3f, Descriptors.DESCRIPTOR$glRasterPos3f);
        SEGMENT$glRasterPos3fv = loader.apply("glRasterPos3fv");
        HANDLE$glRasterPos3fv = RawFunctionLoader.link(SEGMENT$glRasterPos3fv, Descriptors.DESCRIPTOR$glRasterPos3fv);
        SEGMENT$glRasterPos3i = loader.apply("glRasterPos3i");
        HANDLE$glRasterPos3i = RawFunctionLoader.link(SEGMENT$glRasterPos3i, Descriptors.DESCRIPTOR$glRasterPos3i);
        SEGMENT$glRasterPos3iv = loader.apply("glRasterPos3iv");
        HANDLE$glRasterPos3iv = RawFunctionLoader.link(SEGMENT$glRasterPos3iv, Descriptors.DESCRIPTOR$glRasterPos3iv);
        SEGMENT$glRasterPos3s = loader.apply("glRasterPos3s");
        HANDLE$glRasterPos3s = RawFunctionLoader.link(SEGMENT$glRasterPos3s, Descriptors.DESCRIPTOR$glRasterPos3s);
        SEGMENT$glRasterPos3sv = loader.apply("glRasterPos3sv");
        HANDLE$glRasterPos3sv = RawFunctionLoader.link(SEGMENT$glRasterPos3sv, Descriptors.DESCRIPTOR$glRasterPos3sv);
        SEGMENT$glRasterPos4d = loader.apply("glRasterPos4d");
        HANDLE$glRasterPos4d = RawFunctionLoader.link(SEGMENT$glRasterPos4d, Descriptors.DESCRIPTOR$glRasterPos4d);
        SEGMENT$glRasterPos4dv = loader.apply("glRasterPos4dv");
        HANDLE$glRasterPos4dv = RawFunctionLoader.link(SEGMENT$glRasterPos4dv, Descriptors.DESCRIPTOR$glRasterPos4dv);
        SEGMENT$glRasterPos4f = loader.apply("glRasterPos4f");
        HANDLE$glRasterPos4f = RawFunctionLoader.link(SEGMENT$glRasterPos4f, Descriptors.DESCRIPTOR$glRasterPos4f);
        SEGMENT$glRasterPos4fv = loader.apply("glRasterPos4fv");
        HANDLE$glRasterPos4fv = RawFunctionLoader.link(SEGMENT$glRasterPos4fv, Descriptors.DESCRIPTOR$glRasterPos4fv);
        SEGMENT$glRasterPos4i = loader.apply("glRasterPos4i");
        HANDLE$glRasterPos4i = RawFunctionLoader.link(SEGMENT$glRasterPos4i, Descriptors.DESCRIPTOR$glRasterPos4i);
        SEGMENT$glRasterPos4iv = loader.apply("glRasterPos4iv");
        HANDLE$glRasterPos4iv = RawFunctionLoader.link(SEGMENT$glRasterPos4iv, Descriptors.DESCRIPTOR$glRasterPos4iv);
        SEGMENT$glRasterPos4s = loader.apply("glRasterPos4s");
        HANDLE$glRasterPos4s = RawFunctionLoader.link(SEGMENT$glRasterPos4s, Descriptors.DESCRIPTOR$glRasterPos4s);
        SEGMENT$glRasterPos4sv = loader.apply("glRasterPos4sv");
        HANDLE$glRasterPos4sv = RawFunctionLoader.link(SEGMENT$glRasterPos4sv, Descriptors.DESCRIPTOR$glRasterPos4sv);
        SEGMENT$glRectd = loader.apply("glRectd");
        HANDLE$glRectd = RawFunctionLoader.link(SEGMENT$glRectd, Descriptors.DESCRIPTOR$glRectd);
        SEGMENT$glRectdv = loader.apply("glRectdv");
        HANDLE$glRectdv = RawFunctionLoader.link(SEGMENT$glRectdv, Descriptors.DESCRIPTOR$glRectdv);
        SEGMENT$glRectf = loader.apply("glRectf");
        HANDLE$glRectf = RawFunctionLoader.link(SEGMENT$glRectf, Descriptors.DESCRIPTOR$glRectf);
        SEGMENT$glRectfv = loader.apply("glRectfv");
        HANDLE$glRectfv = RawFunctionLoader.link(SEGMENT$glRectfv, Descriptors.DESCRIPTOR$glRectfv);
        SEGMENT$glRecti = loader.apply("glRecti");
        HANDLE$glRecti = RawFunctionLoader.link(SEGMENT$glRecti, Descriptors.DESCRIPTOR$glRecti);
        SEGMENT$glRectiv = loader.apply("glRectiv");
        HANDLE$glRectiv = RawFunctionLoader.link(SEGMENT$glRectiv, Descriptors.DESCRIPTOR$glRectiv);
        SEGMENT$glRects = loader.apply("glRects");
        HANDLE$glRects = RawFunctionLoader.link(SEGMENT$glRects, Descriptors.DESCRIPTOR$glRects);
        SEGMENT$glRectsv = loader.apply("glRectsv");
        HANDLE$glRectsv = RawFunctionLoader.link(SEGMENT$glRectsv, Descriptors.DESCRIPTOR$glRectsv);
        SEGMENT$glReleaseKeyedMutexWin32EXT = loader.apply("glReleaseKeyedMutexWin32EXT");
        HANDLE$glReleaseKeyedMutexWin32EXT = RawFunctionLoader.link(SEGMENT$glReleaseKeyedMutexWin32EXT, Descriptors.DESCRIPTOR$glReleaseKeyedMutexWin32EXT);
        SEGMENT$glRenderGpuMaskNV = loader.apply("glRenderGpuMaskNV");
        HANDLE$glRenderGpuMaskNV = RawFunctionLoader.link(SEGMENT$glRenderGpuMaskNV, Descriptors.DESCRIPTOR$glRenderGpuMaskNV);
        SEGMENT$glRenderMode = loader.apply("glRenderMode");
        HANDLE$glRenderMode = RawFunctionLoader.link(SEGMENT$glRenderMode, Descriptors.DESCRIPTOR$glRenderMode);
        SEGMENT$glRenderbufferStorageEXT = loader.apply("glRenderbufferStorageEXT");
        HANDLE$glRenderbufferStorageEXT = RawFunctionLoader.link(SEGMENT$glRenderbufferStorageEXT, Descriptors.DESCRIPTOR$glRenderbufferStorageEXT);
        SEGMENT$glRenderbufferStorageMultisampleEXT = loader.apply("glRenderbufferStorageMultisampleEXT");
        HANDLE$glRenderbufferStorageMultisampleEXT = RawFunctionLoader.link(SEGMENT$glRenderbufferStorageMultisampleEXT, Descriptors.DESCRIPTOR$glRenderbufferStorageMultisampleEXT);
        SEGMENT$glResetHistogram = loader.apply("glResetHistogram");
        HANDLE$glResetHistogram = RawFunctionLoader.link(SEGMENT$glResetHistogram, Descriptors.DESCRIPTOR$glResetHistogram);
        SEGMENT$glResetMinmax = loader.apply("glResetMinmax");
        HANDLE$glResetMinmax = RawFunctionLoader.link(SEGMENT$glResetMinmax, Descriptors.DESCRIPTOR$glResetMinmax);
        SEGMENT$glResumeTransformFeedbackNV = loader.apply("glResumeTransformFeedbackNV");
        HANDLE$glResumeTransformFeedbackNV = RawFunctionLoader.link(SEGMENT$glResumeTransformFeedbackNV, Descriptors.DESCRIPTOR$glResumeTransformFeedbackNV);
        SEGMENT$glRotated = loader.apply("glRotated");
        HANDLE$glRotated = RawFunctionLoader.link(SEGMENT$glRotated, Descriptors.DESCRIPTOR$glRotated);
        SEGMENT$glRotatef = loader.apply("glRotatef");
        HANDLE$glRotatef = RawFunctionLoader.link(SEGMENT$glRotatef, Descriptors.DESCRIPTOR$glRotatef);
        SEGMENT$glSampleCoverageARB = loader.apply("glSampleCoverageARB");
        HANDLE$glSampleCoverageARB = RawFunctionLoader.link(SEGMENT$glSampleCoverageARB, Descriptors.DESCRIPTOR$glSampleCoverageARB);
        SEGMENT$glSampleMaskIndexedNV = loader.apply("glSampleMaskIndexedNV");
        HANDLE$glSampleMaskIndexedNV = RawFunctionLoader.link(SEGMENT$glSampleMaskIndexedNV, Descriptors.DESCRIPTOR$glSampleMaskIndexedNV);
        SEGMENT$glScaled = loader.apply("glScaled");
        HANDLE$glScaled = RawFunctionLoader.link(SEGMENT$glScaled, Descriptors.DESCRIPTOR$glScaled);
        SEGMENT$glScalef = loader.apply("glScalef");
        HANDLE$glScalef = RawFunctionLoader.link(SEGMENT$glScalef, Descriptors.DESCRIPTOR$glScalef);
        SEGMENT$glSecondaryColor3b = loader.apply("glSecondaryColor3b");
        HANDLE$glSecondaryColor3b = RawFunctionLoader.link(SEGMENT$glSecondaryColor3b, Descriptors.DESCRIPTOR$glSecondaryColor3b);
        SEGMENT$glSecondaryColor3bEXT = loader.apply("glSecondaryColor3bEXT");
        HANDLE$glSecondaryColor3bEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3bEXT, Descriptors.DESCRIPTOR$glSecondaryColor3bEXT);
        SEGMENT$glSecondaryColor3bv = loader.apply("glSecondaryColor3bv");
        HANDLE$glSecondaryColor3bv = RawFunctionLoader.link(SEGMENT$glSecondaryColor3bv, Descriptors.DESCRIPTOR$glSecondaryColor3bv);
        SEGMENT$glSecondaryColor3bvEXT = loader.apply("glSecondaryColor3bvEXT");
        HANDLE$glSecondaryColor3bvEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3bvEXT, Descriptors.DESCRIPTOR$glSecondaryColor3bvEXT);
        SEGMENT$glSecondaryColor3d = loader.apply("glSecondaryColor3d");
        HANDLE$glSecondaryColor3d = RawFunctionLoader.link(SEGMENT$glSecondaryColor3d, Descriptors.DESCRIPTOR$glSecondaryColor3d);
        SEGMENT$glSecondaryColor3dEXT = loader.apply("glSecondaryColor3dEXT");
        HANDLE$glSecondaryColor3dEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3dEXT, Descriptors.DESCRIPTOR$glSecondaryColor3dEXT);
        SEGMENT$glSecondaryColor3dv = loader.apply("glSecondaryColor3dv");
        HANDLE$glSecondaryColor3dv = RawFunctionLoader.link(SEGMENT$glSecondaryColor3dv, Descriptors.DESCRIPTOR$glSecondaryColor3dv);
        SEGMENT$glSecondaryColor3dvEXT = loader.apply("glSecondaryColor3dvEXT");
        HANDLE$glSecondaryColor3dvEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3dvEXT, Descriptors.DESCRIPTOR$glSecondaryColor3dvEXT);
        SEGMENT$glSecondaryColor3f = loader.apply("glSecondaryColor3f");
        HANDLE$glSecondaryColor3f = RawFunctionLoader.link(SEGMENT$glSecondaryColor3f, Descriptors.DESCRIPTOR$glSecondaryColor3f);
        SEGMENT$glSecondaryColor3fEXT = loader.apply("glSecondaryColor3fEXT");
        HANDLE$glSecondaryColor3fEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3fEXT, Descriptors.DESCRIPTOR$glSecondaryColor3fEXT);
        SEGMENT$glSecondaryColor3fv = loader.apply("glSecondaryColor3fv");
        HANDLE$glSecondaryColor3fv = RawFunctionLoader.link(SEGMENT$glSecondaryColor3fv, Descriptors.DESCRIPTOR$glSecondaryColor3fv);
        SEGMENT$glSecondaryColor3fvEXT = loader.apply("glSecondaryColor3fvEXT");
        HANDLE$glSecondaryColor3fvEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3fvEXT, Descriptors.DESCRIPTOR$glSecondaryColor3fvEXT);
        SEGMENT$glSecondaryColor3hNV = loader.apply("glSecondaryColor3hNV");
        HANDLE$glSecondaryColor3hNV = RawFunctionLoader.link(SEGMENT$glSecondaryColor3hNV, Descriptors.DESCRIPTOR$glSecondaryColor3hNV);
        SEGMENT$glSecondaryColor3hvNV = loader.apply("glSecondaryColor3hvNV");
        HANDLE$glSecondaryColor3hvNV = RawFunctionLoader.link(SEGMENT$glSecondaryColor3hvNV, Descriptors.DESCRIPTOR$glSecondaryColor3hvNV);
        SEGMENT$glSecondaryColor3i = loader.apply("glSecondaryColor3i");
        HANDLE$glSecondaryColor3i = RawFunctionLoader.link(SEGMENT$glSecondaryColor3i, Descriptors.DESCRIPTOR$glSecondaryColor3i);
        SEGMENT$glSecondaryColor3iEXT = loader.apply("glSecondaryColor3iEXT");
        HANDLE$glSecondaryColor3iEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3iEXT, Descriptors.DESCRIPTOR$glSecondaryColor3iEXT);
        SEGMENT$glSecondaryColor3iv = loader.apply("glSecondaryColor3iv");
        HANDLE$glSecondaryColor3iv = RawFunctionLoader.link(SEGMENT$glSecondaryColor3iv, Descriptors.DESCRIPTOR$glSecondaryColor3iv);
        SEGMENT$glSecondaryColor3ivEXT = loader.apply("glSecondaryColor3ivEXT");
        HANDLE$glSecondaryColor3ivEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3ivEXT, Descriptors.DESCRIPTOR$glSecondaryColor3ivEXT);
        SEGMENT$glSecondaryColor3s = loader.apply("glSecondaryColor3s");
        HANDLE$glSecondaryColor3s = RawFunctionLoader.link(SEGMENT$glSecondaryColor3s, Descriptors.DESCRIPTOR$glSecondaryColor3s);
        SEGMENT$glSecondaryColor3sEXT = loader.apply("glSecondaryColor3sEXT");
        HANDLE$glSecondaryColor3sEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3sEXT, Descriptors.DESCRIPTOR$glSecondaryColor3sEXT);
        SEGMENT$glSecondaryColor3sv = loader.apply("glSecondaryColor3sv");
        HANDLE$glSecondaryColor3sv = RawFunctionLoader.link(SEGMENT$glSecondaryColor3sv, Descriptors.DESCRIPTOR$glSecondaryColor3sv);
        SEGMENT$glSecondaryColor3svEXT = loader.apply("glSecondaryColor3svEXT");
        HANDLE$glSecondaryColor3svEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3svEXT, Descriptors.DESCRIPTOR$glSecondaryColor3svEXT);
        SEGMENT$glSecondaryColor3ub = loader.apply("glSecondaryColor3ub");
        HANDLE$glSecondaryColor3ub = RawFunctionLoader.link(SEGMENT$glSecondaryColor3ub, Descriptors.DESCRIPTOR$glSecondaryColor3ub);
        SEGMENT$glSecondaryColor3ubEXT = loader.apply("glSecondaryColor3ubEXT");
        HANDLE$glSecondaryColor3ubEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3ubEXT, Descriptors.DESCRIPTOR$glSecondaryColor3ubEXT);
        SEGMENT$glSecondaryColor3ubv = loader.apply("glSecondaryColor3ubv");
        HANDLE$glSecondaryColor3ubv = RawFunctionLoader.link(SEGMENT$glSecondaryColor3ubv, Descriptors.DESCRIPTOR$glSecondaryColor3ubv);
        SEGMENT$glSecondaryColor3ubvEXT = loader.apply("glSecondaryColor3ubvEXT");
        HANDLE$glSecondaryColor3ubvEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3ubvEXT, Descriptors.DESCRIPTOR$glSecondaryColor3ubvEXT);
        SEGMENT$glSecondaryColor3ui = loader.apply("glSecondaryColor3ui");
        HANDLE$glSecondaryColor3ui = RawFunctionLoader.link(SEGMENT$glSecondaryColor3ui, Descriptors.DESCRIPTOR$glSecondaryColor3ui);
        SEGMENT$glSecondaryColor3uiEXT = loader.apply("glSecondaryColor3uiEXT");
        HANDLE$glSecondaryColor3uiEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3uiEXT, Descriptors.DESCRIPTOR$glSecondaryColor3uiEXT);
        SEGMENT$glSecondaryColor3uiv = loader.apply("glSecondaryColor3uiv");
        HANDLE$glSecondaryColor3uiv = RawFunctionLoader.link(SEGMENT$glSecondaryColor3uiv, Descriptors.DESCRIPTOR$glSecondaryColor3uiv);
        SEGMENT$glSecondaryColor3uivEXT = loader.apply("glSecondaryColor3uivEXT");
        HANDLE$glSecondaryColor3uivEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3uivEXT, Descriptors.DESCRIPTOR$glSecondaryColor3uivEXT);
        SEGMENT$glSecondaryColor3us = loader.apply("glSecondaryColor3us");
        HANDLE$glSecondaryColor3us = RawFunctionLoader.link(SEGMENT$glSecondaryColor3us, Descriptors.DESCRIPTOR$glSecondaryColor3us);
        SEGMENT$glSecondaryColor3usEXT = loader.apply("glSecondaryColor3usEXT");
        HANDLE$glSecondaryColor3usEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3usEXT, Descriptors.DESCRIPTOR$glSecondaryColor3usEXT);
        SEGMENT$glSecondaryColor3usv = loader.apply("glSecondaryColor3usv");
        HANDLE$glSecondaryColor3usv = RawFunctionLoader.link(SEGMENT$glSecondaryColor3usv, Descriptors.DESCRIPTOR$glSecondaryColor3usv);
        SEGMENT$glSecondaryColor3usvEXT = loader.apply("glSecondaryColor3usvEXT");
        HANDLE$glSecondaryColor3usvEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColor3usvEXT, Descriptors.DESCRIPTOR$glSecondaryColor3usvEXT);
        SEGMENT$glSecondaryColorP3ui = loader.apply("glSecondaryColorP3ui");
        HANDLE$glSecondaryColorP3ui = RawFunctionLoader.link(SEGMENT$glSecondaryColorP3ui, Descriptors.DESCRIPTOR$glSecondaryColorP3ui);
        SEGMENT$glSecondaryColorP3uiv = loader.apply("glSecondaryColorP3uiv");
        HANDLE$glSecondaryColorP3uiv = RawFunctionLoader.link(SEGMENT$glSecondaryColorP3uiv, Descriptors.DESCRIPTOR$glSecondaryColorP3uiv);
        SEGMENT$glSecondaryColorPointer = loader.apply("glSecondaryColorPointer");
        HANDLE$glSecondaryColorPointer = RawFunctionLoader.link(SEGMENT$glSecondaryColorPointer, Descriptors.DESCRIPTOR$glSecondaryColorPointer);
        SEGMENT$glSecondaryColorPointerEXT = loader.apply("glSecondaryColorPointerEXT");
        HANDLE$glSecondaryColorPointerEXT = RawFunctionLoader.link(SEGMENT$glSecondaryColorPointerEXT, Descriptors.DESCRIPTOR$glSecondaryColorPointerEXT);
        SEGMENT$glSelectBuffer = loader.apply("glSelectBuffer");
        HANDLE$glSelectBuffer = RawFunctionLoader.link(SEGMENT$glSelectBuffer, Descriptors.DESCRIPTOR$glSelectBuffer);
        SEGMENT$glSemaphoreParameterivNV = loader.apply("glSemaphoreParameterivNV");
        HANDLE$glSemaphoreParameterivNV = RawFunctionLoader.link(SEGMENT$glSemaphoreParameterivNV, Descriptors.DESCRIPTOR$glSemaphoreParameterivNV);
        SEGMENT$glSeparableFilter2D = loader.apply("glSeparableFilter2D");
        HANDLE$glSeparableFilter2D = RawFunctionLoader.link(SEGMENT$glSeparableFilter2D, Descriptors.DESCRIPTOR$glSeparableFilter2D);
        SEGMENT$glSetFenceNV = loader.apply("glSetFenceNV");
        HANDLE$glSetFenceNV = RawFunctionLoader.link(SEGMENT$glSetFenceNV, Descriptors.DESCRIPTOR$glSetFenceNV);
        SEGMENT$glSetMultisamplefvAMD = loader.apply("glSetMultisamplefvAMD");
        HANDLE$glSetMultisamplefvAMD = RawFunctionLoader.link(SEGMENT$glSetMultisamplefvAMD, Descriptors.DESCRIPTOR$glSetMultisamplefvAMD);
        SEGMENT$glShadeModel = loader.apply("glShadeModel");
        HANDLE$glShadeModel = RawFunctionLoader.link(SEGMENT$glShadeModel, Descriptors.DESCRIPTOR$glShadeModel);
        SEGMENT$glShaderSourceARB = loader.apply("glShaderSourceARB");
        HANDLE$glShaderSourceARB = RawFunctionLoader.link(SEGMENT$glShaderSourceARB, Descriptors.DESCRIPTOR$glShaderSourceARB);
        SEGMENT$glSignalSemaphoreui64NVX = loader.apply("glSignalSemaphoreui64NVX");
        HANDLE$glSignalSemaphoreui64NVX = RawFunctionLoader.link(SEGMENT$glSignalSemaphoreui64NVX, Descriptors.DESCRIPTOR$glSignalSemaphoreui64NVX);
        SEGMENT$glStencilClearTagEXT = loader.apply("glStencilClearTagEXT");
        HANDLE$glStencilClearTagEXT = RawFunctionLoader.link(SEGMENT$glStencilClearTagEXT, Descriptors.DESCRIPTOR$glStencilClearTagEXT);
        SEGMENT$glStencilOpValueAMD = loader.apply("glStencilOpValueAMD");
        HANDLE$glStencilOpValueAMD = RawFunctionLoader.link(SEGMENT$glStencilOpValueAMD, Descriptors.DESCRIPTOR$glStencilOpValueAMD);
        SEGMENT$glStringMarkerGREMEDY = loader.apply("glStringMarkerGREMEDY");
        HANDLE$glStringMarkerGREMEDY = RawFunctionLoader.link(SEGMENT$glStringMarkerGREMEDY, Descriptors.DESCRIPTOR$glStringMarkerGREMEDY);
        SEGMENT$glSyncTextureINTEL = loader.apply("glSyncTextureINTEL");
        HANDLE$glSyncTextureINTEL = RawFunctionLoader.link(SEGMENT$glSyncTextureINTEL, Descriptors.DESCRIPTOR$glSyncTextureINTEL);
        SEGMENT$glTessellationFactorAMD = loader.apply("glTessellationFactorAMD");
        HANDLE$glTessellationFactorAMD = RawFunctionLoader.link(SEGMENT$glTessellationFactorAMD, Descriptors.DESCRIPTOR$glTessellationFactorAMD);
        SEGMENT$glTessellationModeAMD = loader.apply("glTessellationModeAMD");
        HANDLE$glTessellationModeAMD = RawFunctionLoader.link(SEGMENT$glTessellationModeAMD, Descriptors.DESCRIPTOR$glTessellationModeAMD);
        SEGMENT$glTestFenceNV = loader.apply("glTestFenceNV");
        HANDLE$glTestFenceNV = RawFunctionLoader.link(SEGMENT$glTestFenceNV, Descriptors.DESCRIPTOR$glTestFenceNV);
        SEGMENT$glTexBufferEXT = loader.apply("glTexBufferEXT");
        HANDLE$glTexBufferEXT = RawFunctionLoader.link(SEGMENT$glTexBufferEXT, Descriptors.DESCRIPTOR$glTexBufferEXT);
        SEGMENT$glTexCoord1d = loader.apply("glTexCoord1d");
        HANDLE$glTexCoord1d = RawFunctionLoader.link(SEGMENT$glTexCoord1d, Descriptors.DESCRIPTOR$glTexCoord1d);
        SEGMENT$glTexCoord1dv = loader.apply("glTexCoord1dv");
        HANDLE$glTexCoord1dv = RawFunctionLoader.link(SEGMENT$glTexCoord1dv, Descriptors.DESCRIPTOR$glTexCoord1dv);
        SEGMENT$glTexCoord1f = loader.apply("glTexCoord1f");
        HANDLE$glTexCoord1f = RawFunctionLoader.link(SEGMENT$glTexCoord1f, Descriptors.DESCRIPTOR$glTexCoord1f);
        SEGMENT$glTexCoord1fv = loader.apply("glTexCoord1fv");
        HANDLE$glTexCoord1fv = RawFunctionLoader.link(SEGMENT$glTexCoord1fv, Descriptors.DESCRIPTOR$glTexCoord1fv);
        SEGMENT$glTexCoord1hNV = loader.apply("glTexCoord1hNV");
        HANDLE$glTexCoord1hNV = RawFunctionLoader.link(SEGMENT$glTexCoord1hNV, Descriptors.DESCRIPTOR$glTexCoord1hNV);
        SEGMENT$glTexCoord1hvNV = loader.apply("glTexCoord1hvNV");
        HANDLE$glTexCoord1hvNV = RawFunctionLoader.link(SEGMENT$glTexCoord1hvNV, Descriptors.DESCRIPTOR$glTexCoord1hvNV);
        SEGMENT$glTexCoord1i = loader.apply("glTexCoord1i");
        HANDLE$glTexCoord1i = RawFunctionLoader.link(SEGMENT$glTexCoord1i, Descriptors.DESCRIPTOR$glTexCoord1i);
        SEGMENT$glTexCoord1iv = loader.apply("glTexCoord1iv");
        HANDLE$glTexCoord1iv = RawFunctionLoader.link(SEGMENT$glTexCoord1iv, Descriptors.DESCRIPTOR$glTexCoord1iv);
        SEGMENT$glTexCoord1s = loader.apply("glTexCoord1s");
        HANDLE$glTexCoord1s = RawFunctionLoader.link(SEGMENT$glTexCoord1s, Descriptors.DESCRIPTOR$glTexCoord1s);
        SEGMENT$glTexCoord1sv = loader.apply("glTexCoord1sv");
        HANDLE$glTexCoord1sv = RawFunctionLoader.link(SEGMENT$glTexCoord1sv, Descriptors.DESCRIPTOR$glTexCoord1sv);
        SEGMENT$glTexCoord2d = loader.apply("glTexCoord2d");
        HANDLE$glTexCoord2d = RawFunctionLoader.link(SEGMENT$glTexCoord2d, Descriptors.DESCRIPTOR$glTexCoord2d);
        SEGMENT$glTexCoord2dv = loader.apply("glTexCoord2dv");
        HANDLE$glTexCoord2dv = RawFunctionLoader.link(SEGMENT$glTexCoord2dv, Descriptors.DESCRIPTOR$glTexCoord2dv);
        SEGMENT$glTexCoord2f = loader.apply("glTexCoord2f");
        HANDLE$glTexCoord2f = RawFunctionLoader.link(SEGMENT$glTexCoord2f, Descriptors.DESCRIPTOR$glTexCoord2f);
        SEGMENT$glTexCoord2fv = loader.apply("glTexCoord2fv");
        HANDLE$glTexCoord2fv = RawFunctionLoader.link(SEGMENT$glTexCoord2fv, Descriptors.DESCRIPTOR$glTexCoord2fv);
        SEGMENT$glTexCoord2hNV = loader.apply("glTexCoord2hNV");
        HANDLE$glTexCoord2hNV = RawFunctionLoader.link(SEGMENT$glTexCoord2hNV, Descriptors.DESCRIPTOR$glTexCoord2hNV);
        SEGMENT$glTexCoord2hvNV = loader.apply("glTexCoord2hvNV");
        HANDLE$glTexCoord2hvNV = RawFunctionLoader.link(SEGMENT$glTexCoord2hvNV, Descriptors.DESCRIPTOR$glTexCoord2hvNV);
        SEGMENT$glTexCoord2i = loader.apply("glTexCoord2i");
        HANDLE$glTexCoord2i = RawFunctionLoader.link(SEGMENT$glTexCoord2i, Descriptors.DESCRIPTOR$glTexCoord2i);
        SEGMENT$glTexCoord2iv = loader.apply("glTexCoord2iv");
        HANDLE$glTexCoord2iv = RawFunctionLoader.link(SEGMENT$glTexCoord2iv, Descriptors.DESCRIPTOR$glTexCoord2iv);
        SEGMENT$glTexCoord2s = loader.apply("glTexCoord2s");
        HANDLE$glTexCoord2s = RawFunctionLoader.link(SEGMENT$glTexCoord2s, Descriptors.DESCRIPTOR$glTexCoord2s);
        SEGMENT$glTexCoord2sv = loader.apply("glTexCoord2sv");
        HANDLE$glTexCoord2sv = RawFunctionLoader.link(SEGMENT$glTexCoord2sv, Descriptors.DESCRIPTOR$glTexCoord2sv);
        SEGMENT$glTexCoord3d = loader.apply("glTexCoord3d");
        HANDLE$glTexCoord3d = RawFunctionLoader.link(SEGMENT$glTexCoord3d, Descriptors.DESCRIPTOR$glTexCoord3d);
        SEGMENT$glTexCoord3dv = loader.apply("glTexCoord3dv");
        HANDLE$glTexCoord3dv = RawFunctionLoader.link(SEGMENT$glTexCoord3dv, Descriptors.DESCRIPTOR$glTexCoord3dv);
        SEGMENT$glTexCoord3f = loader.apply("glTexCoord3f");
        HANDLE$glTexCoord3f = RawFunctionLoader.link(SEGMENT$glTexCoord3f, Descriptors.DESCRIPTOR$glTexCoord3f);
        SEGMENT$glTexCoord3fv = loader.apply("glTexCoord3fv");
        HANDLE$glTexCoord3fv = RawFunctionLoader.link(SEGMENT$glTexCoord3fv, Descriptors.DESCRIPTOR$glTexCoord3fv);
        SEGMENT$glTexCoord3hNV = loader.apply("glTexCoord3hNV");
        HANDLE$glTexCoord3hNV = RawFunctionLoader.link(SEGMENT$glTexCoord3hNV, Descriptors.DESCRIPTOR$glTexCoord3hNV);
        SEGMENT$glTexCoord3hvNV = loader.apply("glTexCoord3hvNV");
        HANDLE$glTexCoord3hvNV = RawFunctionLoader.link(SEGMENT$glTexCoord3hvNV, Descriptors.DESCRIPTOR$glTexCoord3hvNV);
        SEGMENT$glTexCoord3i = loader.apply("glTexCoord3i");
        HANDLE$glTexCoord3i = RawFunctionLoader.link(SEGMENT$glTexCoord3i, Descriptors.DESCRIPTOR$glTexCoord3i);
        SEGMENT$glTexCoord3iv = loader.apply("glTexCoord3iv");
        HANDLE$glTexCoord3iv = RawFunctionLoader.link(SEGMENT$glTexCoord3iv, Descriptors.DESCRIPTOR$glTexCoord3iv);
        SEGMENT$glTexCoord3s = loader.apply("glTexCoord3s");
        HANDLE$glTexCoord3s = RawFunctionLoader.link(SEGMENT$glTexCoord3s, Descriptors.DESCRIPTOR$glTexCoord3s);
        SEGMENT$glTexCoord3sv = loader.apply("glTexCoord3sv");
        HANDLE$glTexCoord3sv = RawFunctionLoader.link(SEGMENT$glTexCoord3sv, Descriptors.DESCRIPTOR$glTexCoord3sv);
        SEGMENT$glTexCoord4d = loader.apply("glTexCoord4d");
        HANDLE$glTexCoord4d = RawFunctionLoader.link(SEGMENT$glTexCoord4d, Descriptors.DESCRIPTOR$glTexCoord4d);
        SEGMENT$glTexCoord4dv = loader.apply("glTexCoord4dv");
        HANDLE$glTexCoord4dv = RawFunctionLoader.link(SEGMENT$glTexCoord4dv, Descriptors.DESCRIPTOR$glTexCoord4dv);
        SEGMENT$glTexCoord4f = loader.apply("glTexCoord4f");
        HANDLE$glTexCoord4f = RawFunctionLoader.link(SEGMENT$glTexCoord4f, Descriptors.DESCRIPTOR$glTexCoord4f);
        SEGMENT$glTexCoord4fv = loader.apply("glTexCoord4fv");
        HANDLE$glTexCoord4fv = RawFunctionLoader.link(SEGMENT$glTexCoord4fv, Descriptors.DESCRIPTOR$glTexCoord4fv);
        SEGMENT$glTexCoord4hNV = loader.apply("glTexCoord4hNV");
        HANDLE$glTexCoord4hNV = RawFunctionLoader.link(SEGMENT$glTexCoord4hNV, Descriptors.DESCRIPTOR$glTexCoord4hNV);
        SEGMENT$glTexCoord4hvNV = loader.apply("glTexCoord4hvNV");
        HANDLE$glTexCoord4hvNV = RawFunctionLoader.link(SEGMENT$glTexCoord4hvNV, Descriptors.DESCRIPTOR$glTexCoord4hvNV);
        SEGMENT$glTexCoord4i = loader.apply("glTexCoord4i");
        HANDLE$glTexCoord4i = RawFunctionLoader.link(SEGMENT$glTexCoord4i, Descriptors.DESCRIPTOR$glTexCoord4i);
        SEGMENT$glTexCoord4iv = loader.apply("glTexCoord4iv");
        HANDLE$glTexCoord4iv = RawFunctionLoader.link(SEGMENT$glTexCoord4iv, Descriptors.DESCRIPTOR$glTexCoord4iv);
        SEGMENT$glTexCoord4s = loader.apply("glTexCoord4s");
        HANDLE$glTexCoord4s = RawFunctionLoader.link(SEGMENT$glTexCoord4s, Descriptors.DESCRIPTOR$glTexCoord4s);
        SEGMENT$glTexCoord4sv = loader.apply("glTexCoord4sv");
        HANDLE$glTexCoord4sv = RawFunctionLoader.link(SEGMENT$glTexCoord4sv, Descriptors.DESCRIPTOR$glTexCoord4sv);
        SEGMENT$glTexCoordP1ui = loader.apply("glTexCoordP1ui");
        HANDLE$glTexCoordP1ui = RawFunctionLoader.link(SEGMENT$glTexCoordP1ui, Descriptors.DESCRIPTOR$glTexCoordP1ui);
        SEGMENT$glTexCoordP1uiv = loader.apply("glTexCoordP1uiv");
        HANDLE$glTexCoordP1uiv = RawFunctionLoader.link(SEGMENT$glTexCoordP1uiv, Descriptors.DESCRIPTOR$glTexCoordP1uiv);
        SEGMENT$glTexCoordP2ui = loader.apply("glTexCoordP2ui");
        HANDLE$glTexCoordP2ui = RawFunctionLoader.link(SEGMENT$glTexCoordP2ui, Descriptors.DESCRIPTOR$glTexCoordP2ui);
        SEGMENT$glTexCoordP2uiv = loader.apply("glTexCoordP2uiv");
        HANDLE$glTexCoordP2uiv = RawFunctionLoader.link(SEGMENT$glTexCoordP2uiv, Descriptors.DESCRIPTOR$glTexCoordP2uiv);
        SEGMENT$glTexCoordP3ui = loader.apply("glTexCoordP3ui");
        HANDLE$glTexCoordP3ui = RawFunctionLoader.link(SEGMENT$glTexCoordP3ui, Descriptors.DESCRIPTOR$glTexCoordP3ui);
        SEGMENT$glTexCoordP3uiv = loader.apply("glTexCoordP3uiv");
        HANDLE$glTexCoordP3uiv = RawFunctionLoader.link(SEGMENT$glTexCoordP3uiv, Descriptors.DESCRIPTOR$glTexCoordP3uiv);
        SEGMENT$glTexCoordP4ui = loader.apply("glTexCoordP4ui");
        HANDLE$glTexCoordP4ui = RawFunctionLoader.link(SEGMENT$glTexCoordP4ui, Descriptors.DESCRIPTOR$glTexCoordP4ui);
        SEGMENT$glTexCoordP4uiv = loader.apply("glTexCoordP4uiv");
        HANDLE$glTexCoordP4uiv = RawFunctionLoader.link(SEGMENT$glTexCoordP4uiv, Descriptors.DESCRIPTOR$glTexCoordP4uiv);
        SEGMENT$glTexCoordPointer = loader.apply("glTexCoordPointer");
        HANDLE$glTexCoordPointer = RawFunctionLoader.link(SEGMENT$glTexCoordPointer, Descriptors.DESCRIPTOR$glTexCoordPointer);
        SEGMENT$glTexEnvf = loader.apply("glTexEnvf");
        HANDLE$glTexEnvf = RawFunctionLoader.link(SEGMENT$glTexEnvf, Descriptors.DESCRIPTOR$glTexEnvf);
        SEGMENT$glTexEnvfv = loader.apply("glTexEnvfv");
        HANDLE$glTexEnvfv = RawFunctionLoader.link(SEGMENT$glTexEnvfv, Descriptors.DESCRIPTOR$glTexEnvfv);
        SEGMENT$glTexEnvi = loader.apply("glTexEnvi");
        HANDLE$glTexEnvi = RawFunctionLoader.link(SEGMENT$glTexEnvi, Descriptors.DESCRIPTOR$glTexEnvi);
        SEGMENT$glTexEnviv = loader.apply("glTexEnviv");
        HANDLE$glTexEnviv = RawFunctionLoader.link(SEGMENT$glTexEnviv, Descriptors.DESCRIPTOR$glTexEnviv);
        SEGMENT$glTexGend = loader.apply("glTexGend");
        HANDLE$glTexGend = RawFunctionLoader.link(SEGMENT$glTexGend, Descriptors.DESCRIPTOR$glTexGend);
        SEGMENT$glTexGendv = loader.apply("glTexGendv");
        HANDLE$glTexGendv = RawFunctionLoader.link(SEGMENT$glTexGendv, Descriptors.DESCRIPTOR$glTexGendv);
        SEGMENT$glTexGenf = loader.apply("glTexGenf");
        HANDLE$glTexGenf = RawFunctionLoader.link(SEGMENT$glTexGenf, Descriptors.DESCRIPTOR$glTexGenf);
        SEGMENT$glTexGenfv = loader.apply("glTexGenfv");
        HANDLE$glTexGenfv = RawFunctionLoader.link(SEGMENT$glTexGenfv, Descriptors.DESCRIPTOR$glTexGenfv);
        SEGMENT$glTexGeni = loader.apply("glTexGeni");
        HANDLE$glTexGeni = RawFunctionLoader.link(SEGMENT$glTexGeni, Descriptors.DESCRIPTOR$glTexGeni);
        SEGMENT$glTexGeniv = loader.apply("glTexGeniv");
        HANDLE$glTexGeniv = RawFunctionLoader.link(SEGMENT$glTexGeniv, Descriptors.DESCRIPTOR$glTexGeniv);
        SEGMENT$glTexImage2DMultisampleCoverageNV = loader.apply("glTexImage2DMultisampleCoverageNV");
        HANDLE$glTexImage2DMultisampleCoverageNV = RawFunctionLoader.link(SEGMENT$glTexImage2DMultisampleCoverageNV, Descriptors.DESCRIPTOR$glTexImage2DMultisampleCoverageNV);
        SEGMENT$glTexImage3DMultisampleCoverageNV = loader.apply("glTexImage3DMultisampleCoverageNV");
        HANDLE$glTexImage3DMultisampleCoverageNV = RawFunctionLoader.link(SEGMENT$glTexImage3DMultisampleCoverageNV, Descriptors.DESCRIPTOR$glTexImage3DMultisampleCoverageNV);
        SEGMENT$glTexParameterIivEXT = loader.apply("glTexParameterIivEXT");
        HANDLE$glTexParameterIivEXT = RawFunctionLoader.link(SEGMENT$glTexParameterIivEXT, Descriptors.DESCRIPTOR$glTexParameterIivEXT);
        SEGMENT$glTexParameterIuivEXT = loader.apply("glTexParameterIuivEXT");
        HANDLE$glTexParameterIuivEXT = RawFunctionLoader.link(SEGMENT$glTexParameterIuivEXT, Descriptors.DESCRIPTOR$glTexParameterIuivEXT);
        SEGMENT$glTexRenderbufferNV = loader.apply("glTexRenderbufferNV");
        HANDLE$glTexRenderbufferNV = RawFunctionLoader.link(SEGMENT$glTexRenderbufferNV, Descriptors.DESCRIPTOR$glTexRenderbufferNV);
        SEGMENT$glTexStorageSparseAMD = loader.apply("glTexStorageSparseAMD");
        HANDLE$glTexStorageSparseAMD = RawFunctionLoader.link(SEGMENT$glTexStorageSparseAMD, Descriptors.DESCRIPTOR$glTexStorageSparseAMD);
        SEGMENT$glTextureImage2DMultisampleCoverageNV = loader.apply("glTextureImage2DMultisampleCoverageNV");
        HANDLE$glTextureImage2DMultisampleCoverageNV = RawFunctionLoader.link(SEGMENT$glTextureImage2DMultisampleCoverageNV, Descriptors.DESCRIPTOR$glTextureImage2DMultisampleCoverageNV);
        SEGMENT$glTextureImage2DMultisampleNV = loader.apply("glTextureImage2DMultisampleNV");
        HANDLE$glTextureImage2DMultisampleNV = RawFunctionLoader.link(SEGMENT$glTextureImage2DMultisampleNV, Descriptors.DESCRIPTOR$glTextureImage2DMultisampleNV);
        SEGMENT$glTextureImage3DMultisampleCoverageNV = loader.apply("glTextureImage3DMultisampleCoverageNV");
        HANDLE$glTextureImage3DMultisampleCoverageNV = RawFunctionLoader.link(SEGMENT$glTextureImage3DMultisampleCoverageNV, Descriptors.DESCRIPTOR$glTextureImage3DMultisampleCoverageNV);
        SEGMENT$glTextureImage3DMultisampleNV = loader.apply("glTextureImage3DMultisampleNV");
        HANDLE$glTextureImage3DMultisampleNV = RawFunctionLoader.link(SEGMENT$glTextureImage3DMultisampleNV, Descriptors.DESCRIPTOR$glTextureImage3DMultisampleNV);
        SEGMENT$glTextureStorageSparseAMD = loader.apply("glTextureStorageSparseAMD");
        HANDLE$glTextureStorageSparseAMD = RawFunctionLoader.link(SEGMENT$glTextureStorageSparseAMD, Descriptors.DESCRIPTOR$glTextureStorageSparseAMD);
        SEGMENT$glTransformFeedbackAttribsNV = loader.apply("glTransformFeedbackAttribsNV");
        HANDLE$glTransformFeedbackAttribsNV = RawFunctionLoader.link(SEGMENT$glTransformFeedbackAttribsNV, Descriptors.DESCRIPTOR$glTransformFeedbackAttribsNV);
        SEGMENT$glTransformFeedbackStreamAttribsNV = loader.apply("glTransformFeedbackStreamAttribsNV");
        HANDLE$glTransformFeedbackStreamAttribsNV = RawFunctionLoader.link(SEGMENT$glTransformFeedbackStreamAttribsNV, Descriptors.DESCRIPTOR$glTransformFeedbackStreamAttribsNV);
        SEGMENT$glTransformFeedbackVaryingsEXT = loader.apply("glTransformFeedbackVaryingsEXT");
        HANDLE$glTransformFeedbackVaryingsEXT = RawFunctionLoader.link(SEGMENT$glTransformFeedbackVaryingsEXT, Descriptors.DESCRIPTOR$glTransformFeedbackVaryingsEXT);
        SEGMENT$glTransformFeedbackVaryingsNV = loader.apply("glTransformFeedbackVaryingsNV");
        HANDLE$glTransformFeedbackVaryingsNV = RawFunctionLoader.link(SEGMENT$glTransformFeedbackVaryingsNV, Descriptors.DESCRIPTOR$glTransformFeedbackVaryingsNV);
        SEGMENT$glTranslated = loader.apply("glTranslated");
        HANDLE$glTranslated = RawFunctionLoader.link(SEGMENT$glTranslated, Descriptors.DESCRIPTOR$glTranslated);
        SEGMENT$glTranslatef = loader.apply("glTranslatef");
        HANDLE$glTranslatef = RawFunctionLoader.link(SEGMENT$glTranslatef, Descriptors.DESCRIPTOR$glTranslatef);
        SEGMENT$glUniform1fARB = loader.apply("glUniform1fARB");
        HANDLE$glUniform1fARB = RawFunctionLoader.link(SEGMENT$glUniform1fARB, Descriptors.DESCRIPTOR$glUniform1fARB);
        SEGMENT$glUniform1fvARB = loader.apply("glUniform1fvARB");
        HANDLE$glUniform1fvARB = RawFunctionLoader.link(SEGMENT$glUniform1fvARB, Descriptors.DESCRIPTOR$glUniform1fvARB);
        SEGMENT$glUniform1i64NV = loader.apply("glUniform1i64NV");
        HANDLE$glUniform1i64NV = RawFunctionLoader.link(SEGMENT$glUniform1i64NV, Descriptors.DESCRIPTOR$glUniform1i64NV);
        SEGMENT$glUniform1i64vNV = loader.apply("glUniform1i64vNV");
        HANDLE$glUniform1i64vNV = RawFunctionLoader.link(SEGMENT$glUniform1i64vNV, Descriptors.DESCRIPTOR$glUniform1i64vNV);
        SEGMENT$glUniform1iARB = loader.apply("glUniform1iARB");
        HANDLE$glUniform1iARB = RawFunctionLoader.link(SEGMENT$glUniform1iARB, Descriptors.DESCRIPTOR$glUniform1iARB);
        SEGMENT$glUniform1ivARB = loader.apply("glUniform1ivARB");
        HANDLE$glUniform1ivARB = RawFunctionLoader.link(SEGMENT$glUniform1ivARB, Descriptors.DESCRIPTOR$glUniform1ivARB);
        SEGMENT$glUniform1ui64NV = loader.apply("glUniform1ui64NV");
        HANDLE$glUniform1ui64NV = RawFunctionLoader.link(SEGMENT$glUniform1ui64NV, Descriptors.DESCRIPTOR$glUniform1ui64NV);
        SEGMENT$glUniform1ui64vNV = loader.apply("glUniform1ui64vNV");
        HANDLE$glUniform1ui64vNV = RawFunctionLoader.link(SEGMENT$glUniform1ui64vNV, Descriptors.DESCRIPTOR$glUniform1ui64vNV);
        SEGMENT$glUniform1uiEXT = loader.apply("glUniform1uiEXT");
        HANDLE$glUniform1uiEXT = RawFunctionLoader.link(SEGMENT$glUniform1uiEXT, Descriptors.DESCRIPTOR$glUniform1uiEXT);
        SEGMENT$glUniform1uivEXT = loader.apply("glUniform1uivEXT");
        HANDLE$glUniform1uivEXT = RawFunctionLoader.link(SEGMENT$glUniform1uivEXT, Descriptors.DESCRIPTOR$glUniform1uivEXT);
        SEGMENT$glUniform2fARB = loader.apply("glUniform2fARB");
        HANDLE$glUniform2fARB = RawFunctionLoader.link(SEGMENT$glUniform2fARB, Descriptors.DESCRIPTOR$glUniform2fARB);
        SEGMENT$glUniform2fvARB = loader.apply("glUniform2fvARB");
        HANDLE$glUniform2fvARB = RawFunctionLoader.link(SEGMENT$glUniform2fvARB, Descriptors.DESCRIPTOR$glUniform2fvARB);
        SEGMENT$glUniform2i64NV = loader.apply("glUniform2i64NV");
        HANDLE$glUniform2i64NV = RawFunctionLoader.link(SEGMENT$glUniform2i64NV, Descriptors.DESCRIPTOR$glUniform2i64NV);
        SEGMENT$glUniform2i64vNV = loader.apply("glUniform2i64vNV");
        HANDLE$glUniform2i64vNV = RawFunctionLoader.link(SEGMENT$glUniform2i64vNV, Descriptors.DESCRIPTOR$glUniform2i64vNV);
        SEGMENT$glUniform2iARB = loader.apply("glUniform2iARB");
        HANDLE$glUniform2iARB = RawFunctionLoader.link(SEGMENT$glUniform2iARB, Descriptors.DESCRIPTOR$glUniform2iARB);
        SEGMENT$glUniform2ivARB = loader.apply("glUniform2ivARB");
        HANDLE$glUniform2ivARB = RawFunctionLoader.link(SEGMENT$glUniform2ivARB, Descriptors.DESCRIPTOR$glUniform2ivARB);
        SEGMENT$glUniform2ui64NV = loader.apply("glUniform2ui64NV");
        HANDLE$glUniform2ui64NV = RawFunctionLoader.link(SEGMENT$glUniform2ui64NV, Descriptors.DESCRIPTOR$glUniform2ui64NV);
        SEGMENT$glUniform2ui64vNV = loader.apply("glUniform2ui64vNV");
        HANDLE$glUniform2ui64vNV = RawFunctionLoader.link(SEGMENT$glUniform2ui64vNV, Descriptors.DESCRIPTOR$glUniform2ui64vNV);
        SEGMENT$glUniform2uiEXT = loader.apply("glUniform2uiEXT");
        HANDLE$glUniform2uiEXT = RawFunctionLoader.link(SEGMENT$glUniform2uiEXT, Descriptors.DESCRIPTOR$glUniform2uiEXT);
        SEGMENT$glUniform2uivEXT = loader.apply("glUniform2uivEXT");
        HANDLE$glUniform2uivEXT = RawFunctionLoader.link(SEGMENT$glUniform2uivEXT, Descriptors.DESCRIPTOR$glUniform2uivEXT);
        SEGMENT$glUniform3fARB = loader.apply("glUniform3fARB");
        HANDLE$glUniform3fARB = RawFunctionLoader.link(SEGMENT$glUniform3fARB, Descriptors.DESCRIPTOR$glUniform3fARB);
        SEGMENT$glUniform3fvARB = loader.apply("glUniform3fvARB");
        HANDLE$glUniform3fvARB = RawFunctionLoader.link(SEGMENT$glUniform3fvARB, Descriptors.DESCRIPTOR$glUniform3fvARB);
        SEGMENT$glUniform3i64NV = loader.apply("glUniform3i64NV");
        HANDLE$glUniform3i64NV = RawFunctionLoader.link(SEGMENT$glUniform3i64NV, Descriptors.DESCRIPTOR$glUniform3i64NV);
        SEGMENT$glUniform3i64vNV = loader.apply("glUniform3i64vNV");
        HANDLE$glUniform3i64vNV = RawFunctionLoader.link(SEGMENT$glUniform3i64vNV, Descriptors.DESCRIPTOR$glUniform3i64vNV);
        SEGMENT$glUniform3iARB = loader.apply("glUniform3iARB");
        HANDLE$glUniform3iARB = RawFunctionLoader.link(SEGMENT$glUniform3iARB, Descriptors.DESCRIPTOR$glUniform3iARB);
        SEGMENT$glUniform3ivARB = loader.apply("glUniform3ivARB");
        HANDLE$glUniform3ivARB = RawFunctionLoader.link(SEGMENT$glUniform3ivARB, Descriptors.DESCRIPTOR$glUniform3ivARB);
        SEGMENT$glUniform3ui64NV = loader.apply("glUniform3ui64NV");
        HANDLE$glUniform3ui64NV = RawFunctionLoader.link(SEGMENT$glUniform3ui64NV, Descriptors.DESCRIPTOR$glUniform3ui64NV);
        SEGMENT$glUniform3ui64vNV = loader.apply("glUniform3ui64vNV");
        HANDLE$glUniform3ui64vNV = RawFunctionLoader.link(SEGMENT$glUniform3ui64vNV, Descriptors.DESCRIPTOR$glUniform3ui64vNV);
        SEGMENT$glUniform3uiEXT = loader.apply("glUniform3uiEXT");
        HANDLE$glUniform3uiEXT = RawFunctionLoader.link(SEGMENT$glUniform3uiEXT, Descriptors.DESCRIPTOR$glUniform3uiEXT);
        SEGMENT$glUniform3uivEXT = loader.apply("glUniform3uivEXT");
        HANDLE$glUniform3uivEXT = RawFunctionLoader.link(SEGMENT$glUniform3uivEXT, Descriptors.DESCRIPTOR$glUniform3uivEXT);
        SEGMENT$glUniform4fARB = loader.apply("glUniform4fARB");
        HANDLE$glUniform4fARB = RawFunctionLoader.link(SEGMENT$glUniform4fARB, Descriptors.DESCRIPTOR$glUniform4fARB);
        SEGMENT$glUniform4fvARB = loader.apply("glUniform4fvARB");
        HANDLE$glUniform4fvARB = RawFunctionLoader.link(SEGMENT$glUniform4fvARB, Descriptors.DESCRIPTOR$glUniform4fvARB);
        SEGMENT$glUniform4i64NV = loader.apply("glUniform4i64NV");
        HANDLE$glUniform4i64NV = RawFunctionLoader.link(SEGMENT$glUniform4i64NV, Descriptors.DESCRIPTOR$glUniform4i64NV);
        SEGMENT$glUniform4i64vNV = loader.apply("glUniform4i64vNV");
        HANDLE$glUniform4i64vNV = RawFunctionLoader.link(SEGMENT$glUniform4i64vNV, Descriptors.DESCRIPTOR$glUniform4i64vNV);
        SEGMENT$glUniform4iARB = loader.apply("glUniform4iARB");
        HANDLE$glUniform4iARB = RawFunctionLoader.link(SEGMENT$glUniform4iARB, Descriptors.DESCRIPTOR$glUniform4iARB);
        SEGMENT$glUniform4ivARB = loader.apply("glUniform4ivARB");
        HANDLE$glUniform4ivARB = RawFunctionLoader.link(SEGMENT$glUniform4ivARB, Descriptors.DESCRIPTOR$glUniform4ivARB);
        SEGMENT$glUniform4ui64NV = loader.apply("glUniform4ui64NV");
        HANDLE$glUniform4ui64NV = RawFunctionLoader.link(SEGMENT$glUniform4ui64NV, Descriptors.DESCRIPTOR$glUniform4ui64NV);
        SEGMENT$glUniform4ui64vNV = loader.apply("glUniform4ui64vNV");
        HANDLE$glUniform4ui64vNV = RawFunctionLoader.link(SEGMENT$glUniform4ui64vNV, Descriptors.DESCRIPTOR$glUniform4ui64vNV);
        SEGMENT$glUniform4uiEXT = loader.apply("glUniform4uiEXT");
        HANDLE$glUniform4uiEXT = RawFunctionLoader.link(SEGMENT$glUniform4uiEXT, Descriptors.DESCRIPTOR$glUniform4uiEXT);
        SEGMENT$glUniform4uivEXT = loader.apply("glUniform4uivEXT");
        HANDLE$glUniform4uivEXT = RawFunctionLoader.link(SEGMENT$glUniform4uivEXT, Descriptors.DESCRIPTOR$glUniform4uivEXT);
        SEGMENT$glUniformBufferEXT = loader.apply("glUniformBufferEXT");
        HANDLE$glUniformBufferEXT = RawFunctionLoader.link(SEGMENT$glUniformBufferEXT, Descriptors.DESCRIPTOR$glUniformBufferEXT);
        SEGMENT$glUniformMatrix2fvARB = loader.apply("glUniformMatrix2fvARB");
        HANDLE$glUniformMatrix2fvARB = RawFunctionLoader.link(SEGMENT$glUniformMatrix2fvARB, Descriptors.DESCRIPTOR$glUniformMatrix2fvARB);
        SEGMENT$glUniformMatrix3fvARB = loader.apply("glUniformMatrix3fvARB");
        HANDLE$glUniformMatrix3fvARB = RawFunctionLoader.link(SEGMENT$glUniformMatrix3fvARB, Descriptors.DESCRIPTOR$glUniformMatrix3fvARB);
        SEGMENT$glUniformMatrix4fvARB = loader.apply("glUniformMatrix4fvARB");
        HANDLE$glUniformMatrix4fvARB = RawFunctionLoader.link(SEGMENT$glUniformMatrix4fvARB, Descriptors.DESCRIPTOR$glUniformMatrix4fvARB);
        SEGMENT$glUnlockArraysEXT = loader.apply("glUnlockArraysEXT");
        HANDLE$glUnlockArraysEXT = RawFunctionLoader.link(SEGMENT$glUnlockArraysEXT, Descriptors.DESCRIPTOR$glUnlockArraysEXT);
        SEGMENT$glUnmapBufferARB = loader.apply("glUnmapBufferARB");
        HANDLE$glUnmapBufferARB = RawFunctionLoader.link(SEGMENT$glUnmapBufferARB, Descriptors.DESCRIPTOR$glUnmapBufferARB);
        SEGMENT$glUnmapTexture2DINTEL = loader.apply("glUnmapTexture2DINTEL");
        HANDLE$glUnmapTexture2DINTEL = RawFunctionLoader.link(SEGMENT$glUnmapTexture2DINTEL, Descriptors.DESCRIPTOR$glUnmapTexture2DINTEL);
        SEGMENT$glUploadGpuMaskNVX = loader.apply("glUploadGpuMaskNVX");
        HANDLE$glUploadGpuMaskNVX = RawFunctionLoader.link(SEGMENT$glUploadGpuMaskNVX, Descriptors.DESCRIPTOR$glUploadGpuMaskNVX);
        SEGMENT$glUseProgramObjectARB = loader.apply("glUseProgramObjectARB");
        HANDLE$glUseProgramObjectARB = RawFunctionLoader.link(SEGMENT$glUseProgramObjectARB, Descriptors.DESCRIPTOR$glUseProgramObjectARB);
        SEGMENT$glValidateProgramARB = loader.apply("glValidateProgramARB");
        HANDLE$glValidateProgramARB = RawFunctionLoader.link(SEGMENT$glValidateProgramARB, Descriptors.DESCRIPTOR$glValidateProgramARB);
        SEGMENT$glVertex2d = loader.apply("glVertex2d");
        HANDLE$glVertex2d = RawFunctionLoader.link(SEGMENT$glVertex2d, Descriptors.DESCRIPTOR$glVertex2d);
        SEGMENT$glVertex2dv = loader.apply("glVertex2dv");
        HANDLE$glVertex2dv = RawFunctionLoader.link(SEGMENT$glVertex2dv, Descriptors.DESCRIPTOR$glVertex2dv);
        SEGMENT$glVertex2f = loader.apply("glVertex2f");
        HANDLE$glVertex2f = RawFunctionLoader.link(SEGMENT$glVertex2f, Descriptors.DESCRIPTOR$glVertex2f);
        SEGMENT$glVertex2fv = loader.apply("glVertex2fv");
        HANDLE$glVertex2fv = RawFunctionLoader.link(SEGMENT$glVertex2fv, Descriptors.DESCRIPTOR$glVertex2fv);
        SEGMENT$glVertex2hNV = loader.apply("glVertex2hNV");
        HANDLE$glVertex2hNV = RawFunctionLoader.link(SEGMENT$glVertex2hNV, Descriptors.DESCRIPTOR$glVertex2hNV);
        SEGMENT$glVertex2hvNV = loader.apply("glVertex2hvNV");
        HANDLE$glVertex2hvNV = RawFunctionLoader.link(SEGMENT$glVertex2hvNV, Descriptors.DESCRIPTOR$glVertex2hvNV);
        SEGMENT$glVertex2i = loader.apply("glVertex2i");
        HANDLE$glVertex2i = RawFunctionLoader.link(SEGMENT$glVertex2i, Descriptors.DESCRIPTOR$glVertex2i);
        SEGMENT$glVertex2iv = loader.apply("glVertex2iv");
        HANDLE$glVertex2iv = RawFunctionLoader.link(SEGMENT$glVertex2iv, Descriptors.DESCRIPTOR$glVertex2iv);
        SEGMENT$glVertex2s = loader.apply("glVertex2s");
        HANDLE$glVertex2s = RawFunctionLoader.link(SEGMENT$glVertex2s, Descriptors.DESCRIPTOR$glVertex2s);
        SEGMENT$glVertex2sv = loader.apply("glVertex2sv");
        HANDLE$glVertex2sv = RawFunctionLoader.link(SEGMENT$glVertex2sv, Descriptors.DESCRIPTOR$glVertex2sv);
        SEGMENT$glVertex3d = loader.apply("glVertex3d");
        HANDLE$glVertex3d = RawFunctionLoader.link(SEGMENT$glVertex3d, Descriptors.DESCRIPTOR$glVertex3d);
        SEGMENT$glVertex3dv = loader.apply("glVertex3dv");
        HANDLE$glVertex3dv = RawFunctionLoader.link(SEGMENT$glVertex3dv, Descriptors.DESCRIPTOR$glVertex3dv);
        SEGMENT$glVertex3f = loader.apply("glVertex3f");
        HANDLE$glVertex3f = RawFunctionLoader.link(SEGMENT$glVertex3f, Descriptors.DESCRIPTOR$glVertex3f);
        SEGMENT$glVertex3fv = loader.apply("glVertex3fv");
        HANDLE$glVertex3fv = RawFunctionLoader.link(SEGMENT$glVertex3fv, Descriptors.DESCRIPTOR$glVertex3fv);
        SEGMENT$glVertex3hNV = loader.apply("glVertex3hNV");
        HANDLE$glVertex3hNV = RawFunctionLoader.link(SEGMENT$glVertex3hNV, Descriptors.DESCRIPTOR$glVertex3hNV);
        SEGMENT$glVertex3hvNV = loader.apply("glVertex3hvNV");
        HANDLE$glVertex3hvNV = RawFunctionLoader.link(SEGMENT$glVertex3hvNV, Descriptors.DESCRIPTOR$glVertex3hvNV);
        SEGMENT$glVertex3i = loader.apply("glVertex3i");
        HANDLE$glVertex3i = RawFunctionLoader.link(SEGMENT$glVertex3i, Descriptors.DESCRIPTOR$glVertex3i);
        SEGMENT$glVertex3iv = loader.apply("glVertex3iv");
        HANDLE$glVertex3iv = RawFunctionLoader.link(SEGMENT$glVertex3iv, Descriptors.DESCRIPTOR$glVertex3iv);
        SEGMENT$glVertex3s = loader.apply("glVertex3s");
        HANDLE$glVertex3s = RawFunctionLoader.link(SEGMENT$glVertex3s, Descriptors.DESCRIPTOR$glVertex3s);
        SEGMENT$glVertex3sv = loader.apply("glVertex3sv");
        HANDLE$glVertex3sv = RawFunctionLoader.link(SEGMENT$glVertex3sv, Descriptors.DESCRIPTOR$glVertex3sv);
        SEGMENT$glVertex4d = loader.apply("glVertex4d");
        HANDLE$glVertex4d = RawFunctionLoader.link(SEGMENT$glVertex4d, Descriptors.DESCRIPTOR$glVertex4d);
        SEGMENT$glVertex4dv = loader.apply("glVertex4dv");
        HANDLE$glVertex4dv = RawFunctionLoader.link(SEGMENT$glVertex4dv, Descriptors.DESCRIPTOR$glVertex4dv);
        SEGMENT$glVertex4f = loader.apply("glVertex4f");
        HANDLE$glVertex4f = RawFunctionLoader.link(SEGMENT$glVertex4f, Descriptors.DESCRIPTOR$glVertex4f);
        SEGMENT$glVertex4fv = loader.apply("glVertex4fv");
        HANDLE$glVertex4fv = RawFunctionLoader.link(SEGMENT$glVertex4fv, Descriptors.DESCRIPTOR$glVertex4fv);
        SEGMENT$glVertex4hNV = loader.apply("glVertex4hNV");
        HANDLE$glVertex4hNV = RawFunctionLoader.link(SEGMENT$glVertex4hNV, Descriptors.DESCRIPTOR$glVertex4hNV);
        SEGMENT$glVertex4hvNV = loader.apply("glVertex4hvNV");
        HANDLE$glVertex4hvNV = RawFunctionLoader.link(SEGMENT$glVertex4hvNV, Descriptors.DESCRIPTOR$glVertex4hvNV);
        SEGMENT$glVertex4i = loader.apply("glVertex4i");
        HANDLE$glVertex4i = RawFunctionLoader.link(SEGMENT$glVertex4i, Descriptors.DESCRIPTOR$glVertex4i);
        SEGMENT$glVertex4iv = loader.apply("glVertex4iv");
        HANDLE$glVertex4iv = RawFunctionLoader.link(SEGMENT$glVertex4iv, Descriptors.DESCRIPTOR$glVertex4iv);
        SEGMENT$glVertex4s = loader.apply("glVertex4s");
        HANDLE$glVertex4s = RawFunctionLoader.link(SEGMENT$glVertex4s, Descriptors.DESCRIPTOR$glVertex4s);
        SEGMENT$glVertex4sv = loader.apply("glVertex4sv");
        HANDLE$glVertex4sv = RawFunctionLoader.link(SEGMENT$glVertex4sv, Descriptors.DESCRIPTOR$glVertex4sv);
        SEGMENT$glVertexArrayRangeNV = loader.apply("glVertexArrayRangeNV");
        HANDLE$glVertexArrayRangeNV = RawFunctionLoader.link(SEGMENT$glVertexArrayRangeNV, Descriptors.DESCRIPTOR$glVertexArrayRangeNV);
        SEGMENT$glVertexAttrib1dARB = loader.apply("glVertexAttrib1dARB");
        HANDLE$glVertexAttrib1dARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib1dARB, Descriptors.DESCRIPTOR$glVertexAttrib1dARB);
        SEGMENT$glVertexAttrib1dvARB = loader.apply("glVertexAttrib1dvARB");
        HANDLE$glVertexAttrib1dvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib1dvARB, Descriptors.DESCRIPTOR$glVertexAttrib1dvARB);
        SEGMENT$glVertexAttrib1fARB = loader.apply("glVertexAttrib1fARB");
        HANDLE$glVertexAttrib1fARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib1fARB, Descriptors.DESCRIPTOR$glVertexAttrib1fARB);
        SEGMENT$glVertexAttrib1fvARB = loader.apply("glVertexAttrib1fvARB");
        HANDLE$glVertexAttrib1fvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib1fvARB, Descriptors.DESCRIPTOR$glVertexAttrib1fvARB);
        SEGMENT$glVertexAttrib1hNV = loader.apply("glVertexAttrib1hNV");
        HANDLE$glVertexAttrib1hNV = RawFunctionLoader.link(SEGMENT$glVertexAttrib1hNV, Descriptors.DESCRIPTOR$glVertexAttrib1hNV);
        SEGMENT$glVertexAttrib1hvNV = loader.apply("glVertexAttrib1hvNV");
        HANDLE$glVertexAttrib1hvNV = RawFunctionLoader.link(SEGMENT$glVertexAttrib1hvNV, Descriptors.DESCRIPTOR$glVertexAttrib1hvNV);
        SEGMENT$glVertexAttrib1sARB = loader.apply("glVertexAttrib1sARB");
        HANDLE$glVertexAttrib1sARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib1sARB, Descriptors.DESCRIPTOR$glVertexAttrib1sARB);
        SEGMENT$glVertexAttrib1svARB = loader.apply("glVertexAttrib1svARB");
        HANDLE$glVertexAttrib1svARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib1svARB, Descriptors.DESCRIPTOR$glVertexAttrib1svARB);
        SEGMENT$glVertexAttrib2dARB = loader.apply("glVertexAttrib2dARB");
        HANDLE$glVertexAttrib2dARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib2dARB, Descriptors.DESCRIPTOR$glVertexAttrib2dARB);
        SEGMENT$glVertexAttrib2dvARB = loader.apply("glVertexAttrib2dvARB");
        HANDLE$glVertexAttrib2dvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib2dvARB, Descriptors.DESCRIPTOR$glVertexAttrib2dvARB);
        SEGMENT$glVertexAttrib2fARB = loader.apply("glVertexAttrib2fARB");
        HANDLE$glVertexAttrib2fARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib2fARB, Descriptors.DESCRIPTOR$glVertexAttrib2fARB);
        SEGMENT$glVertexAttrib2fvARB = loader.apply("glVertexAttrib2fvARB");
        HANDLE$glVertexAttrib2fvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib2fvARB, Descriptors.DESCRIPTOR$glVertexAttrib2fvARB);
        SEGMENT$glVertexAttrib2hNV = loader.apply("glVertexAttrib2hNV");
        HANDLE$glVertexAttrib2hNV = RawFunctionLoader.link(SEGMENT$glVertexAttrib2hNV, Descriptors.DESCRIPTOR$glVertexAttrib2hNV);
        SEGMENT$glVertexAttrib2hvNV = loader.apply("glVertexAttrib2hvNV");
        HANDLE$glVertexAttrib2hvNV = RawFunctionLoader.link(SEGMENT$glVertexAttrib2hvNV, Descriptors.DESCRIPTOR$glVertexAttrib2hvNV);
        SEGMENT$glVertexAttrib2sARB = loader.apply("glVertexAttrib2sARB");
        HANDLE$glVertexAttrib2sARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib2sARB, Descriptors.DESCRIPTOR$glVertexAttrib2sARB);
        SEGMENT$glVertexAttrib2svARB = loader.apply("glVertexAttrib2svARB");
        HANDLE$glVertexAttrib2svARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib2svARB, Descriptors.DESCRIPTOR$glVertexAttrib2svARB);
        SEGMENT$glVertexAttrib3dARB = loader.apply("glVertexAttrib3dARB");
        HANDLE$glVertexAttrib3dARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib3dARB, Descriptors.DESCRIPTOR$glVertexAttrib3dARB);
        SEGMENT$glVertexAttrib3dvARB = loader.apply("glVertexAttrib3dvARB");
        HANDLE$glVertexAttrib3dvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib3dvARB, Descriptors.DESCRIPTOR$glVertexAttrib3dvARB);
        SEGMENT$glVertexAttrib3fARB = loader.apply("glVertexAttrib3fARB");
        HANDLE$glVertexAttrib3fARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib3fARB, Descriptors.DESCRIPTOR$glVertexAttrib3fARB);
        SEGMENT$glVertexAttrib3fvARB = loader.apply("glVertexAttrib3fvARB");
        HANDLE$glVertexAttrib3fvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib3fvARB, Descriptors.DESCRIPTOR$glVertexAttrib3fvARB);
        SEGMENT$glVertexAttrib3hNV = loader.apply("glVertexAttrib3hNV");
        HANDLE$glVertexAttrib3hNV = RawFunctionLoader.link(SEGMENT$glVertexAttrib3hNV, Descriptors.DESCRIPTOR$glVertexAttrib3hNV);
        SEGMENT$glVertexAttrib3hvNV = loader.apply("glVertexAttrib3hvNV");
        HANDLE$glVertexAttrib3hvNV = RawFunctionLoader.link(SEGMENT$glVertexAttrib3hvNV, Descriptors.DESCRIPTOR$glVertexAttrib3hvNV);
        SEGMENT$glVertexAttrib3sARB = loader.apply("glVertexAttrib3sARB");
        HANDLE$glVertexAttrib3sARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib3sARB, Descriptors.DESCRIPTOR$glVertexAttrib3sARB);
        SEGMENT$glVertexAttrib3svARB = loader.apply("glVertexAttrib3svARB");
        HANDLE$glVertexAttrib3svARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib3svARB, Descriptors.DESCRIPTOR$glVertexAttrib3svARB);
        SEGMENT$glVertexAttrib4NbvARB = loader.apply("glVertexAttrib4NbvARB");
        HANDLE$glVertexAttrib4NbvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4NbvARB, Descriptors.DESCRIPTOR$glVertexAttrib4NbvARB);
        SEGMENT$glVertexAttrib4NivARB = loader.apply("glVertexAttrib4NivARB");
        HANDLE$glVertexAttrib4NivARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4NivARB, Descriptors.DESCRIPTOR$glVertexAttrib4NivARB);
        SEGMENT$glVertexAttrib4NsvARB = loader.apply("glVertexAttrib4NsvARB");
        HANDLE$glVertexAttrib4NsvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4NsvARB, Descriptors.DESCRIPTOR$glVertexAttrib4NsvARB);
        SEGMENT$glVertexAttrib4NubARB = loader.apply("glVertexAttrib4NubARB");
        HANDLE$glVertexAttrib4NubARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4NubARB, Descriptors.DESCRIPTOR$glVertexAttrib4NubARB);
        SEGMENT$glVertexAttrib4NubvARB = loader.apply("glVertexAttrib4NubvARB");
        HANDLE$glVertexAttrib4NubvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4NubvARB, Descriptors.DESCRIPTOR$glVertexAttrib4NubvARB);
        SEGMENT$glVertexAttrib4NuivARB = loader.apply("glVertexAttrib4NuivARB");
        HANDLE$glVertexAttrib4NuivARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4NuivARB, Descriptors.DESCRIPTOR$glVertexAttrib4NuivARB);
        SEGMENT$glVertexAttrib4NusvARB = loader.apply("glVertexAttrib4NusvARB");
        HANDLE$glVertexAttrib4NusvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4NusvARB, Descriptors.DESCRIPTOR$glVertexAttrib4NusvARB);
        SEGMENT$glVertexAttrib4bvARB = loader.apply("glVertexAttrib4bvARB");
        HANDLE$glVertexAttrib4bvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4bvARB, Descriptors.DESCRIPTOR$glVertexAttrib4bvARB);
        SEGMENT$glVertexAttrib4dARB = loader.apply("glVertexAttrib4dARB");
        HANDLE$glVertexAttrib4dARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4dARB, Descriptors.DESCRIPTOR$glVertexAttrib4dARB);
        SEGMENT$glVertexAttrib4dvARB = loader.apply("glVertexAttrib4dvARB");
        HANDLE$glVertexAttrib4dvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4dvARB, Descriptors.DESCRIPTOR$glVertexAttrib4dvARB);
        SEGMENT$glVertexAttrib4fARB = loader.apply("glVertexAttrib4fARB");
        HANDLE$glVertexAttrib4fARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4fARB, Descriptors.DESCRIPTOR$glVertexAttrib4fARB);
        SEGMENT$glVertexAttrib4fvARB = loader.apply("glVertexAttrib4fvARB");
        HANDLE$glVertexAttrib4fvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4fvARB, Descriptors.DESCRIPTOR$glVertexAttrib4fvARB);
        SEGMENT$glVertexAttrib4hNV = loader.apply("glVertexAttrib4hNV");
        HANDLE$glVertexAttrib4hNV = RawFunctionLoader.link(SEGMENT$glVertexAttrib4hNV, Descriptors.DESCRIPTOR$glVertexAttrib4hNV);
        SEGMENT$glVertexAttrib4hvNV = loader.apply("glVertexAttrib4hvNV");
        HANDLE$glVertexAttrib4hvNV = RawFunctionLoader.link(SEGMENT$glVertexAttrib4hvNV, Descriptors.DESCRIPTOR$glVertexAttrib4hvNV);
        SEGMENT$glVertexAttrib4ivARB = loader.apply("glVertexAttrib4ivARB");
        HANDLE$glVertexAttrib4ivARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4ivARB, Descriptors.DESCRIPTOR$glVertexAttrib4ivARB);
        SEGMENT$glVertexAttrib4sARB = loader.apply("glVertexAttrib4sARB");
        HANDLE$glVertexAttrib4sARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4sARB, Descriptors.DESCRIPTOR$glVertexAttrib4sARB);
        SEGMENT$glVertexAttrib4svARB = loader.apply("glVertexAttrib4svARB");
        HANDLE$glVertexAttrib4svARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4svARB, Descriptors.DESCRIPTOR$glVertexAttrib4svARB);
        SEGMENT$glVertexAttrib4ubvARB = loader.apply("glVertexAttrib4ubvARB");
        HANDLE$glVertexAttrib4ubvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4ubvARB, Descriptors.DESCRIPTOR$glVertexAttrib4ubvARB);
        SEGMENT$glVertexAttrib4uivARB = loader.apply("glVertexAttrib4uivARB");
        HANDLE$glVertexAttrib4uivARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4uivARB, Descriptors.DESCRIPTOR$glVertexAttrib4uivARB);
        SEGMENT$glVertexAttrib4usvARB = loader.apply("glVertexAttrib4usvARB");
        HANDLE$glVertexAttrib4usvARB = RawFunctionLoader.link(SEGMENT$glVertexAttrib4usvARB, Descriptors.DESCRIPTOR$glVertexAttrib4usvARB);
        SEGMENT$glVertexAttribI1iEXT = loader.apply("glVertexAttribI1iEXT");
        HANDLE$glVertexAttribI1iEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI1iEXT, Descriptors.DESCRIPTOR$glVertexAttribI1iEXT);
        SEGMENT$glVertexAttribI1ivEXT = loader.apply("glVertexAttribI1ivEXT");
        HANDLE$glVertexAttribI1ivEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI1ivEXT, Descriptors.DESCRIPTOR$glVertexAttribI1ivEXT);
        SEGMENT$glVertexAttribI1uiEXT = loader.apply("glVertexAttribI1uiEXT");
        HANDLE$glVertexAttribI1uiEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI1uiEXT, Descriptors.DESCRIPTOR$glVertexAttribI1uiEXT);
        SEGMENT$glVertexAttribI1uivEXT = loader.apply("glVertexAttribI1uivEXT");
        HANDLE$glVertexAttribI1uivEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI1uivEXT, Descriptors.DESCRIPTOR$glVertexAttribI1uivEXT);
        SEGMENT$glVertexAttribI2iEXT = loader.apply("glVertexAttribI2iEXT");
        HANDLE$glVertexAttribI2iEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI2iEXT, Descriptors.DESCRIPTOR$glVertexAttribI2iEXT);
        SEGMENT$glVertexAttribI2ivEXT = loader.apply("glVertexAttribI2ivEXT");
        HANDLE$glVertexAttribI2ivEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI2ivEXT, Descriptors.DESCRIPTOR$glVertexAttribI2ivEXT);
        SEGMENT$glVertexAttribI2uiEXT = loader.apply("glVertexAttribI2uiEXT");
        HANDLE$glVertexAttribI2uiEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI2uiEXT, Descriptors.DESCRIPTOR$glVertexAttribI2uiEXT);
        SEGMENT$glVertexAttribI2uivEXT = loader.apply("glVertexAttribI2uivEXT");
        HANDLE$glVertexAttribI2uivEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI2uivEXT, Descriptors.DESCRIPTOR$glVertexAttribI2uivEXT);
        SEGMENT$glVertexAttribI3iEXT = loader.apply("glVertexAttribI3iEXT");
        HANDLE$glVertexAttribI3iEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI3iEXT, Descriptors.DESCRIPTOR$glVertexAttribI3iEXT);
        SEGMENT$glVertexAttribI3ivEXT = loader.apply("glVertexAttribI3ivEXT");
        HANDLE$glVertexAttribI3ivEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI3ivEXT, Descriptors.DESCRIPTOR$glVertexAttribI3ivEXT);
        SEGMENT$glVertexAttribI3uiEXT = loader.apply("glVertexAttribI3uiEXT");
        HANDLE$glVertexAttribI3uiEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI3uiEXT, Descriptors.DESCRIPTOR$glVertexAttribI3uiEXT);
        SEGMENT$glVertexAttribI3uivEXT = loader.apply("glVertexAttribI3uivEXT");
        HANDLE$glVertexAttribI3uivEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI3uivEXT, Descriptors.DESCRIPTOR$glVertexAttribI3uivEXT);
        SEGMENT$glVertexAttribI4bvEXT = loader.apply("glVertexAttribI4bvEXT");
        HANDLE$glVertexAttribI4bvEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI4bvEXT, Descriptors.DESCRIPTOR$glVertexAttribI4bvEXT);
        SEGMENT$glVertexAttribI4iEXT = loader.apply("glVertexAttribI4iEXT");
        HANDLE$glVertexAttribI4iEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI4iEXT, Descriptors.DESCRIPTOR$glVertexAttribI4iEXT);
        SEGMENT$glVertexAttribI4ivEXT = loader.apply("glVertexAttribI4ivEXT");
        HANDLE$glVertexAttribI4ivEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI4ivEXT, Descriptors.DESCRIPTOR$glVertexAttribI4ivEXT);
        SEGMENT$glVertexAttribI4svEXT = loader.apply("glVertexAttribI4svEXT");
        HANDLE$glVertexAttribI4svEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI4svEXT, Descriptors.DESCRIPTOR$glVertexAttribI4svEXT);
        SEGMENT$glVertexAttribI4ubvEXT = loader.apply("glVertexAttribI4ubvEXT");
        HANDLE$glVertexAttribI4ubvEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI4ubvEXT, Descriptors.DESCRIPTOR$glVertexAttribI4ubvEXT);
        SEGMENT$glVertexAttribI4uiEXT = loader.apply("glVertexAttribI4uiEXT");
        HANDLE$glVertexAttribI4uiEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI4uiEXT, Descriptors.DESCRIPTOR$glVertexAttribI4uiEXT);
        SEGMENT$glVertexAttribI4uivEXT = loader.apply("glVertexAttribI4uivEXT");
        HANDLE$glVertexAttribI4uivEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI4uivEXT, Descriptors.DESCRIPTOR$glVertexAttribI4uivEXT);
        SEGMENT$glVertexAttribI4usvEXT = loader.apply("glVertexAttribI4usvEXT");
        HANDLE$glVertexAttribI4usvEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribI4usvEXT, Descriptors.DESCRIPTOR$glVertexAttribI4usvEXT);
        SEGMENT$glVertexAttribIPointerEXT = loader.apply("glVertexAttribIPointerEXT");
        HANDLE$glVertexAttribIPointerEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribIPointerEXT, Descriptors.DESCRIPTOR$glVertexAttribIPointerEXT);
        SEGMENT$glVertexAttribL1dEXT = loader.apply("glVertexAttribL1dEXT");
        HANDLE$glVertexAttribL1dEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribL1dEXT, Descriptors.DESCRIPTOR$glVertexAttribL1dEXT);
        SEGMENT$glVertexAttribL1dvEXT = loader.apply("glVertexAttribL1dvEXT");
        HANDLE$glVertexAttribL1dvEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribL1dvEXT, Descriptors.DESCRIPTOR$glVertexAttribL1dvEXT);
        SEGMENT$glVertexAttribL2dEXT = loader.apply("glVertexAttribL2dEXT");
        HANDLE$glVertexAttribL2dEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribL2dEXT, Descriptors.DESCRIPTOR$glVertexAttribL2dEXT);
        SEGMENT$glVertexAttribL2dvEXT = loader.apply("glVertexAttribL2dvEXT");
        HANDLE$glVertexAttribL2dvEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribL2dvEXT, Descriptors.DESCRIPTOR$glVertexAttribL2dvEXT);
        SEGMENT$glVertexAttribL3dEXT = loader.apply("glVertexAttribL3dEXT");
        HANDLE$glVertexAttribL3dEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribL3dEXT, Descriptors.DESCRIPTOR$glVertexAttribL3dEXT);
        SEGMENT$glVertexAttribL3dvEXT = loader.apply("glVertexAttribL3dvEXT");
        HANDLE$glVertexAttribL3dvEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribL3dvEXT, Descriptors.DESCRIPTOR$glVertexAttribL3dvEXT);
        SEGMENT$glVertexAttribL4dEXT = loader.apply("glVertexAttribL4dEXT");
        HANDLE$glVertexAttribL4dEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribL4dEXT, Descriptors.DESCRIPTOR$glVertexAttribL4dEXT);
        SEGMENT$glVertexAttribL4dvEXT = loader.apply("glVertexAttribL4dvEXT");
        HANDLE$glVertexAttribL4dvEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribL4dvEXT, Descriptors.DESCRIPTOR$glVertexAttribL4dvEXT);
        SEGMENT$glVertexAttribLPointerEXT = loader.apply("glVertexAttribLPointerEXT");
        HANDLE$glVertexAttribLPointerEXT = RawFunctionLoader.link(SEGMENT$glVertexAttribLPointerEXT, Descriptors.DESCRIPTOR$glVertexAttribLPointerEXT);
        SEGMENT$glVertexAttribParameteriAMD = loader.apply("glVertexAttribParameteriAMD");
        HANDLE$glVertexAttribParameteriAMD = RawFunctionLoader.link(SEGMENT$glVertexAttribParameteriAMD, Descriptors.DESCRIPTOR$glVertexAttribParameteriAMD);
        SEGMENT$glVertexAttribPointerARB = loader.apply("glVertexAttribPointerARB");
        HANDLE$glVertexAttribPointerARB = RawFunctionLoader.link(SEGMENT$glVertexAttribPointerARB, Descriptors.DESCRIPTOR$glVertexAttribPointerARB);
        SEGMENT$glVertexAttribs1hvNV = loader.apply("glVertexAttribs1hvNV");
        HANDLE$glVertexAttribs1hvNV = RawFunctionLoader.link(SEGMENT$glVertexAttribs1hvNV, Descriptors.DESCRIPTOR$glVertexAttribs1hvNV);
        SEGMENT$glVertexAttribs2hvNV = loader.apply("glVertexAttribs2hvNV");
        HANDLE$glVertexAttribs2hvNV = RawFunctionLoader.link(SEGMENT$glVertexAttribs2hvNV, Descriptors.DESCRIPTOR$glVertexAttribs2hvNV);
        SEGMENT$glVertexAttribs3hvNV = loader.apply("glVertexAttribs3hvNV");
        HANDLE$glVertexAttribs3hvNV = RawFunctionLoader.link(SEGMENT$glVertexAttribs3hvNV, Descriptors.DESCRIPTOR$glVertexAttribs3hvNV);
        SEGMENT$glVertexAttribs4hvNV = loader.apply("glVertexAttribs4hvNV");
        HANDLE$glVertexAttribs4hvNV = RawFunctionLoader.link(SEGMENT$glVertexAttribs4hvNV, Descriptors.DESCRIPTOR$glVertexAttribs4hvNV);
        SEGMENT$glVertexBlendARB = loader.apply("glVertexBlendARB");
        HANDLE$glVertexBlendARB = RawFunctionLoader.link(SEGMENT$glVertexBlendARB, Descriptors.DESCRIPTOR$glVertexBlendARB);
        SEGMENT$glVertexP2ui = loader.apply("glVertexP2ui");
        HANDLE$glVertexP2ui = RawFunctionLoader.link(SEGMENT$glVertexP2ui, Descriptors.DESCRIPTOR$glVertexP2ui);
        SEGMENT$glVertexP2uiv = loader.apply("glVertexP2uiv");
        HANDLE$glVertexP2uiv = RawFunctionLoader.link(SEGMENT$glVertexP2uiv, Descriptors.DESCRIPTOR$glVertexP2uiv);
        SEGMENT$glVertexP3ui = loader.apply("glVertexP3ui");
        HANDLE$glVertexP3ui = RawFunctionLoader.link(SEGMENT$glVertexP3ui, Descriptors.DESCRIPTOR$glVertexP3ui);
        SEGMENT$glVertexP3uiv = loader.apply("glVertexP3uiv");
        HANDLE$glVertexP3uiv = RawFunctionLoader.link(SEGMENT$glVertexP3uiv, Descriptors.DESCRIPTOR$glVertexP3uiv);
        SEGMENT$glVertexP4ui = loader.apply("glVertexP4ui");
        HANDLE$glVertexP4ui = RawFunctionLoader.link(SEGMENT$glVertexP4ui, Descriptors.DESCRIPTOR$glVertexP4ui);
        SEGMENT$glVertexP4uiv = loader.apply("glVertexP4uiv");
        HANDLE$glVertexP4uiv = RawFunctionLoader.link(SEGMENT$glVertexP4uiv, Descriptors.DESCRIPTOR$glVertexP4uiv);
        SEGMENT$glVertexPointer = loader.apply("glVertexPointer");
        HANDLE$glVertexPointer = RawFunctionLoader.link(SEGMENT$glVertexPointer, Descriptors.DESCRIPTOR$glVertexPointer);
        SEGMENT$glVertexWeighthNV = loader.apply("glVertexWeighthNV");
        HANDLE$glVertexWeighthNV = RawFunctionLoader.link(SEGMENT$glVertexWeighthNV, Descriptors.DESCRIPTOR$glVertexWeighthNV);
        SEGMENT$glVertexWeighthvNV = loader.apply("glVertexWeighthvNV");
        HANDLE$glVertexWeighthvNV = RawFunctionLoader.link(SEGMENT$glVertexWeighthvNV, Descriptors.DESCRIPTOR$glVertexWeighthvNV);
        SEGMENT$glWaitSemaphoreui64NVX = loader.apply("glWaitSemaphoreui64NVX");
        HANDLE$glWaitSemaphoreui64NVX = RawFunctionLoader.link(SEGMENT$glWaitSemaphoreui64NVX, Descriptors.DESCRIPTOR$glWaitSemaphoreui64NVX);
        SEGMENT$glWeightPointerARB = loader.apply("glWeightPointerARB");
        HANDLE$glWeightPointerARB = RawFunctionLoader.link(SEGMENT$glWeightPointerARB, Descriptors.DESCRIPTOR$glWeightPointerARB);
        SEGMENT$glWeightbvARB = loader.apply("glWeightbvARB");
        HANDLE$glWeightbvARB = RawFunctionLoader.link(SEGMENT$glWeightbvARB, Descriptors.DESCRIPTOR$glWeightbvARB);
        SEGMENT$glWeightdvARB = loader.apply("glWeightdvARB");
        HANDLE$glWeightdvARB = RawFunctionLoader.link(SEGMENT$glWeightdvARB, Descriptors.DESCRIPTOR$glWeightdvARB);
        SEGMENT$glWeightfvARB = loader.apply("glWeightfvARB");
        HANDLE$glWeightfvARB = RawFunctionLoader.link(SEGMENT$glWeightfvARB, Descriptors.DESCRIPTOR$glWeightfvARB);
        SEGMENT$glWeightivARB = loader.apply("glWeightivARB");
        HANDLE$glWeightivARB = RawFunctionLoader.link(SEGMENT$glWeightivARB, Descriptors.DESCRIPTOR$glWeightivARB);
        SEGMENT$glWeightsvARB = loader.apply("glWeightsvARB");
        HANDLE$glWeightsvARB = RawFunctionLoader.link(SEGMENT$glWeightsvARB, Descriptors.DESCRIPTOR$glWeightsvARB);
        SEGMENT$glWeightubvARB = loader.apply("glWeightubvARB");
        HANDLE$glWeightubvARB = RawFunctionLoader.link(SEGMENT$glWeightubvARB, Descriptors.DESCRIPTOR$glWeightubvARB);
        SEGMENT$glWeightuivARB = loader.apply("glWeightuivARB");
        HANDLE$glWeightuivARB = RawFunctionLoader.link(SEGMENT$glWeightuivARB, Descriptors.DESCRIPTOR$glWeightuivARB);
        SEGMENT$glWeightusvARB = loader.apply("glWeightusvARB");
        HANDLE$glWeightusvARB = RawFunctionLoader.link(SEGMENT$glWeightusvARB, Descriptors.DESCRIPTOR$glWeightusvARB);
        SEGMENT$glWindowPos2d = loader.apply("glWindowPos2d");
        HANDLE$glWindowPos2d = RawFunctionLoader.link(SEGMENT$glWindowPos2d, Descriptors.DESCRIPTOR$glWindowPos2d);
        SEGMENT$glWindowPos2dARB = loader.apply("glWindowPos2dARB");
        HANDLE$glWindowPos2dARB = RawFunctionLoader.link(SEGMENT$glWindowPos2dARB, Descriptors.DESCRIPTOR$glWindowPos2dARB);
        SEGMENT$glWindowPos2dv = loader.apply("glWindowPos2dv");
        HANDLE$glWindowPos2dv = RawFunctionLoader.link(SEGMENT$glWindowPos2dv, Descriptors.DESCRIPTOR$glWindowPos2dv);
        SEGMENT$glWindowPos2dvARB = loader.apply("glWindowPos2dvARB");
        HANDLE$glWindowPos2dvARB = RawFunctionLoader.link(SEGMENT$glWindowPos2dvARB, Descriptors.DESCRIPTOR$glWindowPos2dvARB);
        SEGMENT$glWindowPos2f = loader.apply("glWindowPos2f");
        HANDLE$glWindowPos2f = RawFunctionLoader.link(SEGMENT$glWindowPos2f, Descriptors.DESCRIPTOR$glWindowPos2f);
        SEGMENT$glWindowPos2fARB = loader.apply("glWindowPos2fARB");
        HANDLE$glWindowPos2fARB = RawFunctionLoader.link(SEGMENT$glWindowPos2fARB, Descriptors.DESCRIPTOR$glWindowPos2fARB);
        SEGMENT$glWindowPos2fv = loader.apply("glWindowPos2fv");
        HANDLE$glWindowPos2fv = RawFunctionLoader.link(SEGMENT$glWindowPos2fv, Descriptors.DESCRIPTOR$glWindowPos2fv);
        SEGMENT$glWindowPos2fvARB = loader.apply("glWindowPos2fvARB");
        HANDLE$glWindowPos2fvARB = RawFunctionLoader.link(SEGMENT$glWindowPos2fvARB, Descriptors.DESCRIPTOR$glWindowPos2fvARB);
        SEGMENT$glWindowPos2i = loader.apply("glWindowPos2i");
        HANDLE$glWindowPos2i = RawFunctionLoader.link(SEGMENT$glWindowPos2i, Descriptors.DESCRIPTOR$glWindowPos2i);
        SEGMENT$glWindowPos2iARB = loader.apply("glWindowPos2iARB");
        HANDLE$glWindowPos2iARB = RawFunctionLoader.link(SEGMENT$glWindowPos2iARB, Descriptors.DESCRIPTOR$glWindowPos2iARB);
        SEGMENT$glWindowPos2iv = loader.apply("glWindowPos2iv");
        HANDLE$glWindowPos2iv = RawFunctionLoader.link(SEGMENT$glWindowPos2iv, Descriptors.DESCRIPTOR$glWindowPos2iv);
        SEGMENT$glWindowPos2ivARB = loader.apply("glWindowPos2ivARB");
        HANDLE$glWindowPos2ivARB = RawFunctionLoader.link(SEGMENT$glWindowPos2ivARB, Descriptors.DESCRIPTOR$glWindowPos2ivARB);
        SEGMENT$glWindowPos2s = loader.apply("glWindowPos2s");
        HANDLE$glWindowPos2s = RawFunctionLoader.link(SEGMENT$glWindowPos2s, Descriptors.DESCRIPTOR$glWindowPos2s);
        SEGMENT$glWindowPos2sARB = loader.apply("glWindowPos2sARB");
        HANDLE$glWindowPos2sARB = RawFunctionLoader.link(SEGMENT$glWindowPos2sARB, Descriptors.DESCRIPTOR$glWindowPos2sARB);
        SEGMENT$glWindowPos2sv = loader.apply("glWindowPos2sv");
        HANDLE$glWindowPos2sv = RawFunctionLoader.link(SEGMENT$glWindowPos2sv, Descriptors.DESCRIPTOR$glWindowPos2sv);
        SEGMENT$glWindowPos2svARB = loader.apply("glWindowPos2svARB");
        HANDLE$glWindowPos2svARB = RawFunctionLoader.link(SEGMENT$glWindowPos2svARB, Descriptors.DESCRIPTOR$glWindowPos2svARB);
        SEGMENT$glWindowPos3d = loader.apply("glWindowPos3d");
        HANDLE$glWindowPos3d = RawFunctionLoader.link(SEGMENT$glWindowPos3d, Descriptors.DESCRIPTOR$glWindowPos3d);
        SEGMENT$glWindowPos3dARB = loader.apply("glWindowPos3dARB");
        HANDLE$glWindowPos3dARB = RawFunctionLoader.link(SEGMENT$glWindowPos3dARB, Descriptors.DESCRIPTOR$glWindowPos3dARB);
        SEGMENT$glWindowPos3dv = loader.apply("glWindowPos3dv");
        HANDLE$glWindowPos3dv = RawFunctionLoader.link(SEGMENT$glWindowPos3dv, Descriptors.DESCRIPTOR$glWindowPos3dv);
        SEGMENT$glWindowPos3dvARB = loader.apply("glWindowPos3dvARB");
        HANDLE$glWindowPos3dvARB = RawFunctionLoader.link(SEGMENT$glWindowPos3dvARB, Descriptors.DESCRIPTOR$glWindowPos3dvARB);
        SEGMENT$glWindowPos3f = loader.apply("glWindowPos3f");
        HANDLE$glWindowPos3f = RawFunctionLoader.link(SEGMENT$glWindowPos3f, Descriptors.DESCRIPTOR$glWindowPos3f);
        SEGMENT$glWindowPos3fARB = loader.apply("glWindowPos3fARB");
        HANDLE$glWindowPos3fARB = RawFunctionLoader.link(SEGMENT$glWindowPos3fARB, Descriptors.DESCRIPTOR$glWindowPos3fARB);
        SEGMENT$glWindowPos3fv = loader.apply("glWindowPos3fv");
        HANDLE$glWindowPos3fv = RawFunctionLoader.link(SEGMENT$glWindowPos3fv, Descriptors.DESCRIPTOR$glWindowPos3fv);
        SEGMENT$glWindowPos3fvARB = loader.apply("glWindowPos3fvARB");
        HANDLE$glWindowPos3fvARB = RawFunctionLoader.link(SEGMENT$glWindowPos3fvARB, Descriptors.DESCRIPTOR$glWindowPos3fvARB);
        SEGMENT$glWindowPos3i = loader.apply("glWindowPos3i");
        HANDLE$glWindowPos3i = RawFunctionLoader.link(SEGMENT$glWindowPos3i, Descriptors.DESCRIPTOR$glWindowPos3i);
        SEGMENT$glWindowPos3iARB = loader.apply("glWindowPos3iARB");
        HANDLE$glWindowPos3iARB = RawFunctionLoader.link(SEGMENT$glWindowPos3iARB, Descriptors.DESCRIPTOR$glWindowPos3iARB);
        SEGMENT$glWindowPos3iv = loader.apply("glWindowPos3iv");
        HANDLE$glWindowPos3iv = RawFunctionLoader.link(SEGMENT$glWindowPos3iv, Descriptors.DESCRIPTOR$glWindowPos3iv);
        SEGMENT$glWindowPos3ivARB = loader.apply("glWindowPos3ivARB");
        HANDLE$glWindowPos3ivARB = RawFunctionLoader.link(SEGMENT$glWindowPos3ivARB, Descriptors.DESCRIPTOR$glWindowPos3ivARB);
        SEGMENT$glWindowPos3s = loader.apply("glWindowPos3s");
        HANDLE$glWindowPos3s = RawFunctionLoader.link(SEGMENT$glWindowPos3s, Descriptors.DESCRIPTOR$glWindowPos3s);
        SEGMENT$glWindowPos3sARB = loader.apply("glWindowPos3sARB");
        HANDLE$glWindowPos3sARB = RawFunctionLoader.link(SEGMENT$glWindowPos3sARB, Descriptors.DESCRIPTOR$glWindowPos3sARB);
        SEGMENT$glWindowPos3sv = loader.apply("glWindowPos3sv");
        HANDLE$glWindowPos3sv = RawFunctionLoader.link(SEGMENT$glWindowPos3sv, Descriptors.DESCRIPTOR$glWindowPos3sv);
        SEGMENT$glWindowPos3svARB = loader.apply("glWindowPos3svARB");
        HANDLE$glWindowPos3svARB = RawFunctionLoader.link(SEGMENT$glWindowPos3svARB, Descriptors.DESCRIPTOR$glWindowPos3svARB);
    }

    // region command wrappers

    public void accum(
        @NativeType("GLenum") int op,
        @NativeType("GLfloat") float value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAccum);
        try {
            hFunction.invokeExact(
                op,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte acquireKeyedMutexWin32EXT(
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long key,
        @NativeType("GLuint") @Unsigned int timeout
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAcquireKeyedMutexWin32EXT);
        try {
            return (byte) hFunction.invokeExact(
                memory,
                key,
                timeout
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void activeStencilFaceEXT(
        @NativeType("GLenum") int face
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glActiveStencilFaceEXT);
        try {
            hFunction.invokeExact(
                face
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void activeTextureARB(
        @NativeType("GLenum") int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glActiveTextureARB);
        try {
            hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void activeVaryingNV(
        @NativeType("GLuint") @Unsigned int program,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glActiveVaryingNV);
        try {
            hFunction.invokeExact(
                program,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void alphaFunc(
        @NativeType("GLenum") int func,
        @NativeType("GLfloat") float ref
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAlphaFunc);
        try {
            hFunction.invokeExact(
                func,
                ref
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void alphaToCoverageDitherControlNV(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAlphaToCoverageDitherControlNV);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte areTexturesResident(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr textures,
        @Nullable @Pointer(comment="GLboolean") @Unsigned BytePtr residences
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAreTexturesResident);
        try {
            return (byte) hFunction.invokeExact(
                n,
                (MemorySegment) (textures != null ? textures.segment() : MemorySegment.NULL),
                (MemorySegment) (residences != null ? residences.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void arrayElement(
        @NativeType("GLint") int i
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glArrayElement);
        try {
            hFunction.invokeExact(
                i
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int asyncCopyBufferSubDataNVX(
        @NativeType("GLsizei") int waitSemaphoreCount,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr waitSemaphoreArray,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr fenceValueArray,
        @NativeType("GLuint") @Unsigned int readGpu,
        @NativeType("GLbitfield") @Unsigned int writeGpuMask,
        @NativeType("GLuint") @Unsigned int readBuffer,
        @NativeType("GLuint") @Unsigned int writeBuffer,
        @NativeType("GLintptr") long readOffset,
        @NativeType("GLintptr") long writeOffset,
        @NativeType("GLsizeiptr") long size,
        @NativeType("GLsizei") int signalSemaphoreCount,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr signalSemaphoreArray,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr signalValueArray
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAsyncCopyBufferSubDataNVX);
        try {
            return (int) hFunction.invokeExact(
                waitSemaphoreCount,
                (MemorySegment) (waitSemaphoreArray != null ? waitSemaphoreArray.segment() : MemorySegment.NULL),
                (MemorySegment) (fenceValueArray != null ? fenceValueArray.segment() : MemorySegment.NULL),
                readGpu,
                writeGpuMask,
                readBuffer,
                writeBuffer,
                MemorySegment.ofAddress(readOffset),
                MemorySegment.ofAddress(writeOffset),
                MemorySegment.ofAddress(size),
                signalSemaphoreCount,
                (MemorySegment) (signalSemaphoreArray != null ? signalSemaphoreArray.segment() : MemorySegment.NULL),
                (MemorySegment) (signalValueArray != null ? signalValueArray.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int asyncCopyImageSubDataNVX(
        @NativeType("GLsizei") int waitSemaphoreCount,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr waitSemaphoreArray,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr waitValueArray,
        @NativeType("GLuint") @Unsigned int srcGpu,
        @NativeType("GLbitfield") @Unsigned int dstGpuMask,
        @NativeType("GLuint") @Unsigned int srcName,
        @NativeType("GLenum") int srcTarget,
        @NativeType("GLint") int srcLevel,
        @NativeType("GLint") int srcX,
        @NativeType("GLint") int srcY,
        @NativeType("GLint") int srcZ,
        @NativeType("GLuint") @Unsigned int dstName,
        @NativeType("GLenum") int dstTarget,
        @NativeType("GLint") int dstLevel,
        @NativeType("GLint") int dstX,
        @NativeType("GLint") int dstY,
        @NativeType("GLint") int dstZ,
        @NativeType("GLsizei") int srcWidth,
        @NativeType("GLsizei") int srcHeight,
        @NativeType("GLsizei") int srcDepth,
        @NativeType("GLsizei") int signalSemaphoreCount,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr signalSemaphoreArray,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr signalValueArray
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAsyncCopyImageSubDataNVX);
        try {
            return (int) hFunction.invokeExact(
                waitSemaphoreCount,
                (MemorySegment) (waitSemaphoreArray != null ? waitSemaphoreArray.segment() : MemorySegment.NULL),
                (MemorySegment) (waitValueArray != null ? waitValueArray.segment() : MemorySegment.NULL),
                srcGpu,
                dstGpuMask,
                srcName,
                srcTarget,
                srcLevel,
                srcX,
                srcY,
                srcZ,
                dstName,
                dstTarget,
                dstLevel,
                dstX,
                dstY,
                dstZ,
                srcWidth,
                srcHeight,
                srcDepth,
                signalSemaphoreCount,
                (MemorySegment) (signalSemaphoreArray != null ? signalSemaphoreArray.segment() : MemorySegment.NULL),
                (MemorySegment) (signalValueArray != null ? signalValueArray.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void attachObjectARB(
        @NativeType("GLhandleARB") @Unsigned int containerObj,
        @NativeType("GLhandleARB") @Unsigned int obj
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glAttachObjectARB);
        try {
            hFunction.invokeExact(
                containerObj,
                obj
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void begin(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBegin);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginConditionalRenderNVX(
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginConditionalRenderNVX);
        try {
            hFunction.invokeExact(
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginQueryARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginQueryARB);
        try {
            hFunction.invokeExact(
                target,
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginTransformFeedbackEXT(
        @NativeType("GLenum") int primitiveMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginTransformFeedbackEXT);
        try {
            hFunction.invokeExact(
                primitiveMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void beginTransformFeedbackNV(
        @NativeType("GLenum") int primitiveMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBeginTransformFeedbackNV);
        try {
            hFunction.invokeExact(
                primitiveMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindAttribLocationARB(
        @NativeType("GLhandleARB") @Unsigned int programObj,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLcharARB") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindAttribLocationARB);
        try {
            hFunction.invokeExact(
                programObj,
                index,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferARB);
        try {
            hFunction.invokeExact(
                target,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferBaseEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferBaseEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferBaseNV(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferBaseNV);
        try {
            hFunction.invokeExact(
                target,
                index,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferOffsetEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferOffsetEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                buffer,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferOffsetNV(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferOffsetNV);
        try {
            hFunction.invokeExact(
                target,
                index,
                buffer,
                MemorySegment.ofAddress(offset)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferRangeEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferRangeEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindBufferRangeNV(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindBufferRangeNV);
        try {
            hFunction.invokeExact(
                target,
                index,
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindFragDataLocationEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int color,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindFragDataLocationEXT);
        try {
            hFunction.invokeExact(
                program,
                color,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindFramebufferEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int framebuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindFramebufferEXT);
        try {
            hFunction.invokeExact(
                target,
                framebuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindImageTextureEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLboolean") @Unsigned byte layered,
        @NativeType("GLint") int layer,
        @NativeType("GLenum") int access,
        @NativeType("GLint") int format
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindImageTextureEXT);
        try {
            hFunction.invokeExact(
                index,
                texture,
                level,
                layered,
                layer,
                access,
                format
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindProgramARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindProgramARB);
        try {
            hFunction.invokeExact(
                target,
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindRenderbufferEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindRenderbufferEXT);
        try {
            hFunction.invokeExact(
                target,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bindTransformFeedbackNV(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBindTransformFeedbackNV);
        try {
            hFunction.invokeExact(
                target,
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bitmap(
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLfloat") float xorig,
        @NativeType("GLfloat") float yorig,
        @NativeType("GLfloat") float xmove,
        @NativeType("GLfloat") float ymove,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr bitmap
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBitmap);
        try {
            hFunction.invokeExact(
                width,
                height,
                xorig,
                yorig,
                xmove,
                ymove,
                (MemorySegment) (bitmap != null ? bitmap.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendColorEXT(
        @NativeType("GLfloat") float red,
        @NativeType("GLfloat") float green,
        @NativeType("GLfloat") float blue,
        @NativeType("GLfloat") float alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendColorEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationEXT(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationEXT);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationIndexedAMD(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationIndexedAMD);
        try {
            hFunction.invokeExact(
                buf,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationSeparateEXT(
        @NativeType("GLenum") int modeRGB,
        @NativeType("GLenum") int modeAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationSeparateEXT);
        try {
            hFunction.invokeExact(
                modeRGB,
                modeAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendEquationSeparateIndexedAMD(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int modeRGB,
        @NativeType("GLenum") int modeAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendEquationSeparateIndexedAMD);
        try {
            hFunction.invokeExact(
                buf,
                modeRGB,
                modeAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFuncIndexedAMD(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int src,
        @NativeType("GLenum") int dst
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFuncIndexedAMD);
        try {
            hFunction.invokeExact(
                buf,
                src,
                dst
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFuncSeparateEXT(
        @NativeType("GLenum") int sfactorRGB,
        @NativeType("GLenum") int dfactorRGB,
        @NativeType("GLenum") int sfactorAlpha,
        @NativeType("GLenum") int dfactorAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFuncSeparateEXT);
        try {
            hFunction.invokeExact(
                sfactorRGB,
                dfactorRGB,
                sfactorAlpha,
                dfactorAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blendFuncSeparateIndexedAMD(
        @NativeType("GLuint") @Unsigned int buf,
        @NativeType("GLenum") int srcRGB,
        @NativeType("GLenum") int dstRGB,
        @NativeType("GLenum") int srcAlpha,
        @NativeType("GLenum") int dstAlpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlendFuncSeparateIndexedAMD);
        try {
            hFunction.invokeExact(
                buf,
                srcRGB,
                dstRGB,
                srcAlpha,
                dstAlpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blitFramebufferEXT(
        @NativeType("GLint") int srcX0,
        @NativeType("GLint") int srcY0,
        @NativeType("GLint") int srcX1,
        @NativeType("GLint") int srcY1,
        @NativeType("GLint") int dstX0,
        @NativeType("GLint") int dstY0,
        @NativeType("GLint") int dstX1,
        @NativeType("GLint") int dstY1,
        @NativeType("GLbitfield") @Unsigned int mask,
        @NativeType("GLenum") int filter
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlitFramebufferEXT);
        try {
            hFunction.invokeExact(
                srcX0,
                srcY0,
                srcX1,
                srcY1,
                dstX0,
                dstY0,
                dstX1,
                dstY1,
                mask,
                filter
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blitFramebufferLayerEXT(
        @NativeType("GLint") int srcX0,
        @NativeType("GLint") int srcY0,
        @NativeType("GLint") int srcX1,
        @NativeType("GLint") int srcY1,
        @NativeType("GLint") int srcLayer,
        @NativeType("GLint") int dstX0,
        @NativeType("GLint") int dstY0,
        @NativeType("GLint") int dstX1,
        @NativeType("GLint") int dstY1,
        @NativeType("GLint") int dstLayer,
        @NativeType("GLbitfield") @Unsigned int mask,
        @NativeType("GLenum") int filter
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlitFramebufferLayerEXT);
        try {
            hFunction.invokeExact(
                srcX0,
                srcY0,
                srcX1,
                srcY1,
                srcLayer,
                dstX0,
                dstY0,
                dstX1,
                dstY1,
                dstLayer,
                mask,
                filter
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void blitFramebufferLayersEXT(
        @NativeType("GLint") int srcX0,
        @NativeType("GLint") int srcY0,
        @NativeType("GLint") int srcX1,
        @NativeType("GLint") int srcY1,
        @NativeType("GLint") int dstX0,
        @NativeType("GLint") int dstY0,
        @NativeType("GLint") int dstX1,
        @NativeType("GLint") int dstY1,
        @NativeType("GLbitfield") @Unsigned int mask,
        @NativeType("GLenum") int filter
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBlitFramebufferLayersEXT);
        try {
            hFunction.invokeExact(
                srcX0,
                srcY0,
                srcX1,
                srcY1,
                dstX0,
                dstY0,
                dstX1,
                dstY1,
                mask,
                filter
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferDataARB(
        @NativeType("GLenum") int target,
        @NativeType("GLsizeiptrARB") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data,
        @NativeType("GLenum") int usage
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferDataARB);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(size),
                data,
                usage
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferStorageExternalEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Nullable GLeglClientBufferEXT clientBuffer,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferStorageExternalEXT);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                (MemorySegment) (clientBuffer != null ? clientBuffer.segment() : MemorySegment.NULL),
                flags
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void bufferSubDataARB(
        @NativeType("GLenum") int target,
        @NativeType("GLintptrARB") long offset,
        @NativeType("GLsizeiptrARB") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glBufferSubDataARB);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void callList(
        @NativeType("GLuint") @Unsigned int list
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCallList);
        try {
            hFunction.invokeExact(
                list
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void callLists(
        @NativeType("GLsizei") int n,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment lists
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCallLists);
        try {
            hFunction.invokeExact(
                n,
                type,
                lists
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLenum") int checkFramebufferStatusEXT(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCheckFramebufferStatusEXT);
        try {
            return (int) hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clampColorARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int clamp
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClampColorARB);
        try {
            hFunction.invokeExact(
                target,
                clamp
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearAccum(
        @NativeType("GLfloat") float red,
        @NativeType("GLfloat") float green,
        @NativeType("GLfloat") float blue,
        @NativeType("GLfloat") float alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearAccum);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearColorIiEXT(
        @NativeType("GLint") int red,
        @NativeType("GLint") int green,
        @NativeType("GLint") int blue,
        @NativeType("GLint") int alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearColorIiEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearColorIuiEXT(
        @NativeType("GLuint") @Unsigned int red,
        @NativeType("GLuint") @Unsigned int green,
        @NativeType("GLuint") @Unsigned int blue,
        @NativeType("GLuint") @Unsigned int alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearColorIuiEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clearIndex(
        @NativeType("GLfloat") float c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClearIndex);
        try {
            hFunction.invokeExact(
                c
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clientActiveTexture(
        @NativeType("GLenum") int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClientActiveTexture);
        try {
            hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clientActiveTextureARB(
        @NativeType("GLenum") int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClientActiveTextureARB);
        try {
            hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clientWaitSemaphoreui64NVX(
        @NativeType("GLsizei") int fenceObjectCount,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr semaphoreArray,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr fenceValueArray
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClientWaitSemaphoreui64NVX);
        try {
            hFunction.invokeExact(
                fenceObjectCount,
                (MemorySegment) (semaphoreArray != null ? semaphoreArray.segment() : MemorySegment.NULL),
                (MemorySegment) (fenceValueArray != null ? fenceValueArray.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void clipPlane(
        @NativeType("GLenum") int plane,
        @Nullable @Pointer(comment="GLdouble") DoublePtr equation
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glClipPlane);
        try {
            hFunction.invokeExact(
                plane,
                (MemorySegment) (equation != null ? equation.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3b(
        @NativeType("GLbyte") byte red,
        @NativeType("GLbyte") byte green,
        @NativeType("GLbyte") byte blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3b);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3bv(
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3bv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3d(
        @NativeType("GLdouble") double red,
        @NativeType("GLdouble") double green,
        @NativeType("GLdouble") double blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3d);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3f(
        @NativeType("GLfloat") float red,
        @NativeType("GLfloat") float green,
        @NativeType("GLfloat") float blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3f);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3hNV(
        @NativeType("GLhalfNV") @Unsigned short red,
        @NativeType("GLhalfNV") @Unsigned short green,
        @NativeType("GLhalfNV") @Unsigned short blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3hNV);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3i(
        @NativeType("GLint") int red,
        @NativeType("GLint") int green,
        @NativeType("GLint") int blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3i);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3s(
        @NativeType("GLshort") short red,
        @NativeType("GLshort") short green,
        @NativeType("GLshort") short blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3s);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3ub(
        @NativeType("GLubyte") @Unsigned byte red,
        @NativeType("GLubyte") @Unsigned byte green,
        @NativeType("GLubyte") @Unsigned byte blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3ub);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3ubv(
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3ubv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3ui(
        @NativeType("GLuint") @Unsigned int red,
        @NativeType("GLuint") @Unsigned int green,
        @NativeType("GLuint") @Unsigned int blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3ui);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3uiv(
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3uiv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3us(
        @NativeType("GLushort") @Unsigned short red,
        @NativeType("GLushort") @Unsigned short green,
        @NativeType("GLushort") @Unsigned short blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3us);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color3usv(
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor3usv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4b(
        @NativeType("GLbyte") byte red,
        @NativeType("GLbyte") byte green,
        @NativeType("GLbyte") byte blue,
        @NativeType("GLbyte") byte alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4b);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4bv(
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4bv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4d(
        @NativeType("GLdouble") double red,
        @NativeType("GLdouble") double green,
        @NativeType("GLdouble") double blue,
        @NativeType("GLdouble") double alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4d);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4f(
        @NativeType("GLfloat") float red,
        @NativeType("GLfloat") float green,
        @NativeType("GLfloat") float blue,
        @NativeType("GLfloat") float alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4f);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4hNV(
        @NativeType("GLhalfNV") @Unsigned short red,
        @NativeType("GLhalfNV") @Unsigned short green,
        @NativeType("GLhalfNV") @Unsigned short blue,
        @NativeType("GLhalfNV") @Unsigned short alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4hNV);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4i(
        @NativeType("GLint") int red,
        @NativeType("GLint") int green,
        @NativeType("GLint") int blue,
        @NativeType("GLint") int alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4i);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4s(
        @NativeType("GLshort") short red,
        @NativeType("GLshort") short green,
        @NativeType("GLshort") short blue,
        @NativeType("GLshort") short alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4s);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4ub(
        @NativeType("GLubyte") @Unsigned byte red,
        @NativeType("GLubyte") @Unsigned byte green,
        @NativeType("GLubyte") @Unsigned byte blue,
        @NativeType("GLubyte") @Unsigned byte alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4ub);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4ubv(
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4ubv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4ui(
        @NativeType("GLuint") @Unsigned int red,
        @NativeType("GLuint") @Unsigned int green,
        @NativeType("GLuint") @Unsigned int blue,
        @NativeType("GLuint") @Unsigned int alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4ui);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4uiv(
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4uiv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4us(
        @NativeType("GLushort") @Unsigned short red,
        @NativeType("GLushort") @Unsigned short green,
        @NativeType("GLushort") @Unsigned short blue,
        @NativeType("GLushort") @Unsigned short alpha
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4us);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue,
                alpha
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void color4usv(
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColor4usv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorMaskIndexedEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLboolean") @Unsigned byte r,
        @NativeType("GLboolean") @Unsigned byte g,
        @NativeType("GLboolean") @Unsigned byte b,
        @NativeType("GLboolean") @Unsigned byte a
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorMaskIndexedEXT);
        try {
            hFunction.invokeExact(
                index,
                r,
                g,
                b,
                a
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorMaterial(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorMaterial);
        try {
            hFunction.invokeExact(
                face,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorP3ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int color
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorP3ui);
        try {
            hFunction.invokeExact(
                type,
                color
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorP3uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr color
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorP3uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (color != null ? color.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorP4ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int color
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorP4ui);
        try {
            hFunction.invokeExact(
                type,
                color
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorP4uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr color
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorP4uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (color != null ? color.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorPointer(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorPointer);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorSubTable(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int start,
        @NativeType("GLsizei") int count,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorSubTable);
        try {
            hFunction.invokeExact(
                target,
                start,
                count,
                format,
                type,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorTable(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment table
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorTable);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                width,
                format,
                type,
                table
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorTableParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorTableParameterfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void colorTableParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glColorTableParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compileShaderARB(
        @NativeType("GLhandleARB") @Unsigned int shaderObj
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompileShaderARB);
        try {
            hFunction.invokeExact(
                shaderObj
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexImage1DARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexImage1DARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                border,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexImage2DARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexImage2DARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                height,
                border,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexImage3DARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLint") int border,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexImage3DARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                internalformat,
                width,
                height,
                depth,
                border,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexSubImage1DARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexSubImage1DARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                width,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexSubImage2DARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexSubImage2DARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                width,
                height,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void compressedTexSubImage3DARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @NativeType("GLint") int xoffset,
        @NativeType("GLint") int yoffset,
        @NativeType("GLint") int zoffset,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int imageSize,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCompressedTexSubImage3DARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                xoffset,
                yoffset,
                zoffset,
                width,
                height,
                depth,
                format,
                imageSize,
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void convolutionFilter1D(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment image
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glConvolutionFilter1D);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                width,
                format,
                type,
                image
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void convolutionFilter2D(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment image
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glConvolutionFilter2D);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                width,
                height,
                format,
                type,
                image
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void convolutionParameterf(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glConvolutionParameterf);
        try {
            hFunction.invokeExact(
                target,
                pname,
                params
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void convolutionParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glConvolutionParameterfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void convolutionParameteri(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glConvolutionParameteri);
        try {
            hFunction.invokeExact(
                target,
                pname,
                params
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void convolutionParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glConvolutionParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyColorSubTable(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int start,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyColorSubTable);
        try {
            hFunction.invokeExact(
                target,
                start,
                x,
                y,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyColorTable(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyColorTable);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                x,
                y,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyConvolutionFilter1D(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyConvolutionFilter1D);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                x,
                y,
                width
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyConvolutionFilter2D(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyConvolutionFilter2D);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                x,
                y,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyImageSubDataNV(
        @NativeType("GLuint") @Unsigned int srcName,
        @NativeType("GLenum") int srcTarget,
        @NativeType("GLint") int srcLevel,
        @NativeType("GLint") int srcX,
        @NativeType("GLint") int srcY,
        @NativeType("GLint") int srcZ,
        @NativeType("GLuint") @Unsigned int dstName,
        @NativeType("GLenum") int dstTarget,
        @NativeType("GLint") int dstLevel,
        @NativeType("GLint") int dstX,
        @NativeType("GLint") int dstY,
        @NativeType("GLint") int dstZ,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyImageSubDataNV);
        try {
            hFunction.invokeExact(
                srcName,
                srcTarget,
                srcLevel,
                srcX,
                srcY,
                srcZ,
                dstName,
                dstTarget,
                dstLevel,
                dstX,
                dstY,
                dstZ,
                width,
                height,
                depth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void copyPixels(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int type
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCopyPixels);
        try {
            hFunction.invokeExact(
                x,
                y,
                width,
                height,
                type
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLhandleARB") @Unsigned int createProgramObjectARB() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateProgramObjectARB);
        try {
            return (int) hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int createProgressFenceNVX() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateProgressFenceNVX);
        try {
            return (int) hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void createSemaphoresNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr semaphores
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateSemaphoresNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (semaphores != null ? semaphores.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLhandleARB") @Unsigned int createShaderObjectARB(
        @NativeType("GLenum") int shaderType
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCreateShaderObjectARB);
        try {
            return (int) hFunction.invokeExact(
                shaderType
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void currentPaletteMatrixARB(
        @NativeType("GLint") int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glCurrentPaletteMatrixARB);
        try {
            hFunction.invokeExact(
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageCallbackAMD(
        @Pointer(comment="GLDEBUGPROCAMD") @NotNull MemorySegment callback,
        @Pointer(comment="void*") @NotNull MemorySegment userParam
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageCallbackAMD);
        try {
            hFunction.invokeExact(
                callback,
                userParam
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageEnableAMD(
        @NativeType("GLenum") int category,
        @NativeType("GLenum") int severity,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids,
        @NativeType("GLboolean") @Unsigned byte enabled
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageEnableAMD);
        try {
            hFunction.invokeExact(
                category,
                severity,
                count,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL),
                enabled
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void debugMessageInsertAMD(
        @NativeType("GLenum") int category,
        @NativeType("GLenum") int severity,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLsizei") int length,
        @Nullable @Pointer(comment="GLchar") BytePtr buf
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDebugMessageInsertAMD);
        try {
            hFunction.invokeExact(
                category,
                severity,
                id,
                length,
                (MemorySegment) (buf != null ? buf.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteBuffersARB(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteBuffersARB);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteFencesNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr fences
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteFencesNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (fences != null ? fences.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteFramebuffersEXT(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr framebuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteFramebuffersEXT);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (framebuffers != null ? framebuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteLists(
        @NativeType("GLuint") @Unsigned int list,
        @NativeType("GLsizei") int range
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteLists);
        try {
            hFunction.invokeExact(
                list,
                range
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteObjectARB(
        @NativeType("GLhandleARB") @Unsigned int obj
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteObjectARB);
        try {
            hFunction.invokeExact(
                obj
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteProgramsARB(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr programs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteProgramsARB);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (programs != null ? programs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteQueriesARB(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteQueriesARB);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteQueryResourceTagNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLint") IntPtr tagIds
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteQueryResourceTagNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (tagIds != null ? tagIds.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteRenderbuffersEXT(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr renderbuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteRenderbuffersEXT);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (renderbuffers != null ? renderbuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void deleteTransformFeedbacksNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDeleteTransformFeedbacksNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void depthBoundsEXT(
        @NativeType("GLclampd") double zmin,
        @NativeType("GLclampd") double zmax
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDepthBoundsEXT);
        try {
            hFunction.invokeExact(
                zmin,
                zmax
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void detachObjectARB(
        @NativeType("GLhandleARB") @Unsigned int containerObj,
        @NativeType("GLhandleARB") @Unsigned int attachedObj
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDetachObjectARB);
        try {
            hFunction.invokeExact(
                containerObj,
                attachedObj
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableClientState(
        @NativeType("GLenum") int array
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableClientState);
        try {
            hFunction.invokeExact(
                array
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void disableVertexAttribArrayARB(
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDisableVertexAttribArrayARB);
        try {
            hFunction.invokeExact(
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawBuffersARB(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLenum") IntPtr bufs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawBuffersARB);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (bufs != null ? bufs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawPixels(
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment pixels
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawPixels);
        try {
            hFunction.invokeExact(
                width,
                height,
                format,
                type,
                pixels
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawTextureNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLuint") @Unsigned int sampler,
        @NativeType("GLfloat") float x0,
        @NativeType("GLfloat") float y0,
        @NativeType("GLfloat") float x1,
        @NativeType("GLfloat") float y1,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float s0,
        @NativeType("GLfloat") float t0,
        @NativeType("GLfloat") float s1,
        @NativeType("GLfloat") float t1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawTextureNV);
        try {
            hFunction.invokeExact(
                texture,
                sampler,
                x0,
                y0,
                x1,
                y1,
                z,
                s0,
                t0,
                s1,
                t1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void drawTransformFeedbackNV(
        @NativeType("GLenum") int mode,
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glDrawTransformFeedbackNV);
        try {
            hFunction.invokeExact(
                mode,
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void edgeFlag(
        @NativeType("GLboolean") @Unsigned byte flag
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEdgeFlag);
        try {
            hFunction.invokeExact(
                flag
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void edgeFlagPointer(
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEdgeFlagPointer);
        try {
            hFunction.invokeExact(
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void edgeFlagv(
        @Nullable @Pointer(comment="GLboolean") @Unsigned BytePtr flag
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEdgeFlagv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (flag != null ? flag.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableClientState(
        @NativeType("GLenum") int array
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableClientState);
        try {
            hFunction.invokeExact(
                array
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void enableVertexAttribArrayARB(
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnableVertexAttribArrayARB);
        try {
            hFunction.invokeExact(
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void end() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEnd);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endConditionalRenderNVX() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndConditionalRenderNVX);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endList() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndList);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endQueryARB(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndQueryARB);
        try {
            hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endTransformFeedbackEXT() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndTransformFeedbackEXT);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void endTransformFeedbackNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEndTransformFeedbackNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalCoord1d(
        @NativeType("GLdouble") double u
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalCoord1d);
        try {
            hFunction.invokeExact(
                u
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalCoord1dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr u
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalCoord1dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (u != null ? u.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalCoord1f(
        @NativeType("GLfloat") float u
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalCoord1f);
        try {
            hFunction.invokeExact(
                u
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalCoord1fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr u
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalCoord1fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (u != null ? u.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalCoord2d(
        @NativeType("GLdouble") double u,
        @NativeType("GLdouble") double v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalCoord2d);
        try {
            hFunction.invokeExact(
                u,
                v
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalCoord2dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr u
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalCoord2dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (u != null ? u.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalCoord2f(
        @NativeType("GLfloat") float u,
        @NativeType("GLfloat") float v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalCoord2f);
        try {
            hFunction.invokeExact(
                u,
                v
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalCoord2fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr u
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalCoord2fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (u != null ? u.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalMesh1(
        @NativeType("GLenum") int mode,
        @NativeType("GLint") int i1,
        @NativeType("GLint") int i2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalMesh1);
        try {
            hFunction.invokeExact(
                mode,
                i1,
                i2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalMesh2(
        @NativeType("GLenum") int mode,
        @NativeType("GLint") int i1,
        @NativeType("GLint") int i2,
        @NativeType("GLint") int j1,
        @NativeType("GLint") int j2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalMesh2);
        try {
            hFunction.invokeExact(
                mode,
                i1,
                i2,
                j1,
                j2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalPoint1(
        @NativeType("GLint") int i
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalPoint1);
        try {
            hFunction.invokeExact(
                i
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void evalPoint2(
        @NativeType("GLint") int i,
        @NativeType("GLint") int j
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glEvalPoint2);
        try {
            hFunction.invokeExact(
                i,
                j
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void feedbackBuffer(
        @NativeType("GLsizei") int size,
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLfloat") FloatPtr buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFeedbackBuffer);
        try {
            hFunction.invokeExact(
                size,
                type,
                (MemorySegment) (buffer != null ? buffer.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void finishFenceNV(
        @NativeType("GLuint") @Unsigned int fence
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFinishFenceNV);
        try {
            hFunction.invokeExact(
                fence
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void flushPixelDataRangeNV(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFlushPixelDataRangeNV);
        try {
            hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void flushVertexArrayRangeNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFlushVertexArrayRangeNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogCoordPointer(
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogCoordPointer);
        try {
            hFunction.invokeExact(
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogCoordd(
        @NativeType("GLdouble") double coord
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogCoordd);
        try {
            hFunction.invokeExact(
                coord
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogCoorddv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr coord
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogCoorddv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (coord != null ? coord.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogCoordf(
        @NativeType("GLfloat") float coord
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogCoordf);
        try {
            hFunction.invokeExact(
                coord
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogCoordfv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr coord
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogCoordfv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (coord != null ? coord.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogCoordhNV(
        @NativeType("GLhalfNV") @Unsigned short fog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogCoordhNV);
        try {
            hFunction.invokeExact(
                fog
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogCoordhvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr fog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogCoordhvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (fog != null ? fog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogf(
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogf);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogfv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogfv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogi(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogi);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void fogiv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFogiv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void frameTerminatorGREMEDY() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFrameTerminatorGREMEDY);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferRenderbufferEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int renderbuffertarget,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferRenderbufferEXT);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                renderbuffertarget,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTexture1DEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTexture1DEXT);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                textarget,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTexture2DEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTexture2DEXT);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                textarget,
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTexture3DEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int textarget,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int zoffset
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTexture3DEXT);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                textarget,
                texture,
                level,
                zoffset
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void framebufferTextureLayerEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLint") int layer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFramebufferTextureLayerEXT);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                texture,
                level,
                layer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void frustum(
        @NativeType("GLdouble") double left,
        @NativeType("GLdouble") double right,
        @NativeType("GLdouble") double bottom,
        @NativeType("GLdouble") double top,
        @NativeType("GLdouble") double zNear,
        @NativeType("GLdouble") double zFar
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glFrustum);
        try {
            hFunction.invokeExact(
                left,
                right,
                bottom,
                top,
                zNear,
                zFar
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genBuffersARB(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenBuffersARB);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (buffers != null ? buffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genFencesNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr fences
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenFencesNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (fences != null ? fences.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genFramebuffersEXT(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr framebuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenFramebuffersEXT);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (framebuffers != null ? framebuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int genLists(
        @NativeType("GLsizei") int range
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenLists);
        try {
            return (int) hFunction.invokeExact(
                range
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genProgramsARB(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr programs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenProgramsARB);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (programs != null ? programs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genQueriesARB(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenQueriesARB);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genQueryResourceTagNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLint") IntPtr tagIds
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenQueryResourceTagNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (tagIds != null ? tagIds.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genRenderbuffersEXT(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr renderbuffers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenRenderbuffersEXT);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (renderbuffers != null ? renderbuffers.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void genTransformFeedbacksNV(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenTransformFeedbacksNV);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void generateMipmapEXT(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGenerateMipmapEXT);
        try {
            hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveAttribARB(
        @NativeType("GLhandleARB") @Unsigned int programObj,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int maxLength,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLint") IntPtr size,
        @Nullable @Pointer(comment="GLenum") IntPtr type,
        @Nullable @Pointer(comment="GLcharARB") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveAttribARB);
        try {
            hFunction.invokeExact(
                programObj,
                index,
                maxLength,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (size != null ? size.segment() : MemorySegment.NULL),
                (MemorySegment) (type != null ? type.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveUniformARB(
        @NativeType("GLhandleARB") @Unsigned int programObj,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int maxLength,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLint") IntPtr size,
        @Nullable @Pointer(comment="GLenum") IntPtr type,
        @Nullable @Pointer(comment="GLcharARB") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveUniformARB);
        try {
            hFunction.invokeExact(
                programObj,
                index,
                maxLength,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (size != null ? size.segment() : MemorySegment.NULL),
                (MemorySegment) (type != null ? type.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getActiveVaryingNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLsizei") IntPtr size,
        @Nullable @Pointer(comment="GLenum") IntPtr type,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetActiveVaryingNV);
        try {
            hFunction.invokeExact(
                program,
                index,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (size != null ? size.segment() : MemorySegment.NULL),
                (MemorySegment) (type != null ? type.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getAttachedObjectsARB(
        @NativeType("GLhandleARB") @Unsigned int containerObj,
        @NativeType("GLsizei") int maxCount,
        @Nullable @Pointer(comment="GLsizei") IntPtr count,
        @Nullable @Pointer(comment="GLhandleARB") @Unsigned IntPtr obj
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetAttachedObjectsARB);
        try {
            hFunction.invokeExact(
                containerObj,
                maxCount,
                (MemorySegment) (count != null ? count.segment() : MemorySegment.NULL),
                (MemorySegment) (obj != null ? obj.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getAttribLocationARB(
        @NativeType("GLhandleARB") @Unsigned int programObj,
        @Nullable @Pointer(comment="GLcharARB") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetAttribLocationARB);
        try {
            return (int) hFunction.invokeExact(
                programObj,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBufferParameterivARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBufferParameterivARB);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBufferPointervARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBufferPointervARB);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getBufferSubDataARB(
        @NativeType("GLenum") int target,
        @NativeType("GLintptrARB") long offset,
        @NativeType("GLsizeiptrARB") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetBufferSubDataARB);
        try {
            hFunction.invokeExact(
                target,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getClipPlane(
        @NativeType("GLenum") int plane,
        @Nullable @Pointer(comment="GLdouble") DoublePtr equation
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetClipPlane);
        try {
            hFunction.invokeExact(
                plane,
                (MemorySegment) (equation != null ? equation.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getColorTable(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment table
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetColorTable);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                table
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getColorTableParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetColorTableParameterfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getColorTableParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetColorTableParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getCompressedTexImageARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int level,
        @Pointer(comment="void*") @NotNull MemorySegment img
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetCompressedTexImageARB);
        try {
            hFunction.invokeExact(
                target,
                level,
                img
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getConvolutionFilter(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment image
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetConvolutionFilter);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                image
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getConvolutionParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetConvolutionParameterfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getConvolutionParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetConvolutionParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLuint") @Unsigned int getDebugMessageLogAMD(
        @NativeType("GLuint") @Unsigned int count,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLenum") IntPtr categories,
        @Nullable @Pointer(comment="GLenum") IntPtr severities,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr ids,
        @Nullable @Pointer(comment="GLsizei") IntPtr lengths,
        @Nullable @Pointer(comment="GLchar") BytePtr message
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetDebugMessageLogAMD);
        try {
            return (int) hFunction.invokeExact(
                count,
                bufSize,
                (MemorySegment) (categories != null ? categories.segment() : MemorySegment.NULL),
                (MemorySegment) (severities != null ? severities.segment() : MemorySegment.NULL),
                (MemorySegment) (ids != null ? ids.segment() : MemorySegment.NULL),
                (MemorySegment) (lengths != null ? lengths.segment() : MemorySegment.NULL),
                (MemorySegment) (message != null ? message.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFenceivNV(
        @NativeType("GLuint") @Unsigned int fence,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFenceivNV);
        try {
            hFunction.invokeExact(
                fence,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getFragDataLocationEXT(
        @NativeType("GLuint") @Unsigned int program,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFragDataLocationEXT);
        try {
            return (int) hFunction.invokeExact(
                program,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getFramebufferAttachmentParameterivEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int attachment,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetFramebufferAttachmentParameterivEXT);
        try {
            hFunction.invokeExact(
                target,
                attachment,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLhandleARB") @Unsigned int getHandleARB(
        @NativeType("GLenum") int pname
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetHandleARB);
        try {
            return (int) hFunction.invokeExact(
                pname
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getHistogram(
        @NativeType("GLenum") int target,
        @NativeType("GLboolean") @Unsigned byte reset,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetHistogram);
        try {
            hFunction.invokeExact(
                target,
                reset,
                format,
                type,
                values
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getHistogramParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetHistogramParameterfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getHistogramParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetHistogramParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getInfoLogARB(
        @NativeType("GLhandleARB") @Unsigned int obj,
        @NativeType("GLsizei") int maxLength,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLcharARB") BytePtr infoLog
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetInfoLogARB);
        try {
            hFunction.invokeExact(
                obj,
                maxLength,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (infoLog != null ? infoLog.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getLightfv(
        @NativeType("GLenum") int light,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetLightfv);
        try {
            hFunction.invokeExact(
                light,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getLightiv(
        @NativeType("GLenum") int light,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetLightiv);
        try {
            hFunction.invokeExact(
                light,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMapdv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMapdv);
        try {
            hFunction.invokeExact(
                target,
                query,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMapfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMapfv);
        try {
            hFunction.invokeExact(
                target,
                query,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMapiv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMapiv);
        try {
            hFunction.invokeExact(
                target,
                query,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMaterialfv(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMaterialfv);
        try {
            hFunction.invokeExact(
                face,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMaterialiv(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMaterialiv);
        try {
            hFunction.invokeExact(
                face,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMinmax(
        @NativeType("GLenum") int target,
        @NativeType("GLboolean") @Unsigned byte reset,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMinmax);
        try {
            hFunction.invokeExact(
                target,
                reset,
                format,
                type,
                values
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMinmaxParameterfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMinmaxParameterfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMinmaxParameteriv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMinmaxParameteriv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getMultisamplefvNV(
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr val
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetMultisamplefvNV);
        try {
            hFunction.invokeExact(
                pname,
                index,
                (MemorySegment) (val != null ? val.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getObjectParameterfvARB(
        @NativeType("GLhandleARB") @Unsigned int obj,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetObjectParameterfvARB);
        try {
            hFunction.invokeExact(
                obj,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getObjectParameterivARB(
        @NativeType("GLhandleARB") @Unsigned int obj,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetObjectParameterivARB);
        try {
            hFunction.invokeExact(
                obj,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathColorGenfvNV(
        @NativeType("GLenum") int color,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathColorGenfvNV);
        try {
            hFunction.invokeExact(
                color,
                pname,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathColorGenivNV(
        @NativeType("GLenum") int color,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathColorGenivNV);
        try {
            hFunction.invokeExact(
                color,
                pname,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathTexGenfvNV(
        @NativeType("GLenum") int texCoordSet,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathTexGenfvNV);
        try {
            hFunction.invokeExact(
                texCoordSet,
                pname,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPathTexGenivNV(
        @NativeType("GLenum") int texCoordSet,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPathTexGenivNV);
        try {
            hFunction.invokeExact(
                texCoordSet,
                pname,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPixelMapfv(
        @NativeType("GLenum") int map,
        @Nullable @Pointer(comment="GLfloat") FloatPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPixelMapfv);
        try {
            hFunction.invokeExact(
                map,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPixelMapuiv(
        @NativeType("GLenum") int map,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPixelMapuiv);
        try {
            hFunction.invokeExact(
                map,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPixelMapusv(
        @NativeType("GLenum") int map,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPixelMapusv);
        try {
            hFunction.invokeExact(
                map,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getPolygonStipple(
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetPolygonStipple);
        try {
            hFunction.invokeExact(
                (MemorySegment) (mask != null ? mask.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramEnvParameterdvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramEnvParameterdvARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramEnvParameterfvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramEnvParameterfvARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramLocalParameterdvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramLocalParameterdvARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramLocalParameterfvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramLocalParameterfvARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramStringARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Pointer(comment="void*") @NotNull MemorySegment string
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramStringARB);
        try {
            hFunction.invokeExact(
                target,
                pname,
                string
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getProgramivARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetProgramivARB);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryObjecti64vEXT(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint64") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryObjecti64vEXT);
        try {
            hFunction.invokeExact(
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryObjectivARB(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryObjectivARB);
        try {
            hFunction.invokeExact(
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryObjectui64vEXT(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryObjectui64vEXT);
        try {
            hFunction.invokeExact(
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryObjectuivARB(
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryObjectuivARB);
        try {
            hFunction.invokeExact(
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getQueryivARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetQueryivARB);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getRenderbufferParameterivEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetRenderbufferParameterivEXT);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getSemaphoreParameterivNV(
        @NativeType("GLuint") @Unsigned int semaphore,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSemaphoreParameterivNV);
        try {
            hFunction.invokeExact(
                semaphore,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getSeparableFilter(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment row,
        @Pointer(comment="void*") @NotNull MemorySegment column,
        @Pointer(comment="void*") @NotNull MemorySegment span
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetSeparableFilter);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                row,
                column,
                span
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getShaderSourceARB(
        @NativeType("GLhandleARB") @Unsigned int obj,
        @NativeType("GLsizei") int maxLength,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLcharARB") BytePtr source
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetShaderSourceARB);
        try {
            hFunction.invokeExact(
                obj,
                maxLength,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (source != null ? source.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexEnvfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexEnvfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexEnviv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexEnviv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexGendv(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexGendv);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexGenfv(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexGenfv);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexGeniv(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexGeniv);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexParameterIivEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexParameterIivEXT);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTexParameterIuivEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTexParameterIuivEXT);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTransformFeedbackVaryingEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLsizei") IntPtr length,
        @Nullable @Pointer(comment="GLsizei") IntPtr size,
        @Nullable @Pointer(comment="GLenum") IntPtr type,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTransformFeedbackVaryingEXT);
        try {
            hFunction.invokeExact(
                program,
                index,
                bufSize,
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL),
                (MemorySegment) (size != null ? size.segment() : MemorySegment.NULL),
                (MemorySegment) (type != null ? type.segment() : MemorySegment.NULL),
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getTransformFeedbackVaryingNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr location
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetTransformFeedbackVaryingNV);
        try {
            hFunction.invokeExact(
                program,
                index,
                (MemorySegment) (location != null ? location.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getUniformBufferSizeEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformBufferSizeEXT);
        try {
            return (int) hFunction.invokeExact(
                program,
                location
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getUniformLocationARB(
        @NativeType("GLhandleARB") @Unsigned int programObj,
        @Nullable @Pointer(comment="GLcharARB") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformLocationARB);
        try {
            return (int) hFunction.invokeExact(
                programObj,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLintptr") long getUniformOffsetEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformOffsetEXT);
        try {
            MemorySegment s = (MemorySegment) hFunction.invokeExact(
                program,
                location
            );
            return s.address();
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformfvARB(
        @NativeType("GLhandleARB") @Unsigned int programObj,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformfvARB);
        try {
            hFunction.invokeExact(
                programObj,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformi64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformi64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformivARB(
        @NativeType("GLhandleARB") @Unsigned int programObj,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformivARB);
        try {
            hFunction.invokeExact(
                programObj,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformui64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformui64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getUniformuivEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetUniformuivEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int getVaryingLocationNV(
        @NativeType("GLuint") @Unsigned int program,
        @Nullable @Pointer(comment="GLchar") BytePtr name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVaryingLocationNV);
        try {
            return (int) hFunction.invokeExact(
                program,
                (MemorySegment) (name != null ? name.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribIivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribIivEXT);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribIuivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribIuivEXT);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribLdvEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribLdvEXT);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribPointervARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable PointerPtr pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribPointervARB);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (pointer != null ? pointer.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribdvARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribdvARB);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribfvARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribfvARB);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getVertexAttribivARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetVertexAttribivARB);
        try {
            hFunction.invokeExact(
                index,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnColorTable(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment table
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnColorTable);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                bufSize,
                table
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnColorTableARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment table
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnColorTableARB);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                bufSize,
                table
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnConvolutionFilter(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment image
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnConvolutionFilter);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                bufSize,
                image
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnConvolutionFilterARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment image
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnConvolutionFilterARB);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                bufSize,
                image
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnHistogram(
        @NativeType("GLenum") int target,
        @NativeType("GLboolean") @Unsigned byte reset,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnHistogram);
        try {
            hFunction.invokeExact(
                target,
                reset,
                format,
                type,
                bufSize,
                values
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnHistogramARB(
        @NativeType("GLenum") int target,
        @NativeType("GLboolean") @Unsigned byte reset,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnHistogramARB);
        try {
            hFunction.invokeExact(
                target,
                reset,
                format,
                type,
                bufSize,
                values
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnMapdv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnMapdv);
        try {
            hFunction.invokeExact(
                target,
                query,
                bufSize,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnMapdvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnMapdvARB);
        try {
            hFunction.invokeExact(
                target,
                query,
                bufSize,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnMapfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnMapfv);
        try {
            hFunction.invokeExact(
                target,
                query,
                bufSize,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnMapfvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnMapfvARB);
        try {
            hFunction.invokeExact(
                target,
                query,
                bufSize,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnMapiv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnMapiv);
        try {
            hFunction.invokeExact(
                target,
                query,
                bufSize,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnMapivARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int query,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnMapivARB);
        try {
            hFunction.invokeExact(
                target,
                query,
                bufSize,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnMinmax(
        @NativeType("GLenum") int target,
        @NativeType("GLboolean") @Unsigned byte reset,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnMinmax);
        try {
            hFunction.invokeExact(
                target,
                reset,
                format,
                type,
                bufSize,
                values
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnMinmaxARB(
        @NativeType("GLenum") int target,
        @NativeType("GLboolean") @Unsigned byte reset,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int bufSize,
        @Pointer(comment="void*") @NotNull MemorySegment values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnMinmaxARB);
        try {
            hFunction.invokeExact(
                target,
                reset,
                format,
                type,
                bufSize,
                values
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnPixelMapfv(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnPixelMapfv);
        try {
            hFunction.invokeExact(
                map,
                bufSize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnPixelMapfvARB(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnPixelMapfvARB);
        try {
            hFunction.invokeExact(
                map,
                bufSize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnPixelMapuiv(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnPixelMapuiv);
        try {
            hFunction.invokeExact(
                map,
                bufSize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnPixelMapuivARB(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnPixelMapuivARB);
        try {
            hFunction.invokeExact(
                map,
                bufSize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnPixelMapusv(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnPixelMapusv);
        try {
            hFunction.invokeExact(
                map,
                bufSize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnPixelMapusvARB(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnPixelMapusvARB);
        try {
            hFunction.invokeExact(
                map,
                bufSize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnPolygonStipple(
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr pattern
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnPolygonStipple);
        try {
            hFunction.invokeExact(
                bufSize,
                (MemorySegment) (pattern != null ? pattern.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnPolygonStippleARB(
        @NativeType("GLsizei") int bufSize,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr pattern
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnPolygonStippleARB);
        try {
            hFunction.invokeExact(
                bufSize,
                (MemorySegment) (pattern != null ? pattern.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnSeparableFilter(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int rowBufSize,
        @Pointer(comment="void*") @NotNull MemorySegment row,
        @NativeType("GLsizei") int columnBufSize,
        @Pointer(comment="void*") @NotNull MemorySegment column,
        @Pointer(comment="void*") @NotNull MemorySegment span
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnSeparableFilter);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                rowBufSize,
                row,
                columnBufSize,
                column,
                span
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void getnSeparableFilterARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int rowBufSize,
        @Pointer(comment="void*") @NotNull MemorySegment row,
        @NativeType("GLsizei") int columnBufSize,
        @Pointer(comment="void*") @NotNull MemorySegment column,
        @Pointer(comment="void*") @NotNull MemorySegment span
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glGetnSeparableFilterARB);
        try {
            hFunction.invokeExact(
                target,
                format,
                type,
                rowBufSize,
                row,
                columnBufSize,
                column,
                span
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void histogram(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int width,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLboolean") @Unsigned byte sink
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glHistogram);
        try {
            hFunction.invokeExact(
                target,
                width,
                internalformat,
                sink
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Nullable GLsync importSyncEXT(
        @NativeType("GLenum") int external_sync_type,
        @NativeType("GLintptr") long external_sync,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glImportSyncEXT);
        try {
            MemorySegment s = (MemorySegment) hFunction.invokeExact(
                external_sync_type,
                MemorySegment.ofAddress(external_sync),
                flags
            );
            return s.equals(MemorySegment.NULL) ? null : new GLsync(s);
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexMask(
        @NativeType("GLuint") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexMask);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexPointer(
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexPointer);
        try {
            hFunction.invokeExact(
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexd(
        @NativeType("GLdouble") double c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexd);
        try {
            hFunction.invokeExact(
                c
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexdv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexdv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (c != null ? c.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexf(
        @NativeType("GLfloat") float c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexf);
        try {
            hFunction.invokeExact(
                c
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexfv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexfv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (c != null ? c.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexi(
        @NativeType("GLint") int c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexi);
        try {
            hFunction.invokeExact(
                c
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexiv(
        @Nullable @Pointer(comment="GLint") IntPtr c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexiv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (c != null ? c.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexs(
        @NativeType("GLshort") short c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexs);
        try {
            hFunction.invokeExact(
                c
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexsv(
        @Nullable @Pointer(comment="GLshort") ShortPtr c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexsv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (c != null ? c.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexub(
        @NativeType("GLubyte") @Unsigned byte c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexub);
        try {
            hFunction.invokeExact(
                c
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void indexubv(
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr c
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIndexubv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (c != null ? c.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void initNames() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInitNames);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void interleavedArrays(
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glInterleavedArrays);
        try {
            hFunction.invokeExact(
                format,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isBufferARB(
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsBufferARB);
        try {
            return (byte) hFunction.invokeExact(
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isFenceNV(
        @NativeType("GLuint") @Unsigned int fence
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsFenceNV);
        try {
            return (byte) hFunction.invokeExact(
                fence
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isFramebufferEXT(
        @NativeType("GLuint") @Unsigned int framebuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsFramebufferEXT);
        try {
            return (byte) hFunction.invokeExact(
                framebuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isList(
        @NativeType("GLuint") @Unsigned int list
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsList);
        try {
            return (byte) hFunction.invokeExact(
                list
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isProgramARB(
        @NativeType("GLuint") @Unsigned int program
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsProgramARB);
        try {
            return (byte) hFunction.invokeExact(
                program
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isQueryARB(
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsQueryARB);
        try {
            return (byte) hFunction.invokeExact(
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isRenderbufferEXT(
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsRenderbufferEXT);
        try {
            return (byte) hFunction.invokeExact(
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte isTransformFeedbackNV(
        @NativeType("GLuint") @Unsigned int id
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glIsTransformFeedbackNV);
        try {
            return (byte) hFunction.invokeExact(
                id
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lightModelf(
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLightModelf);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lightModelfv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLightModelfv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lightModeli(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLightModeli);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lightModeliv(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLightModeliv);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lightf(
        @NativeType("GLenum") int light,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLightf);
        try {
            hFunction.invokeExact(
                light,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lightfv(
        @NativeType("GLenum") int light,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLightfv);
        try {
            hFunction.invokeExact(
                light,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lighti(
        @NativeType("GLenum") int light,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLighti);
        try {
            hFunction.invokeExact(
                light,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lightiv(
        @NativeType("GLenum") int light,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLightiv);
        try {
            hFunction.invokeExact(
                light,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lineStipple(
        @NativeType("GLint") int factor,
        @NativeType("GLushort") @Unsigned short pattern
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLineStipple);
        try {
            hFunction.invokeExact(
                factor,
                pattern
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void linkProgramARB(
        @NativeType("GLhandleARB") @Unsigned int programObj
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLinkProgramARB);
        try {
            hFunction.invokeExact(
                programObj
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void listBase(
        @NativeType("GLuint") @Unsigned int base
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glListBase);
        try {
            hFunction.invokeExact(
                base
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void loadIdentity() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLoadIdentity);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void loadMatrixd(
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLoadMatrixd);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void loadMatrixf(
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLoadMatrixf);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void loadName(
        @NativeType("GLuint") @Unsigned int name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLoadName);
        try {
            hFunction.invokeExact(
                name
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void loadTransposeMatrixd(
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLoadTransposeMatrixd);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void loadTransposeMatrixdARB(
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLoadTransposeMatrixdARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void loadTransposeMatrixf(
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLoadTransposeMatrixf);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void loadTransposeMatrixfARB(
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLoadTransposeMatrixfARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void lockArraysEXT(
        @NativeType("GLint") int first,
        @NativeType("GLsizei") int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glLockArraysEXT);
        try {
            hFunction.invokeExact(
                first,
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void map1d(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double u1,
        @NativeType("GLdouble") double u2,
        @NativeType("GLint") int stride,
        @NativeType("GLint") int order,
        @Nullable @Pointer(comment="GLdouble") DoublePtr points
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMap1d);
        try {
            hFunction.invokeExact(
                target,
                u1,
                u2,
                stride,
                order,
                (MemorySegment) (points != null ? points.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void map1f(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float u1,
        @NativeType("GLfloat") float u2,
        @NativeType("GLint") int stride,
        @NativeType("GLint") int order,
        @Nullable @Pointer(comment="GLfloat") FloatPtr points
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMap1f);
        try {
            hFunction.invokeExact(
                target,
                u1,
                u2,
                stride,
                order,
                (MemorySegment) (points != null ? points.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void map2d(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double u1,
        @NativeType("GLdouble") double u2,
        @NativeType("GLint") int ustride,
        @NativeType("GLint") int uorder,
        @NativeType("GLdouble") double v1,
        @NativeType("GLdouble") double v2,
        @NativeType("GLint") int vstride,
        @NativeType("GLint") int vorder,
        @Nullable @Pointer(comment="GLdouble") DoublePtr points
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMap2d);
        try {
            hFunction.invokeExact(
                target,
                u1,
                u2,
                ustride,
                uorder,
                v1,
                v2,
                vstride,
                vorder,
                (MemorySegment) (points != null ? points.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void map2f(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float u1,
        @NativeType("GLfloat") float u2,
        @NativeType("GLint") int ustride,
        @NativeType("GLint") int uorder,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2,
        @NativeType("GLint") int vstride,
        @NativeType("GLint") int vorder,
        @Nullable @Pointer(comment="GLfloat") FloatPtr points
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMap2f);
        try {
            hFunction.invokeExact(
                target,
                u1,
                u2,
                ustride,
                uorder,
                v1,
                v2,
                vstride,
                vorder,
                (MemorySegment) (points != null ? points.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="void*") @NotNull MemorySegment mapBufferARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int access
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapBufferARB);
        try {
            return (MemorySegment) hFunction.invokeExact(
                target,
                access
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void mapGrid1d(
        @NativeType("GLint") int un,
        @NativeType("GLdouble") double u1,
        @NativeType("GLdouble") double u2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapGrid1d);
        try {
            hFunction.invokeExact(
                un,
                u1,
                u2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void mapGrid1f(
        @NativeType("GLint") int un,
        @NativeType("GLfloat") float u1,
        @NativeType("GLfloat") float u2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapGrid1f);
        try {
            hFunction.invokeExact(
                un,
                u1,
                u2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void mapGrid2d(
        @NativeType("GLint") int un,
        @NativeType("GLdouble") double u1,
        @NativeType("GLdouble") double u2,
        @NativeType("GLint") int vn,
        @NativeType("GLdouble") double v1,
        @NativeType("GLdouble") double v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapGrid2d);
        try {
            hFunction.invokeExact(
                un,
                u1,
                u2,
                vn,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void mapGrid2f(
        @NativeType("GLint") int un,
        @NativeType("GLfloat") float u1,
        @NativeType("GLfloat") float u2,
        @NativeType("GLint") int vn,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapGrid2f);
        try {
            hFunction.invokeExact(
                un,
                u1,
                u2,
                vn,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @Pointer(comment="void*") @NotNull MemorySegment mapTexture2DINTEL(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level,
        @NativeType("GLbitfield") @Unsigned int access,
        @Nullable @Pointer(comment="GLint") IntPtr stride,
        @Nullable @Pointer(comment="GLenum") IntPtr layout
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMapTexture2DINTEL);
        try {
            return (MemorySegment) hFunction.invokeExact(
                texture,
                level,
                access,
                (MemorySegment) (stride != null ? stride.segment() : MemorySegment.NULL),
                (MemorySegment) (layout != null ? layout.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void materialf(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMaterialf);
        try {
            hFunction.invokeExact(
                face,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void materialfv(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMaterialfv);
        try {
            hFunction.invokeExact(
                face,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void materiali(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMateriali);
        try {
            hFunction.invokeExact(
                face,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void materialiv(
        @NativeType("GLenum") int face,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMaterialiv);
        try {
            hFunction.invokeExact(
                face,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixIndexPointerARB(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixIndexPointerARB);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixIndexubvARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr indices
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixIndexubvARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (indices != null ? indices.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixIndexuivARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr indices
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixIndexuivARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (indices != null ? indices.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixIndexusvARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr indices
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixIndexusvARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (indices != null ? indices.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void matrixMode(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMatrixMode);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void memoryBarrierEXT(
        @NativeType("GLbitfield") @Unsigned int barriers
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMemoryBarrierEXT);
        try {
            hFunction.invokeExact(
                barriers
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void minmax(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLboolean") @Unsigned byte sink
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMinmax);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                sink
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multMatrixd(
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultMatrixd);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multMatrixf(
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultMatrixf);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multTransposeMatrixd(
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultTransposeMatrixd);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multTransposeMatrixdARB(
        @Nullable @Pointer(comment="GLdouble") DoublePtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultTransposeMatrixdARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multTransposeMatrixf(
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultTransposeMatrixf);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multTransposeMatrixfARB(
        @Nullable @Pointer(comment="GLfloat") FloatPtr m
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultTransposeMatrixfARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (m != null ? m.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1d(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1d);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1dARB(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1dARB);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1dv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1dv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1dvARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1dvARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1f(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1f);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1fARB(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1fARB);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1fv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1fv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1fvARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1fvARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1hNV(
        @NativeType("GLenum") int target,
        @NativeType("GLhalfNV") @Unsigned short s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1hNV);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1hvNV(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1hvNV);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1i(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1i);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1iARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1iARB);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1iv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1iv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1ivARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1ivARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1s(
        @NativeType("GLenum") int target,
        @NativeType("GLshort") short s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1s);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1sARB(
        @NativeType("GLenum") int target,
        @NativeType("GLshort") short s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1sARB);
        try {
            hFunction.invokeExact(
                target,
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1sv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1sv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord1svARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord1svARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2d(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2d);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2dARB(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2dARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2dv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2dv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2dvARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2dvARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2f(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2f);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2fARB(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2fARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2fv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2fv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2fvARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2fvARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2hNV(
        @NativeType("GLenum") int target,
        @NativeType("GLhalfNV") @Unsigned short s,
        @NativeType("GLhalfNV") @Unsigned short t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2hNV);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2hvNV(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2hvNV);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2i(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int s,
        @NativeType("GLint") int t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2i);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2iARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int s,
        @NativeType("GLint") int t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2iARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2iv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2iv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2ivARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2ivARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2s(
        @NativeType("GLenum") int target,
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2s);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2sARB(
        @NativeType("GLenum") int target,
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2sARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2sv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2sv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord2svARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord2svARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3d(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t,
        @NativeType("GLdouble") double r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3d);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3dARB(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t,
        @NativeType("GLdouble") double r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3dARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3dv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3dv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3dvARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3dvARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3f(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t,
        @NativeType("GLfloat") float r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3f);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3fARB(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t,
        @NativeType("GLfloat") float r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3fARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3fv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3fv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3fvARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3fvARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3hNV(
        @NativeType("GLenum") int target,
        @NativeType("GLhalfNV") @Unsigned short s,
        @NativeType("GLhalfNV") @Unsigned short t,
        @NativeType("GLhalfNV") @Unsigned short r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3hNV);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3hvNV(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3hvNV);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3i(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int s,
        @NativeType("GLint") int t,
        @NativeType("GLint") int r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3i);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3iARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int s,
        @NativeType("GLint") int t,
        @NativeType("GLint") int r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3iARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3iv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3iv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3ivARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3ivARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3s(
        @NativeType("GLenum") int target,
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t,
        @NativeType("GLshort") short r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3s);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3sARB(
        @NativeType("GLenum") int target,
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t,
        @NativeType("GLshort") short r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3sARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3sv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3sv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord3svARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord3svARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4d(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t,
        @NativeType("GLdouble") double r,
        @NativeType("GLdouble") double q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4d);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4dARB(
        @NativeType("GLenum") int target,
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t,
        @NativeType("GLdouble") double r,
        @NativeType("GLdouble") double q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4dARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4dv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4dv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4dvARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4dvARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4f(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t,
        @NativeType("GLfloat") float r,
        @NativeType("GLfloat") float q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4f);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4fARB(
        @NativeType("GLenum") int target,
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t,
        @NativeType("GLfloat") float r,
        @NativeType("GLfloat") float q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4fARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4fv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4fv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4fvARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4fvARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4hNV(
        @NativeType("GLenum") int target,
        @NativeType("GLhalfNV") @Unsigned short s,
        @NativeType("GLhalfNV") @Unsigned short t,
        @NativeType("GLhalfNV") @Unsigned short r,
        @NativeType("GLhalfNV") @Unsigned short q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4hNV);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4hvNV(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4hvNV);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4i(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int s,
        @NativeType("GLint") int t,
        @NativeType("GLint") int r,
        @NativeType("GLint") int q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4i);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4iARB(
        @NativeType("GLenum") int target,
        @NativeType("GLint") int s,
        @NativeType("GLint") int t,
        @NativeType("GLint") int r,
        @NativeType("GLint") int q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4iARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4iv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4iv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4ivARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4ivARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4s(
        @NativeType("GLenum") int target,
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t,
        @NativeType("GLshort") short r,
        @NativeType("GLshort") short q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4s);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4sARB(
        @NativeType("GLenum") int target,
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t,
        @NativeType("GLshort") short r,
        @NativeType("GLshort") short q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4sARB);
        try {
            hFunction.invokeExact(
                target,
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4sv(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4sv);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoord4svARB(
        @NativeType("GLenum") int target,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoord4svARB);
        try {
            hFunction.invokeExact(
                target,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordP1ui(
        @NativeType("GLenum") int texture,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordP1ui);
        try {
            hFunction.invokeExact(
                texture,
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordP1uiv(
        @NativeType("GLenum") int texture,
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordP1uiv);
        try {
            hFunction.invokeExact(
                texture,
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordP2ui(
        @NativeType("GLenum") int texture,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordP2ui);
        try {
            hFunction.invokeExact(
                texture,
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordP2uiv(
        @NativeType("GLenum") int texture,
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordP2uiv);
        try {
            hFunction.invokeExact(
                texture,
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordP3ui(
        @NativeType("GLenum") int texture,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordP3ui);
        try {
            hFunction.invokeExact(
                texture,
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordP3uiv(
        @NativeType("GLenum") int texture,
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordP3uiv);
        try {
            hFunction.invokeExact(
                texture,
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordP4ui(
        @NativeType("GLenum") int texture,
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordP4ui);
        try {
            hFunction.invokeExact(
                texture,
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multiTexCoordP4uiv(
        @NativeType("GLenum") int texture,
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMultiTexCoordP4uiv);
        try {
            hFunction.invokeExact(
                texture,
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastBarrierNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastBarrierNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastBlitFramebufferNV(
        @NativeType("GLuint") @Unsigned int srcGpu,
        @NativeType("GLuint") @Unsigned int dstGpu,
        @NativeType("GLint") int srcX0,
        @NativeType("GLint") int srcY0,
        @NativeType("GLint") int srcX1,
        @NativeType("GLint") int srcY1,
        @NativeType("GLint") int dstX0,
        @NativeType("GLint") int dstY0,
        @NativeType("GLint") int dstX1,
        @NativeType("GLint") int dstY1,
        @NativeType("GLbitfield") @Unsigned int mask,
        @NativeType("GLenum") int filter
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastBlitFramebufferNV);
        try {
            hFunction.invokeExact(
                srcGpu,
                dstGpu,
                srcX0,
                srcY0,
                srcX1,
                srcY1,
                dstX0,
                dstY0,
                dstX1,
                dstY1,
                mask,
                filter
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastBufferSubDataNV(
        @NativeType("GLbitfield") @Unsigned int gpuMask,
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Pointer(comment="void*") @NotNull MemorySegment data
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastBufferSubDataNV);
        try {
            hFunction.invokeExact(
                gpuMask,
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                data
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastCopyBufferSubDataNV(
        @NativeType("GLuint") @Unsigned int readGpu,
        @NativeType("GLbitfield") @Unsigned int writeGpuMask,
        @NativeType("GLuint") @Unsigned int readBuffer,
        @NativeType("GLuint") @Unsigned int writeBuffer,
        @NativeType("GLintptr") long readOffset,
        @NativeType("GLintptr") long writeOffset,
        @NativeType("GLsizeiptr") long size
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastCopyBufferSubDataNV);
        try {
            hFunction.invokeExact(
                readGpu,
                writeGpuMask,
                readBuffer,
                writeBuffer,
                MemorySegment.ofAddress(readOffset),
                MemorySegment.ofAddress(writeOffset),
                MemorySegment.ofAddress(size)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastCopyImageSubDataNV(
        @NativeType("GLuint") @Unsigned int srcGpu,
        @NativeType("GLbitfield") @Unsigned int dstGpuMask,
        @NativeType("GLuint") @Unsigned int srcName,
        @NativeType("GLenum") int srcTarget,
        @NativeType("GLint") int srcLevel,
        @NativeType("GLint") int srcX,
        @NativeType("GLint") int srcY,
        @NativeType("GLint") int srcZ,
        @NativeType("GLuint") @Unsigned int dstName,
        @NativeType("GLenum") int dstTarget,
        @NativeType("GLint") int dstLevel,
        @NativeType("GLint") int dstX,
        @NativeType("GLint") int dstY,
        @NativeType("GLint") int dstZ,
        @NativeType("GLsizei") int srcWidth,
        @NativeType("GLsizei") int srcHeight,
        @NativeType("GLsizei") int srcDepth
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastCopyImageSubDataNV);
        try {
            hFunction.invokeExact(
                srcGpu,
                dstGpuMask,
                srcName,
                srcTarget,
                srcLevel,
                srcX,
                srcY,
                srcZ,
                dstName,
                dstTarget,
                dstLevel,
                dstX,
                dstY,
                dstZ,
                srcWidth,
                srcHeight,
                srcDepth
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastFramebufferSampleLocationsfvNV(
        @NativeType("GLuint") @Unsigned int gpu,
        @NativeType("GLuint") @Unsigned int framebuffer,
        @NativeType("GLuint") @Unsigned int start,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastFramebufferSampleLocationsfvNV);
        try {
            hFunction.invokeExact(
                gpu,
                framebuffer,
                start,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastGetQueryObjecti64vNV(
        @NativeType("GLuint") @Unsigned int gpu,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint64") LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastGetQueryObjecti64vNV);
        try {
            hFunction.invokeExact(
                gpu,
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastGetQueryObjectivNV(
        @NativeType("GLuint") @Unsigned int gpu,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastGetQueryObjectivNV);
        try {
            hFunction.invokeExact(
                gpu,
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastGetQueryObjectui64vNV(
        @NativeType("GLuint") @Unsigned int gpu,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastGetQueryObjectui64vNV);
        try {
            hFunction.invokeExact(
                gpu,
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastGetQueryObjectuivNV(
        @NativeType("GLuint") @Unsigned int gpu,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastGetQueryObjectuivNV);
        try {
            hFunction.invokeExact(
                gpu,
                id,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastScissorArrayvNVX(
        @NativeType("GLuint") @Unsigned int gpu,
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastScissorArrayvNVX);
        try {
            hFunction.invokeExact(
                gpu,
                first,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastViewportArrayvNVX(
        @NativeType("GLuint") @Unsigned int gpu,
        @NativeType("GLuint") @Unsigned int first,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastViewportArrayvNVX);
        try {
            hFunction.invokeExact(
                gpu,
                first,
                count,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastViewportPositionWScaleNVX(
        @NativeType("GLuint") @Unsigned int gpu,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float xcoeff,
        @NativeType("GLfloat") float ycoeff
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastViewportPositionWScaleNVX);
        try {
            hFunction.invokeExact(
                gpu,
                index,
                xcoeff,
                ycoeff
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void multicastWaitSyncNV(
        @NativeType("GLuint") @Unsigned int signalGpu,
        @NativeType("GLbitfield") @Unsigned int waitGpuMask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glMulticastWaitSyncNV);
        try {
            hFunction.invokeExact(
                signalGpu,
                waitGpuMask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void namedBufferStorageExternalEXT(
        @NativeType("GLuint") @Unsigned int buffer,
        @NativeType("GLintptr") long offset,
        @NativeType("GLsizeiptr") long size,
        @Nullable GLeglClientBufferEXT clientBuffer,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNamedBufferStorageExternalEXT);
        try {
            hFunction.invokeExact(
                buffer,
                MemorySegment.ofAddress(offset),
                MemorySegment.ofAddress(size),
                (MemorySegment) (clientBuffer != null ? clientBuffer.segment() : MemorySegment.NULL),
                flags
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void newList(
        @NativeType("GLuint") @Unsigned int list,
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNewList);
        try {
            hFunction.invokeExact(
                list,
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3b(
        @NativeType("GLbyte") byte nx,
        @NativeType("GLbyte") byte ny,
        @NativeType("GLbyte") byte nz
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3b);
        try {
            hFunction.invokeExact(
                nx,
                ny,
                nz
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3bv(
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3bv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3d(
        @NativeType("GLdouble") double nx,
        @NativeType("GLdouble") double ny,
        @NativeType("GLdouble") double nz
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3d);
        try {
            hFunction.invokeExact(
                nx,
                ny,
                nz
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3f(
        @NativeType("GLfloat") float nx,
        @NativeType("GLfloat") float ny,
        @NativeType("GLfloat") float nz
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3f);
        try {
            hFunction.invokeExact(
                nx,
                ny,
                nz
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3hNV(
        @NativeType("GLhalfNV") @Unsigned short nx,
        @NativeType("GLhalfNV") @Unsigned short ny,
        @NativeType("GLhalfNV") @Unsigned short nz
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3hNV);
        try {
            hFunction.invokeExact(
                nx,
                ny,
                nz
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3i(
        @NativeType("GLint") int nx,
        @NativeType("GLint") int ny,
        @NativeType("GLint") int nz
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3i);
        try {
            hFunction.invokeExact(
                nx,
                ny,
                nz
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3s(
        @NativeType("GLshort") short nx,
        @NativeType("GLshort") short ny,
        @NativeType("GLshort") short nz
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3s);
        try {
            hFunction.invokeExact(
                nx,
                ny,
                nz
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normal3sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormal3sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normalP3ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormalP3ui);
        try {
            hFunction.invokeExact(
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normalP3uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormalP3uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void normalPointer(
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glNormalPointer);
        try {
            hFunction.invokeExact(
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void ortho(
        @NativeType("GLdouble") double left,
        @NativeType("GLdouble") double right,
        @NativeType("GLdouble") double bottom,
        @NativeType("GLdouble") double top,
        @NativeType("GLdouble") double zNear,
        @NativeType("GLdouble") double zFar
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glOrtho);
        try {
            hFunction.invokeExact(
                left,
                right,
                bottom,
                top,
                zNear,
                zFar
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void passThrough(
        @NativeType("GLfloat") float token
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPassThrough);
        try {
            hFunction.invokeExact(
                token
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathColorGenNV(
        @NativeType("GLenum") int color,
        @NativeType("GLenum") int genMode,
        @NativeType("GLenum") int colorFormat,
        @Nullable @Pointer(comment="GLfloat") FloatPtr coeffs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathColorGenNV);
        try {
            hFunction.invokeExact(
                color,
                genMode,
                colorFormat,
                (MemorySegment) (coeffs != null ? coeffs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathFogGenNV(
        @NativeType("GLenum") int genMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathFogGenNV);
        try {
            hFunction.invokeExact(
                genMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pathTexGenNV(
        @NativeType("GLenum") int texCoordSet,
        @NativeType("GLenum") int genMode,
        @NativeType("GLint") int components,
        @Nullable @Pointer(comment="GLfloat") FloatPtr coeffs
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPathTexGenNV);
        try {
            hFunction.invokeExact(
                texCoordSet,
                genMode,
                components,
                (MemorySegment) (coeffs != null ? coeffs.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pauseTransformFeedbackNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPauseTransformFeedbackNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelDataRangeNV(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int length,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelDataRangeNV);
        try {
            hFunction.invokeExact(
                target,
                length,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelMapfv(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int mapsize,
        @Nullable @Pointer(comment="GLfloat") FloatPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelMapfv);
        try {
            hFunction.invokeExact(
                map,
                mapsize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelMapuiv(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int mapsize,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelMapuiv);
        try {
            hFunction.invokeExact(
                map,
                mapsize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelMapusv(
        @NativeType("GLenum") int map,
        @NativeType("GLsizei") int mapsize,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr values
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelMapusv);
        try {
            hFunction.invokeExact(
                map,
                mapsize,
                (MemorySegment) (values != null ? values.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelTransferf(
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelTransferf);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelTransferi(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelTransferi);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pixelZoom(
        @NativeType("GLfloat") float xfactor,
        @NativeType("GLfloat") float yfactor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPixelZoom);
        try {
            hFunction.invokeExact(
                xfactor,
                yfactor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameterfARB(
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameterfARB);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameterfEXT(
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameterfEXT);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameterfvARB(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameterfvARB);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameterfvEXT(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameterfvEXT);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameteriNV(
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameteriNV);
        try {
            hFunction.invokeExact(
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pointParameterivNV(
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPointParameterivNV);
        try {
            hFunction.invokeExact(
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void polygonStipple(
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPolygonStipple);
        try {
            hFunction.invokeExact(
                (MemorySegment) (mask != null ? mask.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void popAttrib() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPopAttrib);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void popClientAttrib() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPopClientAttrib);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void popMatrix() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPopMatrix);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void popName() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPopName);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void primitiveRestartIndexNV(
        @NativeType("GLuint") @Unsigned int index
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPrimitiveRestartIndexNV);
        try {
            hFunction.invokeExact(
                index
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void primitiveRestartNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPrimitiveRestartNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void prioritizeTextures(
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr textures,
        @Nullable @Pointer(comment="GLfloat") FloatPtr priorities
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPrioritizeTextures);
        try {
            hFunction.invokeExact(
                n,
                (MemorySegment) (textures != null ? textures.segment() : MemorySegment.NULL),
                (MemorySegment) (priorities != null ? priorities.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programEnvParameter4dARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramEnvParameter4dARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programEnvParameter4dvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramEnvParameter4dvARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programEnvParameter4fARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramEnvParameter4fARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programEnvParameter4fvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramEnvParameter4fvARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programEnvParameters4fvEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramEnvParameters4fvEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programLocalParameter4dARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramLocalParameter4dARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programLocalParameter4dvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramLocalParameter4dvARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programLocalParameter4fARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramLocalParameter4fARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programLocalParameter4fvARB(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramLocalParameter4fvARB);
        try {
            hFunction.invokeExact(
                target,
                index,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programLocalParameters4fvEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramLocalParameters4fvEXT);
        try {
            hFunction.invokeExact(
                target,
                index,
                count,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programParameteriEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramParameteriEXT);
        try {
            hFunction.invokeExact(
                program,
                pname,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programStringARB(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int format,
        @NativeType("GLsizei") int len,
        @Pointer(comment="void*") @NotNull MemorySegment string
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramStringARB);
        try {
            hFunction.invokeExact(
                target,
                format,
                len,
                string
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1i64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint64EXT") long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1i64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1i64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1i64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1ui64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1ui64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform1ui64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform1ui64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2i64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2i64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2i64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2i64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2ui64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2ui64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform2ui64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform2ui64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3i64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y,
        @NativeType("GLint64EXT") long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3i64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3i64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3i64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3ui64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y,
        @NativeType("GLuint64EXT") @Unsigned long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3ui64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform3ui64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform3ui64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4i64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y,
        @NativeType("GLint64EXT") long z,
        @NativeType("GLint64EXT") long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4i64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4i64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4i64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4ui64NV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y,
        @NativeType("GLuint64EXT") @Unsigned long z,
        @NativeType("GLuint64EXT") @Unsigned long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4ui64NV);
        try {
            hFunction.invokeExact(
                program,
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void programUniform4ui64vNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProgramUniform4ui64vNV);
        try {
            hFunction.invokeExact(
                program,
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void provokingVertexEXT(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glProvokingVertexEXT);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pushAttrib(
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPushAttrib);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pushClientAttrib(
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPushClientAttrib);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pushMatrix() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPushMatrix);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void pushName(
        @NativeType("GLuint") @Unsigned int name
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glPushName);
        try {
            hFunction.invokeExact(
                name
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void queryObjectParameteruiAMD(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int id,
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glQueryObjectParameteruiAMD);
        try {
            hFunction.invokeExact(
                target,
                id,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int queryResourceNV(
        @NativeType("GLenum") int queryType,
        @NativeType("GLint") int tagId,
        @NativeType("GLuint") @Unsigned int count,
        @Nullable @Pointer(comment="GLint") IntPtr buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glQueryResourceNV);
        try {
            return (int) hFunction.invokeExact(
                queryType,
                tagId,
                count,
                (MemorySegment) (buffer != null ? buffer.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void queryResourceTagNV(
        @NativeType("GLint") int tagId,
        @Nullable @Pointer(comment="GLchar") BytePtr tagString
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glQueryResourceTagNV);
        try {
            hFunction.invokeExact(
                tagId,
                (MemorySegment) (tagString != null ? tagString.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos2d(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos2d);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos2dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos2dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos2f(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos2f);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos2fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos2fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos2i(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos2i);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos2iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos2iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos2s(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos2s);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos2sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos2sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos3d(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos3d);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos3dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos3dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos3f(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos3f);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos3fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos3fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos3i(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos3i);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos3iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos3iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos3s(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos3s);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos3sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos3sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos4d(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos4d);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos4dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos4dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos4f(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos4f);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos4fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos4fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos4i(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z,
        @NativeType("GLint") int w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos4i);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos4iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos4iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos4s(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z,
        @NativeType("GLshort") short w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos4s);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rasterPos4sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRasterPos4sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rectd(
        @NativeType("GLdouble") double x1,
        @NativeType("GLdouble") double y1,
        @NativeType("GLdouble") double x2,
        @NativeType("GLdouble") double y2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRectd);
        try {
            hFunction.invokeExact(
                x1,
                y1,
                x2,
                y2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rectdv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v1,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRectdv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v1 != null ? v1.segment() : MemorySegment.NULL),
                (MemorySegment) (v2 != null ? v2.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rectf(
        @NativeType("GLfloat") float x1,
        @NativeType("GLfloat") float y1,
        @NativeType("GLfloat") float x2,
        @NativeType("GLfloat") float y2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRectf);
        try {
            hFunction.invokeExact(
                x1,
                y1,
                x2,
                y2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rectfv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v1,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRectfv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v1 != null ? v1.segment() : MemorySegment.NULL),
                (MemorySegment) (v2 != null ? v2.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void recti(
        @NativeType("GLint") int x1,
        @NativeType("GLint") int y1,
        @NativeType("GLint") int x2,
        @NativeType("GLint") int y2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRecti);
        try {
            hFunction.invokeExact(
                x1,
                y1,
                x2,
                y2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rectiv(
        @Nullable @Pointer(comment="GLint") IntPtr v1,
        @Nullable @Pointer(comment="GLint") IntPtr v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRectiv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v1 != null ? v1.segment() : MemorySegment.NULL),
                (MemorySegment) (v2 != null ? v2.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rects(
        @NativeType("GLshort") short x1,
        @NativeType("GLshort") short y1,
        @NativeType("GLshort") short x2,
        @NativeType("GLshort") short y2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRects);
        try {
            hFunction.invokeExact(
                x1,
                y1,
                x2,
                y2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rectsv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v1,
        @Nullable @Pointer(comment="GLshort") ShortPtr v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRectsv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v1 != null ? v1.segment() : MemorySegment.NULL),
                (MemorySegment) (v2 != null ? v2.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte releaseKeyedMutexWin32EXT(
        @NativeType("GLuint") @Unsigned int memory,
        @NativeType("GLuint64") @Unsigned long key
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glReleaseKeyedMutexWin32EXT);
        try {
            return (byte) hFunction.invokeExact(
                memory,
                key
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void renderGpuMaskNV(
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRenderGpuMaskNV);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLint") int renderMode(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRenderMode);
        try {
            return (int) hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void renderbufferStorageEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRenderbufferStorageEXT);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void renderbufferStorageMultisampleEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRenderbufferStorageMultisampleEXT);
        try {
            hFunction.invokeExact(
                target,
                samples,
                internalformat,
                width,
                height
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void resetHistogram(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glResetHistogram);
        try {
            hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void resetMinmax(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glResetMinmax);
        try {
            hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void resumeTransformFeedbackNV() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glResumeTransformFeedbackNV);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rotated(
        @NativeType("GLdouble") double angle,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRotated);
        try {
            hFunction.invokeExact(
                angle,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void rotatef(
        @NativeType("GLfloat") float angle,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glRotatef);
        try {
            hFunction.invokeExact(
                angle,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void sampleCoverageARB(
        @NativeType("GLfloat") float value,
        @NativeType("GLboolean") @Unsigned byte invert
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSampleCoverageARB);
        try {
            hFunction.invokeExact(
                value,
                invert
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void sampleMaskIndexedNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSampleMaskIndexedNV);
        try {
            hFunction.invokeExact(
                index,
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void scaled(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glScaled);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void scalef(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glScalef);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3b(
        @NativeType("GLbyte") byte red,
        @NativeType("GLbyte") byte green,
        @NativeType("GLbyte") byte blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3b);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3bEXT(
        @NativeType("GLbyte") byte red,
        @NativeType("GLbyte") byte green,
        @NativeType("GLbyte") byte blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3bEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3bv(
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3bv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3bvEXT(
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3bvEXT);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3d(
        @NativeType("GLdouble") double red,
        @NativeType("GLdouble") double green,
        @NativeType("GLdouble") double blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3d);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3dEXT(
        @NativeType("GLdouble") double red,
        @NativeType("GLdouble") double green,
        @NativeType("GLdouble") double blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3dEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3dvEXT(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3dvEXT);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3f(
        @NativeType("GLfloat") float red,
        @NativeType("GLfloat") float green,
        @NativeType("GLfloat") float blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3f);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3fEXT(
        @NativeType("GLfloat") float red,
        @NativeType("GLfloat") float green,
        @NativeType("GLfloat") float blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3fEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3fvEXT(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3fvEXT);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3hNV(
        @NativeType("GLhalfNV") @Unsigned short red,
        @NativeType("GLhalfNV") @Unsigned short green,
        @NativeType("GLhalfNV") @Unsigned short blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3hNV);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3i(
        @NativeType("GLint") int red,
        @NativeType("GLint") int green,
        @NativeType("GLint") int blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3i);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3iEXT(
        @NativeType("GLint") int red,
        @NativeType("GLint") int green,
        @NativeType("GLint") int blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3iEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3ivEXT(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3ivEXT);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3s(
        @NativeType("GLshort") short red,
        @NativeType("GLshort") short green,
        @NativeType("GLshort") short blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3s);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3sEXT(
        @NativeType("GLshort") short red,
        @NativeType("GLshort") short green,
        @NativeType("GLshort") short blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3sEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3svEXT(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3svEXT);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3ub(
        @NativeType("GLubyte") @Unsigned byte red,
        @NativeType("GLubyte") @Unsigned byte green,
        @NativeType("GLubyte") @Unsigned byte blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3ub);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3ubEXT(
        @NativeType("GLubyte") @Unsigned byte red,
        @NativeType("GLubyte") @Unsigned byte green,
        @NativeType("GLubyte") @Unsigned byte blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3ubEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3ubv(
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3ubv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3ubvEXT(
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3ubvEXT);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3ui(
        @NativeType("GLuint") @Unsigned int red,
        @NativeType("GLuint") @Unsigned int green,
        @NativeType("GLuint") @Unsigned int blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3ui);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3uiEXT(
        @NativeType("GLuint") @Unsigned int red,
        @NativeType("GLuint") @Unsigned int green,
        @NativeType("GLuint") @Unsigned int blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3uiEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3uiv(
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3uiv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3uivEXT(
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3uivEXT);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3us(
        @NativeType("GLushort") @Unsigned short red,
        @NativeType("GLushort") @Unsigned short green,
        @NativeType("GLushort") @Unsigned short blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3us);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3usEXT(
        @NativeType("GLushort") @Unsigned short red,
        @NativeType("GLushort") @Unsigned short green,
        @NativeType("GLushort") @Unsigned short blue
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3usEXT);
        try {
            hFunction.invokeExact(
                red,
                green,
                blue
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3usv(
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3usv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColor3usvEXT(
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColor3usvEXT);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColorP3ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int color
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColorP3ui);
        try {
            hFunction.invokeExact(
                type,
                color
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColorP3uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr color
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColorP3uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (color != null ? color.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColorPointer(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColorPointer);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void secondaryColorPointerEXT(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSecondaryColorPointerEXT);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void selectBuffer(
        @NativeType("GLsizei") int size,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSelectBuffer);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (buffer != null ? buffer.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void semaphoreParameterivNV(
        @NativeType("GLuint") @Unsigned int semaphore,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSemaphoreParameterivNV);
        try {
            hFunction.invokeExact(
                semaphore,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void separableFilter2D(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLenum") int format,
        @NativeType("GLenum") int type,
        @Pointer(comment="void*") @NotNull MemorySegment row,
        @Pointer(comment="void*") @NotNull MemorySegment column
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSeparableFilter2D);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                width,
                height,
                format,
                type,
                row,
                column
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void setFenceNV(
        @NativeType("GLuint") @Unsigned int fence,
        @NativeType("GLenum") int condition
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSetFenceNV);
        try {
            hFunction.invokeExact(
                fence,
                condition
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void setMultisamplefvAMD(
        @NativeType("GLenum") int pname,
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr val
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSetMultisamplefvAMD);
        try {
            hFunction.invokeExact(
                pname,
                index,
                (MemorySegment) (val != null ? val.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shadeModel(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShadeModel);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void shaderSourceARB(
        @NativeType("GLhandleARB") @Unsigned int shaderObj,
        @NativeType("GLsizei") int count,
        @Nullable PointerPtr string,
        @Nullable @Pointer(comment="GLint") IntPtr length
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glShaderSourceARB);
        try {
            hFunction.invokeExact(
                shaderObj,
                count,
                (MemorySegment) (string != null ? string.segment() : MemorySegment.NULL),
                (MemorySegment) (length != null ? length.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void signalSemaphoreui64NVX(
        @NativeType("GLuint") @Unsigned int signalGpu,
        @NativeType("GLsizei") int fenceObjectCount,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr semaphoreArray,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr fenceValueArray
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSignalSemaphoreui64NVX);
        try {
            hFunction.invokeExact(
                signalGpu,
                fenceObjectCount,
                (MemorySegment) (semaphoreArray != null ? semaphoreArray.segment() : MemorySegment.NULL),
                (MemorySegment) (fenceValueArray != null ? fenceValueArray.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilClearTagEXT(
        @NativeType("GLsizei") int stencilTagBits,
        @NativeType("GLuint") @Unsigned int stencilClearTag
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilClearTagEXT);
        try {
            hFunction.invokeExact(
                stencilTagBits,
                stencilClearTag
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stencilOpValueAMD(
        @NativeType("GLenum") int face,
        @NativeType("GLuint") @Unsigned int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStencilOpValueAMD);
        try {
            hFunction.invokeExact(
                face,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void stringMarkerGREMEDY(
        @NativeType("GLsizei") int len,
        @Pointer(comment="void*") @NotNull MemorySegment string
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glStringMarkerGREMEDY);
        try {
            hFunction.invokeExact(
                len,
                string
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void syncTextureINTEL(
        @NativeType("GLuint") @Unsigned int texture
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glSyncTextureINTEL);
        try {
            hFunction.invokeExact(
                texture
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void tessellationFactorAMD(
        @NativeType("GLfloat") float factor
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTessellationFactorAMD);
        try {
            hFunction.invokeExact(
                factor
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void tessellationModeAMD(
        @NativeType("GLenum") int mode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTessellationModeAMD);
        try {
            hFunction.invokeExact(
                mode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte testFenceNV(
        @NativeType("GLuint") @Unsigned int fence
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTestFenceNV);
        try {
            return (byte) hFunction.invokeExact(
                fence
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texBufferEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalformat,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexBufferEXT);
        try {
            hFunction.invokeExact(
                target,
                internalformat,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1d(
        @NativeType("GLdouble") double s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1d);
        try {
            hFunction.invokeExact(
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1f(
        @NativeType("GLfloat") float s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1f);
        try {
            hFunction.invokeExact(
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1hNV(
        @NativeType("GLhalfNV") @Unsigned short s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1hNV);
        try {
            hFunction.invokeExact(
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1i(
        @NativeType("GLint") int s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1i);
        try {
            hFunction.invokeExact(
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1s(
        @NativeType("GLshort") short s
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1s);
        try {
            hFunction.invokeExact(
                s
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord1sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord1sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2d(
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2d);
        try {
            hFunction.invokeExact(
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2f(
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2f);
        try {
            hFunction.invokeExact(
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2hNV(
        @NativeType("GLhalfNV") @Unsigned short s,
        @NativeType("GLhalfNV") @Unsigned short t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2hNV);
        try {
            hFunction.invokeExact(
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2i(
        @NativeType("GLint") int s,
        @NativeType("GLint") int t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2i);
        try {
            hFunction.invokeExact(
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2s(
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2s);
        try {
            hFunction.invokeExact(
                s,
                t
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord2sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord2sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3d(
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t,
        @NativeType("GLdouble") double r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3d);
        try {
            hFunction.invokeExact(
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3f(
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t,
        @NativeType("GLfloat") float r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3f);
        try {
            hFunction.invokeExact(
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3hNV(
        @NativeType("GLhalfNV") @Unsigned short s,
        @NativeType("GLhalfNV") @Unsigned short t,
        @NativeType("GLhalfNV") @Unsigned short r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3hNV);
        try {
            hFunction.invokeExact(
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3i(
        @NativeType("GLint") int s,
        @NativeType("GLint") int t,
        @NativeType("GLint") int r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3i);
        try {
            hFunction.invokeExact(
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3s(
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t,
        @NativeType("GLshort") short r
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3s);
        try {
            hFunction.invokeExact(
                s,
                t,
                r
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord3sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord3sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4d(
        @NativeType("GLdouble") double s,
        @NativeType("GLdouble") double t,
        @NativeType("GLdouble") double r,
        @NativeType("GLdouble") double q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4d);
        try {
            hFunction.invokeExact(
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4f(
        @NativeType("GLfloat") float s,
        @NativeType("GLfloat") float t,
        @NativeType("GLfloat") float r,
        @NativeType("GLfloat") float q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4f);
        try {
            hFunction.invokeExact(
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4hNV(
        @NativeType("GLhalfNV") @Unsigned short s,
        @NativeType("GLhalfNV") @Unsigned short t,
        @NativeType("GLhalfNV") @Unsigned short r,
        @NativeType("GLhalfNV") @Unsigned short q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4hNV);
        try {
            hFunction.invokeExact(
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4i(
        @NativeType("GLint") int s,
        @NativeType("GLint") int t,
        @NativeType("GLint") int r,
        @NativeType("GLint") int q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4i);
        try {
            hFunction.invokeExact(
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4s(
        @NativeType("GLshort") short s,
        @NativeType("GLshort") short t,
        @NativeType("GLshort") short r,
        @NativeType("GLshort") short q
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4s);
        try {
            hFunction.invokeExact(
                s,
                t,
                r,
                q
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoord4sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoord4sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordP1ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordP1ui);
        try {
            hFunction.invokeExact(
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordP1uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordP1uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordP2ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordP2ui);
        try {
            hFunction.invokeExact(
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordP2uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordP2uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordP3ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordP3ui);
        try {
            hFunction.invokeExact(
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordP3uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordP3uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordP4ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordP4ui);
        try {
            hFunction.invokeExact(
                type,
                coords
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordP4uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr coords
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordP4uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (coords != null ? coords.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texCoordPointer(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexCoordPointer);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texEnvf(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexEnvf);
        try {
            hFunction.invokeExact(
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texEnvfv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexEnvfv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texEnvi(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexEnvi);
        try {
            hFunction.invokeExact(
                target,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texEnviv(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexEnviv);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texGend(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @NativeType("GLdouble") double param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexGend);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texGendv(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLdouble") DoublePtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexGendv);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texGenf(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @NativeType("GLfloat") float param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexGenf);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texGenfv(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLfloat") FloatPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexGenfv);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texGeni(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexGeni);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texGeniv(
        @NativeType("GLenum") int coord,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexGeniv);
        try {
            hFunction.invokeExact(
                coord,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texImage2DMultisampleCoverageNV(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int coverageSamples,
        @NativeType("GLsizei") int colorSamples,
        @NativeType("GLint") int internalFormat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLboolean") @Unsigned byte fixedSampleLocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexImage2DMultisampleCoverageNV);
        try {
            hFunction.invokeExact(
                target,
                coverageSamples,
                colorSamples,
                internalFormat,
                width,
                height,
                fixedSampleLocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texImage3DMultisampleCoverageNV(
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int coverageSamples,
        @NativeType("GLsizei") int colorSamples,
        @NativeType("GLint") int internalFormat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte fixedSampleLocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexImage3DMultisampleCoverageNV);
        try {
            hFunction.invokeExact(
                target,
                coverageSamples,
                colorSamples,
                internalFormat,
                width,
                height,
                depth,
                fixedSampleLocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texParameterIivEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLint") IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexParameterIivEXT);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texParameterIuivEXT(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int pname,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr params
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexParameterIuivEXT);
        try {
            hFunction.invokeExact(
                target,
                pname,
                (MemorySegment) (params != null ? params.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texRenderbufferNV(
        @NativeType("GLenum") int target,
        @NativeType("GLuint") @Unsigned int renderbuffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexRenderbufferNV);
        try {
            hFunction.invokeExact(
                target,
                renderbuffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void texStorageSparseAMD(
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalFormat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLsizei") int layers,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTexStorageSparseAMD);
        try {
            hFunction.invokeExact(
                target,
                internalFormat,
                width,
                height,
                depth,
                layers,
                flags
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureImage2DMultisampleCoverageNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int coverageSamples,
        @NativeType("GLsizei") int colorSamples,
        @NativeType("GLint") int internalFormat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLboolean") @Unsigned byte fixedSampleLocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureImage2DMultisampleCoverageNV);
        try {
            hFunction.invokeExact(
                texture,
                target,
                coverageSamples,
                colorSamples,
                internalFormat,
                width,
                height,
                fixedSampleLocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureImage2DMultisampleNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLint") int internalFormat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLboolean") @Unsigned byte fixedSampleLocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureImage2DMultisampleNV);
        try {
            hFunction.invokeExact(
                texture,
                target,
                samples,
                internalFormat,
                width,
                height,
                fixedSampleLocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureImage3DMultisampleCoverageNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int coverageSamples,
        @NativeType("GLsizei") int colorSamples,
        @NativeType("GLint") int internalFormat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte fixedSampleLocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureImage3DMultisampleCoverageNV);
        try {
            hFunction.invokeExact(
                texture,
                target,
                coverageSamples,
                colorSamples,
                internalFormat,
                width,
                height,
                depth,
                fixedSampleLocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureImage3DMultisampleNV(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLsizei") int samples,
        @NativeType("GLint") int internalFormat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLboolean") @Unsigned byte fixedSampleLocations
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureImage3DMultisampleNV);
        try {
            hFunction.invokeExact(
                texture,
                target,
                samples,
                internalFormat,
                width,
                height,
                depth,
                fixedSampleLocations
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void textureStorageSparseAMD(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLenum") int target,
        @NativeType("GLenum") int internalFormat,
        @NativeType("GLsizei") int width,
        @NativeType("GLsizei") int height,
        @NativeType("GLsizei") int depth,
        @NativeType("GLsizei") int layers,
        @NativeType("GLbitfield") @Unsigned int flags
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTextureStorageSparseAMD);
        try {
            hFunction.invokeExact(
                texture,
                target,
                internalFormat,
                width,
                height,
                depth,
                layers,
                flags
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void transformFeedbackAttribsNV(
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr attribs,
        @NativeType("GLenum") int bufferMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTransformFeedbackAttribsNV);
        try {
            hFunction.invokeExact(
                count,
                (MemorySegment) (attribs != null ? attribs.segment() : MemorySegment.NULL),
                bufferMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void transformFeedbackStreamAttribsNV(
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr attribs,
        @NativeType("GLsizei") int nbuffers,
        @Nullable @Pointer(comment="GLint") IntPtr bufstreams,
        @NativeType("GLenum") int bufferMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTransformFeedbackStreamAttribsNV);
        try {
            hFunction.invokeExact(
                count,
                (MemorySegment) (attribs != null ? attribs.segment() : MemorySegment.NULL),
                nbuffers,
                (MemorySegment) (bufstreams != null ? bufstreams.segment() : MemorySegment.NULL),
                bufferMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void transformFeedbackVaryingsEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLsizei") int count,
        @Nullable PointerPtr varyings,
        @NativeType("GLenum") int bufferMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTransformFeedbackVaryingsEXT);
        try {
            hFunction.invokeExact(
                program,
                count,
                (MemorySegment) (varyings != null ? varyings.segment() : MemorySegment.NULL),
                bufferMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void transformFeedbackVaryingsNV(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr locations,
        @NativeType("GLenum") int bufferMode
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTransformFeedbackVaryingsNV);
        try {
            hFunction.invokeExact(
                program,
                count,
                (MemorySegment) (locations != null ? locations.segment() : MemorySegment.NULL),
                bufferMode
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void translated(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTranslated);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void translatef(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glTranslatef);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1fARB(
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1fARB);
        try {
            hFunction.invokeExact(
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1fvARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1fvARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1i64NV(
        @NativeType("GLint") int location,
        @NativeType("GLint64EXT") long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1i64NV);
        try {
            hFunction.invokeExact(
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1i64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1i64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1iARB(
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1iARB);
        try {
            hFunction.invokeExact(
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1ivARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1ivARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1ui64NV(
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1ui64NV);
        try {
            hFunction.invokeExact(
                location,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1ui64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1ui64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1uiEXT(
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1uiEXT);
        try {
            hFunction.invokeExact(
                location,
                v0
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform1uivEXT(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform1uivEXT);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2fARB(
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2fARB);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2fvARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2fvARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2i64NV(
        @NativeType("GLint") int location,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2i64NV);
        try {
            hFunction.invokeExact(
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2i64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2i64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2iARB(
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2iARB);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2ivARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2ivARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2ui64NV(
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2ui64NV);
        try {
            hFunction.invokeExact(
                location,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2ui64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2ui64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2uiEXT(
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2uiEXT);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform2uivEXT(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform2uivEXT);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3fARB(
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3fARB);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3fvARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3fvARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3i64NV(
        @NativeType("GLint") int location,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y,
        @NativeType("GLint64EXT") long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3i64NV);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3i64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3i64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3iARB(
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1,
        @NativeType("GLint") int v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3iARB);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3ivARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3ivARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3ui64NV(
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y,
        @NativeType("GLuint64EXT") @Unsigned long z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3ui64NV);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3ui64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3ui64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3uiEXT(
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1,
        @NativeType("GLuint") @Unsigned int v2
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3uiEXT);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform3uivEXT(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform3uivEXT);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4fARB(
        @NativeType("GLint") int location,
        @NativeType("GLfloat") float v0,
        @NativeType("GLfloat") float v1,
        @NativeType("GLfloat") float v2,
        @NativeType("GLfloat") float v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4fARB);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4fvARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4fvARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4i64NV(
        @NativeType("GLint") int location,
        @NativeType("GLint64EXT") long x,
        @NativeType("GLint64EXT") long y,
        @NativeType("GLint64EXT") long z,
        @NativeType("GLint64EXT") long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4i64NV);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4i64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint64EXT") LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4i64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4iARB(
        @NativeType("GLint") int location,
        @NativeType("GLint") int v0,
        @NativeType("GLint") int v1,
        @NativeType("GLint") int v2,
        @NativeType("GLint") int v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4iARB);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4ivARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLint") IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4ivARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4ui64NV(
        @NativeType("GLint") int location,
        @NativeType("GLuint64EXT") @Unsigned long x,
        @NativeType("GLuint64EXT") @Unsigned long y,
        @NativeType("GLuint64EXT") @Unsigned long z,
        @NativeType("GLuint64EXT") @Unsigned long w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4ui64NV);
        try {
            hFunction.invokeExact(
                location,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4ui64vNV(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint64EXT") @Unsigned LongPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4ui64vNV);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4uiEXT(
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int v0,
        @NativeType("GLuint") @Unsigned int v1,
        @NativeType("GLuint") @Unsigned int v2,
        @NativeType("GLuint") @Unsigned int v3
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4uiEXT);
        try {
            hFunction.invokeExact(
                location,
                v0,
                v1,
                v2,
                v3
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniform4uivEXT(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniform4uivEXT);
        try {
            hFunction.invokeExact(
                location,
                count,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformBufferEXT(
        @NativeType("GLuint") @Unsigned int program,
        @NativeType("GLint") int location,
        @NativeType("GLuint") @Unsigned int buffer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformBufferEXT);
        try {
            hFunction.invokeExact(
                program,
                location,
                buffer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix2fvARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix2fvARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix3fvARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix3fvARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uniformMatrix4fvARB(
        @NativeType("GLint") int location,
        @NativeType("GLsizei") int count,
        @NativeType("GLboolean") @Unsigned byte transpose,
        @Nullable @Pointer(comment="GLfloat") FloatPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUniformMatrix4fvARB);
        try {
            hFunction.invokeExact(
                location,
                count,
                transpose,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void unlockArraysEXT() {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUnlockArraysEXT);
        try {
            hFunction.invokeExact(
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public @NativeType("GLboolean") @Unsigned byte unmapBufferARB(
        @NativeType("GLenum") int target
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUnmapBufferARB);
        try {
            return (byte) hFunction.invokeExact(
                target
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void unmapTexture2DINTEL(
        @NativeType("GLuint") @Unsigned int texture,
        @NativeType("GLint") int level
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUnmapTexture2DINTEL);
        try {
            hFunction.invokeExact(
                texture,
                level
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void uploadGpuMaskNVX(
        @NativeType("GLbitfield") @Unsigned int mask
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUploadGpuMaskNVX);
        try {
            hFunction.invokeExact(
                mask
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void useProgramObjectARB(
        @NativeType("GLhandleARB") @Unsigned int programObj
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glUseProgramObjectARB);
        try {
            hFunction.invokeExact(
                programObj
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void validateProgramARB(
        @NativeType("GLhandleARB") @Unsigned int programObj
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glValidateProgramARB);
        try {
            hFunction.invokeExact(
                programObj
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2d(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2d);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2f(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2f);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2hNV(
        @NativeType("GLhalfNV") @Unsigned short x,
        @NativeType("GLhalfNV") @Unsigned short y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2hNV);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2i(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2i);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2s(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2s);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex2sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex2sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3d(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3d);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3f(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3f);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3hNV(
        @NativeType("GLhalfNV") @Unsigned short x,
        @NativeType("GLhalfNV") @Unsigned short y,
        @NativeType("GLhalfNV") @Unsigned short z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3hNV);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3i(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3i);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3s(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3s);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex3sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex3sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4d(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4d);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4f(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4f);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4hNV(
        @NativeType("GLhalfNV") @Unsigned short x,
        @NativeType("GLhalfNV") @Unsigned short y,
        @NativeType("GLhalfNV") @Unsigned short z,
        @NativeType("GLhalfNV") @Unsigned short w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4hNV);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4hvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4hvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4i(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z,
        @NativeType("GLint") int w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4i);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4s(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z,
        @NativeType("GLshort") short w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4s);
        try {
            hFunction.invokeExact(
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertex4sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertex4sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexArrayRangeNV(
        @NativeType("GLsizei") int length,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexArrayRangeNV);
        try {
            hFunction.invokeExact(
                length,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1dARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1dARB);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1dvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1dvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1fARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1fARB);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1fvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1fvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1hNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLhalfNV") @Unsigned short x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1hNV);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1hvNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1hvNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1sARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLshort") short x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1sARB);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib1svARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib1svARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2dARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2dARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2dvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2dvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2fARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2fARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2fvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2fvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2hNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLhalfNV") @Unsigned short x,
        @NativeType("GLhalfNV") @Unsigned short y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2hNV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2hvNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2hvNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2sARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2sARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib2svARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib2svARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3dARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3dARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3dvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3dvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3fARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3fARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3fvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3fvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3hNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLhalfNV") @Unsigned short x,
        @NativeType("GLhalfNV") @Unsigned short y,
        @NativeType("GLhalfNV") @Unsigned short z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3hNV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3hvNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3hvNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3sARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3sARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib3svARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib3svARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4NbvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4NbvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4NivARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4NivARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4NsvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4NsvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4NubARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLubyte") @Unsigned byte x,
        @NativeType("GLubyte") @Unsigned byte y,
        @NativeType("GLubyte") @Unsigned byte z,
        @NativeType("GLubyte") @Unsigned byte w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4NubARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4NubvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4NubvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4NuivARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4NuivARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4NusvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4NusvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4bvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4bvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4dARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4dARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4dvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4dvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4fARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z,
        @NativeType("GLfloat") float w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4fARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4fvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4fvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4hNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLhalfNV") @Unsigned short x,
        @NativeType("GLhalfNV") @Unsigned short y,
        @NativeType("GLhalfNV") @Unsigned short z,
        @NativeType("GLhalfNV") @Unsigned short w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4hNV);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4hvNV(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4hvNV);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4ivARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4ivARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4sARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z,
        @NativeType("GLshort") short w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4sARB);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4svARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4svARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4ubvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4ubvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4uivARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4uivARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttrib4usvARB(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttrib4usvARB);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI1iEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI1iEXT);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI1ivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI1ivEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI1uiEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI1uiEXT);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI1uivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI1uivEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI2iEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI2iEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI2ivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI2ivEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI2uiEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x,
        @NativeType("GLuint") @Unsigned int y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI2uiEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI2uivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI2uivEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI3iEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI3iEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI3ivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI3ivEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI3uiEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x,
        @NativeType("GLuint") @Unsigned int y,
        @NativeType("GLuint") @Unsigned int z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI3uiEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI3uivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI3uivEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4bvEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLbyte") BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4bvEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4iEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z,
        @NativeType("GLint") int w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4iEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4ivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4ivEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4svEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4svEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4ubvEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4ubvEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4uiEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLuint") @Unsigned int x,
        @NativeType("GLuint") @Unsigned int y,
        @NativeType("GLuint") @Unsigned int z,
        @NativeType("GLuint") @Unsigned int w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4uiEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4uivEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4uivEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribI4usvEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribI4usvEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribIPointerEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribIPointerEXT);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1dEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1dEXT);
        try {
            hFunction.invokeExact(
                index,
                x
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL1dvEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL1dvEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL2dEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL2dEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL2dvEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL2dvEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL3dEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL3dEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL3dvEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL3dvEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL4dEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z,
        @NativeType("GLdouble") double w
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL4dEXT);
        try {
            hFunction.invokeExact(
                index,
                x,
                y,
                z,
                w
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribL4dvEXT(
        @NativeType("GLuint") @Unsigned int index,
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribL4dvEXT);
        try {
            hFunction.invokeExact(
                index,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribLPointerEXT(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribLPointerEXT);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribParameteriAMD(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLenum") int pname,
        @NativeType("GLint") int param
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribParameteriAMD);
        try {
            hFunction.invokeExact(
                index,
                pname,
                param
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribPointerARB(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLboolean") @Unsigned byte normalized,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribPointerARB);
        try {
            hFunction.invokeExact(
                index,
                size,
                type,
                normalized,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribs1hvNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribs1hvNV);
        try {
            hFunction.invokeExact(
                index,
                n,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribs2hvNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribs2hvNV);
        try {
            hFunction.invokeExact(
                index,
                n,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribs3hvNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribs3hvNV);
        try {
            hFunction.invokeExact(
                index,
                n,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexAttribs4hvNV(
        @NativeType("GLuint") @Unsigned int index,
        @NativeType("GLsizei") int n,
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexAttribs4hvNV);
        try {
            hFunction.invokeExact(
                index,
                n,
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexBlendARB(
        @NativeType("GLint") int count
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexBlendARB);
        try {
            hFunction.invokeExact(
                count
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexP2ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexP2ui);
        try {
            hFunction.invokeExact(
                type,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexP2uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexP2uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexP3ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexP3ui);
        try {
            hFunction.invokeExact(
                type,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexP3uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexP3uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexP4ui(
        @NativeType("GLenum") int type,
        @NativeType("GLuint") @Unsigned int value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexP4ui);
        try {
            hFunction.invokeExact(
                type,
                value
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexP4uiv(
        @NativeType("GLenum") int type,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr value
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexP4uiv);
        try {
            hFunction.invokeExact(
                type,
                (MemorySegment) (value != null ? value.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexPointer(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexPointer);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexWeighthNV(
        @NativeType("GLhalfNV") @Unsigned short weight
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexWeighthNV);
        try {
            hFunction.invokeExact(
                weight
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void vertexWeighthvNV(
        @Nullable @Pointer(comment="GLhalfNV") @Unsigned ShortPtr weight
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glVertexWeighthvNV);
        try {
            hFunction.invokeExact(
                (MemorySegment) (weight != null ? weight.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void waitSemaphoreui64NVX(
        @NativeType("GLuint") @Unsigned int waitGpu,
        @NativeType("GLsizei") int fenceObjectCount,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr semaphoreArray,
        @Nullable @Pointer(comment="GLuint64") @Unsigned LongPtr fenceValueArray
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWaitSemaphoreui64NVX);
        try {
            hFunction.invokeExact(
                waitGpu,
                fenceObjectCount,
                (MemorySegment) (semaphoreArray != null ? semaphoreArray.segment() : MemorySegment.NULL),
                (MemorySegment) (fenceValueArray != null ? fenceValueArray.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightPointerARB(
        @NativeType("GLint") int size,
        @NativeType("GLenum") int type,
        @NativeType("GLsizei") int stride,
        @Pointer(comment="void*") @NotNull MemorySegment pointer
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightPointerARB);
        try {
            hFunction.invokeExact(
                size,
                type,
                stride,
                pointer
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightbvARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLbyte") BytePtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightbvARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightdvARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLdouble") DoublePtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightdvARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightfvARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLfloat") FloatPtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightfvARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightivARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLint") IntPtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightivARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightsvARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLshort") ShortPtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightsvARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightubvARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLubyte") @Unsigned BytePtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightubvARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightuivARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLuint") @Unsigned IntPtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightuivARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void weightusvARB(
        @NativeType("GLint") int size,
        @Nullable @Pointer(comment="GLushort") @Unsigned ShortPtr weights
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWeightusvARB);
        try {
            hFunction.invokeExact(
                size,
                (MemorySegment) (weights != null ? weights.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2d(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2d);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2dARB(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2dARB);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2dvARB(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2dvARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2f(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2f);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2fARB(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2fARB);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2fvARB(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2fvARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2i(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2i);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2iARB(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2iARB);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2ivARB(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2ivARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2s(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2s);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2sARB(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2sARB);
        try {
            hFunction.invokeExact(
                x,
                y
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos2svARB(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos2svARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3d(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3d);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3dARB(
        @NativeType("GLdouble") double x,
        @NativeType("GLdouble") double y,
        @NativeType("GLdouble") double z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3dARB);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3dv(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3dv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3dvARB(
        @Nullable @Pointer(comment="GLdouble") DoublePtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3dvARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3f(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3f);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3fARB(
        @NativeType("GLfloat") float x,
        @NativeType("GLfloat") float y,
        @NativeType("GLfloat") float z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3fARB);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3fv(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3fv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3fvARB(
        @Nullable @Pointer(comment="GLfloat") FloatPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3fvARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3i(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3i);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3iARB(
        @NativeType("GLint") int x,
        @NativeType("GLint") int y,
        @NativeType("GLint") int z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3iARB);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3iv(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3iv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3ivARB(
        @Nullable @Pointer(comment="GLint") IntPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3ivARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3s(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3s);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3sARB(
        @NativeType("GLshort") short x,
        @NativeType("GLshort") short y,
        @NativeType("GLshort") short z
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3sARB);
        try {
            hFunction.invokeExact(
                x,
                y,
                z
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3sv(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3sv);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }

    public void windowPos3svARB(
        @Nullable @Pointer(comment="GLshort") ShortPtr v
    ) {
        MethodHandle hFunction = Objects.requireNonNull(HANDLE$glWindowPos3svARB);
        try {
            hFunction.invokeExact(
                (MemorySegment) (v != null ? v.segment() : MemorySegment.NULL)
            );
        } catch (Throwable e) {
            throw new RuntimeException(e);
        }
    }
    // endregion

    // region segments and handles
    public final @Nullable MemorySegment SEGMENT$glAccum;
    public final @Nullable MemorySegment SEGMENT$glAcquireKeyedMutexWin32EXT;
    public final @Nullable MemorySegment SEGMENT$glActiveStencilFaceEXT;
    public final @Nullable MemorySegment SEGMENT$glActiveTextureARB;
    public final @Nullable MemorySegment SEGMENT$glActiveVaryingNV;
    public final @Nullable MemorySegment SEGMENT$glAlphaFunc;
    public final @Nullable MemorySegment SEGMENT$glAlphaToCoverageDitherControlNV;
    public final @Nullable MemorySegment SEGMENT$glAreTexturesResident;
    public final @Nullable MemorySegment SEGMENT$glArrayElement;
    public final @Nullable MemorySegment SEGMENT$glAsyncCopyBufferSubDataNVX;
    public final @Nullable MemorySegment SEGMENT$glAsyncCopyImageSubDataNVX;
    public final @Nullable MemorySegment SEGMENT$glAttachObjectARB;
    public final @Nullable MemorySegment SEGMENT$glBegin;
    public final @Nullable MemorySegment SEGMENT$glBeginConditionalRenderNVX;
    public final @Nullable MemorySegment SEGMENT$glBeginQueryARB;
    public final @Nullable MemorySegment SEGMENT$glBeginTransformFeedbackEXT;
    public final @Nullable MemorySegment SEGMENT$glBeginTransformFeedbackNV;
    public final @Nullable MemorySegment SEGMENT$glBindAttribLocationARB;
    public final @Nullable MemorySegment SEGMENT$glBindBufferARB;
    public final @Nullable MemorySegment SEGMENT$glBindBufferBaseEXT;
    public final @Nullable MemorySegment SEGMENT$glBindBufferBaseNV;
    public final @Nullable MemorySegment SEGMENT$glBindBufferOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glBindBufferOffsetNV;
    public final @Nullable MemorySegment SEGMENT$glBindBufferRangeEXT;
    public final @Nullable MemorySegment SEGMENT$glBindBufferRangeNV;
    public final @Nullable MemorySegment SEGMENT$glBindFragDataLocationEXT;
    public final @Nullable MemorySegment SEGMENT$glBindFramebufferEXT;
    public final @Nullable MemorySegment SEGMENT$glBindImageTextureEXT;
    public final @Nullable MemorySegment SEGMENT$glBindProgramARB;
    public final @Nullable MemorySegment SEGMENT$glBindRenderbufferEXT;
    public final @Nullable MemorySegment SEGMENT$glBindTransformFeedbackNV;
    public final @Nullable MemorySegment SEGMENT$glBitmap;
    public final @Nullable MemorySegment SEGMENT$glBlendColorEXT;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationEXT;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationIndexedAMD;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationSeparateEXT;
    public final @Nullable MemorySegment SEGMENT$glBlendEquationSeparateIndexedAMD;
    public final @Nullable MemorySegment SEGMENT$glBlendFuncIndexedAMD;
    public final @Nullable MemorySegment SEGMENT$glBlendFuncSeparateEXT;
    public final @Nullable MemorySegment SEGMENT$glBlendFuncSeparateIndexedAMD;
    public final @Nullable MemorySegment SEGMENT$glBlitFramebufferEXT;
    public final @Nullable MemorySegment SEGMENT$glBlitFramebufferLayerEXT;
    public final @Nullable MemorySegment SEGMENT$glBlitFramebufferLayersEXT;
    public final @Nullable MemorySegment SEGMENT$glBufferDataARB;
    public final @Nullable MemorySegment SEGMENT$glBufferStorageExternalEXT;
    public final @Nullable MemorySegment SEGMENT$glBufferSubDataARB;
    public final @Nullable MemorySegment SEGMENT$glCallList;
    public final @Nullable MemorySegment SEGMENT$glCallLists;
    public final @Nullable MemorySegment SEGMENT$glCheckFramebufferStatusEXT;
    public final @Nullable MemorySegment SEGMENT$glClampColorARB;
    public final @Nullable MemorySegment SEGMENT$glClearAccum;
    public final @Nullable MemorySegment SEGMENT$glClearColorIiEXT;
    public final @Nullable MemorySegment SEGMENT$glClearColorIuiEXT;
    public final @Nullable MemorySegment SEGMENT$glClearIndex;
    public final @Nullable MemorySegment SEGMENT$glClientActiveTexture;
    public final @Nullable MemorySegment SEGMENT$glClientActiveTextureARB;
    public final @Nullable MemorySegment SEGMENT$glClientWaitSemaphoreui64NVX;
    public final @Nullable MemorySegment SEGMENT$glClipPlane;
    public final @Nullable MemorySegment SEGMENT$glColor3b;
    public final @Nullable MemorySegment SEGMENT$glColor3bv;
    public final @Nullable MemorySegment SEGMENT$glColor3d;
    public final @Nullable MemorySegment SEGMENT$glColor3dv;
    public final @Nullable MemorySegment SEGMENT$glColor3f;
    public final @Nullable MemorySegment SEGMENT$glColor3fv;
    public final @Nullable MemorySegment SEGMENT$glColor3hNV;
    public final @Nullable MemorySegment SEGMENT$glColor3hvNV;
    public final @Nullable MemorySegment SEGMENT$glColor3i;
    public final @Nullable MemorySegment SEGMENT$glColor3iv;
    public final @Nullable MemorySegment SEGMENT$glColor3s;
    public final @Nullable MemorySegment SEGMENT$glColor3sv;
    public final @Nullable MemorySegment SEGMENT$glColor3ub;
    public final @Nullable MemorySegment SEGMENT$glColor3ubv;
    public final @Nullable MemorySegment SEGMENT$glColor3ui;
    public final @Nullable MemorySegment SEGMENT$glColor3uiv;
    public final @Nullable MemorySegment SEGMENT$glColor3us;
    public final @Nullable MemorySegment SEGMENT$glColor3usv;
    public final @Nullable MemorySegment SEGMENT$glColor4b;
    public final @Nullable MemorySegment SEGMENT$glColor4bv;
    public final @Nullable MemorySegment SEGMENT$glColor4d;
    public final @Nullable MemorySegment SEGMENT$glColor4dv;
    public final @Nullable MemorySegment SEGMENT$glColor4f;
    public final @Nullable MemorySegment SEGMENT$glColor4fv;
    public final @Nullable MemorySegment SEGMENT$glColor4hNV;
    public final @Nullable MemorySegment SEGMENT$glColor4hvNV;
    public final @Nullable MemorySegment SEGMENT$glColor4i;
    public final @Nullable MemorySegment SEGMENT$glColor4iv;
    public final @Nullable MemorySegment SEGMENT$glColor4s;
    public final @Nullable MemorySegment SEGMENT$glColor4sv;
    public final @Nullable MemorySegment SEGMENT$glColor4ub;
    public final @Nullable MemorySegment SEGMENT$glColor4ubv;
    public final @Nullable MemorySegment SEGMENT$glColor4ui;
    public final @Nullable MemorySegment SEGMENT$glColor4uiv;
    public final @Nullable MemorySegment SEGMENT$glColor4us;
    public final @Nullable MemorySegment SEGMENT$glColor4usv;
    public final @Nullable MemorySegment SEGMENT$glColorMaskIndexedEXT;
    public final @Nullable MemorySegment SEGMENT$glColorMaterial;
    public final @Nullable MemorySegment SEGMENT$glColorP3ui;
    public final @Nullable MemorySegment SEGMENT$glColorP3uiv;
    public final @Nullable MemorySegment SEGMENT$glColorP4ui;
    public final @Nullable MemorySegment SEGMENT$glColorP4uiv;
    public final @Nullable MemorySegment SEGMENT$glColorPointer;
    public final @Nullable MemorySegment SEGMENT$glColorSubTable;
    public final @Nullable MemorySegment SEGMENT$glColorTable;
    public final @Nullable MemorySegment SEGMENT$glColorTableParameterfv;
    public final @Nullable MemorySegment SEGMENT$glColorTableParameteriv;
    public final @Nullable MemorySegment SEGMENT$glCompileShaderARB;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexImage1DARB;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexImage2DARB;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexImage3DARB;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexSubImage1DARB;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexSubImage2DARB;
    public final @Nullable MemorySegment SEGMENT$glCompressedTexSubImage3DARB;
    public final @Nullable MemorySegment SEGMENT$glConvolutionFilter1D;
    public final @Nullable MemorySegment SEGMENT$glConvolutionFilter2D;
    public final @Nullable MemorySegment SEGMENT$glConvolutionParameterf;
    public final @Nullable MemorySegment SEGMENT$glConvolutionParameterfv;
    public final @Nullable MemorySegment SEGMENT$glConvolutionParameteri;
    public final @Nullable MemorySegment SEGMENT$glConvolutionParameteriv;
    public final @Nullable MemorySegment SEGMENT$glCopyColorSubTable;
    public final @Nullable MemorySegment SEGMENT$glCopyColorTable;
    public final @Nullable MemorySegment SEGMENT$glCopyConvolutionFilter1D;
    public final @Nullable MemorySegment SEGMENT$glCopyConvolutionFilter2D;
    public final @Nullable MemorySegment SEGMENT$glCopyImageSubDataNV;
    public final @Nullable MemorySegment SEGMENT$glCopyPixels;
    public final @Nullable MemorySegment SEGMENT$glCreateProgramObjectARB;
    public final @Nullable MemorySegment SEGMENT$glCreateProgressFenceNVX;
    public final @Nullable MemorySegment SEGMENT$glCreateSemaphoresNV;
    public final @Nullable MemorySegment SEGMENT$glCreateShaderObjectARB;
    public final @Nullable MemorySegment SEGMENT$glCurrentPaletteMatrixARB;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageCallbackAMD;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageEnableAMD;
    public final @Nullable MemorySegment SEGMENT$glDebugMessageInsertAMD;
    public final @Nullable MemorySegment SEGMENT$glDeleteBuffersARB;
    public final @Nullable MemorySegment SEGMENT$glDeleteFencesNV;
    public final @Nullable MemorySegment SEGMENT$glDeleteFramebuffersEXT;
    public final @Nullable MemorySegment SEGMENT$glDeleteLists;
    public final @Nullable MemorySegment SEGMENT$glDeleteObjectARB;
    public final @Nullable MemorySegment SEGMENT$glDeleteProgramsARB;
    public final @Nullable MemorySegment SEGMENT$glDeleteQueriesARB;
    public final @Nullable MemorySegment SEGMENT$glDeleteQueryResourceTagNV;
    public final @Nullable MemorySegment SEGMENT$glDeleteRenderbuffersEXT;
    public final @Nullable MemorySegment SEGMENT$glDeleteTransformFeedbacksNV;
    public final @Nullable MemorySegment SEGMENT$glDepthBoundsEXT;
    public final @Nullable MemorySegment SEGMENT$glDetachObjectARB;
    public final @Nullable MemorySegment SEGMENT$glDisableClientState;
    public final @Nullable MemorySegment SEGMENT$glDisableVertexAttribArrayARB;
    public final @Nullable MemorySegment SEGMENT$glDrawBuffersARB;
    public final @Nullable MemorySegment SEGMENT$glDrawPixels;
    public final @Nullable MemorySegment SEGMENT$glDrawTextureNV;
    public final @Nullable MemorySegment SEGMENT$glDrawTransformFeedbackNV;
    public final @Nullable MemorySegment SEGMENT$glEdgeFlag;
    public final @Nullable MemorySegment SEGMENT$glEdgeFlagPointer;
    public final @Nullable MemorySegment SEGMENT$glEdgeFlagv;
    public final @Nullable MemorySegment SEGMENT$glEnableClientState;
    public final @Nullable MemorySegment SEGMENT$glEnableVertexAttribArrayARB;
    public final @Nullable MemorySegment SEGMENT$glEnd;
    public final @Nullable MemorySegment SEGMENT$glEndConditionalRenderNVX;
    public final @Nullable MemorySegment SEGMENT$glEndList;
    public final @Nullable MemorySegment SEGMENT$glEndQueryARB;
    public final @Nullable MemorySegment SEGMENT$glEndTransformFeedbackEXT;
    public final @Nullable MemorySegment SEGMENT$glEndTransformFeedbackNV;
    public final @Nullable MemorySegment SEGMENT$glEvalCoord1d;
    public final @Nullable MemorySegment SEGMENT$glEvalCoord1dv;
    public final @Nullable MemorySegment SEGMENT$glEvalCoord1f;
    public final @Nullable MemorySegment SEGMENT$glEvalCoord1fv;
    public final @Nullable MemorySegment SEGMENT$glEvalCoord2d;
    public final @Nullable MemorySegment SEGMENT$glEvalCoord2dv;
    public final @Nullable MemorySegment SEGMENT$glEvalCoord2f;
    public final @Nullable MemorySegment SEGMENT$glEvalCoord2fv;
    public final @Nullable MemorySegment SEGMENT$glEvalMesh1;
    public final @Nullable MemorySegment SEGMENT$glEvalMesh2;
    public final @Nullable MemorySegment SEGMENT$glEvalPoint1;
    public final @Nullable MemorySegment SEGMENT$glEvalPoint2;
    public final @Nullable MemorySegment SEGMENT$glFeedbackBuffer;
    public final @Nullable MemorySegment SEGMENT$glFinishFenceNV;
    public final @Nullable MemorySegment SEGMENT$glFlushPixelDataRangeNV;
    public final @Nullable MemorySegment SEGMENT$glFlushVertexArrayRangeNV;
    public final @Nullable MemorySegment SEGMENT$glFogCoordPointer;
    public final @Nullable MemorySegment SEGMENT$glFogCoordd;
    public final @Nullable MemorySegment SEGMENT$glFogCoorddv;
    public final @Nullable MemorySegment SEGMENT$glFogCoordf;
    public final @Nullable MemorySegment SEGMENT$glFogCoordfv;
    public final @Nullable MemorySegment SEGMENT$glFogCoordhNV;
    public final @Nullable MemorySegment SEGMENT$glFogCoordhvNV;
    public final @Nullable MemorySegment SEGMENT$glFogf;
    public final @Nullable MemorySegment SEGMENT$glFogfv;
    public final @Nullable MemorySegment SEGMENT$glFogi;
    public final @Nullable MemorySegment SEGMENT$glFogiv;
    public final @Nullable MemorySegment SEGMENT$glFrameTerminatorGREMEDY;
    public final @Nullable MemorySegment SEGMENT$glFramebufferRenderbufferEXT;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTexture1DEXT;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTexture2DEXT;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTexture3DEXT;
    public final @Nullable MemorySegment SEGMENT$glFramebufferTextureLayerEXT;
    public final @Nullable MemorySegment SEGMENT$glFrustum;
    public final @Nullable MemorySegment SEGMENT$glGenBuffersARB;
    public final @Nullable MemorySegment SEGMENT$glGenFencesNV;
    public final @Nullable MemorySegment SEGMENT$glGenFramebuffersEXT;
    public final @Nullable MemorySegment SEGMENT$glGenLists;
    public final @Nullable MemorySegment SEGMENT$glGenProgramsARB;
    public final @Nullable MemorySegment SEGMENT$glGenQueriesARB;
    public final @Nullable MemorySegment SEGMENT$glGenQueryResourceTagNV;
    public final @Nullable MemorySegment SEGMENT$glGenRenderbuffersEXT;
    public final @Nullable MemorySegment SEGMENT$glGenTransformFeedbacksNV;
    public final @Nullable MemorySegment SEGMENT$glGenerateMipmapEXT;
    public final @Nullable MemorySegment SEGMENT$glGetActiveAttribARB;
    public final @Nullable MemorySegment SEGMENT$glGetActiveUniformARB;
    public final @Nullable MemorySegment SEGMENT$glGetActiveVaryingNV;
    public final @Nullable MemorySegment SEGMENT$glGetAttachedObjectsARB;
    public final @Nullable MemorySegment SEGMENT$glGetAttribLocationARB;
    public final @Nullable MemorySegment SEGMENT$glGetBufferParameterivARB;
    public final @Nullable MemorySegment SEGMENT$glGetBufferPointervARB;
    public final @Nullable MemorySegment SEGMENT$glGetBufferSubDataARB;
    public final @Nullable MemorySegment SEGMENT$glGetClipPlane;
    public final @Nullable MemorySegment SEGMENT$glGetColorTable;
    public final @Nullable MemorySegment SEGMENT$glGetColorTableParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetColorTableParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetCompressedTexImageARB;
    public final @Nullable MemorySegment SEGMENT$glGetConvolutionFilter;
    public final @Nullable MemorySegment SEGMENT$glGetConvolutionParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetConvolutionParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetDebugMessageLogAMD;
    public final @Nullable MemorySegment SEGMENT$glGetFenceivNV;
    public final @Nullable MemorySegment SEGMENT$glGetFragDataLocationEXT;
    public final @Nullable MemorySegment SEGMENT$glGetFramebufferAttachmentParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetHandleARB;
    public final @Nullable MemorySegment SEGMENT$glGetHistogram;
    public final @Nullable MemorySegment SEGMENT$glGetHistogramParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetHistogramParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetInfoLogARB;
    public final @Nullable MemorySegment SEGMENT$glGetLightfv;
    public final @Nullable MemorySegment SEGMENT$glGetLightiv;
    public final @Nullable MemorySegment SEGMENT$glGetMapdv;
    public final @Nullable MemorySegment SEGMENT$glGetMapfv;
    public final @Nullable MemorySegment SEGMENT$glGetMapiv;
    public final @Nullable MemorySegment SEGMENT$glGetMaterialfv;
    public final @Nullable MemorySegment SEGMENT$glGetMaterialiv;
    public final @Nullable MemorySegment SEGMENT$glGetMinmax;
    public final @Nullable MemorySegment SEGMENT$glGetMinmaxParameterfv;
    public final @Nullable MemorySegment SEGMENT$glGetMinmaxParameteriv;
    public final @Nullable MemorySegment SEGMENT$glGetMultisamplefvNV;
    public final @Nullable MemorySegment SEGMENT$glGetObjectParameterfvARB;
    public final @Nullable MemorySegment SEGMENT$glGetObjectParameterivARB;
    public final @Nullable MemorySegment SEGMENT$glGetPathColorGenfvNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathColorGenivNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathTexGenfvNV;
    public final @Nullable MemorySegment SEGMENT$glGetPathTexGenivNV;
    public final @Nullable MemorySegment SEGMENT$glGetPixelMapfv;
    public final @Nullable MemorySegment SEGMENT$glGetPixelMapuiv;
    public final @Nullable MemorySegment SEGMENT$glGetPixelMapusv;
    public final @Nullable MemorySegment SEGMENT$glGetPolygonStipple;
    public final @Nullable MemorySegment SEGMENT$glGetProgramEnvParameterdvARB;
    public final @Nullable MemorySegment SEGMENT$glGetProgramEnvParameterfvARB;
    public final @Nullable MemorySegment SEGMENT$glGetProgramLocalParameterdvARB;
    public final @Nullable MemorySegment SEGMENT$glGetProgramLocalParameterfvARB;
    public final @Nullable MemorySegment SEGMENT$glGetProgramStringARB;
    public final @Nullable MemorySegment SEGMENT$glGetProgramivARB;
    public final @Nullable MemorySegment SEGMENT$glGetQueryObjecti64vEXT;
    public final @Nullable MemorySegment SEGMENT$glGetQueryObjectivARB;
    public final @Nullable MemorySegment SEGMENT$glGetQueryObjectui64vEXT;
    public final @Nullable MemorySegment SEGMENT$glGetQueryObjectuivARB;
    public final @Nullable MemorySegment SEGMENT$glGetQueryivARB;
    public final @Nullable MemorySegment SEGMENT$glGetRenderbufferParameterivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetSemaphoreParameterivNV;
    public final @Nullable MemorySegment SEGMENT$glGetSeparableFilter;
    public final @Nullable MemorySegment SEGMENT$glGetShaderSourceARB;
    public final @Nullable MemorySegment SEGMENT$glGetTexEnvfv;
    public final @Nullable MemorySegment SEGMENT$glGetTexEnviv;
    public final @Nullable MemorySegment SEGMENT$glGetTexGendv;
    public final @Nullable MemorySegment SEGMENT$glGetTexGenfv;
    public final @Nullable MemorySegment SEGMENT$glGetTexGeniv;
    public final @Nullable MemorySegment SEGMENT$glGetTexParameterIivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTexParameterIuivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTransformFeedbackVaryingEXT;
    public final @Nullable MemorySegment SEGMENT$glGetTransformFeedbackVaryingNV;
    public final @Nullable MemorySegment SEGMENT$glGetUniformBufferSizeEXT;
    public final @Nullable MemorySegment SEGMENT$glGetUniformLocationARB;
    public final @Nullable MemorySegment SEGMENT$glGetUniformOffsetEXT;
    public final @Nullable MemorySegment SEGMENT$glGetUniformfvARB;
    public final @Nullable MemorySegment SEGMENT$glGetUniformi64vNV;
    public final @Nullable MemorySegment SEGMENT$glGetUniformivARB;
    public final @Nullable MemorySegment SEGMENT$glGetUniformui64vNV;
    public final @Nullable MemorySegment SEGMENT$glGetUniformuivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetVaryingLocationNV;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribIivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribIuivEXT;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribLdvEXT;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribPointervARB;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribdvARB;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribfvARB;
    public final @Nullable MemorySegment SEGMENT$glGetVertexAttribivARB;
    public final @Nullable MemorySegment SEGMENT$glGetnColorTable;
    public final @Nullable MemorySegment SEGMENT$glGetnColorTableARB;
    public final @Nullable MemorySegment SEGMENT$glGetnConvolutionFilter;
    public final @Nullable MemorySegment SEGMENT$glGetnConvolutionFilterARB;
    public final @Nullable MemorySegment SEGMENT$glGetnHistogram;
    public final @Nullable MemorySegment SEGMENT$glGetnHistogramARB;
    public final @Nullable MemorySegment SEGMENT$glGetnMapdv;
    public final @Nullable MemorySegment SEGMENT$glGetnMapdvARB;
    public final @Nullable MemorySegment SEGMENT$glGetnMapfv;
    public final @Nullable MemorySegment SEGMENT$glGetnMapfvARB;
    public final @Nullable MemorySegment SEGMENT$glGetnMapiv;
    public final @Nullable MemorySegment SEGMENT$glGetnMapivARB;
    public final @Nullable MemorySegment SEGMENT$glGetnMinmax;
    public final @Nullable MemorySegment SEGMENT$glGetnMinmaxARB;
    public final @Nullable MemorySegment SEGMENT$glGetnPixelMapfv;
    public final @Nullable MemorySegment SEGMENT$glGetnPixelMapfvARB;
    public final @Nullable MemorySegment SEGMENT$glGetnPixelMapuiv;
    public final @Nullable MemorySegment SEGMENT$glGetnPixelMapuivARB;
    public final @Nullable MemorySegment SEGMENT$glGetnPixelMapusv;
    public final @Nullable MemorySegment SEGMENT$glGetnPixelMapusvARB;
    public final @Nullable MemorySegment SEGMENT$glGetnPolygonStipple;
    public final @Nullable MemorySegment SEGMENT$glGetnPolygonStippleARB;
    public final @Nullable MemorySegment SEGMENT$glGetnSeparableFilter;
    public final @Nullable MemorySegment SEGMENT$glGetnSeparableFilterARB;
    public final @Nullable MemorySegment SEGMENT$glHistogram;
    public final @Nullable MemorySegment SEGMENT$glImportSyncEXT;
    public final @Nullable MemorySegment SEGMENT$glIndexMask;
    public final @Nullable MemorySegment SEGMENT$glIndexPointer;
    public final @Nullable MemorySegment SEGMENT$glIndexd;
    public final @Nullable MemorySegment SEGMENT$glIndexdv;
    public final @Nullable MemorySegment SEGMENT$glIndexf;
    public final @Nullable MemorySegment SEGMENT$glIndexfv;
    public final @Nullable MemorySegment SEGMENT$glIndexi;
    public final @Nullable MemorySegment SEGMENT$glIndexiv;
    public final @Nullable MemorySegment SEGMENT$glIndexs;
    public final @Nullable MemorySegment SEGMENT$glIndexsv;
    public final @Nullable MemorySegment SEGMENT$glIndexub;
    public final @Nullable MemorySegment SEGMENT$glIndexubv;
    public final @Nullable MemorySegment SEGMENT$glInitNames;
    public final @Nullable MemorySegment SEGMENT$glInterleavedArrays;
    public final @Nullable MemorySegment SEGMENT$glIsBufferARB;
    public final @Nullable MemorySegment SEGMENT$glIsFenceNV;
    public final @Nullable MemorySegment SEGMENT$glIsFramebufferEXT;
    public final @Nullable MemorySegment SEGMENT$glIsList;
    public final @Nullable MemorySegment SEGMENT$glIsProgramARB;
    public final @Nullable MemorySegment SEGMENT$glIsQueryARB;
    public final @Nullable MemorySegment SEGMENT$glIsRenderbufferEXT;
    public final @Nullable MemorySegment SEGMENT$glIsTransformFeedbackNV;
    public final @Nullable MemorySegment SEGMENT$glLightModelf;
    public final @Nullable MemorySegment SEGMENT$glLightModelfv;
    public final @Nullable MemorySegment SEGMENT$glLightModeli;
    public final @Nullable MemorySegment SEGMENT$glLightModeliv;
    public final @Nullable MemorySegment SEGMENT$glLightf;
    public final @Nullable MemorySegment SEGMENT$glLightfv;
    public final @Nullable MemorySegment SEGMENT$glLighti;
    public final @Nullable MemorySegment SEGMENT$glLightiv;
    public final @Nullable MemorySegment SEGMENT$glLineStipple;
    public final @Nullable MemorySegment SEGMENT$glLinkProgramARB;
    public final @Nullable MemorySegment SEGMENT$glListBase;
    public final @Nullable MemorySegment SEGMENT$glLoadIdentity;
    public final @Nullable MemorySegment SEGMENT$glLoadMatrixd;
    public final @Nullable MemorySegment SEGMENT$glLoadMatrixf;
    public final @Nullable MemorySegment SEGMENT$glLoadName;
    public final @Nullable MemorySegment SEGMENT$glLoadTransposeMatrixd;
    public final @Nullable MemorySegment SEGMENT$glLoadTransposeMatrixdARB;
    public final @Nullable MemorySegment SEGMENT$glLoadTransposeMatrixf;
    public final @Nullable MemorySegment SEGMENT$glLoadTransposeMatrixfARB;
    public final @Nullable MemorySegment SEGMENT$glLockArraysEXT;
    public final @Nullable MemorySegment SEGMENT$glMap1d;
    public final @Nullable MemorySegment SEGMENT$glMap1f;
    public final @Nullable MemorySegment SEGMENT$glMap2d;
    public final @Nullable MemorySegment SEGMENT$glMap2f;
    public final @Nullable MemorySegment SEGMENT$glMapBufferARB;
    public final @Nullable MemorySegment SEGMENT$glMapGrid1d;
    public final @Nullable MemorySegment SEGMENT$glMapGrid1f;
    public final @Nullable MemorySegment SEGMENT$glMapGrid2d;
    public final @Nullable MemorySegment SEGMENT$glMapGrid2f;
    public final @Nullable MemorySegment SEGMENT$glMapTexture2DINTEL;
    public final @Nullable MemorySegment SEGMENT$glMaterialf;
    public final @Nullable MemorySegment SEGMENT$glMaterialfv;
    public final @Nullable MemorySegment SEGMENT$glMateriali;
    public final @Nullable MemorySegment SEGMENT$glMaterialiv;
    public final @Nullable MemorySegment SEGMENT$glMatrixIndexPointerARB;
    public final @Nullable MemorySegment SEGMENT$glMatrixIndexubvARB;
    public final @Nullable MemorySegment SEGMENT$glMatrixIndexuivARB;
    public final @Nullable MemorySegment SEGMENT$glMatrixIndexusvARB;
    public final @Nullable MemorySegment SEGMENT$glMatrixMode;
    public final @Nullable MemorySegment SEGMENT$glMemoryBarrierEXT;
    public final @Nullable MemorySegment SEGMENT$glMinmax;
    public final @Nullable MemorySegment SEGMENT$glMultMatrixd;
    public final @Nullable MemorySegment SEGMENT$glMultMatrixf;
    public final @Nullable MemorySegment SEGMENT$glMultTransposeMatrixd;
    public final @Nullable MemorySegment SEGMENT$glMultTransposeMatrixdARB;
    public final @Nullable MemorySegment SEGMENT$glMultTransposeMatrixf;
    public final @Nullable MemorySegment SEGMENT$glMultTransposeMatrixfARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1d;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1dARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1dv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1dvARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1f;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1fARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1fv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1fvARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1hNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1hvNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1i;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1iARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1iv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1ivARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1s;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1sARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1sv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord1svARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2d;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2dARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2dv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2dvARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2f;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2fARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2fv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2fvARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2hNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2hvNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2i;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2iARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2iv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2ivARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2s;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2sARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2sv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord2svARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3d;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3dARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3dv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3dvARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3f;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3fARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3fv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3fvARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3hNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3hvNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3i;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3iARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3iv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3ivARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3s;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3sARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3sv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord3svARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4d;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4dARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4dv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4dvARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4f;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4fARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4fv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4fvARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4hNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4hvNV;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4i;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4iARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4iv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4ivARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4s;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4sARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4sv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoord4svARB;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordP1ui;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordP1uiv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordP2ui;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordP2uiv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordP3ui;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordP3uiv;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordP4ui;
    public final @Nullable MemorySegment SEGMENT$glMultiTexCoordP4uiv;
    public final @Nullable MemorySegment SEGMENT$glMulticastBarrierNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastBlitFramebufferNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastBufferSubDataNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastCopyBufferSubDataNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastCopyImageSubDataNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastFramebufferSampleLocationsfvNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastGetQueryObjecti64vNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastGetQueryObjectivNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastGetQueryObjectui64vNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastGetQueryObjectuivNV;
    public final @Nullable MemorySegment SEGMENT$glMulticastScissorArrayvNVX;
    public final @Nullable MemorySegment SEGMENT$glMulticastViewportArrayvNVX;
    public final @Nullable MemorySegment SEGMENT$glMulticastViewportPositionWScaleNVX;
    public final @Nullable MemorySegment SEGMENT$glMulticastWaitSyncNV;
    public final @Nullable MemorySegment SEGMENT$glNamedBufferStorageExternalEXT;
    public final @Nullable MemorySegment SEGMENT$glNewList;
    public final @Nullable MemorySegment SEGMENT$glNormal3b;
    public final @Nullable MemorySegment SEGMENT$glNormal3bv;
    public final @Nullable MemorySegment SEGMENT$glNormal3d;
    public final @Nullable MemorySegment SEGMENT$glNormal3dv;
    public final @Nullable MemorySegment SEGMENT$glNormal3f;
    public final @Nullable MemorySegment SEGMENT$glNormal3fv;
    public final @Nullable MemorySegment SEGMENT$glNormal3hNV;
    public final @Nullable MemorySegment SEGMENT$glNormal3hvNV;
    public final @Nullable MemorySegment SEGMENT$glNormal3i;
    public final @Nullable MemorySegment SEGMENT$glNormal3iv;
    public final @Nullable MemorySegment SEGMENT$glNormal3s;
    public final @Nullable MemorySegment SEGMENT$glNormal3sv;
    public final @Nullable MemorySegment SEGMENT$glNormalP3ui;
    public final @Nullable MemorySegment SEGMENT$glNormalP3uiv;
    public final @Nullable MemorySegment SEGMENT$glNormalPointer;
    public final @Nullable MemorySegment SEGMENT$glOrtho;
    public final @Nullable MemorySegment SEGMENT$glPassThrough;
    public final @Nullable MemorySegment SEGMENT$glPathColorGenNV;
    public final @Nullable MemorySegment SEGMENT$glPathFogGenNV;
    public final @Nullable MemorySegment SEGMENT$glPathTexGenNV;
    public final @Nullable MemorySegment SEGMENT$glPauseTransformFeedbackNV;
    public final @Nullable MemorySegment SEGMENT$glPixelDataRangeNV;
    public final @Nullable MemorySegment SEGMENT$glPixelMapfv;
    public final @Nullable MemorySegment SEGMENT$glPixelMapuiv;
    public final @Nullable MemorySegment SEGMENT$glPixelMapusv;
    public final @Nullable MemorySegment SEGMENT$glPixelTransferf;
    public final @Nullable MemorySegment SEGMENT$glPixelTransferi;
    public final @Nullable MemorySegment SEGMENT$glPixelZoom;
    public final @Nullable MemorySegment SEGMENT$glPointParameterfARB;
    public final @Nullable MemorySegment SEGMENT$glPointParameterfEXT;
    public final @Nullable MemorySegment SEGMENT$glPointParameterfvARB;
    public final @Nullable MemorySegment SEGMENT$glPointParameterfvEXT;
    public final @Nullable MemorySegment SEGMENT$glPointParameteriNV;
    public final @Nullable MemorySegment SEGMENT$glPointParameterivNV;
    public final @Nullable MemorySegment SEGMENT$glPolygonStipple;
    public final @Nullable MemorySegment SEGMENT$glPopAttrib;
    public final @Nullable MemorySegment SEGMENT$glPopClientAttrib;
    public final @Nullable MemorySegment SEGMENT$glPopMatrix;
    public final @Nullable MemorySegment SEGMENT$glPopName;
    public final @Nullable MemorySegment SEGMENT$glPrimitiveRestartIndexNV;
    public final @Nullable MemorySegment SEGMENT$glPrimitiveRestartNV;
    public final @Nullable MemorySegment SEGMENT$glPrioritizeTextures;
    public final @Nullable MemorySegment SEGMENT$glProgramEnvParameter4dARB;
    public final @Nullable MemorySegment SEGMENT$glProgramEnvParameter4dvARB;
    public final @Nullable MemorySegment SEGMENT$glProgramEnvParameter4fARB;
    public final @Nullable MemorySegment SEGMENT$glProgramEnvParameter4fvARB;
    public final @Nullable MemorySegment SEGMENT$glProgramEnvParameters4fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramLocalParameter4dARB;
    public final @Nullable MemorySegment SEGMENT$glProgramLocalParameter4dvARB;
    public final @Nullable MemorySegment SEGMENT$glProgramLocalParameter4fARB;
    public final @Nullable MemorySegment SEGMENT$glProgramLocalParameter4fvARB;
    public final @Nullable MemorySegment SEGMENT$glProgramLocalParameters4fvEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramParameteriEXT;
    public final @Nullable MemorySegment SEGMENT$glProgramStringARB;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1i64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1i64vNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1ui64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform1ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2i64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2i64vNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2ui64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform2ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3i64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3i64vNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3ui64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform3ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4i64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4i64vNV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4ui64NV;
    public final @Nullable MemorySegment SEGMENT$glProgramUniform4ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glProvokingVertexEXT;
    public final @Nullable MemorySegment SEGMENT$glPushAttrib;
    public final @Nullable MemorySegment SEGMENT$glPushClientAttrib;
    public final @Nullable MemorySegment SEGMENT$glPushMatrix;
    public final @Nullable MemorySegment SEGMENT$glPushName;
    public final @Nullable MemorySegment SEGMENT$glQueryObjectParameteruiAMD;
    public final @Nullable MemorySegment SEGMENT$glQueryResourceNV;
    public final @Nullable MemorySegment SEGMENT$glQueryResourceTagNV;
    public final @Nullable MemorySegment SEGMENT$glRasterPos2d;
    public final @Nullable MemorySegment SEGMENT$glRasterPos2dv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos2f;
    public final @Nullable MemorySegment SEGMENT$glRasterPos2fv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos2i;
    public final @Nullable MemorySegment SEGMENT$glRasterPos2iv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos2s;
    public final @Nullable MemorySegment SEGMENT$glRasterPos2sv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos3d;
    public final @Nullable MemorySegment SEGMENT$glRasterPos3dv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos3f;
    public final @Nullable MemorySegment SEGMENT$glRasterPos3fv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos3i;
    public final @Nullable MemorySegment SEGMENT$glRasterPos3iv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos3s;
    public final @Nullable MemorySegment SEGMENT$glRasterPos3sv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos4d;
    public final @Nullable MemorySegment SEGMENT$glRasterPos4dv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos4f;
    public final @Nullable MemorySegment SEGMENT$glRasterPos4fv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos4i;
    public final @Nullable MemorySegment SEGMENT$glRasterPos4iv;
    public final @Nullable MemorySegment SEGMENT$glRasterPos4s;
    public final @Nullable MemorySegment SEGMENT$glRasterPos4sv;
    public final @Nullable MemorySegment SEGMENT$glRectd;
    public final @Nullable MemorySegment SEGMENT$glRectdv;
    public final @Nullable MemorySegment SEGMENT$glRectf;
    public final @Nullable MemorySegment SEGMENT$glRectfv;
    public final @Nullable MemorySegment SEGMENT$glRecti;
    public final @Nullable MemorySegment SEGMENT$glRectiv;
    public final @Nullable MemorySegment SEGMENT$glRects;
    public final @Nullable MemorySegment SEGMENT$glRectsv;
    public final @Nullable MemorySegment SEGMENT$glReleaseKeyedMutexWin32EXT;
    public final @Nullable MemorySegment SEGMENT$glRenderGpuMaskNV;
    public final @Nullable MemorySegment SEGMENT$glRenderMode;
    public final @Nullable MemorySegment SEGMENT$glRenderbufferStorageEXT;
    public final @Nullable MemorySegment SEGMENT$glRenderbufferStorageMultisampleEXT;
    public final @Nullable MemorySegment SEGMENT$glResetHistogram;
    public final @Nullable MemorySegment SEGMENT$glResetMinmax;
    public final @Nullable MemorySegment SEGMENT$glResumeTransformFeedbackNV;
    public final @Nullable MemorySegment SEGMENT$glRotated;
    public final @Nullable MemorySegment SEGMENT$glRotatef;
    public final @Nullable MemorySegment SEGMENT$glSampleCoverageARB;
    public final @Nullable MemorySegment SEGMENT$glSampleMaskIndexedNV;
    public final @Nullable MemorySegment SEGMENT$glScaled;
    public final @Nullable MemorySegment SEGMENT$glScalef;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3b;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3bEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3bv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3bvEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3d;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3dEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3dv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3dvEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3f;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3fEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3fv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3fvEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3hNV;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3hvNV;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3i;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3iEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3iv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3ivEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3s;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3sEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3sv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3svEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3ub;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3ubEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3ubv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3ubvEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3ui;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3uiEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3uiv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3uivEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3us;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3usEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3usv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColor3usvEXT;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColorP3ui;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColorP3uiv;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColorPointer;
    public final @Nullable MemorySegment SEGMENT$glSecondaryColorPointerEXT;
    public final @Nullable MemorySegment SEGMENT$glSelectBuffer;
    public final @Nullable MemorySegment SEGMENT$glSemaphoreParameterivNV;
    public final @Nullable MemorySegment SEGMENT$glSeparableFilter2D;
    public final @Nullable MemorySegment SEGMENT$glSetFenceNV;
    public final @Nullable MemorySegment SEGMENT$glSetMultisamplefvAMD;
    public final @Nullable MemorySegment SEGMENT$glShadeModel;
    public final @Nullable MemorySegment SEGMENT$glShaderSourceARB;
    public final @Nullable MemorySegment SEGMENT$glSignalSemaphoreui64NVX;
    public final @Nullable MemorySegment SEGMENT$glStencilClearTagEXT;
    public final @Nullable MemorySegment SEGMENT$glStencilOpValueAMD;
    public final @Nullable MemorySegment SEGMENT$glStringMarkerGREMEDY;
    public final @Nullable MemorySegment SEGMENT$glSyncTextureINTEL;
    public final @Nullable MemorySegment SEGMENT$glTessellationFactorAMD;
    public final @Nullable MemorySegment SEGMENT$glTessellationModeAMD;
    public final @Nullable MemorySegment SEGMENT$glTestFenceNV;
    public final @Nullable MemorySegment SEGMENT$glTexBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1d;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1dv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1f;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1fv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1hNV;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1hvNV;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1i;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1iv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1s;
    public final @Nullable MemorySegment SEGMENT$glTexCoord1sv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2d;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2dv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2f;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2fv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2hNV;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2hvNV;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2i;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2iv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2s;
    public final @Nullable MemorySegment SEGMENT$glTexCoord2sv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3d;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3dv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3f;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3fv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3hNV;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3hvNV;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3i;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3iv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3s;
    public final @Nullable MemorySegment SEGMENT$glTexCoord3sv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4d;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4dv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4f;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4fv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4hNV;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4hvNV;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4i;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4iv;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4s;
    public final @Nullable MemorySegment SEGMENT$glTexCoord4sv;
    public final @Nullable MemorySegment SEGMENT$glTexCoordP1ui;
    public final @Nullable MemorySegment SEGMENT$glTexCoordP1uiv;
    public final @Nullable MemorySegment SEGMENT$glTexCoordP2ui;
    public final @Nullable MemorySegment SEGMENT$glTexCoordP2uiv;
    public final @Nullable MemorySegment SEGMENT$glTexCoordP3ui;
    public final @Nullable MemorySegment SEGMENT$glTexCoordP3uiv;
    public final @Nullable MemorySegment SEGMENT$glTexCoordP4ui;
    public final @Nullable MemorySegment SEGMENT$glTexCoordP4uiv;
    public final @Nullable MemorySegment SEGMENT$glTexCoordPointer;
    public final @Nullable MemorySegment SEGMENT$glTexEnvf;
    public final @Nullable MemorySegment SEGMENT$glTexEnvfv;
    public final @Nullable MemorySegment SEGMENT$glTexEnvi;
    public final @Nullable MemorySegment SEGMENT$glTexEnviv;
    public final @Nullable MemorySegment SEGMENT$glTexGend;
    public final @Nullable MemorySegment SEGMENT$glTexGendv;
    public final @Nullable MemorySegment SEGMENT$glTexGenf;
    public final @Nullable MemorySegment SEGMENT$glTexGenfv;
    public final @Nullable MemorySegment SEGMENT$glTexGeni;
    public final @Nullable MemorySegment SEGMENT$glTexGeniv;
    public final @Nullable MemorySegment SEGMENT$glTexImage2DMultisampleCoverageNV;
    public final @Nullable MemorySegment SEGMENT$glTexImage3DMultisampleCoverageNV;
    public final @Nullable MemorySegment SEGMENT$glTexParameterIivEXT;
    public final @Nullable MemorySegment SEGMENT$glTexParameterIuivEXT;
    public final @Nullable MemorySegment SEGMENT$glTexRenderbufferNV;
    public final @Nullable MemorySegment SEGMENT$glTexStorageSparseAMD;
    public final @Nullable MemorySegment SEGMENT$glTextureImage2DMultisampleCoverageNV;
    public final @Nullable MemorySegment SEGMENT$glTextureImage2DMultisampleNV;
    public final @Nullable MemorySegment SEGMENT$glTextureImage3DMultisampleCoverageNV;
    public final @Nullable MemorySegment SEGMENT$glTextureImage3DMultisampleNV;
    public final @Nullable MemorySegment SEGMENT$glTextureStorageSparseAMD;
    public final @Nullable MemorySegment SEGMENT$glTransformFeedbackAttribsNV;
    public final @Nullable MemorySegment SEGMENT$glTransformFeedbackStreamAttribsNV;
    public final @Nullable MemorySegment SEGMENT$glTransformFeedbackVaryingsEXT;
    public final @Nullable MemorySegment SEGMENT$glTransformFeedbackVaryingsNV;
    public final @Nullable MemorySegment SEGMENT$glTranslated;
    public final @Nullable MemorySegment SEGMENT$glTranslatef;
    public final @Nullable MemorySegment SEGMENT$glUniform1fARB;
    public final @Nullable MemorySegment SEGMENT$glUniform1fvARB;
    public final @Nullable MemorySegment SEGMENT$glUniform1i64NV;
    public final @Nullable MemorySegment SEGMENT$glUniform1i64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniform1iARB;
    public final @Nullable MemorySegment SEGMENT$glUniform1ivARB;
    public final @Nullable MemorySegment SEGMENT$glUniform1ui64NV;
    public final @Nullable MemorySegment SEGMENT$glUniform1ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniform1uiEXT;
    public final @Nullable MemorySegment SEGMENT$glUniform1uivEXT;
    public final @Nullable MemorySegment SEGMENT$glUniform2fARB;
    public final @Nullable MemorySegment SEGMENT$glUniform2fvARB;
    public final @Nullable MemorySegment SEGMENT$glUniform2i64NV;
    public final @Nullable MemorySegment SEGMENT$glUniform2i64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniform2iARB;
    public final @Nullable MemorySegment SEGMENT$glUniform2ivARB;
    public final @Nullable MemorySegment SEGMENT$glUniform2ui64NV;
    public final @Nullable MemorySegment SEGMENT$glUniform2ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniform2uiEXT;
    public final @Nullable MemorySegment SEGMENT$glUniform2uivEXT;
    public final @Nullable MemorySegment SEGMENT$glUniform3fARB;
    public final @Nullable MemorySegment SEGMENT$glUniform3fvARB;
    public final @Nullable MemorySegment SEGMENT$glUniform3i64NV;
    public final @Nullable MemorySegment SEGMENT$glUniform3i64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniform3iARB;
    public final @Nullable MemorySegment SEGMENT$glUniform3ivARB;
    public final @Nullable MemorySegment SEGMENT$glUniform3ui64NV;
    public final @Nullable MemorySegment SEGMENT$glUniform3ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniform3uiEXT;
    public final @Nullable MemorySegment SEGMENT$glUniform3uivEXT;
    public final @Nullable MemorySegment SEGMENT$glUniform4fARB;
    public final @Nullable MemorySegment SEGMENT$glUniform4fvARB;
    public final @Nullable MemorySegment SEGMENT$glUniform4i64NV;
    public final @Nullable MemorySegment SEGMENT$glUniform4i64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniform4iARB;
    public final @Nullable MemorySegment SEGMENT$glUniform4ivARB;
    public final @Nullable MemorySegment SEGMENT$glUniform4ui64NV;
    public final @Nullable MemorySegment SEGMENT$glUniform4ui64vNV;
    public final @Nullable MemorySegment SEGMENT$glUniform4uiEXT;
    public final @Nullable MemorySegment SEGMENT$glUniform4uivEXT;
    public final @Nullable MemorySegment SEGMENT$glUniformBufferEXT;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix2fvARB;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix3fvARB;
    public final @Nullable MemorySegment SEGMENT$glUniformMatrix4fvARB;
    public final @Nullable MemorySegment SEGMENT$glUnlockArraysEXT;
    public final @Nullable MemorySegment SEGMENT$glUnmapBufferARB;
    public final @Nullable MemorySegment SEGMENT$glUnmapTexture2DINTEL;
    public final @Nullable MemorySegment SEGMENT$glUploadGpuMaskNVX;
    public final @Nullable MemorySegment SEGMENT$glUseProgramObjectARB;
    public final @Nullable MemorySegment SEGMENT$glValidateProgramARB;
    public final @Nullable MemorySegment SEGMENT$glVertex2d;
    public final @Nullable MemorySegment SEGMENT$glVertex2dv;
    public final @Nullable MemorySegment SEGMENT$glVertex2f;
    public final @Nullable MemorySegment SEGMENT$glVertex2fv;
    public final @Nullable MemorySegment SEGMENT$glVertex2hNV;
    public final @Nullable MemorySegment SEGMENT$glVertex2hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertex2i;
    public final @Nullable MemorySegment SEGMENT$glVertex2iv;
    public final @Nullable MemorySegment SEGMENT$glVertex2s;
    public final @Nullable MemorySegment SEGMENT$glVertex2sv;
    public final @Nullable MemorySegment SEGMENT$glVertex3d;
    public final @Nullable MemorySegment SEGMENT$glVertex3dv;
    public final @Nullable MemorySegment SEGMENT$glVertex3f;
    public final @Nullable MemorySegment SEGMENT$glVertex3fv;
    public final @Nullable MemorySegment SEGMENT$glVertex3hNV;
    public final @Nullable MemorySegment SEGMENT$glVertex3hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertex3i;
    public final @Nullable MemorySegment SEGMENT$glVertex3iv;
    public final @Nullable MemorySegment SEGMENT$glVertex3s;
    public final @Nullable MemorySegment SEGMENT$glVertex3sv;
    public final @Nullable MemorySegment SEGMENT$glVertex4d;
    public final @Nullable MemorySegment SEGMENT$glVertex4dv;
    public final @Nullable MemorySegment SEGMENT$glVertex4f;
    public final @Nullable MemorySegment SEGMENT$glVertex4fv;
    public final @Nullable MemorySegment SEGMENT$glVertex4hNV;
    public final @Nullable MemorySegment SEGMENT$glVertex4hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertex4i;
    public final @Nullable MemorySegment SEGMENT$glVertex4iv;
    public final @Nullable MemorySegment SEGMENT$glVertex4s;
    public final @Nullable MemorySegment SEGMENT$glVertex4sv;
    public final @Nullable MemorySegment SEGMENT$glVertexArrayRangeNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1dARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1dvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1fARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1fvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1hNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1sARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib1svARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2dARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2dvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2fARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2fvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2hNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2sARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib2svARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3dARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3dvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3fARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3fvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3hNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3sARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib3svARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4NbvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4NivARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4NsvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4NubARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4NubvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4NuivARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4NusvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4bvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4dARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4dvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4fARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4fvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4hNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4ivARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4sARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4svARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4ubvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4uivARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttrib4usvARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI1iEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI1ivEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI1uiEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI1uivEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI2iEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI2ivEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI2uiEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI2uivEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI3iEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI3ivEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI3uiEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI3uivEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4bvEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4iEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4ivEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4svEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4ubvEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4uiEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4uivEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribI4usvEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribIPointerEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1dEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL1dvEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL2dEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL2dvEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL3dEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL3dvEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL4dEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribL4dvEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribLPointerEXT;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribParameteriAMD;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribPointerARB;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribs1hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribs2hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribs3hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertexAttribs4hvNV;
    public final @Nullable MemorySegment SEGMENT$glVertexBlendARB;
    public final @Nullable MemorySegment SEGMENT$glVertexP2ui;
    public final @Nullable MemorySegment SEGMENT$glVertexP2uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexP3ui;
    public final @Nullable MemorySegment SEGMENT$glVertexP3uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexP4ui;
    public final @Nullable MemorySegment SEGMENT$glVertexP4uiv;
    public final @Nullable MemorySegment SEGMENT$glVertexPointer;
    public final @Nullable MemorySegment SEGMENT$glVertexWeighthNV;
    public final @Nullable MemorySegment SEGMENT$glVertexWeighthvNV;
    public final @Nullable MemorySegment SEGMENT$glWaitSemaphoreui64NVX;
    public final @Nullable MemorySegment SEGMENT$glWeightPointerARB;
    public final @Nullable MemorySegment SEGMENT$glWeightbvARB;
    public final @Nullable MemorySegment SEGMENT$glWeightdvARB;
    public final @Nullable MemorySegment SEGMENT$glWeightfvARB;
    public final @Nullable MemorySegment SEGMENT$glWeightivARB;
    public final @Nullable MemorySegment SEGMENT$glWeightsvARB;
    public final @Nullable MemorySegment SEGMENT$glWeightubvARB;
    public final @Nullable MemorySegment SEGMENT$glWeightuivARB;
    public final @Nullable MemorySegment SEGMENT$glWeightusvARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2d;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2dARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2dv;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2dvARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2f;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2fARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2fv;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2fvARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2i;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2iARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2iv;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2ivARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2s;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2sARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2sv;
    public final @Nullable MemorySegment SEGMENT$glWindowPos2svARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3d;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3dARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3dv;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3dvARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3f;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3fARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3fv;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3fvARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3i;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3iARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3iv;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3ivARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3s;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3sARB;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3sv;
    public final @Nullable MemorySegment SEGMENT$glWindowPos3svARB;
    public final @Nullable MethodHandle HANDLE$glAccum;
    public final @Nullable MethodHandle HANDLE$glAcquireKeyedMutexWin32EXT;
    public final @Nullable MethodHandle HANDLE$glActiveStencilFaceEXT;
    public final @Nullable MethodHandle HANDLE$glActiveTextureARB;
    public final @Nullable MethodHandle HANDLE$glActiveVaryingNV;
    public final @Nullable MethodHandle HANDLE$glAlphaFunc;
    public final @Nullable MethodHandle HANDLE$glAlphaToCoverageDitherControlNV;
    public final @Nullable MethodHandle HANDLE$glAreTexturesResident;
    public final @Nullable MethodHandle HANDLE$glArrayElement;
    public final @Nullable MethodHandle HANDLE$glAsyncCopyBufferSubDataNVX;
    public final @Nullable MethodHandle HANDLE$glAsyncCopyImageSubDataNVX;
    public final @Nullable MethodHandle HANDLE$glAttachObjectARB;
    public final @Nullable MethodHandle HANDLE$glBegin;
    public final @Nullable MethodHandle HANDLE$glBeginConditionalRenderNVX;
    public final @Nullable MethodHandle HANDLE$glBeginQueryARB;
    public final @Nullable MethodHandle HANDLE$glBeginTransformFeedbackEXT;
    public final @Nullable MethodHandle HANDLE$glBeginTransformFeedbackNV;
    public final @Nullable MethodHandle HANDLE$glBindAttribLocationARB;
    public final @Nullable MethodHandle HANDLE$glBindBufferARB;
    public final @Nullable MethodHandle HANDLE$glBindBufferBaseEXT;
    public final @Nullable MethodHandle HANDLE$glBindBufferBaseNV;
    public final @Nullable MethodHandle HANDLE$glBindBufferOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glBindBufferOffsetNV;
    public final @Nullable MethodHandle HANDLE$glBindBufferRangeEXT;
    public final @Nullable MethodHandle HANDLE$glBindBufferRangeNV;
    public final @Nullable MethodHandle HANDLE$glBindFragDataLocationEXT;
    public final @Nullable MethodHandle HANDLE$glBindFramebufferEXT;
    public final @Nullable MethodHandle HANDLE$glBindImageTextureEXT;
    public final @Nullable MethodHandle HANDLE$glBindProgramARB;
    public final @Nullable MethodHandle HANDLE$glBindRenderbufferEXT;
    public final @Nullable MethodHandle HANDLE$glBindTransformFeedbackNV;
    public final @Nullable MethodHandle HANDLE$glBitmap;
    public final @Nullable MethodHandle HANDLE$glBlendColorEXT;
    public final @Nullable MethodHandle HANDLE$glBlendEquationEXT;
    public final @Nullable MethodHandle HANDLE$glBlendEquationIndexedAMD;
    public final @Nullable MethodHandle HANDLE$glBlendEquationSeparateEXT;
    public final @Nullable MethodHandle HANDLE$glBlendEquationSeparateIndexedAMD;
    public final @Nullable MethodHandle HANDLE$glBlendFuncIndexedAMD;
    public final @Nullable MethodHandle HANDLE$glBlendFuncSeparateEXT;
    public final @Nullable MethodHandle HANDLE$glBlendFuncSeparateIndexedAMD;
    public final @Nullable MethodHandle HANDLE$glBlitFramebufferEXT;
    public final @Nullable MethodHandle HANDLE$glBlitFramebufferLayerEXT;
    public final @Nullable MethodHandle HANDLE$glBlitFramebufferLayersEXT;
    public final @Nullable MethodHandle HANDLE$glBufferDataARB;
    public final @Nullable MethodHandle HANDLE$glBufferStorageExternalEXT;
    public final @Nullable MethodHandle HANDLE$glBufferSubDataARB;
    public final @Nullable MethodHandle HANDLE$glCallList;
    public final @Nullable MethodHandle HANDLE$glCallLists;
    public final @Nullable MethodHandle HANDLE$glCheckFramebufferStatusEXT;
    public final @Nullable MethodHandle HANDLE$glClampColorARB;
    public final @Nullable MethodHandle HANDLE$glClearAccum;
    public final @Nullable MethodHandle HANDLE$glClearColorIiEXT;
    public final @Nullable MethodHandle HANDLE$glClearColorIuiEXT;
    public final @Nullable MethodHandle HANDLE$glClearIndex;
    public final @Nullable MethodHandle HANDLE$glClientActiveTexture;
    public final @Nullable MethodHandle HANDLE$glClientActiveTextureARB;
    public final @Nullable MethodHandle HANDLE$glClientWaitSemaphoreui64NVX;
    public final @Nullable MethodHandle HANDLE$glClipPlane;
    public final @Nullable MethodHandle HANDLE$glColor3b;
    public final @Nullable MethodHandle HANDLE$glColor3bv;
    public final @Nullable MethodHandle HANDLE$glColor3d;
    public final @Nullable MethodHandle HANDLE$glColor3dv;
    public final @Nullable MethodHandle HANDLE$glColor3f;
    public final @Nullable MethodHandle HANDLE$glColor3fv;
    public final @Nullable MethodHandle HANDLE$glColor3hNV;
    public final @Nullable MethodHandle HANDLE$glColor3hvNV;
    public final @Nullable MethodHandle HANDLE$glColor3i;
    public final @Nullable MethodHandle HANDLE$glColor3iv;
    public final @Nullable MethodHandle HANDLE$glColor3s;
    public final @Nullable MethodHandle HANDLE$glColor3sv;
    public final @Nullable MethodHandle HANDLE$glColor3ub;
    public final @Nullable MethodHandle HANDLE$glColor3ubv;
    public final @Nullable MethodHandle HANDLE$glColor3ui;
    public final @Nullable MethodHandle HANDLE$glColor3uiv;
    public final @Nullable MethodHandle HANDLE$glColor3us;
    public final @Nullable MethodHandle HANDLE$glColor3usv;
    public final @Nullable MethodHandle HANDLE$glColor4b;
    public final @Nullable MethodHandle HANDLE$glColor4bv;
    public final @Nullable MethodHandle HANDLE$glColor4d;
    public final @Nullable MethodHandle HANDLE$glColor4dv;
    public final @Nullable MethodHandle HANDLE$glColor4f;
    public final @Nullable MethodHandle HANDLE$glColor4fv;
    public final @Nullable MethodHandle HANDLE$glColor4hNV;
    public final @Nullable MethodHandle HANDLE$glColor4hvNV;
    public final @Nullable MethodHandle HANDLE$glColor4i;
    public final @Nullable MethodHandle HANDLE$glColor4iv;
    public final @Nullable MethodHandle HANDLE$glColor4s;
    public final @Nullable MethodHandle HANDLE$glColor4sv;
    public final @Nullable MethodHandle HANDLE$glColor4ub;
    public final @Nullable MethodHandle HANDLE$glColor4ubv;
    public final @Nullable MethodHandle HANDLE$glColor4ui;
    public final @Nullable MethodHandle HANDLE$glColor4uiv;
    public final @Nullable MethodHandle HANDLE$glColor4us;
    public final @Nullable MethodHandle HANDLE$glColor4usv;
    public final @Nullable MethodHandle HANDLE$glColorMaskIndexedEXT;
    public final @Nullable MethodHandle HANDLE$glColorMaterial;
    public final @Nullable MethodHandle HANDLE$glColorP3ui;
    public final @Nullable MethodHandle HANDLE$glColorP3uiv;
    public final @Nullable MethodHandle HANDLE$glColorP4ui;
    public final @Nullable MethodHandle HANDLE$glColorP4uiv;
    public final @Nullable MethodHandle HANDLE$glColorPointer;
    public final @Nullable MethodHandle HANDLE$glColorSubTable;
    public final @Nullable MethodHandle HANDLE$glColorTable;
    public final @Nullable MethodHandle HANDLE$glColorTableParameterfv;
    public final @Nullable MethodHandle HANDLE$glColorTableParameteriv;
    public final @Nullable MethodHandle HANDLE$glCompileShaderARB;
    public final @Nullable MethodHandle HANDLE$glCompressedTexImage1DARB;
    public final @Nullable MethodHandle HANDLE$glCompressedTexImage2DARB;
    public final @Nullable MethodHandle HANDLE$glCompressedTexImage3DARB;
    public final @Nullable MethodHandle HANDLE$glCompressedTexSubImage1DARB;
    public final @Nullable MethodHandle HANDLE$glCompressedTexSubImage2DARB;
    public final @Nullable MethodHandle HANDLE$glCompressedTexSubImage3DARB;
    public final @Nullable MethodHandle HANDLE$glConvolutionFilter1D;
    public final @Nullable MethodHandle HANDLE$glConvolutionFilter2D;
    public final @Nullable MethodHandle HANDLE$glConvolutionParameterf;
    public final @Nullable MethodHandle HANDLE$glConvolutionParameterfv;
    public final @Nullable MethodHandle HANDLE$glConvolutionParameteri;
    public final @Nullable MethodHandle HANDLE$glConvolutionParameteriv;
    public final @Nullable MethodHandle HANDLE$glCopyColorSubTable;
    public final @Nullable MethodHandle HANDLE$glCopyColorTable;
    public final @Nullable MethodHandle HANDLE$glCopyConvolutionFilter1D;
    public final @Nullable MethodHandle HANDLE$glCopyConvolutionFilter2D;
    public final @Nullable MethodHandle HANDLE$glCopyImageSubDataNV;
    public final @Nullable MethodHandle HANDLE$glCopyPixels;
    public final @Nullable MethodHandle HANDLE$glCreateProgramObjectARB;
    public final @Nullable MethodHandle HANDLE$glCreateProgressFenceNVX;
    public final @Nullable MethodHandle HANDLE$glCreateSemaphoresNV;
    public final @Nullable MethodHandle HANDLE$glCreateShaderObjectARB;
    public final @Nullable MethodHandle HANDLE$glCurrentPaletteMatrixARB;
    public final @Nullable MethodHandle HANDLE$glDebugMessageCallbackAMD;
    public final @Nullable MethodHandle HANDLE$glDebugMessageEnableAMD;
    public final @Nullable MethodHandle HANDLE$glDebugMessageInsertAMD;
    public final @Nullable MethodHandle HANDLE$glDeleteBuffersARB;
    public final @Nullable MethodHandle HANDLE$glDeleteFencesNV;
    public final @Nullable MethodHandle HANDLE$glDeleteFramebuffersEXT;
    public final @Nullable MethodHandle HANDLE$glDeleteLists;
    public final @Nullable MethodHandle HANDLE$glDeleteObjectARB;
    public final @Nullable MethodHandle HANDLE$glDeleteProgramsARB;
    public final @Nullable MethodHandle HANDLE$glDeleteQueriesARB;
    public final @Nullable MethodHandle HANDLE$glDeleteQueryResourceTagNV;
    public final @Nullable MethodHandle HANDLE$glDeleteRenderbuffersEXT;
    public final @Nullable MethodHandle HANDLE$glDeleteTransformFeedbacksNV;
    public final @Nullable MethodHandle HANDLE$glDepthBoundsEXT;
    public final @Nullable MethodHandle HANDLE$glDetachObjectARB;
    public final @Nullable MethodHandle HANDLE$glDisableClientState;
    public final @Nullable MethodHandle HANDLE$glDisableVertexAttribArrayARB;
    public final @Nullable MethodHandle HANDLE$glDrawBuffersARB;
    public final @Nullable MethodHandle HANDLE$glDrawPixels;
    public final @Nullable MethodHandle HANDLE$glDrawTextureNV;
    public final @Nullable MethodHandle HANDLE$glDrawTransformFeedbackNV;
    public final @Nullable MethodHandle HANDLE$glEdgeFlag;
    public final @Nullable MethodHandle HANDLE$glEdgeFlagPointer;
    public final @Nullable MethodHandle HANDLE$glEdgeFlagv;
    public final @Nullable MethodHandle HANDLE$glEnableClientState;
    public final @Nullable MethodHandle HANDLE$glEnableVertexAttribArrayARB;
    public final @Nullable MethodHandle HANDLE$glEnd;
    public final @Nullable MethodHandle HANDLE$glEndConditionalRenderNVX;
    public final @Nullable MethodHandle HANDLE$glEndList;
    public final @Nullable MethodHandle HANDLE$glEndQueryARB;
    public final @Nullable MethodHandle HANDLE$glEndTransformFeedbackEXT;
    public final @Nullable MethodHandle HANDLE$glEndTransformFeedbackNV;
    public final @Nullable MethodHandle HANDLE$glEvalCoord1d;
    public final @Nullable MethodHandle HANDLE$glEvalCoord1dv;
    public final @Nullable MethodHandle HANDLE$glEvalCoord1f;
    public final @Nullable MethodHandle HANDLE$glEvalCoord1fv;
    public final @Nullable MethodHandle HANDLE$glEvalCoord2d;
    public final @Nullable MethodHandle HANDLE$glEvalCoord2dv;
    public final @Nullable MethodHandle HANDLE$glEvalCoord2f;
    public final @Nullable MethodHandle HANDLE$glEvalCoord2fv;
    public final @Nullable MethodHandle HANDLE$glEvalMesh1;
    public final @Nullable MethodHandle HANDLE$glEvalMesh2;
    public final @Nullable MethodHandle HANDLE$glEvalPoint1;
    public final @Nullable MethodHandle HANDLE$glEvalPoint2;
    public final @Nullable MethodHandle HANDLE$glFeedbackBuffer;
    public final @Nullable MethodHandle HANDLE$glFinishFenceNV;
    public final @Nullable MethodHandle HANDLE$glFlushPixelDataRangeNV;
    public final @Nullable MethodHandle HANDLE$glFlushVertexArrayRangeNV;
    public final @Nullable MethodHandle HANDLE$glFogCoordPointer;
    public final @Nullable MethodHandle HANDLE$glFogCoordd;
    public final @Nullable MethodHandle HANDLE$glFogCoorddv;
    public final @Nullable MethodHandle HANDLE$glFogCoordf;
    public final @Nullable MethodHandle HANDLE$glFogCoordfv;
    public final @Nullable MethodHandle HANDLE$glFogCoordhNV;
    public final @Nullable MethodHandle HANDLE$glFogCoordhvNV;
    public final @Nullable MethodHandle HANDLE$glFogf;
    public final @Nullable MethodHandle HANDLE$glFogfv;
    public final @Nullable MethodHandle HANDLE$glFogi;
    public final @Nullable MethodHandle HANDLE$glFogiv;
    public final @Nullable MethodHandle HANDLE$glFrameTerminatorGREMEDY;
    public final @Nullable MethodHandle HANDLE$glFramebufferRenderbufferEXT;
    public final @Nullable MethodHandle HANDLE$glFramebufferTexture1DEXT;
    public final @Nullable MethodHandle HANDLE$glFramebufferTexture2DEXT;
    public final @Nullable MethodHandle HANDLE$glFramebufferTexture3DEXT;
    public final @Nullable MethodHandle HANDLE$glFramebufferTextureLayerEXT;
    public final @Nullable MethodHandle HANDLE$glFrustum;
    public final @Nullable MethodHandle HANDLE$glGenBuffersARB;
    public final @Nullable MethodHandle HANDLE$glGenFencesNV;
    public final @Nullable MethodHandle HANDLE$glGenFramebuffersEXT;
    public final @Nullable MethodHandle HANDLE$glGenLists;
    public final @Nullable MethodHandle HANDLE$glGenProgramsARB;
    public final @Nullable MethodHandle HANDLE$glGenQueriesARB;
    public final @Nullable MethodHandle HANDLE$glGenQueryResourceTagNV;
    public final @Nullable MethodHandle HANDLE$glGenRenderbuffersEXT;
    public final @Nullable MethodHandle HANDLE$glGenTransformFeedbacksNV;
    public final @Nullable MethodHandle HANDLE$glGenerateMipmapEXT;
    public final @Nullable MethodHandle HANDLE$glGetActiveAttribARB;
    public final @Nullable MethodHandle HANDLE$glGetActiveUniformARB;
    public final @Nullable MethodHandle HANDLE$glGetActiveVaryingNV;
    public final @Nullable MethodHandle HANDLE$glGetAttachedObjectsARB;
    public final @Nullable MethodHandle HANDLE$glGetAttribLocationARB;
    public final @Nullable MethodHandle HANDLE$glGetBufferParameterivARB;
    public final @Nullable MethodHandle HANDLE$glGetBufferPointervARB;
    public final @Nullable MethodHandle HANDLE$glGetBufferSubDataARB;
    public final @Nullable MethodHandle HANDLE$glGetClipPlane;
    public final @Nullable MethodHandle HANDLE$glGetColorTable;
    public final @Nullable MethodHandle HANDLE$glGetColorTableParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetColorTableParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetCompressedTexImageARB;
    public final @Nullable MethodHandle HANDLE$glGetConvolutionFilter;
    public final @Nullable MethodHandle HANDLE$glGetConvolutionParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetConvolutionParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetDebugMessageLogAMD;
    public final @Nullable MethodHandle HANDLE$glGetFenceivNV;
    public final @Nullable MethodHandle HANDLE$glGetFragDataLocationEXT;
    public final @Nullable MethodHandle HANDLE$glGetFramebufferAttachmentParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetHandleARB;
    public final @Nullable MethodHandle HANDLE$glGetHistogram;
    public final @Nullable MethodHandle HANDLE$glGetHistogramParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetHistogramParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetInfoLogARB;
    public final @Nullable MethodHandle HANDLE$glGetLightfv;
    public final @Nullable MethodHandle HANDLE$glGetLightiv;
    public final @Nullable MethodHandle HANDLE$glGetMapdv;
    public final @Nullable MethodHandle HANDLE$glGetMapfv;
    public final @Nullable MethodHandle HANDLE$glGetMapiv;
    public final @Nullable MethodHandle HANDLE$glGetMaterialfv;
    public final @Nullable MethodHandle HANDLE$glGetMaterialiv;
    public final @Nullable MethodHandle HANDLE$glGetMinmax;
    public final @Nullable MethodHandle HANDLE$glGetMinmaxParameterfv;
    public final @Nullable MethodHandle HANDLE$glGetMinmaxParameteriv;
    public final @Nullable MethodHandle HANDLE$glGetMultisamplefvNV;
    public final @Nullable MethodHandle HANDLE$glGetObjectParameterfvARB;
    public final @Nullable MethodHandle HANDLE$glGetObjectParameterivARB;
    public final @Nullable MethodHandle HANDLE$glGetPathColorGenfvNV;
    public final @Nullable MethodHandle HANDLE$glGetPathColorGenivNV;
    public final @Nullable MethodHandle HANDLE$glGetPathTexGenfvNV;
    public final @Nullable MethodHandle HANDLE$glGetPathTexGenivNV;
    public final @Nullable MethodHandle HANDLE$glGetPixelMapfv;
    public final @Nullable MethodHandle HANDLE$glGetPixelMapuiv;
    public final @Nullable MethodHandle HANDLE$glGetPixelMapusv;
    public final @Nullable MethodHandle HANDLE$glGetPolygonStipple;
    public final @Nullable MethodHandle HANDLE$glGetProgramEnvParameterdvARB;
    public final @Nullable MethodHandle HANDLE$glGetProgramEnvParameterfvARB;
    public final @Nullable MethodHandle HANDLE$glGetProgramLocalParameterdvARB;
    public final @Nullable MethodHandle HANDLE$glGetProgramLocalParameterfvARB;
    public final @Nullable MethodHandle HANDLE$glGetProgramStringARB;
    public final @Nullable MethodHandle HANDLE$glGetProgramivARB;
    public final @Nullable MethodHandle HANDLE$glGetQueryObjecti64vEXT;
    public final @Nullable MethodHandle HANDLE$glGetQueryObjectivARB;
    public final @Nullable MethodHandle HANDLE$glGetQueryObjectui64vEXT;
    public final @Nullable MethodHandle HANDLE$glGetQueryObjectuivARB;
    public final @Nullable MethodHandle HANDLE$glGetQueryivARB;
    public final @Nullable MethodHandle HANDLE$glGetRenderbufferParameterivEXT;
    public final @Nullable MethodHandle HANDLE$glGetSemaphoreParameterivNV;
    public final @Nullable MethodHandle HANDLE$glGetSeparableFilter;
    public final @Nullable MethodHandle HANDLE$glGetShaderSourceARB;
    public final @Nullable MethodHandle HANDLE$glGetTexEnvfv;
    public final @Nullable MethodHandle HANDLE$glGetTexEnviv;
    public final @Nullable MethodHandle HANDLE$glGetTexGendv;
    public final @Nullable MethodHandle HANDLE$glGetTexGenfv;
    public final @Nullable MethodHandle HANDLE$glGetTexGeniv;
    public final @Nullable MethodHandle HANDLE$glGetTexParameterIivEXT;
    public final @Nullable MethodHandle HANDLE$glGetTexParameterIuivEXT;
    public final @Nullable MethodHandle HANDLE$glGetTransformFeedbackVaryingEXT;
    public final @Nullable MethodHandle HANDLE$glGetTransformFeedbackVaryingNV;
    public final @Nullable MethodHandle HANDLE$glGetUniformBufferSizeEXT;
    public final @Nullable MethodHandle HANDLE$glGetUniformLocationARB;
    public final @Nullable MethodHandle HANDLE$glGetUniformOffsetEXT;
    public final @Nullable MethodHandle HANDLE$glGetUniformfvARB;
    public final @Nullable MethodHandle HANDLE$glGetUniformi64vNV;
    public final @Nullable MethodHandle HANDLE$glGetUniformivARB;
    public final @Nullable MethodHandle HANDLE$glGetUniformui64vNV;
    public final @Nullable MethodHandle HANDLE$glGetUniformuivEXT;
    public final @Nullable MethodHandle HANDLE$glGetVaryingLocationNV;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribIivEXT;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribIuivEXT;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribLdvEXT;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribPointervARB;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribdvARB;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribfvARB;
    public final @Nullable MethodHandle HANDLE$glGetVertexAttribivARB;
    public final @Nullable MethodHandle HANDLE$glGetnColorTable;
    public final @Nullable MethodHandle HANDLE$glGetnColorTableARB;
    public final @Nullable MethodHandle HANDLE$glGetnConvolutionFilter;
    public final @Nullable MethodHandle HANDLE$glGetnConvolutionFilterARB;
    public final @Nullable MethodHandle HANDLE$glGetnHistogram;
    public final @Nullable MethodHandle HANDLE$glGetnHistogramARB;
    public final @Nullable MethodHandle HANDLE$glGetnMapdv;
    public final @Nullable MethodHandle HANDLE$glGetnMapdvARB;
    public final @Nullable MethodHandle HANDLE$glGetnMapfv;
    public final @Nullable MethodHandle HANDLE$glGetnMapfvARB;
    public final @Nullable MethodHandle HANDLE$glGetnMapiv;
    public final @Nullable MethodHandle HANDLE$glGetnMapivARB;
    public final @Nullable MethodHandle HANDLE$glGetnMinmax;
    public final @Nullable MethodHandle HANDLE$glGetnMinmaxARB;
    public final @Nullable MethodHandle HANDLE$glGetnPixelMapfv;
    public final @Nullable MethodHandle HANDLE$glGetnPixelMapfvARB;
    public final @Nullable MethodHandle HANDLE$glGetnPixelMapuiv;
    public final @Nullable MethodHandle HANDLE$glGetnPixelMapuivARB;
    public final @Nullable MethodHandle HANDLE$glGetnPixelMapusv;
    public final @Nullable MethodHandle HANDLE$glGetnPixelMapusvARB;
    public final @Nullable MethodHandle HANDLE$glGetnPolygonStipple;
    public final @Nullable MethodHandle HANDLE$glGetnPolygonStippleARB;
    public final @Nullable MethodHandle HANDLE$glGetnSeparableFilter;
    public final @Nullable MethodHandle HANDLE$glGetnSeparableFilterARB;
    public final @Nullable MethodHandle HANDLE$glHistogram;
    public final @Nullable MethodHandle HANDLE$glImportSyncEXT;
    public final @Nullable MethodHandle HANDLE$glIndexMask;
    public final @Nullable MethodHandle HANDLE$glIndexPointer;
    public final @Nullable MethodHandle HANDLE$glIndexd;
    public final @Nullable MethodHandle HANDLE$glIndexdv;
    public final @Nullable MethodHandle HANDLE$glIndexf;
    public final @Nullable MethodHandle HANDLE$glIndexfv;
    public final @Nullable MethodHandle HANDLE$glIndexi;
    public final @Nullable MethodHandle HANDLE$glIndexiv;
    public final @Nullable MethodHandle HANDLE$glIndexs;
    public final @Nullable MethodHandle HANDLE$glIndexsv;
    public final @Nullable MethodHandle HANDLE$glIndexub;
    public final @Nullable MethodHandle HANDLE$glIndexubv;
    public final @Nullable MethodHandle HANDLE$glInitNames;
    public final @Nullable MethodHandle HANDLE$glInterleavedArrays;
    public final @Nullable MethodHandle HANDLE$glIsBufferARB;
    public final @Nullable MethodHandle HANDLE$glIsFenceNV;
    public final @Nullable MethodHandle HANDLE$glIsFramebufferEXT;
    public final @Nullable MethodHandle HANDLE$glIsList;
    public final @Nullable MethodHandle HANDLE$glIsProgramARB;
    public final @Nullable MethodHandle HANDLE$glIsQueryARB;
    public final @Nullable MethodHandle HANDLE$glIsRenderbufferEXT;
    public final @Nullable MethodHandle HANDLE$glIsTransformFeedbackNV;
    public final @Nullable MethodHandle HANDLE$glLightModelf;
    public final @Nullable MethodHandle HANDLE$glLightModelfv;
    public final @Nullable MethodHandle HANDLE$glLightModeli;
    public final @Nullable MethodHandle HANDLE$glLightModeliv;
    public final @Nullable MethodHandle HANDLE$glLightf;
    public final @Nullable MethodHandle HANDLE$glLightfv;
    public final @Nullable MethodHandle HANDLE$glLighti;
    public final @Nullable MethodHandle HANDLE$glLightiv;
    public final @Nullable MethodHandle HANDLE$glLineStipple;
    public final @Nullable MethodHandle HANDLE$glLinkProgramARB;
    public final @Nullable MethodHandle HANDLE$glListBase;
    public final @Nullable MethodHandle HANDLE$glLoadIdentity;
    public final @Nullable MethodHandle HANDLE$glLoadMatrixd;
    public final @Nullable MethodHandle HANDLE$glLoadMatrixf;
    public final @Nullable MethodHandle HANDLE$glLoadName;
    public final @Nullable MethodHandle HANDLE$glLoadTransposeMatrixd;
    public final @Nullable MethodHandle HANDLE$glLoadTransposeMatrixdARB;
    public final @Nullable MethodHandle HANDLE$glLoadTransposeMatrixf;
    public final @Nullable MethodHandle HANDLE$glLoadTransposeMatrixfARB;
    public final @Nullable MethodHandle HANDLE$glLockArraysEXT;
    public final @Nullable MethodHandle HANDLE$glMap1d;
    public final @Nullable MethodHandle HANDLE$glMap1f;
    public final @Nullable MethodHandle HANDLE$glMap2d;
    public final @Nullable MethodHandle HANDLE$glMap2f;
    public final @Nullable MethodHandle HANDLE$glMapBufferARB;
    public final @Nullable MethodHandle HANDLE$glMapGrid1d;
    public final @Nullable MethodHandle HANDLE$glMapGrid1f;
    public final @Nullable MethodHandle HANDLE$glMapGrid2d;
    public final @Nullable MethodHandle HANDLE$glMapGrid2f;
    public final @Nullable MethodHandle HANDLE$glMapTexture2DINTEL;
    public final @Nullable MethodHandle HANDLE$glMaterialf;
    public final @Nullable MethodHandle HANDLE$glMaterialfv;
    public final @Nullable MethodHandle HANDLE$glMateriali;
    public final @Nullable MethodHandle HANDLE$glMaterialiv;
    public final @Nullable MethodHandle HANDLE$glMatrixIndexPointerARB;
    public final @Nullable MethodHandle HANDLE$glMatrixIndexubvARB;
    public final @Nullable MethodHandle HANDLE$glMatrixIndexuivARB;
    public final @Nullable MethodHandle HANDLE$glMatrixIndexusvARB;
    public final @Nullable MethodHandle HANDLE$glMatrixMode;
    public final @Nullable MethodHandle HANDLE$glMemoryBarrierEXT;
    public final @Nullable MethodHandle HANDLE$glMinmax;
    public final @Nullable MethodHandle HANDLE$glMultMatrixd;
    public final @Nullable MethodHandle HANDLE$glMultMatrixf;
    public final @Nullable MethodHandle HANDLE$glMultTransposeMatrixd;
    public final @Nullable MethodHandle HANDLE$glMultTransposeMatrixdARB;
    public final @Nullable MethodHandle HANDLE$glMultTransposeMatrixf;
    public final @Nullable MethodHandle HANDLE$glMultTransposeMatrixfARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1d;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1dARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1dv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1dvARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1f;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1fARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1fv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1fvARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1hNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1hvNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1i;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1iARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1iv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1ivARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1s;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1sARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1sv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord1svARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2d;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2dARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2dv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2dvARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2f;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2fARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2fv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2fvARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2hNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2hvNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2i;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2iARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2iv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2ivARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2s;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2sARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2sv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord2svARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3d;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3dARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3dv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3dvARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3f;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3fARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3fv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3fvARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3hNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3hvNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3i;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3iARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3iv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3ivARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3s;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3sARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3sv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord3svARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4d;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4dARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4dv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4dvARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4f;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4fARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4fv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4fvARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4hNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4hvNV;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4i;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4iARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4iv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4ivARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4s;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4sARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4sv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoord4svARB;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordP1ui;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordP1uiv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordP2ui;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordP2uiv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordP3ui;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordP3uiv;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordP4ui;
    public final @Nullable MethodHandle HANDLE$glMultiTexCoordP4uiv;
    public final @Nullable MethodHandle HANDLE$glMulticastBarrierNV;
    public final @Nullable MethodHandle HANDLE$glMulticastBlitFramebufferNV;
    public final @Nullable MethodHandle HANDLE$glMulticastBufferSubDataNV;
    public final @Nullable MethodHandle HANDLE$glMulticastCopyBufferSubDataNV;
    public final @Nullable MethodHandle HANDLE$glMulticastCopyImageSubDataNV;
    public final @Nullable MethodHandle HANDLE$glMulticastFramebufferSampleLocationsfvNV;
    public final @Nullable MethodHandle HANDLE$glMulticastGetQueryObjecti64vNV;
    public final @Nullable MethodHandle HANDLE$glMulticastGetQueryObjectivNV;
    public final @Nullable MethodHandle HANDLE$glMulticastGetQueryObjectui64vNV;
    public final @Nullable MethodHandle HANDLE$glMulticastGetQueryObjectuivNV;
    public final @Nullable MethodHandle HANDLE$glMulticastScissorArrayvNVX;
    public final @Nullable MethodHandle HANDLE$glMulticastViewportArrayvNVX;
    public final @Nullable MethodHandle HANDLE$glMulticastViewportPositionWScaleNVX;
    public final @Nullable MethodHandle HANDLE$glMulticastWaitSyncNV;
    public final @Nullable MethodHandle HANDLE$glNamedBufferStorageExternalEXT;
    public final @Nullable MethodHandle HANDLE$glNewList;
    public final @Nullable MethodHandle HANDLE$glNormal3b;
    public final @Nullable MethodHandle HANDLE$glNormal3bv;
    public final @Nullable MethodHandle HANDLE$glNormal3d;
    public final @Nullable MethodHandle HANDLE$glNormal3dv;
    public final @Nullable MethodHandle HANDLE$glNormal3f;
    public final @Nullable MethodHandle HANDLE$glNormal3fv;
    public final @Nullable MethodHandle HANDLE$glNormal3hNV;
    public final @Nullable MethodHandle HANDLE$glNormal3hvNV;
    public final @Nullable MethodHandle HANDLE$glNormal3i;
    public final @Nullable MethodHandle HANDLE$glNormal3iv;
    public final @Nullable MethodHandle HANDLE$glNormal3s;
    public final @Nullable MethodHandle HANDLE$glNormal3sv;
    public final @Nullable MethodHandle HANDLE$glNormalP3ui;
    public final @Nullable MethodHandle HANDLE$glNormalP3uiv;
    public final @Nullable MethodHandle HANDLE$glNormalPointer;
    public final @Nullable MethodHandle HANDLE$glOrtho;
    public final @Nullable MethodHandle HANDLE$glPassThrough;
    public final @Nullable MethodHandle HANDLE$glPathColorGenNV;
    public final @Nullable MethodHandle HANDLE$glPathFogGenNV;
    public final @Nullable MethodHandle HANDLE$glPathTexGenNV;
    public final @Nullable MethodHandle HANDLE$glPauseTransformFeedbackNV;
    public final @Nullable MethodHandle HANDLE$glPixelDataRangeNV;
    public final @Nullable MethodHandle HANDLE$glPixelMapfv;
    public final @Nullable MethodHandle HANDLE$glPixelMapuiv;
    public final @Nullable MethodHandle HANDLE$glPixelMapusv;
    public final @Nullable MethodHandle HANDLE$glPixelTransferf;
    public final @Nullable MethodHandle HANDLE$glPixelTransferi;
    public final @Nullable MethodHandle HANDLE$glPixelZoom;
    public final @Nullable MethodHandle HANDLE$glPointParameterfARB;
    public final @Nullable MethodHandle HANDLE$glPointParameterfEXT;
    public final @Nullable MethodHandle HANDLE$glPointParameterfvARB;
    public final @Nullable MethodHandle HANDLE$glPointParameterfvEXT;
    public final @Nullable MethodHandle HANDLE$glPointParameteriNV;
    public final @Nullable MethodHandle HANDLE$glPointParameterivNV;
    public final @Nullable MethodHandle HANDLE$glPolygonStipple;
    public final @Nullable MethodHandle HANDLE$glPopAttrib;
    public final @Nullable MethodHandle HANDLE$glPopClientAttrib;
    public final @Nullable MethodHandle HANDLE$glPopMatrix;
    public final @Nullable MethodHandle HANDLE$glPopName;
    public final @Nullable MethodHandle HANDLE$glPrimitiveRestartIndexNV;
    public final @Nullable MethodHandle HANDLE$glPrimitiveRestartNV;
    public final @Nullable MethodHandle HANDLE$glPrioritizeTextures;
    public final @Nullable MethodHandle HANDLE$glProgramEnvParameter4dARB;
    public final @Nullable MethodHandle HANDLE$glProgramEnvParameter4dvARB;
    public final @Nullable MethodHandle HANDLE$glProgramEnvParameter4fARB;
    public final @Nullable MethodHandle HANDLE$glProgramEnvParameter4fvARB;
    public final @Nullable MethodHandle HANDLE$glProgramEnvParameters4fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramLocalParameter4dARB;
    public final @Nullable MethodHandle HANDLE$glProgramLocalParameter4dvARB;
    public final @Nullable MethodHandle HANDLE$glProgramLocalParameter4fARB;
    public final @Nullable MethodHandle HANDLE$glProgramLocalParameter4fvARB;
    public final @Nullable MethodHandle HANDLE$glProgramLocalParameters4fvEXT;
    public final @Nullable MethodHandle HANDLE$glProgramParameteriEXT;
    public final @Nullable MethodHandle HANDLE$glProgramStringARB;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1i64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1i64vNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1ui64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform1ui64vNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2i64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2i64vNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2ui64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform2ui64vNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3i64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3i64vNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3ui64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform3ui64vNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4i64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4i64vNV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4ui64NV;
    public final @Nullable MethodHandle HANDLE$glProgramUniform4ui64vNV;
    public final @Nullable MethodHandle HANDLE$glProvokingVertexEXT;
    public final @Nullable MethodHandle HANDLE$glPushAttrib;
    public final @Nullable MethodHandle HANDLE$glPushClientAttrib;
    public final @Nullable MethodHandle HANDLE$glPushMatrix;
    public final @Nullable MethodHandle HANDLE$glPushName;
    public final @Nullable MethodHandle HANDLE$glQueryObjectParameteruiAMD;
    public final @Nullable MethodHandle HANDLE$glQueryResourceNV;
    public final @Nullable MethodHandle HANDLE$glQueryResourceTagNV;
    public final @Nullable MethodHandle HANDLE$glRasterPos2d;
    public final @Nullable MethodHandle HANDLE$glRasterPos2dv;
    public final @Nullable MethodHandle HANDLE$glRasterPos2f;
    public final @Nullable MethodHandle HANDLE$glRasterPos2fv;
    public final @Nullable MethodHandle HANDLE$glRasterPos2i;
    public final @Nullable MethodHandle HANDLE$glRasterPos2iv;
    public final @Nullable MethodHandle HANDLE$glRasterPos2s;
    public final @Nullable MethodHandle HANDLE$glRasterPos2sv;
    public final @Nullable MethodHandle HANDLE$glRasterPos3d;
    public final @Nullable MethodHandle HANDLE$glRasterPos3dv;
    public final @Nullable MethodHandle HANDLE$glRasterPos3f;
    public final @Nullable MethodHandle HANDLE$glRasterPos3fv;
    public final @Nullable MethodHandle HANDLE$glRasterPos3i;
    public final @Nullable MethodHandle HANDLE$glRasterPos3iv;
    public final @Nullable MethodHandle HANDLE$glRasterPos3s;
    public final @Nullable MethodHandle HANDLE$glRasterPos3sv;
    public final @Nullable MethodHandle HANDLE$glRasterPos4d;
    public final @Nullable MethodHandle HANDLE$glRasterPos4dv;
    public final @Nullable MethodHandle HANDLE$glRasterPos4f;
    public final @Nullable MethodHandle HANDLE$glRasterPos4fv;
    public final @Nullable MethodHandle HANDLE$glRasterPos4i;
    public final @Nullable MethodHandle HANDLE$glRasterPos4iv;
    public final @Nullable MethodHandle HANDLE$glRasterPos4s;
    public final @Nullable MethodHandle HANDLE$glRasterPos4sv;
    public final @Nullable MethodHandle HANDLE$glRectd;
    public final @Nullable MethodHandle HANDLE$glRectdv;
    public final @Nullable MethodHandle HANDLE$glRectf;
    public final @Nullable MethodHandle HANDLE$glRectfv;
    public final @Nullable MethodHandle HANDLE$glRecti;
    public final @Nullable MethodHandle HANDLE$glRectiv;
    public final @Nullable MethodHandle HANDLE$glRects;
    public final @Nullable MethodHandle HANDLE$glRectsv;
    public final @Nullable MethodHandle HANDLE$glReleaseKeyedMutexWin32EXT;
    public final @Nullable MethodHandle HANDLE$glRenderGpuMaskNV;
    public final @Nullable MethodHandle HANDLE$glRenderMode;
    public final @Nullable MethodHandle HANDLE$glRenderbufferStorageEXT;
    public final @Nullable MethodHandle HANDLE$glRenderbufferStorageMultisampleEXT;
    public final @Nullable MethodHandle HANDLE$glResetHistogram;
    public final @Nullable MethodHandle HANDLE$glResetMinmax;
    public final @Nullable MethodHandle HANDLE$glResumeTransformFeedbackNV;
    public final @Nullable MethodHandle HANDLE$glRotated;
    public final @Nullable MethodHandle HANDLE$glRotatef;
    public final @Nullable MethodHandle HANDLE$glSampleCoverageARB;
    public final @Nullable MethodHandle HANDLE$glSampleMaskIndexedNV;
    public final @Nullable MethodHandle HANDLE$glScaled;
    public final @Nullable MethodHandle HANDLE$glScalef;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3b;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3bEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3bv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3bvEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3d;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3dEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3dv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3dvEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3f;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3fEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3fv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3fvEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3hNV;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3hvNV;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3i;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3iEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3iv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3ivEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3s;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3sEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3sv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3svEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3ub;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3ubEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3ubv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3ubvEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3ui;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3uiEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3uiv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3uivEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3us;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3usEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3usv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColor3usvEXT;
    public final @Nullable MethodHandle HANDLE$glSecondaryColorP3ui;
    public final @Nullable MethodHandle HANDLE$glSecondaryColorP3uiv;
    public final @Nullable MethodHandle HANDLE$glSecondaryColorPointer;
    public final @Nullable MethodHandle HANDLE$glSecondaryColorPointerEXT;
    public final @Nullable MethodHandle HANDLE$glSelectBuffer;
    public final @Nullable MethodHandle HANDLE$glSemaphoreParameterivNV;
    public final @Nullable MethodHandle HANDLE$glSeparableFilter2D;
    public final @Nullable MethodHandle HANDLE$glSetFenceNV;
    public final @Nullable MethodHandle HANDLE$glSetMultisamplefvAMD;
    public final @Nullable MethodHandle HANDLE$glShadeModel;
    public final @Nullable MethodHandle HANDLE$glShaderSourceARB;
    public final @Nullable MethodHandle HANDLE$glSignalSemaphoreui64NVX;
    public final @Nullable MethodHandle HANDLE$glStencilClearTagEXT;
    public final @Nullable MethodHandle HANDLE$glStencilOpValueAMD;
    public final @Nullable MethodHandle HANDLE$glStringMarkerGREMEDY;
    public final @Nullable MethodHandle HANDLE$glSyncTextureINTEL;
    public final @Nullable MethodHandle HANDLE$glTessellationFactorAMD;
    public final @Nullable MethodHandle HANDLE$glTessellationModeAMD;
    public final @Nullable MethodHandle HANDLE$glTestFenceNV;
    public final @Nullable MethodHandle HANDLE$glTexBufferEXT;
    public final @Nullable MethodHandle HANDLE$glTexCoord1d;
    public final @Nullable MethodHandle HANDLE$glTexCoord1dv;
    public final @Nullable MethodHandle HANDLE$glTexCoord1f;
    public final @Nullable MethodHandle HANDLE$glTexCoord1fv;
    public final @Nullable MethodHandle HANDLE$glTexCoord1hNV;
    public final @Nullable MethodHandle HANDLE$glTexCoord1hvNV;
    public final @Nullable MethodHandle HANDLE$glTexCoord1i;
    public final @Nullable MethodHandle HANDLE$glTexCoord1iv;
    public final @Nullable MethodHandle HANDLE$glTexCoord1s;
    public final @Nullable MethodHandle HANDLE$glTexCoord1sv;
    public final @Nullable MethodHandle HANDLE$glTexCoord2d;
    public final @Nullable MethodHandle HANDLE$glTexCoord2dv;
    public final @Nullable MethodHandle HANDLE$glTexCoord2f;
    public final @Nullable MethodHandle HANDLE$glTexCoord2fv;
    public final @Nullable MethodHandle HANDLE$glTexCoord2hNV;
    public final @Nullable MethodHandle HANDLE$glTexCoord2hvNV;
    public final @Nullable MethodHandle HANDLE$glTexCoord2i;
    public final @Nullable MethodHandle HANDLE$glTexCoord2iv;
    public final @Nullable MethodHandle HANDLE$glTexCoord2s;
    public final @Nullable MethodHandle HANDLE$glTexCoord2sv;
    public final @Nullable MethodHandle HANDLE$glTexCoord3d;
    public final @Nullable MethodHandle HANDLE$glTexCoord3dv;
    public final @Nullable MethodHandle HANDLE$glTexCoord3f;
    public final @Nullable MethodHandle HANDLE$glTexCoord3fv;
    public final @Nullable MethodHandle HANDLE$glTexCoord3hNV;
    public final @Nullable MethodHandle HANDLE$glTexCoord3hvNV;
    public final @Nullable MethodHandle HANDLE$glTexCoord3i;
    public final @Nullable MethodHandle HANDLE$glTexCoord3iv;
    public final @Nullable MethodHandle HANDLE$glTexCoord3s;
    public final @Nullable MethodHandle HANDLE$glTexCoord3sv;
    public final @Nullable MethodHandle HANDLE$glTexCoord4d;
    public final @Nullable MethodHandle HANDLE$glTexCoord4dv;
    public final @Nullable MethodHandle HANDLE$glTexCoord4f;
    public final @Nullable MethodHandle HANDLE$glTexCoord4fv;
    public final @Nullable MethodHandle HANDLE$glTexCoord4hNV;
    public final @Nullable MethodHandle HANDLE$glTexCoord4hvNV;
    public final @Nullable MethodHandle HANDLE$glTexCoord4i;
    public final @Nullable MethodHandle HANDLE$glTexCoord4iv;
    public final @Nullable MethodHandle HANDLE$glTexCoord4s;
    public final @Nullable MethodHandle HANDLE$glTexCoord4sv;
    public final @Nullable MethodHandle HANDLE$glTexCoordP1ui;
    public final @Nullable MethodHandle HANDLE$glTexCoordP1uiv;
    public final @Nullable MethodHandle HANDLE$glTexCoordP2ui;
    public final @Nullable MethodHandle HANDLE$glTexCoordP2uiv;
    public final @Nullable MethodHandle HANDLE$glTexCoordP3ui;
    public final @Nullable MethodHandle HANDLE$glTexCoordP3uiv;
    public final @Nullable MethodHandle HANDLE$glTexCoordP4ui;
    public final @Nullable MethodHandle HANDLE$glTexCoordP4uiv;
    public final @Nullable MethodHandle HANDLE$glTexCoordPointer;
    public final @Nullable MethodHandle HANDLE$glTexEnvf;
    public final @Nullable MethodHandle HANDLE$glTexEnvfv;
    public final @Nullable MethodHandle HANDLE$glTexEnvi;
    public final @Nullable MethodHandle HANDLE$glTexEnviv;
    public final @Nullable MethodHandle HANDLE$glTexGend;
    public final @Nullable MethodHandle HANDLE$glTexGendv;
    public final @Nullable MethodHandle HANDLE$glTexGenf;
    public final @Nullable MethodHandle HANDLE$glTexGenfv;
    public final @Nullable MethodHandle HANDLE$glTexGeni;
    public final @Nullable MethodHandle HANDLE$glTexGeniv;
    public final @Nullable MethodHandle HANDLE$glTexImage2DMultisampleCoverageNV;
    public final @Nullable MethodHandle HANDLE$glTexImage3DMultisampleCoverageNV;
    public final @Nullable MethodHandle HANDLE$glTexParameterIivEXT;
    public final @Nullable MethodHandle HANDLE$glTexParameterIuivEXT;
    public final @Nullable MethodHandle HANDLE$glTexRenderbufferNV;
    public final @Nullable MethodHandle HANDLE$glTexStorageSparseAMD;
    public final @Nullable MethodHandle HANDLE$glTextureImage2DMultisampleCoverageNV;
    public final @Nullable MethodHandle HANDLE$glTextureImage2DMultisampleNV;
    public final @Nullable MethodHandle HANDLE$glTextureImage3DMultisampleCoverageNV;
    public final @Nullable MethodHandle HANDLE$glTextureImage3DMultisampleNV;
    public final @Nullable MethodHandle HANDLE$glTextureStorageSparseAMD;
    public final @Nullable MethodHandle HANDLE$glTransformFeedbackAttribsNV;
    public final @Nullable MethodHandle HANDLE$glTransformFeedbackStreamAttribsNV;
    public final @Nullable MethodHandle HANDLE$glTransformFeedbackVaryingsEXT;
    public final @Nullable MethodHandle HANDLE$glTransformFeedbackVaryingsNV;
    public final @Nullable MethodHandle HANDLE$glTranslated;
    public final @Nullable MethodHandle HANDLE$glTranslatef;
    public final @Nullable MethodHandle HANDLE$glUniform1fARB;
    public final @Nullable MethodHandle HANDLE$glUniform1fvARB;
    public final @Nullable MethodHandle HANDLE$glUniform1i64NV;
    public final @Nullable MethodHandle HANDLE$glUniform1i64vNV;
    public final @Nullable MethodHandle HANDLE$glUniform1iARB;
    public final @Nullable MethodHandle HANDLE$glUniform1ivARB;
    public final @Nullable MethodHandle HANDLE$glUniform1ui64NV;
    public final @Nullable MethodHandle HANDLE$glUniform1ui64vNV;
    public final @Nullable MethodHandle HANDLE$glUniform1uiEXT;
    public final @Nullable MethodHandle HANDLE$glUniform1uivEXT;
    public final @Nullable MethodHandle HANDLE$glUniform2fARB;
    public final @Nullable MethodHandle HANDLE$glUniform2fvARB;
    public final @Nullable MethodHandle HANDLE$glUniform2i64NV;
    public final @Nullable MethodHandle HANDLE$glUniform2i64vNV;
    public final @Nullable MethodHandle HANDLE$glUniform2iARB;
    public final @Nullable MethodHandle HANDLE$glUniform2ivARB;
    public final @Nullable MethodHandle HANDLE$glUniform2ui64NV;
    public final @Nullable MethodHandle HANDLE$glUniform2ui64vNV;
    public final @Nullable MethodHandle HANDLE$glUniform2uiEXT;
    public final @Nullable MethodHandle HANDLE$glUniform2uivEXT;
    public final @Nullable MethodHandle HANDLE$glUniform3fARB;
    public final @Nullable MethodHandle HANDLE$glUniform3fvARB;
    public final @Nullable MethodHandle HANDLE$glUniform3i64NV;
    public final @Nullable MethodHandle HANDLE$glUniform3i64vNV;
    public final @Nullable MethodHandle HANDLE$glUniform3iARB;
    public final @Nullable MethodHandle HANDLE$glUniform3ivARB;
    public final @Nullable MethodHandle HANDLE$glUniform3ui64NV;
    public final @Nullable MethodHandle HANDLE$glUniform3ui64vNV;
    public final @Nullable MethodHandle HANDLE$glUniform3uiEXT;
    public final @Nullable MethodHandle HANDLE$glUniform3uivEXT;
    public final @Nullable MethodHandle HANDLE$glUniform4fARB;
    public final @Nullable MethodHandle HANDLE$glUniform4fvARB;
    public final @Nullable MethodHandle HANDLE$glUniform4i64NV;
    public final @Nullable MethodHandle HANDLE$glUniform4i64vNV;
    public final @Nullable MethodHandle HANDLE$glUniform4iARB;
    public final @Nullable MethodHandle HANDLE$glUniform4ivARB;
    public final @Nullable MethodHandle HANDLE$glUniform4ui64NV;
    public final @Nullable MethodHandle HANDLE$glUniform4ui64vNV;
    public final @Nullable MethodHandle HANDLE$glUniform4uiEXT;
    public final @Nullable MethodHandle HANDLE$glUniform4uivEXT;
    public final @Nullable MethodHandle HANDLE$glUniformBufferEXT;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix2fvARB;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix3fvARB;
    public final @Nullable MethodHandle HANDLE$glUniformMatrix4fvARB;
    public final @Nullable MethodHandle HANDLE$glUnlockArraysEXT;
    public final @Nullable MethodHandle HANDLE$glUnmapBufferARB;
    public final @Nullable MethodHandle HANDLE$glUnmapTexture2DINTEL;
    public final @Nullable MethodHandle HANDLE$glUploadGpuMaskNVX;
    public final @Nullable MethodHandle HANDLE$glUseProgramObjectARB;
    public final @Nullable MethodHandle HANDLE$glValidateProgramARB;
    public final @Nullable MethodHandle HANDLE$glVertex2d;
    public final @Nullable MethodHandle HANDLE$glVertex2dv;
    public final @Nullable MethodHandle HANDLE$glVertex2f;
    public final @Nullable MethodHandle HANDLE$glVertex2fv;
    public final @Nullable MethodHandle HANDLE$glVertex2hNV;
    public final @Nullable MethodHandle HANDLE$glVertex2hvNV;
    public final @Nullable MethodHandle HANDLE$glVertex2i;
    public final @Nullable MethodHandle HANDLE$glVertex2iv;
    public final @Nullable MethodHandle HANDLE$glVertex2s;
    public final @Nullable MethodHandle HANDLE$glVertex2sv;
    public final @Nullable MethodHandle HANDLE$glVertex3d;
    public final @Nullable MethodHandle HANDLE$glVertex3dv;
    public final @Nullable MethodHandle HANDLE$glVertex3f;
    public final @Nullable MethodHandle HANDLE$glVertex3fv;
    public final @Nullable MethodHandle HANDLE$glVertex3hNV;
    public final @Nullable MethodHandle HANDLE$glVertex3hvNV;
    public final @Nullable MethodHandle HANDLE$glVertex3i;
    public final @Nullable MethodHandle HANDLE$glVertex3iv;
    public final @Nullable MethodHandle HANDLE$glVertex3s;
    public final @Nullable MethodHandle HANDLE$glVertex3sv;
    public final @Nullable MethodHandle HANDLE$glVertex4d;
    public final @Nullable MethodHandle HANDLE$glVertex4dv;
    public final @Nullable MethodHandle HANDLE$glVertex4f;
    public final @Nullable MethodHandle HANDLE$glVertex4fv;
    public final @Nullable MethodHandle HANDLE$glVertex4hNV;
    public final @Nullable MethodHandle HANDLE$glVertex4hvNV;
    public final @Nullable MethodHandle HANDLE$glVertex4i;
    public final @Nullable MethodHandle HANDLE$glVertex4iv;
    public final @Nullable MethodHandle HANDLE$glVertex4s;
    public final @Nullable MethodHandle HANDLE$glVertex4sv;
    public final @Nullable MethodHandle HANDLE$glVertexArrayRangeNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1dARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1dvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1fARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1fvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1hNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1hvNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1sARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib1svARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2dARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2dvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2fARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2fvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2hNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2hvNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2sARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib2svARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3dARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3dvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3fARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3fvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3hNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3hvNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3sARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib3svARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4NbvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4NivARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4NsvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4NubARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4NubvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4NuivARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4NusvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4bvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4dARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4dvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4fARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4fvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4hNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4hvNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4ivARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4sARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4svARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4ubvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4uivARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttrib4usvARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI1iEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI1ivEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI1uiEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI1uivEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI2iEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI2ivEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI2uiEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI2uivEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI3iEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI3ivEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI3uiEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI3uivEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4bvEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4iEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4ivEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4svEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4ubvEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4uiEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4uivEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribI4usvEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribIPointerEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1dEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL1dvEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL2dEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL2dvEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL3dEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL3dvEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL4dEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribL4dvEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribLPointerEXT;
    public final @Nullable MethodHandle HANDLE$glVertexAttribParameteriAMD;
    public final @Nullable MethodHandle HANDLE$glVertexAttribPointerARB;
    public final @Nullable MethodHandle HANDLE$glVertexAttribs1hvNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribs2hvNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribs3hvNV;
    public final @Nullable MethodHandle HANDLE$glVertexAttribs4hvNV;
    public final @Nullable MethodHandle HANDLE$glVertexBlendARB;
    public final @Nullable MethodHandle HANDLE$glVertexP2ui;
    public final @Nullable MethodHandle HANDLE$glVertexP2uiv;
    public final @Nullable MethodHandle HANDLE$glVertexP3ui;
    public final @Nullable MethodHandle HANDLE$glVertexP3uiv;
    public final @Nullable MethodHandle HANDLE$glVertexP4ui;
    public final @Nullable MethodHandle HANDLE$glVertexP4uiv;
    public final @Nullable MethodHandle HANDLE$glVertexPointer;
    public final @Nullable MethodHandle HANDLE$glVertexWeighthNV;
    public final @Nullable MethodHandle HANDLE$glVertexWeighthvNV;
    public final @Nullable MethodHandle HANDLE$glWaitSemaphoreui64NVX;
    public final @Nullable MethodHandle HANDLE$glWeightPointerARB;
    public final @Nullable MethodHandle HANDLE$glWeightbvARB;
    public final @Nullable MethodHandle HANDLE$glWeightdvARB;
    public final @Nullable MethodHandle HANDLE$glWeightfvARB;
    public final @Nullable MethodHandle HANDLE$glWeightivARB;
    public final @Nullable MethodHandle HANDLE$glWeightsvARB;
    public final @Nullable MethodHandle HANDLE$glWeightubvARB;
    public final @Nullable MethodHandle HANDLE$glWeightuivARB;
    public final @Nullable MethodHandle HANDLE$glWeightusvARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos2d;
    public final @Nullable MethodHandle HANDLE$glWindowPos2dARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos2dv;
    public final @Nullable MethodHandle HANDLE$glWindowPos2dvARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos2f;
    public final @Nullable MethodHandle HANDLE$glWindowPos2fARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos2fv;
    public final @Nullable MethodHandle HANDLE$glWindowPos2fvARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos2i;
    public final @Nullable MethodHandle HANDLE$glWindowPos2iARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos2iv;
    public final @Nullable MethodHandle HANDLE$glWindowPos2ivARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos2s;
    public final @Nullable MethodHandle HANDLE$glWindowPos2sARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos2sv;
    public final @Nullable MethodHandle HANDLE$glWindowPos2svARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos3d;
    public final @Nullable MethodHandle HANDLE$glWindowPos3dARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos3dv;
    public final @Nullable MethodHandle HANDLE$glWindowPos3dvARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos3f;
    public final @Nullable MethodHandle HANDLE$glWindowPos3fARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos3fv;
    public final @Nullable MethodHandle HANDLE$glWindowPos3fvARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos3i;
    public final @Nullable MethodHandle HANDLE$glWindowPos3iARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos3iv;
    public final @Nullable MethodHandle HANDLE$glWindowPos3ivARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos3s;
    public final @Nullable MethodHandle HANDLE$glWindowPos3sARB;
    public final @Nullable MethodHandle HANDLE$glWindowPos3sv;
    public final @Nullable MethodHandle HANDLE$glWindowPos3svARB;
    // endregion

    public static final class Descriptors {
        public static final FunctionDescriptor DESCRIPTOR$glAccum = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glAcquireKeyedMutexWin32EXT = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glActiveStencilFaceEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glActiveTextureARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glActiveVaryingNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glAlphaFunc = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glAlphaToCoverageDitherControlNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glAreTexturesResident = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glArrayElement = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glAsyncCopyBufferSubDataNVX = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG),
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glAsyncCopyImageSubDataNVX = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG),
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glAttachObjectARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBegin = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginConditionalRenderNVX = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginQueryARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginTransformFeedbackEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBeginTransformFeedbackNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindAttribLocationARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferBaseEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferBaseNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferOffsetEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferOffsetNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferRangeEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindBufferRangeNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindFragDataLocationEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindFramebufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindImageTextureEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindProgramARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindRenderbufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBindTransformFeedbackNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBitmap = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendColorEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationIndexedAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationSeparateEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendEquationSeparateIndexedAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFuncIndexedAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFuncSeparateEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlendFuncSeparateIndexedAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlitFramebufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlitFramebufferLayerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBlitFramebufferLayersEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferDataARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferStorageExternalEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glBufferSubDataARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCallList = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCallLists = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCheckFramebufferStatusEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClampColorARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearAccum = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearColorIiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearColorIuiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClearIndex = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClientActiveTexture = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClientActiveTextureARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glClientWaitSemaphoreui64NVX = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glClipPlane = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3b = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3bv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3ub = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3ubv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3us = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor3usv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4b = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4bv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4ub = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4ubv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4us = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColor4usv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorMaskIndexedEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorMaterial = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorP3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorP3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorP4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorP4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorSubTable = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorTable = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorTableParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glColorTableParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompileShaderARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexImage1DARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexImage2DARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexImage3DARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexSubImage1DARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexSubImage2DARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glCompressedTexSubImage3DARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glConvolutionFilter1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glConvolutionFilter2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glConvolutionParameterf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glConvolutionParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glConvolutionParameteri = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glConvolutionParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyColorSubTable = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyColorTable = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyConvolutionFilter1D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyConvolutionFilter2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyImageSubDataNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCopyPixels = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateProgramObjectARB = FunctionDescriptor.of(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateProgressFenceNVX = FunctionDescriptor.of(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateSemaphoresNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glCreateShaderObjectARB = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glCurrentPaletteMatrixARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageCallbackAMD = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageEnableAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDebugMessageInsertAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteBuffersARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteFencesNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteFramebuffersEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteLists = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteObjectARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteProgramsARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteQueriesARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteQueryResourceTagNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteRenderbuffersEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDeleteTransformFeedbacksNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDepthBoundsEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glDetachObjectARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableClientState = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDisableVertexAttribArrayARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawBuffersARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawPixels = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawTextureNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glDrawTransformFeedbackNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEdgeFlag = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glEdgeFlagPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glEdgeFlagv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableClientState = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnableVertexAttribArrayARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEnd = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndConditionalRenderNVX = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndList = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndQueryARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndTransformFeedbackEXT = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glEndTransformFeedbackNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalCoord1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalCoord1dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalCoord1f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalCoord1fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalCoord2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalCoord2dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalCoord2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalCoord2fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalMesh1 = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalMesh2 = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalPoint1 = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glEvalPoint2 = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFeedbackBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFinishFenceNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFlushPixelDataRangeNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFlushVertexArrayRangeNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogCoordPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogCoordd = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogCoorddv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogCoordf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogCoordfv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogCoordhNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogCoordhvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogi = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFogiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glFrameTerminatorGREMEDY = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferRenderbufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTexture1DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTexture2DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTexture3DEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFramebufferTextureLayerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glFrustum = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenBuffersARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenFencesNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenFramebuffersEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenLists = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenProgramsARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenQueriesARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenQueryResourceTagNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenRenderbuffersEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenTransformFeedbacksNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGenerateMipmapEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveAttribARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveUniformARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetActiveVaryingNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetAttachedObjectsARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetAttribLocationARB = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBufferParameterivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBufferPointervARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetBufferSubDataARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetClipPlane = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetColorTable = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetColorTableParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetColorTableParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetCompressedTexImageARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetConvolutionFilter = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetConvolutionParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetConvolutionParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetDebugMessageLogAMD = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFenceivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFragDataLocationEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetFramebufferAttachmentParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetHandleARB = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetHistogram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetHistogramParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetHistogramParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetInfoLogARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetLightfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetLightiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMapdv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMapfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMapiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMaterialfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMaterialiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMinmax = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMinmaxParameterfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMinmaxParameteriv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetMultisamplefvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetObjectParameterfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetObjectParameterivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathColorGenfvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathColorGenivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathTexGenfvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPathTexGenivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPixelMapfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPixelMapuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPixelMapusv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetPolygonStipple = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramEnvParameterdvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramEnvParameterfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramLocalParameterdvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramLocalParameterfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramStringARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetProgramivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryObjecti64vEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryObjectivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryObjectui64vEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryObjectuivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetQueryivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetRenderbufferParameterivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSemaphoreParameterivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetSeparableFilter = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetShaderSourceARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexEnvfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexEnviv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexGendv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexGenfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexGeniv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexParameterIivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTexParameterIuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTransformFeedbackVaryingEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetTransformFeedbackVaryingNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformBufferSizeEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformLocationARB = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformOffsetEXT = FunctionDescriptor.of(
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformi64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetUniformuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVaryingLocationNV = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribIivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribIuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribLdvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribPointervARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribdvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetVertexAttribivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnColorTable = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnColorTableARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnConvolutionFilter = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnConvolutionFilterARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnHistogram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnHistogramARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnMapdv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnMapdvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnMapfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnMapfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnMapiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnMapivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnMinmax = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnMinmaxARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnPixelMapfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnPixelMapfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnPixelMapuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnPixelMapuivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnPixelMapusv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnPixelMapusvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnPolygonStipple = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnPolygonStippleARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnSeparableFilter = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glGetnSeparableFilterARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glHistogram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glImportSyncEXT = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexMask = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexd = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexdv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexfv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexi = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexiv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexs = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexsv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexub = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glIndexubv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glInitNames = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glInterleavedArrays = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsBufferARB = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsFenceNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsFramebufferEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsList = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsProgramARB = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsQueryARB = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsRenderbufferEXT = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glIsTransformFeedbackNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLightModelf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLightModelfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLightModeli = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLightModeliv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLightf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLightfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLighti = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLightiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLineStipple = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLinkProgramARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glListBase = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLoadIdentity = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glLoadMatrixd = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLoadMatrixf = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLoadName = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glLoadTransposeMatrixd = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLoadTransposeMatrixdARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLoadTransposeMatrixf = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLoadTransposeMatrixfARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glLockArraysEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMap1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMap1f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMap2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMap2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapBufferARB = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapGrid1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapGrid1f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapGrid2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapGrid2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMapTexture2DINTEL = FunctionDescriptor.of(
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMaterialf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMaterialfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMateriali = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMaterialiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixIndexPointerARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixIndexubvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixIndexuivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixIndexusvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMatrixMode = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMemoryBarrierEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMinmax = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultMatrixd = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultMatrixf = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultTransposeMatrixd = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultTransposeMatrixdARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultTransposeMatrixf = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultTransposeMatrixfARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord1svARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord2svARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord3svARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4dv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4fv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4iv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4sv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoord4svARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordP1ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordP1uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordP2ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordP2uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordP3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordP3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordP4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMultiTexCoordP4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastBarrierNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastBlitFramebufferNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastBufferSubDataNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastCopyBufferSubDataNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastCopyImageSubDataNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastFramebufferSampleLocationsfvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastGetQueryObjecti64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastGetQueryObjectivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastGetQueryObjectui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastGetQueryObjectuivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastScissorArrayvNVX = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastViewportArrayvNVX = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastViewportPositionWScaleNVX = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glMulticastWaitSyncNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNamedBufferStorageExternalEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            NativeLayout.C_SIZE_T,
            NativeLayout.C_SIZE_T,
            ValueLayout.ADDRESS,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNewList = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3b = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3bv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormal3sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormalP3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormalP3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glNormalPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glOrtho = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glPassThrough = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathColorGenNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathFogGenNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPathTexGenNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPauseTransformFeedbackNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelDataRangeNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelMapfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelMapuiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelMapusv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelTransferf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelTransferi = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPixelZoom = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameterfARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameterfEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameterfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameterfvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameteriNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPointParameterivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPolygonStipple = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glPopAttrib = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPopClientAttrib = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPopMatrix = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPopName = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPrimitiveRestartIndexNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPrimitiveRestartNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPrioritizeTextures = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramEnvParameter4dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramEnvParameter4dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramEnvParameter4fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramEnvParameter4fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramEnvParameters4fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramLocalParameter4dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramLocalParameter4dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramLocalParameter4fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramLocalParameter4fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramLocalParameters4fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramParameteriEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramStringARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform1ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform2ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform3ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glProgramUniform4ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glProvokingVertexEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPushAttrib = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPushClientAttrib = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glPushMatrix = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glPushName = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glQueryObjectParameteruiAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glQueryResourceNV = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glQueryResourceTagNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos2dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos2fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos2i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos2iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos2s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos2sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos3dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos3fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos3iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos3sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos4dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos4f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos4fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos4i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos4iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos4s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRasterPos4sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRectd = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glRectdv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRectf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRectfv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRecti = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRectiv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glRects = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRectsv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glReleaseKeyedMutexWin32EXT = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glRenderGpuMaskNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRenderMode = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRenderbufferStorageEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glRenderbufferStorageMultisampleEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glResetHistogram = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glResetMinmax = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glResumeTransformFeedbackNV = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glRotated = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glRotatef = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSampleCoverageARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glSampleMaskIndexedNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glScaled = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glScalef = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3b = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3bEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3bv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3bvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3fEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3fvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3sEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3svEXT = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3ub = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3ubEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3ubv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3ubvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3us = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3usEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3usv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColor3usvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColorP3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColorP3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColorPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glSecondaryColorPointerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glSelectBuffer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSemaphoreParameterivNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSeparableFilter2D = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glSetFenceNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glSetMultisamplefvAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glShadeModel = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glShaderSourceARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glSignalSemaphoreui64NVX = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilClearTagEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStencilOpValueAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glStringMarkerGREMEDY = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glSyncTextureINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTessellationFactorAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTessellationModeAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTestFenceNV = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexBufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord1sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord2sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord3sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoord4sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordP1ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordP1uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordP2ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordP2uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordP3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordP3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordP4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordP4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexCoordPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexEnvf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexEnvfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexEnvi = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexEnviv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexGend = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexGendv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexGenf = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexGenfv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexGeni = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexGeniv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexImage2DMultisampleCoverageNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexImage3DMultisampleCoverageNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexParameterIivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexParameterIuivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexRenderbufferNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTexStorageSparseAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureImage2DMultisampleCoverageNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureImage2DMultisampleNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureImage3DMultisampleCoverageNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureImage3DMultisampleNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTextureStorageSparseAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTransformFeedbackAttribsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTransformFeedbackStreamAttribsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTransformFeedbackVaryingsEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTransformFeedbackVaryingsNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glTranslated = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glTranslatef = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform1uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform2uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform3uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4i64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4i64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4ui64NV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4ui64vNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniform4uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformBufferEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix2fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix3fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUniformMatrix4fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glUnlockArraysEXT = FunctionDescriptor.ofVoid(
        );

        public static final FunctionDescriptor DESCRIPTOR$glUnmapBufferARB = FunctionDescriptor.of(
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUnmapTexture2DINTEL = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUploadGpuMaskNVX = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glUseProgramObjectARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glValidateProgramARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex2sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex3sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertex4sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexArrayRangeNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib1svARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib2svARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib3svARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4NbvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4NivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4NsvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4NubARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_BYTE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4NubvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4NuivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4NusvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4bvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4hNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4svARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4ubvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4uivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttrib4usvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI1iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI1ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI1uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI1uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI2iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI2ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI2uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI2uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI3iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI3ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI3uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI3uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4bvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4iEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4ivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4svEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4ubvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4uiEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4uivEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribI4usvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribIPointerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL1dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL2dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL2dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL3dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL3dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL4dEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribL4dvEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribLPointerEXT = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribParameteriAMD = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribPointerARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_BYTE,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribs1hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribs2hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribs3hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexAttribs4hvNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexBlendARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexP2ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexP2uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexP3ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexP3uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexP4ui = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexP4uiv = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexPointer = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexWeighthNV = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glVertexWeighthvNV = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWaitSemaphoreui64NVX = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT),
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_LONG)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightPointerARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightbvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightdvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightfvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightsvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightubvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_BYTE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightuivARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWeightusvARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos2svARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3d = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3dARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE,
            ValueLayout.JAVA_DOUBLE
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3dv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3dvARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_DOUBLE)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3f = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3fARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3fv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3fvARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_FLOAT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3i = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3iARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3iv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3ivARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_INT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3s = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3sARB = FunctionDescriptor.ofVoid(
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT,
            ValueLayout.JAVA_SHORT
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3sv = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        public static final FunctionDescriptor DESCRIPTOR$glWindowPos3svARB = FunctionDescriptor.ofVoid(
            ValueLayout.ADDRESS.withTargetLayout(ValueLayout.JAVA_SHORT)
        );

        /// Constructing this class is nonsense so the constructor is made private.
        private Descriptors() {}
    }
}
